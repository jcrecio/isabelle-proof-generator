{"file_name": "/home/qj213/afp-2021-10-22/thys/IFC_Tracking/IFC.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/IFC_Tracking", "problem_names": ["lemma step_suc_sem: \\<open>step (n,\\<sigma>) = (suc n \\<sigma>, sem n \\<sigma>)\\<close>", "lemma icd_uniq: assumes  \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> \\<open> m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close> shows \\<open>n = n'\\<close>", "lemma option_neq_cases: assumes \\<open>x \\<noteq> y\\<close> obtains (none1) a where \\<open>x = None\\<close> \\<open>y = Some a\\<close> | (none2) a where \\<open>x = Some a\\<close> \\<open>y = None\\<close> | (some) a b where \\<open>x = Some a\\<close> \\<open>y = Some b\\<close> \\<open>a \\<noteq> b\\<close>", "lemmas nat_sym_cases[case_names less sym eq] = linorder_less_wlog", "lemma mod_bound_instance: assumes \\<open>j < (i::nat)\\<close> obtains j' where \\<open>k < j'\\<close> and \\<open>j' mod i = j\\<close>", "lemma list_neq_prefix_cases: assumes \\<open>ls \\<noteq> ls'\\<close> and \\<open>ls \\<noteq> Nil\\<close> and \\<open>ls' \\<noteq> Nil\\<close>\n  obtains (diverge) xs x x' ys ys' where \\<open>ls = xs@[x]@ys\\<close> \\<open>ls' = xs@[x']@ys'\\<close> \\<open>x \\<noteq> x'\\<close> |\n   (prefix1) xs where \\<open>ls = ls'@xs\\<close> and \\<open>xs \\<noteq> Nil\\<close> |\n   (prefix2) xs where \\<open>ls@xs = ls'\\<close> and \\<open>xs \\<noteq> Nil\\<close>", "lemma three_cases: assumes \\<open>A \\<or> B \\<or> C\\<close> obtains \\<open>A\\<close> | \\<open>B\\<close> | \\<open>C\\<close>", "lemma insort_greater: \\<open>\\<forall> x \\<in> set ls. x < y \\<Longrightarrow> insort y ls = ls@[y]\\<close>", "lemma insort_append_first: assumes \\<open>\\<forall> y \\<in> set ys. x \\<le> y\\<close> shows \\<open>insort x (xs@ys) = insort x xs @ ys\\<close>", "lemma sorted_list_of_set_append: assumes \\<open>finite xs\\<close> \\<open>finite ys\\<close> \\<open>\\<forall> x \\<in> xs. \\<forall> y \\<in> ys. x < y\\<close> shows \\<open>sorted_list_of_set (xs \\<union> ys) = sorted_list_of_set xs @ (sorted_list_of_set ys)\\<close>", "lemma filter_insort: \\<open>sorted xs \\<Longrightarrow> filter P (insort x xs) = (if P x then insort x (filter P xs) else filter P xs)\\<close>", "lemma filter_sorted_list_of_set: assumes \\<open>finite xs\\<close> shows \\<open>filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}\\<close>", "lemma unbounded_nat_set_infinite: assumes \\<open>\\<forall> (i::nat). \\<exists> j\\<ge>i. j \\<in> A\\<close> shows \\<open>\\<not> finite A\\<close>", "lemma infinite_ascending: assumes nf: \\<open>\\<not> finite (A::nat set)\\<close> obtains f where \\<open>range f = A\\<close> \\<open>\\<forall> i. f i < f (Suc i)\\<close>", "lemma mono_ge_id: \\<open>\\<forall> i. f i < f (Suc i) \\<Longrightarrow> i \\<le> f i\\<close>", "lemma insort_map_mono: assumes mono: \\<open>\\<forall> n m. n < m \\<longrightarrow> f n < f m\\<close> shows \\<open>map f (insort n ns) = insort (f n) (map f ns)\\<close>", "lemma sorted_list_of_set_map_mono: assumes mono: \\<open>\\<forall> n m. n < m \\<longrightarrow> f n < f m\\<close> and fin: \\<open>finite A\\<close>\nshows \\<open>map f (sorted_list_of_set A) = sorted_list_of_set (f`A)\\<close>", "lemma GreatestIB:\nfixes n :: \\<open>nat\\<close> and P\nassumes a:\\<open>\\<exists>k\\<le>n. P k\\<close>\nshows GreatestBI: \\<open>P (GREATEST k. k\\<le>n \\<and> P k)\\<close> and GreatestB: \\<open>(GREATEST k. k\\<le>n \\<and> P k) \\<le> n\\<close>", "lemma GreatestB_le:\nfixes n :: \\<open>nat\\<close>\nassumes \\<open>x\\<le>n\\<close> and \\<open>P x\\<close>\nshows \\<open>x \\<le> (GREATEST k. k\\<le>n \\<and> P k)\\<close>", "lemma LeastBI_ex: assumes \\<open>\\<exists>k \\<le> n. P k\\<close> shows \\<open>P (LEAST k::'c::wellorder. P k)\\<close> and \\<open>(LEAST k. P k) \\<le> n\\<close>", "lemma allB_atLeastLessThan_lower:  assumes \\<open>(i::nat) \\<le> j\\<close> \\<open>\\<forall> x\\<in>{i..<n}. P x\\<close> shows \\<open>\\<forall> x\\<in>{j..<n}. P x\\<close>", "lemma path0: \\<open>path \\<sigma> 0 = entry\\<close>", "lemma path_in_nodes[intro]: \\<open>path \\<sigma> k \\<in> nodes\\<close>", "lemma path_is_path[simp]: \\<open>is_path (path \\<sigma>)\\<close>", "lemma term_path_stable: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> i = return\\<close> and le: \\<open>i \\<le> j\\<close> shows \\<open>\\<pi> j = return\\<close>", "lemma path_path_shift: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>is_path (\\<pi>\\<guillemotleft>m)\\<close>", "lemma path_cons: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> m = \\<pi>' 0\\<close> shows \\<open>is_path (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>')\\<close>", "lemma is_path_loop: assumes \\<open>is_path \\<pi>\\<close> \\<open>0 < i\\<close> \\<open>\\<pi> i = \\<pi> 0\\<close> shows \\<open>is_path (\\<lambda> n. \\<pi> (n mod i))\\<close>", "lemma path_nodes: \\<open>is_path \\<pi> \\<Longrightarrow> \\<pi> k \\<in> nodes\\<close>", "lemma direct_path_return': assumes \\<open>is_path \\<pi> \\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>x \\<noteq> return\\<close> \\<open>\\<pi> n = return\\<close>\nobtains \\<pi>' n' where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' 0 = x\\<close> \\<open>\\<pi>' n' = return\\<close> \\<open>\\<forall> i> 0. \\<pi>' i \\<noteq> x\\<close>", "lemma direct_path_return: assumes  \\<open>x \\<in> nodes\\<close> \\<open>x \\<noteq> return\\<close>\nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close> \\<open>\\<forall> i> 0. \\<pi> i \\<noteq> x\\<close>", "lemma path_append_eq_up_to: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') =\\<^bsub>k\\<^esub> \\<pi>\\<close>", "lemma eq_up_to_le: assumes \\<open>k \\<le> n\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> shows \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close>", "lemma eq_up_to_refl: shows \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>\\<close>", "lemma eq_up_to_sym: assumes \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> shows \\<open>\\<pi>' =\\<^bsub>k\\<^esub> \\<pi>\\<close>", "lemma eq_up_to_apply: assumes \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> \\<open>j \\<le> k\\<close> shows \\<open>\\<pi> j = \\<pi>' j\\<close>", "lemma path_swap_ret: assumes \\<open>is_path \\<pi>\\<close> obtains \\<pi>' n where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> \\<open>\\<pi>' n = return\\<close>", "lemma path_suc: \\<open>path \\<sigma> (Suc k) = fst (step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\\<close>", "lemma kth_state_suc: \\<open>\\<sigma>\\<^bsup>Suc k\\<^esup>  = snd (step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\\<close>", "lemma pd_trans: assumes 1: \\<open>y pd\\<rightarrow> x\\<close> and 2: \\<open>z pd\\<rightarrow>y\\<close> shows \\<open>z pd\\<rightarrow>x\\<close>", "lemma pd_path: assumes \\<open>y pd\\<rightarrow> x\\<close>\nobtains \\<pi> n k where \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 = x\\<close> and \\<open>\\<pi> n = return\\<close> and \\<open>\\<pi> k = y\\<close> and \\<open>k \\<le> n\\<close>", "lemma pd_antisym: assumes xpdy: \\<open>x pd\\<rightarrow> y\\<close> and ypdx: \\<open>y pd\\<rightarrow> x\\<close> shows \\<open>x = y\\<close>", "lemma pd_refl[simp]: \\<open>x \\<in> nodes \\<Longrightarrow> x pd\\<rightarrow> x\\<close>", "lemma pdt_trans_in_pdt: \\<open>(x,y) \\<in> pdt\\<^sup>+ \\<Longrightarrow> (x,y) \\<in> pdt\\<close>", "lemma pdt_trancl_pdt: \\<open>pdt\\<^sup>+ = pdt\\<close>", "lemma trans_pdt: \\<open>trans pdt\\<close>", "lemma wf_pdt_inv: \\<open>wf (pdt_inv)\\<close>", "lemma return_pd: assumes \\<open>x \\<in> nodes\\<close> shows \\<open>return pd\\<rightarrow> x\\<close>", "lemma pd_total: assumes xz: \\<open>x pd\\<rightarrow> z\\<close> and yz: \\<open>y pd\\<rightarrow> z\\<close> shows \\<open>x pd\\<rightarrow> y \\<or> y pd\\<rightarrow>x\\<close>", "lemma pds_finite: \\<open>finite {y . (x,y) \\<in> pdt}\\<close>", "lemma ipd_exists: assumes node: \\<open>x \\<in> nodes\\<close> and not_ret: \\<open>x\\<noteq>return\\<close> shows \\<open>\\<exists>y. y ipd\\<rightarrow> x\\<close>", "lemma ipd_unique: assumes yipd: \\<open>y ipd\\<rightarrow> x\\<close> and y'ipd: \\<open>y' ipd\\<rightarrow> x\\<close> shows \\<open>y = y'\\<close>", "lemma ipd_is_ipd: assumes \\<open>x \\<in> nodes\\<close> and \\<open>x\\<noteq>return\\<close> shows \\<open>ipd x ipd\\<rightarrow> x\\<close>", "lemma is_ipd_in_pdt: \\<open>y ipd\\<rightarrow> x \\<Longrightarrow> (x,y) \\<in> pdt\\<close>", "lemma ipd_in_pdt: \\<open>x \\<in> nodes \\<Longrightarrow> x\\<noteq>return \\<Longrightarrow> (x,ipd x) \\<in> pdt\\<close>", "lemma no_pd_path: assumes \\<open>x \\<in> nodes\\<close> and \\<open>\\<not> y pd\\<rightarrow> x\\<close>\nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 = x\\<close> and \\<open>\\<pi> n = return\\<close> and \\<open>\\<forall> k \\<le> n. \\<pi> k \\<noteq> y\\<close>", "lemma pd_pd_ipd: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq>return\\<close> \\<open>y\\<noteq>x\\<close> \\<open>y pd\\<rightarrow> x\\<close> shows \\<open>y pd\\<rightarrow> ipd x\\<close>", "lemma pd_nodes: assumes \\<open>y pd\\<rightarrow> x\\<close> shows pd_node1: \\<open>y \\<in> nodes\\<close> and pd_node2: \\<open>x \\<in> nodes\\<close>", "lemma pd_ret_is_ret: \\<open>x pd\\<rightarrow> return \\<Longrightarrow> x = return\\<close>", "lemma ret_path_none_pd: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq>return\\<close> \nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close>  \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close>  \\<open>\\<forall> i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<close>", "lemma path_pd_ipd0': assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> n \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> 0\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> n\\<close> and \\<open>\\<pi> k = ipd(\\<pi> 0)\\<close>", "lemma path_pd_ipd0: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> 0\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> n\\<close> and \\<open>\\<pi> k = ipd(\\<pi> 0)\\<close>", "lemma path_pd_ipd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> k\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> k\\<close> and kn: \\<open>k < n\\<close> \nobtains l where \\<open>k < l\\<close> and \\<open>l \\<le> n\\<close> and \\<open>\\<pi> l = ipd(\\<pi> k)\\<close>", "lemma path_ret_ipd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>\\<pi> n = return\\<close> \nobtains l where \\<open>k < l\\<close> and \\<open>l \\<le> n\\<close> and \\<open>\\<pi> l = ipd(\\<pi> k)\\<close>", "lemma pd_intro: assumes \\<open>l pd\\<rightarrow> k\\<close> \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = k\\<close> \\<open>\\<pi> n = return\\<close> \nobtains i where \\<open>i \\<le> n\\<close> \\<open>\\<pi> i = l\\<close>", "lemma path_pd_pd0: assumes path:  \\<open>is_path \\<pi>\\<close> and lpdn: \\<open>\\<pi> l pd\\<rightarrow> n\\<close> and npd0: \\<open>n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> l\\<close> \\<open>\\<pi> k = n\\<close>", "lemma icd_imp_cd: \\<open>n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma ipd_impl_not_cd:  assumes \\<open>j \\<in> {k..i}\\<close> and \\<open>\\<pi> j = ipd (\\<pi> k)\\<close> shows \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma cd_not_ret: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<close> shows \\<open>\\<pi> k \\<noteq> return\\<close>", "lemma cd_path_shift: assumes \\<open>j \\<le> k\\<close> \\<open>is_path \\<pi> \\<close> shows \\<open>(i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i - j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> k-j)\\<close>", "lemma cd_path_shift0: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>(i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i-k cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow>0)\\<close>", "lemma icd_path_shift: assumes \\<open>l \\<le> k\\<close> \\<open>is_path \\<pi>\\<close> shows \\<open>(i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i - l icd\\<^bsup>\\<pi>\\<guillemotleft>l\\<^esup>\\<rightarrow> k - l)\\<close>", "lemma icd_path_shift0: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>(i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i-k icd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow>0)\\<close>", "lemma cdi_path_swap: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>j\\<^esub>  \\<pi>'\\<close> shows \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>", "lemma cdi_path_swap_le: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>j \\<le> n\\<close> shows \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>", "lemma not_cd_impl_ipd:  assumes \\<open>is_path \\<pi>\\<close> and \\<open>k < i\\<close> and \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> obtains j where \\<open>j \\<in> {k..i}\\<close> and \\<open>\\<pi> j = ipd (\\<pi> k)\\<close>", "lemma icd_is_the_icd: assumes \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>", "lemma all_ipd_imp_ret: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<forall> i. \\<pi> i \\<noteq> return \\<longrightarrow> (\\<exists> j>i. \\<pi> j = ipd (\\<pi> i))\\<close> shows \\<open>\\<exists>j. \\<pi> j = return\\<close>", "lemma loop_has_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>0 < i\\<close> \\<open>\\<pi> i = \\<pi> 0\\<close> \\<open>\\<pi> 0 \\<noteq> return\\<close> shows \\<open>\\<exists> k < i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma loop_has_cd': assumes \\<open>is_path \\<pi>\\<close> \\<open>j < i\\<close> \\<open>\\<pi> i = \\<pi> j\\<close> \\<open>\\<pi> j \\<noteq> return\\<close> shows \\<open>\\<exists> k \\<in> {j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma claim'': assumes path\\<pi>: \\<open>is_path \\<pi>\\<close> and path\\<pi>': \\<open>is_path \\<pi>'\\<close> \nand \\<pi>i: \\<open>\\<pi> i = \\<pi>' i'\\<close> and \\<pi>j: \\<open>\\<pi> j = \\<pi>' j'\\<close> \nand not_cd:  \\<open>\\<forall> k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  \\<open>\\<forall> k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\\<close> \nand nret: \\<open>\\<pi> i \\<noteq> return\\<close>\nand ilj: \\<open>i < j\\<close>\nshows \\<open>i' < j'\\<close>", "lemma other_claim': assumes path: \\<open>is_path \\<pi>\\<close> and eq: \\<open>\\<pi> i = \\<pi> j\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> \nand icd: \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<forall> k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>i = j\\<close>", "lemma icd_no_cd_path_shift: assumes \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>(\\<forall> k. \\<not> i - 1 cd\\<^bsup>\\<pi>\\<guillemotleft>1\\<^esup>\\<rightarrow> k)\\<close>", "lemma claim': assumes path\\<pi>: \\<open>is_path \\<pi>\\<close> and path\\<pi>': \\<open>is_path \\<pi>'\\<close> and\n  \\<pi>i: \\<open>\\<pi> i = \\<pi>' i'\\<close> and \\<pi>j: \\<open>\\<pi> j = \\<pi>' j'\\<close> and not_cd:\n  \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>\n  \\<open>i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> 0\\<close> \\<open>j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> 0\\<close>\n   and ilj: \\<open>i < j\\<close>\n   and nret: \\<open>\\<pi> i \\<noteq> return\\<close>\n  shows \\<open>i' < j'\\<close>", "lemma other_claim: assumes path: \\<open>is_path \\<pi>\\<close> and eq: \\<open>\\<pi> i = \\<pi> j\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> \nand icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> and \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>i = j\\<close>", "lemma cd_trans0: assumes \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> and \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>", "lemma cd_trans: assumes \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> and \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>", "lemma excd_impl_exicd: assumes \\<open>\\<exists> k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> shows \\<open>\\<exists> k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>", "lemma cd_split: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> obtains m where \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma cd_induct[consumes 1, case_names base IS]: assumes prem: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and base: \\<open>\\<And> i. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k \\<Longrightarrow> P i\\<close> \nand IH: \\<open>\\<And> k' i'. k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow> P k' \\<Longrightarrow> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' \\<Longrightarrow> P i'\\<close> shows \\<open>P i\\<close>", "lemma cdi_prefix: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow> m < n' \\<Longrightarrow> n' \\<le> n \\<Longrightarrow> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>", "lemma cr_wn': assumes 1: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and nc: \\<open>\\<not> m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and 3: \\<open>m < m'\\<close> shows \\<open>n < m'\\<close>", "lemma cr_wn'': assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and  \\<open>i \\<le> j\\<close> shows \\<open>m \\<le> n\\<close>", "lemma ret_no_cd: assumes \\<open>\\<pi> n = return\\<close> shows \\<open>\\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma ipd_not_self: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq> return\\<close> shows \\<open>x \\<noteq> ipd x\\<close>", "lemma icd_cs: assumes \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\\<close>", "lemma cd_not_pd: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> l \\<noteq> \\<pi> k\\<close> shows \\<open>\\<not> \\<pi> l pd\\<rightarrow> \\<pi> k\\<close>", "lemma cd_ipd_is_cd: assumes \\<open>k<m\\<close> \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> and mcdj: \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>", "lemma ipd_pd_cd0: assumes lcd: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>ipd (\\<pi> 0) pd\\<rightarrow> (\\<pi> n)\\<close>", "lemma ipd_pd_cd: assumes lcd: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>ipd (\\<pi> k) pd\\<rightarrow> (\\<pi> l)\\<close>", "lemma cd_is_cd_ipd: assumes km: \\<open>k<m\\<close> and ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> and cdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and nipdj: \\<open>ipd (\\<pi> j) \\<noteq> \\<pi> m\\<close> shows \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>", "lemma ipd_icd_greatest_cd_not_ipd: assumes ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close>\nand km: \\<open>k < m\\<close> and icdj: \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>j = (GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m)\\<close>", "lemma cd_impl_icd_cd: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>", "lemma cdi_is_cd_icdi: assumes \\<open>k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<longleftrightarrow> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\\<close>", "lemma same_ipd_stable: assumes \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> \\<open>i<j\\<close> \\<open>ipd (\\<pi> i) = ipd (\\<pi> k)\\<close> shows \\<open>ipd (\\<pi> j) = ipd (\\<pi> k)\\<close>", "lemma icd_pd_intermediate': assumes icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  and j: \\<open>k < j\\<close> \\<open>j < i\\<close> shows \\<open>\\<pi> i pd\\<rightarrow> (\\<pi> j)\\<close>", "lemma icd_pd_intermediate: assumes icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  and j: \\<open>k < j\\<close> \\<open>j \\<le> i\\<close> shows \\<open>\\<pi> i pd\\<rightarrow> (\\<pi> j)\\<close>", "lemma no_icd_pd: assumes path: \\<open>is_path \\<pi>\\<close> and noicd: \\<open>\\<forall> l\\<ge>n. \\<not> k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> and nk: \\<open>n \\<le> k\\<close> shows \\<open>\\<pi> k pd\\<rightarrow> \\<pi> n\\<close>", "lemma first_pd_no_cd: assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>\\<forall> l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>", "lemma first_pd_no_icd: assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>\\<forall> l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>", "lemma path_nret_ex_nipd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<forall> i. (\\<exists> j\\<ge>i. (\\<forall> k>j. \\<pi> k \\<noteq> ipd (\\<pi> j)))\\<close>", "lemma path_nret_ex_all_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<forall> i. (\\<exists> j\\<ge>i. (\\<forall> k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j))\\<close>", "lemma path_nret_inf_all_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<not> finite {j. \\<forall> k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\\<close>", "lemma path_nret_inf_icd_seq: assumes path: \\<open>is_path \\<pi>\\<close> and nret: \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> \nobtains f where \\<open>\\<forall> i. f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\\<close> \\<open>range f = {i. \\<forall> j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\\<close> \\<open>\\<not> (\\<exists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i)\\<close>", "lemma cdi_iff_no_strict_pd: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longleftrightarrow> is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return \\<and> (\\<forall> j \\<in> {k..i}. \\<not> (\\<pi> k, \\<pi> j) \\<in> pdt)\\<close>", "lemma last_cs: \\<open>last (cs\\<^bsup>\\<pi>\\<^esup> i) = \\<pi> i\\<close>", "lemma cs_not_nil: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n \\<noteq> []\\<close>", "lemma cs_return: assumes \\<open>\\<pi> n = return\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close>", "lemma cs_0[simp]: \\<open>cs\\<^bsup>\\<pi>\\<^esup> 0 = [\\<pi> 0]\\<close>", "lemma cs_inj: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> n \\<noteq> return\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<close> shows \\<open>n = n'\\<close>", "lemma cs_cases: fixes \\<pi> i \nobtains (base) \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close> and \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> | \n(depend) k where  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma cs_length_one: assumes \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\\<close> shows  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close> and \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma cs_length_g_one: assumes \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close> obtains k where  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma claim: assumes  path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  ii: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> and jj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> \nand bl: \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i < j\\<close> \nshows \\<open>i' < j'\\<close>", "lemma cs_split': assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs@[x,x']@ys\\<close>  shows \\<open>\\<exists> m. cs\\<^bsup>\\<pi>\\<^esup> m = xs@[x] \\<and> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>", "lemma cs_split: assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs@[x]@ys@[\\<pi> i]\\<close>  shows \\<open>\\<exists> m. cs\\<^bsup>\\<pi>\\<^esup> m = xs@[x] \\<and> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>", "lemma cs_less_split: assumes \\<open>xs \\<prec> ys\\<close> obtains a as where \\<open>ys = xs@a#as\\<close>", "lemma cs_select_is_cs: assumes \\<open>is_path \\<pi>\\<close> \\<open>xs \\<noteq> Nil\\<close> \\<open>xs \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (\\<pi>\\<exclamdown>xs) = xs\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi>\\<exclamdown>xs)\\<close>", "lemma cd_in_cs: assumes \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> shows \\<open>\\<exists> ns. cs\\<^bsup>\\<pi>\\<^esup> n = (cs\\<^bsup>\\<pi>\\<^esup> m) @ ns @[\\<pi> n]\\<close>", "lemma butlast_cs_not_cd: assumes \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close> shows \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>n\\<close>", "lemma wn_cs_butlast: assumes \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close> \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> \\<open>m<n\\<close> shows \\<open>i<j\\<close>", "theorem cs_order: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nand csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i < j\\<close>   \nshows \\<open>i'<j'\\<close>", "lemma cs_order_le: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nand csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i \\<le> j\\<close>   \nshows \\<open>i'\\<le>j'\\<close>", "lemmas cs_induct[case_names cs] = cs.induct", "lemma icdi_path_swap: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>j\\<^esub>  \\<pi>'\\<close> shows \\<open>j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>", "lemma icdi_path_swap_le: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>j \\<le> n\\<close> shows \\<open>j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>", "lemma cs_path_swap: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\\<close>", "lemma cs_path_swap_le: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>k \\<le> n\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\\<close>", "lemma cs_path_swap_cd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \nobtains k' where \\<open>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>", "lemma path_ipd_swap: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>k < n\\<close> \nobtains \\<pi>' m where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>k < m\\<close> \\<open>\\<pi>' m = ipd (\\<pi>' k)\\<close> \\<open>\\<forall> l \\<in> {k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<close>", "lemma cs_sorted_list_of_cd': \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = map \\<pi> (sorted_list_of_set { i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @ [\\<pi> k]\\<close>", "lemma cs_sorted_list_of_cd: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = map \\<pi> (sorted_list_of_set ({ i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\\<close>", "lemma cs_not_ipd: assumes \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<close> (is \\<open>?Q j\\<close>)\nshows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) = [n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> ipd (\\<pi> k)]\\<close>\n(is \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?j = filter ?P _\\<close>)", "lemma cs_ipd: assumes ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close>\nand km: \\<open>k < m\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = [n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> \\<pi> m] @ [\\<pi> m]\\<close>", "lemma converged_ipd_same_icd: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and icd: \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and suc: \\<open>\\<pi> (Suc k) = \\<pi>' (Suc k')\\<close>\nand ipd: \\<open>\\<pi>' m' = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k'..<m'}. \\<pi>' n \\<noteq> ipd (\\<pi> k)\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma converged_same_icd: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and converge: \\<open>l < n\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> \nand csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and icd: \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and suc: \\<open>\\<pi> (Suc k) = \\<pi>' (Suc k')\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma cd_is_cs_less: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l\\<close>", "lemma cs_select_id: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> k \\<noteq> return\\<close> shows \\<open>\\<pi>\\<exclamdown>cs\\<^bsup>\\<pi>\\<^esup> k = k\\<close> (is \\<open>?k = k\\<close>)", "lemma cs_single_nocd: assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [x]\\<close> shows \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>", "lemma cs_single_pd_intermed: assumes \\<open>is_path \\<pi>\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close> \\<open>k \\<le> n\\<close> shows \\<open>\\<pi> n pd\\<rightarrow> \\<pi> k\\<close>", "lemma cs_first_pd:  assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close>", "lemma converged_pd_cs_single: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and mpdl: \\<open>\\<pi> m pd\\<rightarrow> \\<pi> l\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma converged_cs_single: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma converged_cd_same_suc: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand cd_suc: \\<open>\\<forall> k k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow> \\<pi> (Suc k) = \\<pi>' (Suc k')\\<close> and converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nshows  \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma converged_cd_diverge: \nassumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and notin: \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nobtains k k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>", "lemma converged_cd_same_suc_return: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand cd_suc: \\<open>\\<forall> k k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow> \\<pi> (Suc k) = \\<pi>' (Suc k')\\<close> and ret: \\<open>\\<pi>' n' = return\\<close> \nshows  \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma converged_cd_diverge_return: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand notin: \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and ret: \\<open>\\<pi>' m' = return\\<close> \nobtains k k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>", "lemma returned_missing_cd_or_loop: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand notin': \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close> and nret: \\<open>\\<forall> n'. \\<pi>' n' \\<noteq> return\\<close> and ret: \\<open>\\<pi> n = return\\<close> \nobtains i i' where \\<open>i<k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'> i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>", "lemma missing_cd_or_loop: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and notin': \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close>  \nobtains i i' where \\<open>i < k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'> i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>", "lemma path_shift_set_cd: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>{k + j| j . n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j } = {i. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }\\<close>", "lemma cs_path_shift_set_cd: assumes path: \\<open>is_path \\<pi>\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = map \\<pi> (sorted_list_of_set {i. k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }) @ [\\<pi> (k+n)]\\<close>", "lemma cs_split_shift_cd: assumes \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and \\<open>j < k\\<close> and \\<open>k < n\\<close> and \\<open>\\<forall>j'<k. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>", "lemma cs_split_shift_nocd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>k < n\\<close> and \\<open>\\<forall>j. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>", "lemma shifted_cs_eq_is_eq: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) = cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close>", "lemma cs_eq_is_eq_shifted: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) = cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close>", "lemma converged_cd_diverge_cs: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> j  = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and \\<open>j<l\\<close> and \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and \\<open>l < m\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close>\nobtains k k' where \\<open>j\\<le>k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>", "lemma cs_ipd_conv: assumes csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and ipd: \\<open>\\<pi> l = ipd (\\<pi> k)\\<close> \\<open>\\<pi>' l' = ipd(\\<pi>' k')\\<close> \n  and nipd: \\<open>\\<forall>n\\<in>{k..<l}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> \\<open>\\<forall>n'\\<in>{k'..<l'}. \\<pi>' n' \\<noteq> ipd (\\<pi>' k')\\<close> and kl: \\<open>k < l\\<close> \\<open>k' < l'\\<close> \nshows \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>", "lemma cp_eq_cs: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cp\\<close> shows \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close>", "lemma cd_cs_swap: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> shows \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>", "lemma kth_obs_not_none: assumes \\<open>is_kth_obs (path \\<sigma>) k i\\<close> obtains a where \\<open>obsp \\<sigma> i = Some a\\<close>", "lemma kth_obs_unique: \\<open>is_kth_obs \\<pi> k i \\<Longrightarrow> is_kth_obs \\<pi> k j \\<Longrightarrow> i = j\\<close>", "lemma obs_none_no_kth_obs: assumes \\<open>obs \\<sigma> k = None\\<close> shows \\<open>\\<not> (\\<exists> i. is_kth_obs (path \\<sigma>) k i)\\<close>", "lemma obs_some_kth_obs : assumes \\<open>obs \\<sigma> k \\<noteq> None\\<close> obtains i where \\<open>is_kth_obs (path \\<sigma>) k i\\<close>", "lemma not_none_is_obs: assumes \\<open>att(\\<pi> i) \\<noteq> None\\<close> shows \\<open>is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i\\<close>", "lemma in_obs_ids_is_kth_obs: assumes \\<open>i \\<in> obs_ids \\<pi>\\<close> obtains k where \\<open>is_kth_obs \\<pi> k i\\<close>", "lemma kth_obs_stable: assumes \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>k < l\\<close> shows \\<open>\\<exists> i. is_kth_obs \\<pi> k i\\<close>", "lemma kth_obs_mono: assumes \\<open>is_kth_obs \\<pi> k i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>k < l\\<close> shows \\<open>i < j\\<close>", "lemma kth_obs_le_iff: assumes \\<open>is_kth_obs \\<pi> k i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close>  shows \\<open>k < l \\<longleftrightarrow> i < j\\<close>", "lemma ret_obs_all_obs: assumes path: \\<open>is_path \\<pi>\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and ret: \\<open>\\<pi> i = return\\<close> and kl: \\<open>k < l\\<close> obtains j where \\<open>is_kth_obs \\<pi> l j\\<close>", "lemma no_kth_obs_missing_cs: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and not_in_\\<pi>': \\<open>\\<not>(\\<exists>i'. is_kth_obs \\<pi>' k i')\\<close>  obtains  l j where \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>", "lemma kth_obs_cs_missing_cs:  assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and iki': \\<open>is_kth_obs \\<pi>' k i'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nobtains l j where \\<open>j \\<le> i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close> | l' j' where \\<open>j' \\<le> i'\\<close> \\<open>is_kth_obs \\<pi>' l' j'\\<close> \\<open>\\<not> (\\<exists> j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>", "lemma reads_restrict1: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> \\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x\\<close>", "lemma reads_restrict2: \\<open>\\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x \\<Longrightarrow> \\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n)\\<close>", "lemma reads_restrict: \\<open>(\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n)) = (\\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x)\\<close>", "lemma reads_restr_suc: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> suc n \\<sigma> = suc n \\<sigma>'\\<close>", "lemma reads_restr_sem: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> \\<forall> v \\<in> writes n. sem n \\<sigma> v = sem n \\<sigma>' v\\<close>", "lemma reads_obsp: assumes \\<open>path \\<sigma> k = path \\<sigma>' k'\\<close> \\<open>\\<sigma>\\<^bsup>k\\<^esup> \\<restriction> (reads (path \\<sigma> k)) = \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> (reads (path \\<sigma> k))\\<close> shows \\<open>obsp \\<sigma> k = obsp \\<sigma>' k'\\<close>", "lemma no_writes_unchanged0: assumes \\<open>\\<forall> l<k. v\\<notin> writes(path \\<sigma> l)\\<close> shows \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\\<close>", "lemma written_read_dd: assumes \\<open>is_path \\<pi>\\<close> \\<open>v \\<in> reads (\\<pi> k) \\<close> \\<open>v \\<in> writes (\\<pi> j)\\<close> \\<open>j<k\\<close> obtains l where \\<open>k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\\<close>", "lemma no_writes_unchanged: assumes \\<open>k \\<le> l\\<close> \\<open>\\<forall> j \\<in> {k..<l}. v\\<notin> writes(path \\<sigma> j)\\<close> shows \\<open>(\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\\<close>", "lemma ddi_value: assumes \\<open>l dd\\<^bsup>(path \\<sigma>),v\\<^esup>\\<rightarrow> k\\<close> shows \\<open>(\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>Suc k\\<^esup> ) v\\<close>", "lemma written_value: assumes \\<open>path \\<sigma> l = path \\<sigma>' l'\\<close> \\<open>\\<sigma>\\<^bsup>l\\<^esup> \\<restriction> reads (path \\<sigma> l) = \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> reads (path \\<sigma> l)\\<close> \\<open>v \\<in> writes (path \\<sigma> l)\\<close> \nshows \\<open>(\\<sigma>\\<^bsup>Suc l\\<^esup> ) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup> ) v\\<close>", "lemma obsp_contradict: assumes csk: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close> and obs: \\<open>obsp \\<sigma> k \\<noteq> obsp \\<sigma>' k'\\<close> shows \\<open>(\\<sigma>', k') \\<cc> (\\<sigma>, k)\\<close>", "lemma missing_cs_contradicts: assumes notin: \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k')\\<close> and converge: \\<open>k<n\\<close> \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\\<close> shows \\<open>\\<exists> j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)\\<close>", "theorem obs_neq_contradicts_term: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> assumes ret: \\<open>\\<pi> n = return\\<close> \\<open>\\<pi>' n' = return\\<close> and obsne: \\<open>obs \\<sigma> \\<noteq> obs \\<sigma>'\\<close> \nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>", "lemma obs_neq_some_contradicts': fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes obsnecs: \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or> cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>\nand iki: \\<open>is_kth_obs \\<pi> k i\\<close> and iki': \\<open>is_kth_obs \\<pi>' k i'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom att) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom att)\\<close>", "theorem obs_neq_some_contradicts: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes obsne: \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k\\<close> and not_none: \\<open>obs \\<sigma> k \\<noteq> None\\<close> \\<open>obs \\<sigma>' k \\<noteq> None\\<close> \nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom att) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom att)\\<close>", "theorem obs_neq_ret_contradicts: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> and obsne: \\<open>obs \\<sigma>' i \\<noteq> obs \\<sigma> i\\<close> and obs:\\<open>obs \\<sigma>' i \\<noteq> None\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>", "lemma contradicting_in_cp: assumes leq:\\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close> and cseq: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close> \nand readv: \\<open>v\\<in>reads(path \\<sigma> k)\\<close> and vneq: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close> shows \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp\\<close>", "theorem contradicting_in_cop: assumes \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close> and \\<open>(\\<sigma>',k') \\<cc> (\\<sigma>,k)\\<close> and \\<open>path \\<sigma> k \\<in> dom att\\<close> \nshows \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cop\\<close>", "theorem cop_correct_term: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> \\<open>\\<pi>' n' = return\\<close> and obsne: \\<open>obs \\<sigma> \\<noteq> obs \\<sigma>'\\<close> and leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>", "theorem cop_correct_ret: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> and obsne: \\<open>obs \\<sigma> i \\<noteq> obs \\<sigma>' i\\<close> and obs: \\<open>obs \\<sigma>' i \\<noteq> None\\<close> and leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>", "theorem cop_correct_nterm: assumes obsne: \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k\\<close> \\<open>obs \\<sigma> k \\<noteq> None\\<close> \\<open>obs \\<sigma>' k \\<noteq> None\\<close> \nand leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>", "theorem cop_correct: assumes \\<open>cop = empty\\<close> shows \\<open>secure\\<close>", "theorem cp_iff_reads_contradict: \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp \\<longleftrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and> cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and> (\\<exists> v\\<in>reads(path \\<sigma> k). (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<close>", "theorem cop_iff_contradicting: \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cop \\<longleftrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and> (\\<sigma>',k') \\<cc> (\\<sigma>,k) \\<and> path \\<sigma> k \\<in> dom att\\<close>", "theorem cp_in_scp: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cp\\<close> shows \\<open>(path \\<sigma>,k)\\<in>scp \\<and> (path \\<sigma>',k')\\<in>scp\\<close>", "theorem cop_in_scop: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cop\\<close> shows \\<open>(path \\<sigma>,k)\\<in>scop \\<and> (path \\<sigma>',k')\\<in>scp\\<close>", "theorem scop_correct: assumes \\<open>scop = empty\\<close> shows \\<open>secure\\<close>"], "translations": [["", "lemma step_suc_sem: \\<open>step (n,\\<sigma>) = (suc n \\<sigma>, sem n \\<sigma>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.step (n, \\<sigma>) = (suc n \\<sigma>, sem n \\<sigma>)", "unfolding suc_def sem_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.step (n, \\<sigma>) =\n    (fst (local.step (n, \\<sigma>)), snd (local.step (n, \\<sigma>)))", "by auto"], ["", "subsubsection \\<open>Executions\\<close>"], ["", "text \\<open>\\label{sec:ex}\\<close>"], ["", "text \\<open>In order to define what it means for a program to be well-formed, we first require concepts \nof executions and program paths.\\<close>"], ["", "text \\<open>The sequence of nodes visited by the execution corresponding to an input state.\\<close>"], ["", "definition path where\n\\<open>path \\<sigma> k= fst ((step^^k) (entry,\\<sigma>))\\<close>"], ["", "text \\<open>The sequence of states visited by the execution corresponding to an input state.\\<close>"], ["", "definition kth_state ( \\<open>_\\<^bsup>_\\<^esup>\\<close> [111,111] 110) where \n\\<open>\\<sigma>\\<^bsup>k\\<^esup> = snd ((step^^k) (entry,\\<sigma>))\\<close>"], ["", "text \\<open>A predicate asserting that a sequence of nodes is a valid program path according to the\ncontrol flow graph.\\<close>"], ["", "definition is_path where\n\\<open>is_path \\<pi> = (\\<forall> n. (\\<pi> n, \\<pi> (Suc n)) \\<in> edges)\\<close>"], ["", "end"], ["", "subsubsection \\<open>Well-formed Programs\\<close>"], ["", "text_raw \\<open>\\label{sec:wf}\\<close>"], ["", "text \\<open>The following assumptions define our notion of valid programs.\\<close>"], ["", "locale IFC = IFC_def \\<open>prob\\<close> for prob:: \\<open>('n, 'var, 'val, 'out) ifc_problem\\<close> +\nassumes ret_is_node[simp,intro]: \\<open>return \\<in> nodes\\<close>\nand entry_is_node[simp,intro]: \\<open>entry \\<in> nodes\\<close>\nand writes: \\<open>\\<And> v n. (\\<exists>\\<sigma>. \\<sigma> v \\<noteq> sem n \\<sigma> v) \\<Longrightarrow> v \\<in> writes n\\<close>\nand writes_return: \\<open>writes return = {}\\<close>\nand uses_writes: \\<open>\\<And> n \\<sigma> \\<sigma>'. (\\<forall> v \\<in> reads n. \\<sigma> v = \\<sigma>' v) \\<Longrightarrow> \\<forall> v \\<in> writes n. sem n \\<sigma> v = sem n \\<sigma>' v\\<close>\nand uses_suc: \\<open>\\<And> n \\<sigma> \\<sigma>'. (\\<forall> v \\<in> reads n. \\<sigma> v = \\<sigma>' v) \\<Longrightarrow> suc n \\<sigma> = suc n \\<sigma>'\\<close>\nand uses_att: \\<open>\\<And> n f \\<sigma> \\<sigma>'. att n = Some f \\<Longrightarrow> (\\<forall> v \\<in> reads n. \\<sigma> v = \\<sigma>' v) \\<Longrightarrow> f \\<sigma> = f \\<sigma>'\\<close>\nand edges_complete[intro,simp]: \\<open>\\<And>m \\<sigma>. m \\<in> nodes \\<Longrightarrow> (m,suc m \\<sigma>) \\<in> edges\\<close>\nand edges_return : \\<open>\\<And>x. (return,x) \\<in> edges \\<Longrightarrow> x = return \\<close>\nand edges_nodes: \\<open>edges \\<subseteq> nodes \\<times> nodes\\<close>    \nand reaching_ret: \\<open>\\<And> x. x \\<in> nodes \\<Longrightarrow> \\<exists> \\<pi> n. is_path \\<pi> \\<and> \\<pi> 0 = x \\<and> \\<pi> n = return\\<close>"], ["", "subsection \\<open>Security\\<close>"], ["", "text_raw \\<open>\\label{sec:sec}\\<close>"], ["", "text \\<open>We define our notion of security, which corresponds to what Bohannon et al.~\\cite{Bohannon:2009:RN:1653662.1653673} \nrefer to as indistinguishable security.  In order to do so we require notions of observations made\nby the attacker, termination and equivalence of input states.\\<close>"], ["", "context IFC_def\nbegin"], ["", "subsubsection \\<open>Observations\\<close>"], ["", "text_raw \\<open>\\label{sec:obs}\\<close>"], ["", "text \\<open>The observation made at a given index within an execution.\\<close>"], ["", "definition obsp where\n\\<open>obsp \\<sigma> k = (case att(path \\<sigma> k) of Some f \\<Rightarrow> Some (f (\\<sigma>\\<^bsup>k\\<^esup>)) | None \\<Rightarrow> None)\\<close>"], ["", "text \\<open>The indices within a path where an observation is made.\\<close>"], ["", "definition obs_ids :: \\<open>(nat \\<Rightarrow> 'n) \\<Rightarrow> nat set\\<close> where\n\\<open>obs_ids \\<pi> = {k. att (\\<pi> k) \\<noteq> None}\\<close>"], ["", "text \\<open>A predicate relating an observable index to the number of observations made before.\\<close>"], ["", "definition is_kth_obs :: \\<open>(nat \\<Rightarrow> 'n) \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\\<close>where\n\\<open>is_kth_obs \\<pi> k i = (card (obs_ids \\<pi> \\<inter> {..<i}) = k \\<and> att (\\<pi> i) \\<noteq>  None)\\<close>"], ["", "text \\<open>The final sequence of observations made for an execution.\\<close>"], ["", "definition obs where\n\\<open>obs \\<sigma> k = (if (\\<exists>i. is_kth_obs (path \\<sigma>) k i) then obsp \\<sigma> (THE i. is_kth_obs (path \\<sigma>) k i) else None)\\<close>"], ["", "text \\<open>Comparability of observations.\\<close>"], ["", "definition obs_prefix :: \\<open>(nat \\<Rightarrow> 'obs option) \\<Rightarrow> (nat \\<Rightarrow> 'obs option) \\<Rightarrow> bool\\<close> (infix \\<open>\\<lesssim>\\<close> 50) where\n\\<open>a \\<lesssim> b \\<equiv> \\<forall> i. a i \\<noteq> None \\<longrightarrow> a i = b i\\<close>"], ["", "definition obs_comp (infix \\<open>\\<approx>\\<close> 50) where\n\\<open>a \\<approx> b \\<equiv> a \\<lesssim> b \\<or> b \\<lesssim> a\\<close>"], ["", "subsubsection \\<open>Low equivalence of input states\\<close>"], ["", "definition restrict (infix \\<open>\\<restriction>\\<close> 100 ) where\n\\<open>f\\<restriction>U = (\\<lambda> n. if n \\<in> U then f n else undefined)\\<close>"], ["", "text \\<open>Two input states are low equivalent if they coincide on the non high variables.\\<close>"], ["", "definition loweq (infix \\<open>=\\<^sub>L\\<close> 50) \nwhere \\<open>\\<sigma> =\\<^sub>L \\<sigma>' = (\\<sigma>\\<restriction>(-hvars) = \\<sigma>'\\<restriction>(-hvars))\\<close>"], ["", "subsubsection \\<open>Termination\\<close>"], ["", "text \\<open>An execution terminates iff it reaches the terminal node at any point.\\<close>"], ["", "definition terminates where\n\\<open>terminates \\<sigma> \\<equiv> \\<exists> i. path \\<sigma> i = return\\<close>"], ["", "subsubsection \\<open>Security Property\\<close>"], ["", "text \\<open>The fixed program is secure if and only if for all pairs of low equivalent inputs the observation\nsequences are comparable and if the execution for an input state terminates then the observation sequence \nis not missing any observations.\\<close>"], ["", "definition secure where\n\\<open>secure \\<equiv> \\<forall> \\<sigma> \\<sigma>'. \\<sigma> =\\<^sub>L \\<sigma>' \\<longrightarrow> (obs \\<sigma> \\<approx> obs \\<sigma>' \\<and> (terminates \\<sigma> \\<longrightarrow> obs \\<sigma>' \\<lesssim> obs \\<sigma>))\\<close>"], ["", "subsection \\<open>Characterisation of Information Flows\\<close>"], ["", "text \\<open>We now define our characterisation of information flows which tracks data and control dependencies \nwithin executions. To do so we first require some additional concepts.\\<close>"], ["", "subsubsection \\<open>Post Dominance\\<close>"], ["", "text \\<open>We utilise the post dominance relation in order to define control dependence.\\<close>"], ["", "text \\<open>The basic post dominance relation.\\<close>"], ["", "definition is_pd (infix \\<open>pd\\<rightarrow>\\<close> 50) where \n\\<open>y pd\\<rightarrow> x \\<longleftrightarrow> x \\<in> nodes \\<and> (\\<forall> \\<pi> n. is_path \\<pi> \\<and> \\<pi> (0::nat) = x \\<and> \\<pi> n = return \\<longrightarrow> (\\<exists>k\\<le>n. \\<pi> k = y))\\<close>"], ["", "text \\<open>The immediate post dominance relation.\\<close>"], ["", "definition is_ipd (infix \\<open>ipd\\<rightarrow>\\<close> 50)where\n\\<open>y ipd\\<rightarrow> x \\<longleftrightarrow> x \\<noteq> y \\<and> y pd\\<rightarrow> x \\<and> (\\<forall> z. z\\<noteq>x \\<and> z pd\\<rightarrow> x \\<longrightarrow> z pd\\<rightarrow> y)\\<close>"], ["", "definition ipd where \n\\<open>ipd x = (THE y. y ipd\\<rightarrow> x)\\<close>"], ["", "text \\<open>The post dominance tree.\\<close>"], ["", "definition pdt where\n\\<open>pdt = {(x,y). x\\<noteq>y \\<and> y pd\\<rightarrow> x}\\<close>"], ["", "subsubsection \\<open>Control Dependence\\<close>"], ["", "text \\<open>An index on an execution path is control dependent upon another if the path does not visit\nthe immediate post domiator of the node reached by the smaller index.\\<close>"], ["", "definition is_cdi (\\<open>_ cd\\<^bsup>_\\<^esup>\\<rightarrow> _\\<close> [51,51,51]50) where\n\\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longleftrightarrow> is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return \\<and> (\\<forall> j \\<in> {k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))\\<close>"], ["", "text \\<open>The largest control dependency of an index is the immediate control dependency.\\<close>"], ["", "definition is_icdi (\\<open>_ icd\\<^bsup>_\\<^esup>\\<rightarrow> _\\<close> [51,51,51]50) where\n\\<open>n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<longleftrightarrow> is_path \\<pi> \\<and> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<and> (\\<forall> m \\<in> {n'<..<n}.\\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\\<close>"], ["", "text \\<open>For the definition of the control slice, which we will define next, we require the uniqueness \nof the immediate control dependency.\\<close>"], ["", "lemma icd_uniq: assumes  \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> \\<open> m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close> shows \\<open>n = n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = n'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. n = n'", "fix n n'"], ["proof (state)\ngoal (1 subgoal):\n 1. n = n'", "assume *: \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> \\<open> m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close> \\<open>n < n'\\<close>"], ["proof (state)\nthis:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  n < n'\n\ngoal (1 subgoal):\n 1. n = n'", "have \\<open>n'<m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < m", "using *"], ["proof (prove)\nusing this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  n < n'\n\ngoal (1 subgoal):\n 1. n' < m", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   n < m \\<and>\n   \\<pi> m \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{n..m}. \\<pi> j \\<noteq> ipd (\\<pi> n))) \\<and>\n  (\\<forall>ma\\<in>{n<..<m}.\n      \\<not> (is_path \\<pi> \\<and>\n              ma < m \\<and>\n              \\<pi> m \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{ma..m}. \\<pi> j \\<noteq> ipd (\\<pi> ma))))\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   n' < m \\<and>\n   \\<pi> m \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{n'..m}. \\<pi> j \\<noteq> ipd (\\<pi> n'))) \\<and>\n  (\\<forall>ma\\<in>{n'<..<m}.\n      \\<not> (is_path \\<pi> \\<and>\n              ma < m \\<and>\n              \\<pi> m \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{ma..m}. \\<pi> j \\<noteq> ipd (\\<pi> ma))))\n  n < n'\n\ngoal (1 subgoal):\n 1. n' < m", "by auto"], ["proof (state)\nthis:\n  n' < m\n\ngoal (1 subgoal):\n 1. n = n'", "hence \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\nusing this:\n  n' < m\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "using *"], ["proof (prove)\nusing this:\n  n' < m\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  n < n'\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  n' < m\n  is_path \\<pi> \\<and>\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>ma\\<in>{n<..<m}.\n      \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ma)\n  is_path \\<pi> \\<and>\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>ma\\<in>{n'<..<m}.\n      \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ma)\n  n < n'\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "by auto"], ["proof (state)\nthis:\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. n = n'", "with *(2)"], ["proof (chain)\npicking this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "have \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. False", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>ma\\<in>{n'<..<m}.\n      \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ma)\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. n = n'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?na3;\n   m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?n'a3; ?na3 < ?n'a3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n = n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?na3;\n   m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?n'a3; ?na3 < ?n'a3\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. n = n'", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?na3;\n   m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?n'a3; ?na3 < ?n'a3\\<rbrakk>\n  \\<Longrightarrow> False\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. n = n'", "by (metis linorder_neqE_nat)"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Control Slice\\<close>"], ["", "text \\<open>We utilise the control slice, that is the sequence of nodes visited by the control dependencies \nof an index, to match indices between executions.\\<close>"], ["", "function cs:: \\<open>(nat \\<Rightarrow> 'n) \\<Rightarrow> nat \\<Rightarrow> 'n list\\<close> (\\<open>cs\\<^bsup>_\\<^esup> _\\<close> [51,70] 71) where\n\\<open>cs\\<^bsup>\\<pi>\\<^esup> n = (if (\\<exists> m. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) then (cs \\<pi> (THE m. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m))@[\\<pi> n] else [\\<pi> n])\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>\\<pi> n. x = (\\<pi>, n) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>\\<pi> n \\<pi>' na.\n       (\\<pi>, n) = (\\<pi>', na) \\<Longrightarrow>\n       (if Ex (is_icdi n \\<pi>)\n        then cs_sumC (\\<pi>, The (is_icdi n \\<pi>)) @ [\\<pi> n]\n        else [\\<pi> n]) =\n       (if Ex (is_icdi na \\<pi>')\n        then cs_sumC (\\<pi>', The (is_icdi na \\<pi>')) @ [\\<pi>' na]\n        else [\\<pi>' na])", "by pat_completeness auto"], ["", "termination \\<open>cs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. All cs_dom", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. wf ?R\n 2. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> ?R", "show \\<open>wf (measure snd)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure snd)", "by simp"], ["proof (state)\nthis:\n  wf (measure snd)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "fix \\<pi> n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "define m where \\<open>m == (The (is_icdi n \\<pi>))\\<close>"], ["proof (state)\nthis:\n  m \\<equiv> The (is_icdi n \\<pi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "assume \\<open>Ex (is_icdi n \\<pi>)\\<close>"], ["proof (state)\nthis:\n  Ex (is_icdi n \\<pi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "hence \\<open>n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  Ex (is_icdi n \\<pi>)\n\ngoal (1 subgoal):\n 1. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "unfolding m_def"], ["proof (prove)\nusing this:\n  Ex (is_icdi n \\<pi>)\n\ngoal (1 subgoal):\n 1. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> The (is_icdi n \\<pi>)", "by (metis (full_types) icd_uniq theI')"], ["proof (state)\nthis:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "hence \\<open>m < n\\<close>"], ["proof (prove)\nusing this:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m < n", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   m < n \\<and>\n   \\<pi> n \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{m..n}. \\<pi> j \\<noteq> ipd (\\<pi> m))) \\<and>\n  (\\<forall>m\\<in>{m<..<n}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < n \\<and>\n              \\<pi> n \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..n}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. m < n", "by simp"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n       ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "thus \\<open>((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd\\<close>"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd", "by (metis in_measure m_def snd_conv)"], ["proof (state)\nthis:\n  ((\\<pi>, The (is_icdi n \\<pi>)), \\<pi>, n) \\<in> measure snd\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive cs_less (infix \\<open>\\<prec>\\<close> 50) where\n\\<open>length xs < length ys \\<Longrightarrow> take (length xs) ys = xs  \\<Longrightarrow> xs \\<prec> ys\\<close>"], ["", "definition cs_select (infix \\<open>\\<exclamdown>\\<close> 50) where\n\\<open>\\<pi>\\<exclamdown>xs = (THE k. cs\\<^bsup>\\<pi>\\<^esup> k = xs)\\<close>"], ["", "subsubsection \\<open>Data Dependence\\<close>"], ["", "text \\<open>Data dependence is defined straight forward. An index is data dependent upon another, \nif the index reads a variable written by the earlier index and the variable in question has not \nbeen written by any index in between.\\<close>"], ["", "definition is_ddi (\\<open>_ dd\\<^bsup>_,_\\<^esup>\\<rightarrow> _\\<close> [51,51,51,51] 50) where\n\\<open>n dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> m \\<longleftrightarrow> is_path \\<pi> \\<and> m < n \\<and> v \\<in> reads (\\<pi> n) \\<inter> (writes (\\<pi> m)) \\<and> (\\<forall> l \\<in> {m<..<n}. v \\<notin> writes (\\<pi> l))\\<close>"], ["", "subsubsection \\<open>Characterisation via Critical Paths\\<close>"], ["", "text_raw \\<open>\\label{sec:char-cp}\\<close>"], ["", "text \\<open>With the above we define the set of critical paths which as we will prove characterise the matching\npoints in executions where diverging data is read.\\<close>"], ["", "inductive_set cp where\n\n\\<comment> \\<open>Any pair of low equivalent input states and indices where a diverging high variable is first\nread is critical.\\<close>\n\n\\<open>\\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>'; \n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'; \n  h \\<in> reads(path \\<sigma> n); \n  (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) h; \n  \\<forall> k<n. h\\<notin>writes(path \\<sigma> k); \n  \\<forall> k'<n'. h\\<notin>writes(path \\<sigma>' k')\n \\<rbrakk> \\<Longrightarrow> ((\\<sigma>,n),(\\<sigma>',n')) \\<in> cp\\<close> |\n\n\\<comment> \\<open>If from a pair of critical indices in two executions there exist data dependencies from both\nindices to a pair of matching indices where the variable diverges, the later pair of indices is critical.\\<close>\n\n\\<open>\\<lbrakk>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp; \n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k'; \n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'; \n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n \\<rbrakk> \\<Longrightarrow> ((\\<sigma>,n),(\\<sigma>',n')) \\<in> cp\\<close> |\n\n\\<comment> \\<open>If from a pair of critical indices the executions take different branches and one of the critical \nindices is a control dependency of an index that is data dependency of a matched index where diverging \ndata is read and the variable in question is not written by the other execution after the executions\nfirst reached matching indices again, then the later matching pair of indices is critical.\\<close>\n\n\\<open>\\<lbrakk>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp; \n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l; \n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k; \n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'; \n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k'); \n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v; \n  \\<forall>j'\\<in>{(LEAST i'. k' < i' \\<and> (\\<exists>i. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'))..<n'}. v\\<notin>writes (path \\<sigma>' j')\n \\<rbrakk> \\<Longrightarrow> ((\\<sigma>,n),(\\<sigma>',n')) \\<in> cp\\<close> | \n\n\\<comment> \\<open>The relation is symmetric.\\<close>\n\n\\<open>\\<lbrakk>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp\\<rbrakk> \\<Longrightarrow> ((\\<sigma>',k'),(\\<sigma>,k)) \\<in> cp\\<close>"], ["", "text \\<open>Based on the set of critical paths, the critical observable paths are those that either directly \nreach observable nodes or are diverging control dependencies of an observable index.\\<close>"], ["", "inductive_set cop where\n\\<open>\\<lbrakk>((\\<sigma>,n),(\\<sigma>',n')) \\<in> cp;\n  path \\<sigma> n \\<in> dom att\n \\<rbrakk> \\<Longrightarrow> ((\\<sigma>,n),(\\<sigma>',n')) \\<in> cop\\<close> |\n\n\\<open>\\<lbrakk>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp; \n  n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k; \n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k'); \n  path \\<sigma> n \\<in> dom att\n \\<rbrakk> \\<Longrightarrow> ((\\<sigma>,n),(\\<sigma>',k')) \\<in> cop\\<close>"], ["", "subsubsection \\<open>Approximation via Single Critical Paths\\<close>"], ["", "text_raw \\<open>\\label{sec:char-scp}\\<close>"], ["", "text \\<open>For applications we also define a single execution approximation.\\<close>"], ["", "definition is_dcdi_via (\\<open>_ dcd\\<^bsup>_,_\\<^esup>\\<rightarrow> _ via _ _\\<close> [51,51,51,51,51,51] 50) where\n\\<open>n dcd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> m via \\<pi>' m' = (is_path \\<pi> \\<and> m < n \\<and> (\\<exists> l' n'. cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m' \\<and> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and> n' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l' \\<and> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m') \\<and> (\\<forall> l \\<in> {m..<n}. v\\<notin> writes(\\<pi> l)))\\<close>"], ["", "inductive_set scp where\n\\<open>\\<lbrakk>h \\<in> hvars; h \\<in> reads (path \\<sigma> n); (\\<forall> k<n. h\\<notin> writes(path \\<sigma> k))\\<rbrakk> \\<Longrightarrow> (path \\<sigma>,n) \\<in> scp\\<close> |\n\\<open>\\<lbrakk>(\\<pi>,m) \\<in> scp; n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk> \\<Longrightarrow> (\\<pi>,n) \\<in> scp\\<close>|\n\\<open>\\<lbrakk>(\\<pi>,m) \\<in> scp; n dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> m\\<rbrakk> \\<Longrightarrow> (\\<pi>,n) \\<in> scp\\<close>|\n\\<open>\\<lbrakk>(\\<pi>,m) \\<in> scp; (\\<pi>',m') \\<in> scp; n dcd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> m via \\<pi>' m'\\<rbrakk> \\<Longrightarrow> (\\<pi>,n) \\<in> scp\\<close>"], ["", "inductive_set scop where\n\\<open>\\<lbrakk>(\\<pi>,n) \\<in> scp; \\<pi> n \\<in> dom att\\<rbrakk> \\<Longrightarrow> (\\<pi>,n) \\<in> scop\\<close>"], ["", "subsubsection \\<open>Further Definitions\\<close>"], ["", "text \\<open>The following concepts are utilised by the proofs.\\<close>"], ["", "inductive contradicts (infix \\<open>\\<cc>\\<close> 50) where\n\\<open>\\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k ; \\<pi> = path \\<sigma>;  \\<pi>' = path \\<sigma>' ; \\<pi> (Suc (\\<pi>\\<exclamdown>cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq> \\<pi>' (Suc k')\\<rbrakk> \\<Longrightarrow> (\\<sigma>', k') \\<cc> (\\<sigma>, k)\\<close>|\n\\<open>\\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k ; \\<pi> = path \\<sigma>;  \\<pi>' = path \\<sigma>' ; \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> (reads (\\<pi> k)) \\<noteq> \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> (reads (\\<pi> k))\\<rbrakk> \\<Longrightarrow> (\\<sigma>',k') \\<cc> (\\<sigma>,k)\\<close>"], ["", "definition path_shift (infixl \\<open>\\<guillemotleft>\\<close> 51) where \n[simp]: \\<open>\\<pi>\\<guillemotleft>m = (\\<lambda> n. \\<pi> (m+n))\\<close>"], ["", "definition path_append :: \\<open>(nat \\<Rightarrow> 'n) \\<Rightarrow> nat \\<Rightarrow> (nat \\<Rightarrow> 'n) \\<Rightarrow> (nat \\<Rightarrow> 'n)\\<close> (\\<open>_ @\\<^bsup>_\\<^esup> _\\<close> [0,0,999] 51) where\n[simp]: \\<open>\\<pi> @\\<^bsup>m\\<^esup> \\<pi>' = (\\<lambda>n.(if n \\<le> m then \\<pi> n else \\<pi>' (n-m)))\\<close>"], ["", "definition eq_up_to :: \\<open>(nat \\<Rightarrow> 'n) \\<Rightarrow> nat \\<Rightarrow> (nat \\<Rightarrow> 'n) \\<Rightarrow> bool\\<close> (\\<open>_ =\\<^bsub>_\\<^esub> _\\<close> [55,55,55] 50) where\n\\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>' = (\\<forall> i \\<le> k. \\<pi> i = \\<pi>' i)\\<close>"], ["", "end"], ["", "(* End of locale IFC_def *)"], ["", "section \\<open>Proofs\\<close>"], ["", "text_raw \\<open>\\label{sec:proofs}\\<close>"], ["", "subsection \\<open>Miscellaneous Facts\\<close>"], ["", "lemma option_neq_cases: assumes \\<open>x \\<noteq> y\\<close> obtains (none1) a where \\<open>x = None\\<close> \\<open>y = Some a\\<close> | (none2) a where \\<open>x = Some a\\<close> \\<open>y = None\\<close> | (some) a b where \\<open>x = Some a\\<close> \\<open>y = Some b\\<close> \\<open>a \\<noteq> b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>x = None; y = Some a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>x = Some a; y = None\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>x = Some a; y = Some b; a \\<noteq> b\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>x = None; y = Some a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>a.\n        \\<lbrakk>x = Some a; y = None\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<And>a b.\n        \\<lbrakk>x = Some a; y = Some b; a \\<noteq> b\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by fastforce"], ["", "lemmas nat_sym_cases[case_names less sym eq] = linorder_less_wlog"], ["", "lemma mod_bound_instance: assumes \\<open>j < (i::nat)\\<close> obtains j' where \\<open>k < j'\\<close> and \\<open>j' mod i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k < j'; j' mod i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k < j'; j' mod i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>k < Suc k * i + j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < Suc k * i + j", "using assms less_imp_Suc_add"], ["proof (prove)\nusing this:\n  j < i\n  ?m < ?n \\<Longrightarrow> \\<exists>k. ?n = Suc (?m + k)\n\ngoal (1 subgoal):\n 1. k < Suc k * i + j", "by fastforce"], ["proof (state)\nthis:\n  k < Suc k * i + j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k < j'; j' mod i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  k < Suc k * i + j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k < j'; j' mod i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>(Suc k * i + j) mod i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc k * i + j) mod i = j", "by (metis assms mod_less mod_mult_self3)"], ["proof (state)\nthis:\n  (Suc k * i + j) mod i = j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k < j'; j' mod i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  k < Suc k * i + j\n  (Suc k * i + j) mod i = j", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  k < Suc k * i + j\n  (Suc k * i + j) mod i = j\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  k < Suc k * i + j\n  (Suc k * i + j) mod i = j\n  \\<lbrakk>k < ?j'; ?j' mod i = j\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_neq_prefix_cases: assumes \\<open>ls \\<noteq> ls'\\<close> and \\<open>ls \\<noteq> Nil\\<close> and \\<open>ls' \\<noteq> Nil\\<close>\n  obtains (diverge) xs x x' ys ys' where \\<open>ls = xs@[x]@ys\\<close> \\<open>ls' = xs@[x']@ys'\\<close> \\<open>x \\<noteq> x'\\<close> |\n   (prefix1) xs where \\<open>ls = ls'@xs\\<close> and \\<open>xs \\<noteq> Nil\\<close> |\n   (prefix2) xs where \\<open>ls@xs = ls'\\<close> and \\<open>xs \\<noteq> Nil\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x ys x' ys'.\n                \\<lbrakk>ls = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n                 x \\<noteq> x'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>ls = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>ls @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  ls \\<noteq> ls'\n  ls \\<noteq> []\n  ls' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x ys x' ys'.\n                \\<lbrakk>ls = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n                 x \\<noteq> x'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>ls = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>ls @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (induct \\<open>length ls\\<close> arbitrary: \\<open>ls\\<close> \\<open>ls'\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ls ls'.\n       \\<lbrakk>\\<And>lsa ls'.\n                   \\<lbrakk>length lsa < length ls;\n                    \\<And>xs x ys x' ys'.\n                       \\<lbrakk>lsa = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n                        x \\<noteq> x'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    lsa \\<noteq> ls'; lsa \\<noteq> [];\n                    ls' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>xs x ys x' ys'.\n           \\<lbrakk>ls = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n            x \\<noteq> x'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        ls \\<noteq> ls'; ls \\<noteq> []; ls' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (less ls ls')"], ["proof (state)\nthis:\n  \\<lbrakk>length ?ls < length ls;\n   \\<And>xs x ys x' ys'.\n      \\<lbrakk>?ls = xs @ [x] @ ys; ?ls' = xs @ [x'] @ ys';\n       x \\<noteq> x'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>?ls = ?ls' @ xs; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>?ls @ xs = ?ls'; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   ?ls \\<noteq> ?ls'; ?ls \\<noteq> []; ?ls' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>ls = ?xs @ [?x] @ ?ys; ls' = ?xs @ [?x'] @ ?ys';\n   ?x \\<noteq> ?x'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>ls = ls' @ ?xs; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n  \\<lbrakk>ls @ ?xs = ls'; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n  ls \\<noteq> ls'\n  ls \\<noteq> []\n  ls' \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>ls ls'.\n       \\<lbrakk>\\<And>lsa ls'.\n                   \\<lbrakk>length lsa < length ls;\n                    \\<And>xs x ys x' ys'.\n                       \\<lbrakk>lsa = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n                        x \\<noteq> x'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    lsa \\<noteq> ls'; lsa \\<noteq> [];\n                    ls' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>xs x ys x' ys'.\n           \\<lbrakk>ls = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n            x \\<noteq> x'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        ls \\<noteq> ls'; ls \\<noteq> []; ls' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain z zs z' zs' where\n  lz: \\<open>ls = z#zs\\<close> \\<open>ls' = z'#zs'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z zs z' zs'.\n        \\<lbrakk>ls = z # zs; ls' = z' # zs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.exhaust less(6,7))"], ["proof (state)\nthis:\n  ls = z # zs\n  ls' = z' # zs'\n\ngoal (1 subgoal):\n 1. \\<And>ls ls'.\n       \\<lbrakk>\\<And>lsa ls'.\n                   \\<lbrakk>length lsa < length ls;\n                    \\<And>xs x ys x' ys'.\n                       \\<lbrakk>lsa = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n                        x \\<noteq> x'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>xs.\n                       \\<lbrakk>lsa @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    lsa \\<noteq> ls'; lsa \\<noteq> [];\n                    ls' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>xs x ys x' ys'.\n           \\<lbrakk>ls = xs @ [x] @ ys; ls' = xs @ [x'] @ ys';\n            x \\<noteq> x'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls = ls' @ xs; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>xs.\n           \\<lbrakk>ls @ xs = ls'; xs \\<noteq> []\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        ls \\<noteq> ls'; ls \\<noteq> []; ls' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "assume zz: \\<open>z = z'\\<close>"], ["proof (state)\nthis:\n  z = z'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "hence zsz: \\<open>zs \\<noteq> zs'\\<close>"], ["proof (prove)\nusing this:\n  z = z'\n\ngoal (1 subgoal):\n 1. zs \\<noteq> zs'", "using less(5) lz"], ["proof (prove)\nusing this:\n  z = z'\n  ls \\<noteq> ls'\n  ls = z # zs\n  ls' = z' # zs'\n\ngoal (1 subgoal):\n 1. zs \\<noteq> zs'", "by auto"], ["proof (state)\nthis:\n  zs \\<noteq> zs'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "have lenz: \\<open>length zs < length ls\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. length zs < length ls", "using lz"], ["proof (prove)\nusing this:\n  ls = z # zs\n  ls' = z' # zs'\n\ngoal (1 subgoal):\n 1. length zs < length ls", "by auto"], ["proof (state)\nthis:\n  length zs < length ls\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof(cases \\<open>zs = Nil\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow> thesis\n 2. zs \\<noteq> [] \\<Longrightarrow> thesis", "assume zs: \\<open>zs = Nil\\<close>"], ["proof (state)\nthis:\n  zs = []\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow> thesis\n 2. zs \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>zs' \\<noteq> Nil\\<close>"], ["proof (prove)\nusing this:\n  zs = []\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> []", "using zsz"], ["proof (prove)\nusing this:\n  zs = []\n  zs \\<noteq> zs'\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  zs' \\<noteq> []\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow> thesis\n 2. zs \\<noteq> [] \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  zs' \\<noteq> []\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow> thesis\n 2. zs \\<noteq> [] \\<Longrightarrow> thesis", "have \\<open>ls@zs' = ls'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ls @ zs' = ls'", "using zs lz zz"], ["proof (prove)\nusing this:\n  zs = []\n  ls = z # zs\n  ls' = z' # zs'\n  z = z'\n\ngoal (1 subgoal):\n 1. ls @ zs' = ls'", "by auto"], ["proof (state)\nthis:\n  ls @ zs' = ls'\n\ngoal (2 subgoals):\n 1. zs = [] \\<Longrightarrow> thesis\n 2. zs \\<noteq> [] \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  zs' \\<noteq> []\n  ls @ zs' = ls'", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  zs' \\<noteq> []\n  ls @ zs' = ls'\n\ngoal (1 subgoal):\n 1. thesis", "using less(4)"], ["proof (prove)\nusing this:\n  zs' \\<noteq> []\n  ls @ zs' = ls'\n  \\<lbrakk>ls @ ?xs = ls'; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow> thesis", "assume zs: \\<open>zs \\<noteq> Nil\\<close>"], ["proof (state)\nthis:\n  zs \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs \\<noteq> [] \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \\<open>zs' = Nil\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. zs' = [] \\<Longrightarrow> thesis\n 2. zs' \\<noteq> [] \\<Longrightarrow> thesis", "assume \\<open>zs' = Nil\\<close>"], ["proof (state)\nthis:\n  zs' = []\n\ngoal (2 subgoals):\n 1. zs' = [] \\<Longrightarrow> thesis\n 2. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>ls = ls'@zs\\<close>"], ["proof (prove)\nusing this:\n  zs' = []\n\ngoal (1 subgoal):\n 1. ls = ls' @ zs", "using lz zz"], ["proof (prove)\nusing this:\n  zs' = []\n  ls = z # zs\n  ls' = z' # zs'\n  z = z'\n\ngoal (1 subgoal):\n 1. ls = ls' @ zs", "by auto"], ["proof (state)\nthis:\n  ls = ls' @ zs\n\ngoal (2 subgoals):\n 1. zs' = [] \\<Longrightarrow> thesis\n 2. zs' \\<noteq> [] \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  ls = ls' @ zs\n\ngoal (1 subgoal):\n 1. thesis", "using zs less(3)"], ["proof (prove)\nusing this:\n  ls = ls' @ zs\n  zs \\<noteq> []\n  \\<lbrakk>ls = ls' @ ?xs; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "assume zs': \\<open>zs' \\<noteq> Nil\\<close>"], ["proof (state)\nthis:\n  zs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  zs' \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "fix xs x ys x' ys'"], ["proof (state)\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "assume \\<open>zs = xs @ [x] @ ys\\<close> \\<open>zs' = xs @ [x'] @ ys'\\<close> and xx: \\<open>x \\<noteq> x'\\<close>"], ["proof (state)\nthis:\n  zs = xs @ [x] @ ys\n  zs' = xs @ [x'] @ ys'\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>ls = (z#xs) @ [x] @ ys\\<close> \\<open>ls' = (z#xs) @ [x'] @ ys'\\<close>"], ["proof (prove)\nusing this:\n  zs = xs @ [x] @ ys\n  zs' = xs @ [x'] @ ys'\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. ls = (z # xs) @ [x] @ ys &&& ls' = (z # xs) @ [x'] @ ys'", "using lz zz"], ["proof (prove)\nusing this:\n  zs = xs @ [x] @ ys\n  zs' = xs @ [x'] @ ys'\n  x \\<noteq> x'\n  ls = z # zs\n  ls' = z' # zs'\n  z = z'\n\ngoal (1 subgoal):\n 1. ls = (z # xs) @ [x] @ ys &&& ls' = (z # xs) @ [x'] @ ys'", "by auto"], ["proof (state)\nthis:\n  ls = (z # xs) @ [x] @ ys\n  ls' = (z # xs) @ [x'] @ ys'\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  ls = (z # xs) @ [x] @ ys\n  ls' = (z # xs) @ [x'] @ ys'\n\ngoal (1 subgoal):\n 1. thesis", "using less(2) xx"], ["proof (prove)\nusing this:\n  ls = (z # xs) @ [x] @ ys\n  ls' = (z # xs) @ [x'] @ ys'\n  \\<lbrakk>ls = ?xs @ [?x] @ ?ys; ls' = ?xs @ [?x'] @ ?ys';\n   ?x \\<noteq> ?x'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>zs = ?xs2 @ [?x2] @ ?ys2; zs' = ?xs2 @ [?x'2] @ ?ys'2;\n   ?x2 \\<noteq> ?x'2\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "note * = this"], ["proof (state)\nthis:\n  \\<lbrakk>zs = ?xs2 @ [?x2] @ ?ys2; zs' = ?xs2 @ [?x'2] @ ?ys'2;\n   ?x2 \\<noteq> ?x'2\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  \\<lbrakk>zs = ?xs2 @ [?x2] @ ?ys2; zs' = ?xs2 @ [?x'2] @ ?ys'2;\n   ?x2 \\<noteq> ?x'2\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "assume \\<open>zs = zs' @ xs\\<close> and xs: \\<open>xs \\<noteq> []\\<close>"], ["proof (state)\nthis:\n  zs = zs' @ xs\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>ls = ls' @ xs\\<close>"], ["proof (prove)\nusing this:\n  zs = zs' @ xs\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls = ls' @ xs", "using lz zz"], ["proof (prove)\nusing this:\n  zs = zs' @ xs\n  xs \\<noteq> []\n  ls = z # zs\n  ls' = z' # zs'\n  z = z'\n\ngoal (1 subgoal):\n 1. ls = ls' @ xs", "by auto"], ["proof (state)\nthis:\n  ls = ls' @ xs\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  ls = ls' @ xs\n\ngoal (1 subgoal):\n 1. thesis", "using xs less(3)"], ["proof (prove)\nusing this:\n  ls = ls' @ xs\n  xs \\<noteq> []\n  \\<lbrakk>ls = ls' @ ?xs; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>zs = zs' @ ?xs2; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "note ** = this"], ["proof (state)\nthis:\n  \\<lbrakk>zs = zs' @ ?xs2; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  \\<lbrakk>zs = zs' @ ?xs2; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "assume \\<open>zs@xs = zs'\\<close> and xs: \\<open>xs \\<noteq> []\\<close>"], ["proof (state)\nthis:\n  zs @ xs = zs'\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>ls@xs = ls'\\<close>"], ["proof (prove)\nusing this:\n  zs @ xs = zs'\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. ls @ xs = ls'", "using lz zz"], ["proof (prove)\nusing this:\n  zs @ xs = zs'\n  xs \\<noteq> []\n  ls = z # zs\n  ls' = z' # zs'\n  z = z'\n\ngoal (1 subgoal):\n 1. ls @ xs = ls'", "by auto"], ["proof (state)\nthis:\n  ls @ xs = ls'\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "hence \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  ls @ xs = ls'\n\ngoal (1 subgoal):\n 1. thesis", "using xs less(4)"], ["proof (prove)\nusing this:\n  ls @ xs = ls'\n  xs \\<noteq> []\n  \\<lbrakk>ls @ ?xs = ls'; ?xs \\<noteq> []\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>zs @ ?xs2 = zs'; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "note *** = this"], ["proof (state)\nthis:\n  \\<lbrakk>zs @ ?xs2 = zs'; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "have \\<open>(\\<And>xs x ys x' ys'. zs = xs @ [x] @ ys \\<Longrightarrow> zs' = xs @ [x'] @ ys' \\<Longrightarrow> x \\<noteq> x' \\<Longrightarrow> thesis) \\<Longrightarrow> \n              (\\<And>xs. zs = zs' @ xs \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> thesis) \\<Longrightarrow> \n              (\\<And>xs. zs @ xs = zs' \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> thesis) \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x ys x' ys'.\n                \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n                 x \\<noteq> x'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using less(1)[OF lenz _ _ _ zsz zs zs' ]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xs x ys x' ys'.\n              \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n               x \\<noteq> x'\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs x ys x' ys'.\n                \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n                 x \\<noteq> x'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<And>xs.\n        \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "."], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>xs x ys x' ys'.\n              \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n               x \\<noteq> x'\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. zs' \\<noteq> [] \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xs x ys x' ys'.\n              \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n               x \\<noteq> x'\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using * ** ***"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xs x ys x' ys'.\n              \\<lbrakk>zs = xs @ [x] @ ys; zs' = xs @ [x'] @ ys';\n               x \\<noteq> x'\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs = zs' @ xs; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>xs.\n      \\<lbrakk>zs @ xs = zs'; xs \\<noteq> []\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>zs = ?xs2 @ [?x2] @ ?ys2; zs' = ?xs2 @ [?x'2] @ ?ys'2;\n   ?x2 \\<noteq> ?x'2\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>zs = zs' @ ?xs2; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>zs @ ?xs2 = zs'; ?xs2 \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. z \\<noteq> z' \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> z' \\<Longrightarrow> thesis", "assume \\<open>z \\<noteq> z'\\<close>"], ["proof (state)\nthis:\n  z \\<noteq> z'\n\ngoal (1 subgoal):\n 1. z \\<noteq> z' \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  z \\<noteq> z'\n\ngoal (1 subgoal):\n 1. z \\<noteq> z' \\<Longrightarrow> thesis", "have \\<open>ls = []@[z]@zs\\<close> \\<open>ls' = []@[z']@zs'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ls = [] @ [z] @ zs &&& ls' = [] @ [z'] @ zs'", "using lz"], ["proof (prove)\nusing this:\n  ls = z # zs\n  ls' = z' # zs'\n\ngoal (1 subgoal):\n 1. ls = [] @ [z] @ zs &&& ls' = [] @ [z'] @ zs'", "by auto"], ["proof (state)\nthis:\n  ls = [] @ [z] @ zs\n  ls' = [] @ [z'] @ zs'\n\ngoal (1 subgoal):\n 1. z \\<noteq> z' \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  z \\<noteq> z'\n  ls = [] @ [z] @ zs\n  ls' = [] @ [z'] @ zs'", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  z \\<noteq> z'\n  ls = [] @ [z] @ zs\n  ls' = [] @ [z'] @ zs'\n\ngoal (1 subgoal):\n 1. thesis", "using less(2)"], ["proof (prove)\nusing this:\n  z \\<noteq> z'\n  ls = [] @ [z] @ zs\n  ls' = [] @ [z'] @ zs'\n  \\<lbrakk>ls = ?xs @ [?x] @ ?ys; ls' = ?xs @ [?x'] @ ?ys';\n   ?x \\<noteq> ?x'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma three_cases: assumes \\<open>A \\<or> B \\<or> C\\<close> obtains \\<open>A\\<close> | \\<open>B\\<close> | \\<open>C\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<Longrightarrow> thesis; B \\<Longrightarrow> thesis;\n     C \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  A \\<or> B \\<or> C\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<Longrightarrow> thesis; B \\<Longrightarrow> thesis;\n     C \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["", "lemma insort_greater: \\<open>\\<forall> x \\<in> set ls. x < y \\<Longrightarrow> insort y ls = ls@[y]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ls. x < y \\<Longrightarrow> insort y ls = ls @ [y]", "by (induction \\<open>ls\\<close>,auto)"], ["", "lemma insort_append_first: assumes \\<open>\\<forall> y \\<in> set ys. x \\<le> y\\<close> shows \\<open>insort x (xs@ys) = insort x xs @ ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort x (xs @ ys) = insort x xs @ ys", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys. x \\<le> y\n\ngoal (1 subgoal):\n 1. insort x (xs @ ys) = insort x xs @ ys", "by (induction \\<open>xs\\<close>,auto,metis insort_is_Cons)"], ["", "lemma sorted_list_of_set_append: assumes \\<open>finite xs\\<close> \\<open>finite ys\\<close> \\<open>\\<forall> x \\<in> xs. \\<forall> y \\<in> ys. x < y\\<close> shows \\<open>sorted_list_of_set (xs \\<union> ys) = sorted_list_of_set xs @ (sorted_list_of_set ys)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (xs \\<union> ys) =\n    sorted_list_of_set xs @ sorted_list_of_set ys", "using assms(1,3)"], ["proof (prove)\nusing this:\n  finite xs\n  \\<forall>x\\<in>xs. \\<forall>y\\<in>ys. x < y\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (xs \\<union> ys) =\n    sorted_list_of_set xs @ sorted_list_of_set ys", "proof (induction \\<open>xs\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>{}. Ball ys ((<) x) \\<Longrightarrow>\n    sorted_list_of_set ({} \\<union> ys) =\n    sorted_list_of_set {} @ sorted_list_of_set ys\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "case empty"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{}. \\<forall>a\\<in>ys. x < a\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>{}. Ball ys ((<) x) \\<Longrightarrow>\n    sorted_list_of_set ({} \\<union> ys) =\n    sorted_list_of_set {} @ sorted_list_of_set ys\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{}. \\<forall>a\\<in>ys. x < a\n\ngoal (1 subgoal):\n 1. sorted_list_of_set ({} \\<union> ys) =\n    sorted_list_of_set {} @ sorted_list_of_set ys", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set ({} \\<union> ys) =\n  sorted_list_of_set {} @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "case (insert x xs)"], ["proof (state)\nthis:\n  finite xs\n  x \\<notin> xs\n  \\<forall>x\\<in>xs. \\<forall>a\\<in>ys. x < a \\<Longrightarrow>\n  sorted_list_of_set (xs \\<union> ys) =\n  sorted_list_of_set xs @ sorted_list_of_set ys\n  \\<forall>x\\<in>insert x xs. \\<forall>a\\<in>ys. x < a\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "hence iv: \\<open>sorted_list_of_set (xs \\<union> ys) = sorted_list_of_set xs @ sorted_list_of_set ys\\<close>"], ["proof (prove)\nusing this:\n  finite xs\n  x \\<notin> xs\n  \\<forall>x\\<in>xs. \\<forall>a\\<in>ys. x < a \\<Longrightarrow>\n  sorted_list_of_set (xs \\<union> ys) =\n  sorted_list_of_set xs @ sorted_list_of_set ys\n  \\<forall>x\\<in>insert x xs. \\<forall>a\\<in>ys. x < a\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (xs \\<union> ys) =\n    sorted_list_of_set xs @ sorted_list_of_set ys", "by blast"], ["proof (state)\nthis:\n  sorted_list_of_set (xs \\<union> ys) =\n  sorted_list_of_set xs @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have le: \\<open>\\<forall> y \\<in> set (sorted_list_of_set ys). x < y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (sorted_list_of_set ys). x < y", "using insert(4) assms(2) sorted_list_of_set"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>insert x xs. \\<forall>a\\<in>ys. x < a\n  finite ys\n  finite ?A \\<Longrightarrow> set (sorted_list_of_set ?A) = ?A\n  sorted (sorted_list_of_set ?A)\n  distinct (sorted_list_of_set ?A)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (sorted_list_of_set ys). x < y", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (sorted_list_of_set ys). x < y\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have \\<open>sorted_list_of_set (insert x xs \\<union> ys) = sorted_list_of_set (insert x (xs \\<union> ys))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (insert x xs \\<union> ys) =\n    sorted_list_of_set (insert x (xs \\<union> ys))", "by auto"], ["proof (state)\nthis:\n  sorted_list_of_set (insert x xs \\<union> ys) =\n  sorted_list_of_set (insert x (xs \\<union> ys))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "also"], ["proof (state)\nthis:\n  sorted_list_of_set (insert x xs \\<union> ys) =\n  sorted_list_of_set (insert x (xs \\<union> ys))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have \\<open>\\<dots> = insort x (sorted_list_of_set (xs \\<union> ys))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (insert x (xs \\<union> ys)) =\n    insort x (sorted_list_of_set (xs \\<union> ys))", "by (metis Un_iff assms(2) finite_Un insert.hyps(1) insert.hyps(2) insert.prems insertI1 less_irrefl sorted_list_of_set.insert)"], ["proof (state)\nthis:\n  sorted_list_of_set (insert x (xs \\<union> ys)) =\n  insort x (sorted_list_of_set (xs \\<union> ys))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "also"], ["proof (state)\nthis:\n  sorted_list_of_set (insert x (xs \\<union> ys)) =\n  insort x (sorted_list_of_set (xs \\<union> ys))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have \\<open>\\<dots> = insort x (sorted_list_of_set xs @ sorted_list_of_set ys)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort x (sorted_list_of_set (xs \\<union> ys)) =\n    insort x (sorted_list_of_set xs @ sorted_list_of_set ys)", "using iv"], ["proof (prove)\nusing this:\n  sorted_list_of_set (xs \\<union> ys) =\n  sorted_list_of_set xs @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. insort x (sorted_list_of_set (xs \\<union> ys)) =\n    insort x (sorted_list_of_set xs @ sorted_list_of_set ys)", "by simp"], ["proof (state)\nthis:\n  insort x (sorted_list_of_set (xs \\<union> ys)) =\n  insort x (sorted_list_of_set xs @ sorted_list_of_set ys)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "also"], ["proof (state)\nthis:\n  insort x (sorted_list_of_set (xs \\<union> ys)) =\n  insort x (sorted_list_of_set xs @ sorted_list_of_set ys)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have \\<open>\\<dots> = insort x (sorted_list_of_set xs) @ sorted_list_of_set ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort x (sorted_list_of_set xs @ sorted_list_of_set ys) =\n    insort x (sorted_list_of_set xs) @ sorted_list_of_set ys", "by (metis le insort_append_first less_le_not_le)"], ["proof (state)\nthis:\n  insort x (sorted_list_of_set xs @ sorted_list_of_set ys) =\n  insort x (sorted_list_of_set xs) @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "also"], ["proof (state)\nthis:\n  insort x (sorted_list_of_set xs @ sorted_list_of_set ys) =\n  insort x (sorted_list_of_set xs) @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "have \\<open>\\<dots> = sorted_list_of_set (insert x xs) @ sorted_list_of_set ys\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort x (sorted_list_of_set xs) @ sorted_list_of_set ys =\n    sorted_list_of_set (insert x xs) @ sorted_list_of_set ys", "using sorted_list_of_set_insert[OF insert(1),of \\<open>x\\<close>] insert(2)"], ["proof (prove)\nusing this:\n  sorted_list_of_set (insert x xs) =\n  insort x (sorted_list_of_set (xs - {x}))\n  x \\<notin> xs\n\ngoal (1 subgoal):\n 1. insort x (sorted_list_of_set xs) @ sorted_list_of_set ys =\n    sorted_list_of_set (insert x xs) @ sorted_list_of_set ys", "by auto"], ["proof (state)\nthis:\n  insort x (sorted_list_of_set xs) @ sorted_list_of_set ys =\n  sorted_list_of_set (insert x xs) @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>x\\<in>F. Ball ys ((<) x) \\<Longrightarrow>\n        sorted_list_of_set (F \\<union> ys) =\n        sorted_list_of_set F @ sorted_list_of_set ys;\n        \\<forall>x\\<in>insert x F. Ball ys ((<) x)\\<rbrakk>\n       \\<Longrightarrow> sorted_list_of_set (insert x F \\<union> ys) =\n                         sorted_list_of_set (insert x F) @\n                         sorted_list_of_set ys", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set (insert x xs \\<union> ys) =\n  sorted_list_of_set (insert x xs) @ sorted_list_of_set ys", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  sorted_list_of_set (insert x xs \\<union> ys) =\n  sorted_list_of_set (insert x xs) @ sorted_list_of_set ys\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (insert x xs \\<union> ys) =\n    sorted_list_of_set (insert x xs) @ sorted_list_of_set ys", "."], ["proof (state)\nthis:\n  sorted_list_of_set (insert x xs \\<union> ys) =\n  sorted_list_of_set (insert x xs) @ sorted_list_of_set ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filter_insort: \\<open>sorted xs \\<Longrightarrow> filter P (insort x xs) = (if P x then insort x (filter P xs) else filter P xs)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted xs \\<Longrightarrow>\n    filter P (insort x xs) =\n    (if P x then insort x (filter P xs) else filter P xs)", "by (induction \\<open>xs\\<close>, simp) (metis filter_insort filter_insort_triv map_ident)"], ["", "lemma filter_sorted_list_of_set: assumes \\<open>finite xs\\<close> shows \\<open>filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}", "using assms"], ["proof (prove)\nusing this:\n  finite xs\n\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}", "proof(induction \\<open>xs\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. filter P (sorted_list_of_set {}) = sorted_list_of_set {x \\<in> {}. P x}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. filter P (sorted_list_of_set {}) = sorted_list_of_set {x \\<in> {}. P x}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "thus \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set {}) = sorted_list_of_set {x \\<in> {}. P x}", "by simp"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set {}) = sorted_list_of_set {x \\<in> {}. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "case (insert x xs)"], ["proof (state)\nthis:\n  finite xs\n  x \\<notin> xs\n  filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "have *: \\<open>set (sorted_list_of_set xs) = xs\\<close> \\<open>sorted (sorted_list_of_set xs)\\<close> \\<open>distinct (sorted_list_of_set xs)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sorted_list_of_set xs) = xs &&&\n    sorted (sorted_list_of_set xs) &&& distinct (sorted_list_of_set xs)", "by (auto simp add: insert.hyps(1))"], ["proof (state)\nthis:\n  set (sorted_list_of_set xs) = xs\n  sorted (sorted_list_of_set xs)\n  distinct (sorted_list_of_set xs)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "have **: \\<open>P x \\<Longrightarrow> {y \\<in> insert x xs. P y} = insert x {y \\<in> xs. P y}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<Longrightarrow>\n    {y \\<in> insert x xs. P y} = insert x {y \\<in> xs. P y}", "by auto"], ["proof (state)\nthis:\n  P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = insert x {y \\<in> xs. P y}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "have ***: \\<open>\\<not> P x \\<Longrightarrow> {y \\<in> insert x xs. P y} = {y \\<in> xs. P y}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> P x \\<Longrightarrow>\n    {y \\<in> insert x xs. P y} = {y \\<in> xs. P y}", "by auto"], ["proof (state)\nthis:\n  \\<not> P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = {y \\<in> xs. P y}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "note filter_insort[OF *(2),of \\<open>P\\<close> \\<open>x\\<close>] sorted_list_of_set_insert[OF insert(1), of \\<open>x\\<close>] insert(2,3) ** ***"], ["proof (state)\nthis:\n  filter P (insort x (sorted_list_of_set xs)) =\n  (if P x then insort x (filter P (sorted_list_of_set xs))\n   else filter P (sorted_list_of_set xs))\n  sorted_list_of_set (insert x xs) =\n  insort x (sorted_list_of_set (xs - {x}))\n  x \\<notin> xs\n  filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}\n  P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = insert x {y \\<in> xs. P y}\n  \\<not> P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = {y \\<in> xs. P y}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        filter P (sorted_list_of_set F) =\n        sorted_list_of_set {x \\<in> F. P x}\\<rbrakk>\n       \\<Longrightarrow> filter P (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set {xa \\<in> insert x F. P xa}", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  filter P (insort x (sorted_list_of_set xs)) =\n  (if P x then insort x (filter P (sorted_list_of_set xs))\n   else filter P (sorted_list_of_set xs))\n  sorted_list_of_set (insert x xs) =\n  insort x (sorted_list_of_set (xs - {x}))\n  x \\<notin> xs\n  filter P (sorted_list_of_set xs) = sorted_list_of_set {x \\<in> xs. P x}\n  P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = insert x {y \\<in> xs. P y}\n  \\<not> P x \\<Longrightarrow>\n  {y \\<in> insert x xs. P y} = {y \\<in> xs. P y}\n\ngoal (1 subgoal):\n 1. filter P (sorted_list_of_set (insert x xs)) =\n    sorted_list_of_set {xa \\<in> insert x xs. P xa}", "by (metis (mono_tags) \"*\"(1) List.finite_set distinct_filter distinct_insort distinct_sorted_list_of_set set_filter sorted_list_of_set.insert)"], ["proof (state)\nthis:\n  filter P (sorted_list_of_set (insert x xs)) =\n  sorted_list_of_set {xa \\<in> insert x xs. P xa}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unbounded_nat_set_infinite: assumes \\<open>\\<forall> (i::nat). \\<exists> j\\<ge>i. j \\<in> A\\<close> shows \\<open>\\<not> finite A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite A", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<exists>j\\<ge>i. j \\<in> A\n\ngoal (1 subgoal):\n 1. infinite A", "by (metis finite_nat_set_iff_bounded_le not_less_eq_eq)"], ["", "lemma infinite_ascending: assumes nf: \\<open>\\<not> finite (A::nat set)\\<close> obtains f where \\<open>range f = A\\<close> \\<open>\\<forall> i. f i < f (Suc i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "let \\<open>?f\\<close> = \\<open>\\<lambda> i. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "obtain a where \\<open>a \\<in> A\\<close> \\<open>card (A \\<inter> {..<a}) = i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \\<open>i\\<close> arbitrary: \\<open>thesis\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case 0"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> A; card (A \\<inter> {..<?a}) = 0\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "let \\<open>?a0\\<close> = \\<open>(LEAST a. a \\<in> A)\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>?a0 \\<in> A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A) \\<in> A", "by (metis LeastI empty_iff finite.emptyI nf set_eq_iff)"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A) \\<in> A\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>\\<And>b. b \\<in> A \\<Longrightarrow> ?a0 \\<le> b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> A \\<Longrightarrow> (LEAST a. a \\<in> A) \\<le> b", "by (metis Least_le)"], ["proof (state)\nthis:\n  ?b \\<in> A \\<Longrightarrow> (LEAST a. a \\<in> A) \\<le> ?b\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \\<open>card (A \\<inter> {..<?a}) = 0\\<close>"], ["proof (prove)\nusing this:\n  ?b \\<in> A \\<Longrightarrow> (LEAST a. a \\<in> A) \\<le> ?b\n\ngoal (1 subgoal):\n 1. card (A \\<inter> {..<LEAST a. a \\<in> A}) = 0", "by force"], ["proof (state)\nthis:\n  card (A \\<inter> {..<LEAST a. a \\<in> A}) = 0\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = 0\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST a. a \\<in> A) \\<in> A\n  card (A \\<inter> {..<LEAST a. a \\<in> A}) = 0", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (LEAST a. a \\<in> A) \\<in> A\n  card (A \\<inter> {..<LEAST a. a \\<in> A}) = 0\n\ngoal (1 subgoal):\n 1. thesis", "using 0"], ["proof (prove)\nusing this:\n  (LEAST a. a \\<in> A) \\<in> A\n  card (A \\<inter> {..<LEAST a. a \\<in> A}) = 0\n  \\<lbrakk>?a \\<in> A; card (A \\<inter> {..<?a}) = 0\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Suc i)"], ["proof (state)\nthis:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?a \\<in> A; card (A \\<inter> {..<?a}) = Suc i\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "obtain a where aa: \\<open>a \\<in> A\\<close> and card: \\<open>card (A \\<inter> {..<a}) = i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.IH"], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  a \\<in> A\n  card (A \\<inter> {..<a}) = i\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have nf': \\<open>~ finite (A - {..a})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (A - {..a})", "using nf"], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite (A - {..a})", "by auto"], ["proof (state)\nthis:\n  infinite (A - {..a})\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "let \\<open>?b\\<close> = \\<open>LEAST b. b \\<in> A - {..a}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have bin: \\<open>?b \\<in> A-{..a}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST b. b \\<in> A - {..a}) \\<in> A - {..a}", "by (metis LeastI empty_iff finite.emptyI nf' set_eq_iff)"], ["proof (state)\nthis:\n  (LEAST b. b \\<in> A - {..a}) \\<in> A - {..a}\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have le: \\<open>\\<And>c. c \\<in> A-{..a} \\<Longrightarrow> ?b \\<le> c\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       c \\<in> A - {..a} \\<Longrightarrow>\n       (LEAST b. b \\<in> A - {..a}) \\<le> c", "by (metis Least_le)"], ["proof (state)\nthis:\n  ?c \\<in> A - {..a} \\<Longrightarrow> (LEAST b. b \\<in> A - {..a}) \\<le> ?c\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have ab: \\<open>a < ?b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < (LEAST b. b \\<in> A - {..a})", "using bin"], ["proof (prove)\nusing this:\n  (LEAST b. b \\<in> A - {..a}) \\<in> A - {..a}\n\ngoal (1 subgoal):\n 1. a < (LEAST b. b \\<in> A - {..a})", "by auto"], ["proof (state)\nthis:\n  a < (LEAST b. b \\<in> A - {..a})\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>\\<And> c. c \\<in> A \\<Longrightarrow> c < ?b \\<Longrightarrow> c \\<le> a\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> A; c < (LEAST b. b \\<in> A - {..a})\\<rbrakk>\n       \\<Longrightarrow> c \\<le> a", "using le"], ["proof (prove)\nusing this:\n  ?c \\<in> A - {..a} \\<Longrightarrow> (LEAST b. b \\<in> A - {..a}) \\<le> ?c\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c \\<in> A; c < (LEAST b. b \\<in> A - {..a})\\<rbrakk>\n       \\<Longrightarrow> c \\<le> a", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>?c \\<in> A; ?c < (LEAST b. b \\<in> A - {..a})\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> a\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \\<open>A \\<inter> {..<?b} = insert a (A \\<inter> {..<a})\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<in> A; ?c < (LEAST b. b \\<in> A - {..a})\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> a\n\ngoal (1 subgoal):\n 1. A \\<inter> {..<LEAST b. b \\<in> A - {..a}} =\n    insert a (A \\<inter> {..<a})", "using bin ab aa"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<in> A; ?c < (LEAST b. b \\<in> A - {..a})\\<rbrakk>\n  \\<Longrightarrow> ?c \\<le> a\n  (LEAST b. b \\<in> A - {..a}) \\<in> A - {..a}\n  a < (LEAST b. b \\<in> A - {..a})\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. A \\<inter> {..<LEAST b. b \\<in> A - {..a}} =\n    insert a (A \\<inter> {..<a})", "by force"], ["proof (state)\nthis:\n  A \\<inter> {..<LEAST b. b \\<in> A - {..a}} = insert a (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \\<open>card (A \\<inter>{..<?b}) = Suc i\\<close>"], ["proof (prove)\nusing this:\n  A \\<inter> {..<LEAST b. b \\<in> A - {..a}} = insert a (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. card (A \\<inter> {..<LEAST b. b \\<in> A - {..a}}) = Suc i", "using card"], ["proof (prove)\nusing this:\n  A \\<inter> {..<LEAST b. b \\<in> A - {..a}} = insert a (A \\<inter> {..<a})\n  card (A \\<inter> {..<a}) = i\n\ngoal (1 subgoal):\n 1. card (A \\<inter> {..<LEAST b. b \\<in> A - {..a}}) = Suc i", "by auto"], ["proof (state)\nthis:\n  card (A \\<inter> {..<LEAST b. b \\<in> A - {..a}}) = Suc i\n\ngoal (1 subgoal):\n 1. \\<And>i thesis.\n       \\<lbrakk>\\<And>thesis.\n                   (\\<And>a.\n                       \\<lbrakk>a \\<in> A;\n                        card (A \\<inter> {..<a}) = i\\<rbrakk>\n                       \\<Longrightarrow> thesis) \\<Longrightarrow>\n                   thesis;\n        \\<And>a.\n           \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = Suc i\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  card (A \\<inter> {..<LEAST b. b \\<in> A - {..a}}) = Suc i\n\ngoal (1 subgoal):\n 1. thesis", "using Suc.prems bin"], ["proof (prove)\nusing this:\n  card (A \\<inter> {..<LEAST b. b \\<in> A - {..a}}) = Suc i\n  \\<lbrakk>?a \\<in> A; card (A \\<inter> {..<?a}) = Suc i\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (LEAST b. b \\<in> A - {..a}) \\<in> A - {..a}\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> A\n  card (A \\<inter> {..<a}) = i\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "note \\<open>\\<And> thesis. ((\\<And>a. a \\<in> A \\<Longrightarrow> card (A \\<inter> {..<a}) = i \\<Longrightarrow> thesis) \\<Longrightarrow> thesis)\\<close>"], ["proof (state)\nthis:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = i\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "}"], ["proof (state)\nthis:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "note ex = this"], ["proof (state)\nthis:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "{"], ["proof (state)\nthis:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "obtain a where a: \\<open>a \\<in> A \\<and> card (A \\<inter>{..<a}) = i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> A \\<and> card (A \\<inter> {..<a}) = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex"], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> A \\<and> card (A \\<inter> {..<a}) = i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> A \\<and> card (A \\<inter> {..<a}) = i\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "have ina: \\<open>?f i \\<in> A\\<close> and card: \\<open>card (A \\<inter>{..<?f i}) = i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}) =\n    i", "using LeastI[of \\<open>\\<lambda> a. a \\<in> A \\<and> card (A \\<inter>{..<a}) = i\\<close> \\<open>a\\<close>, OF a]"], ["proof (prove)\nusing this:\n  (LEAST x. x \\<in> A \\<and> card (A \\<inter> {..<x}) = i) \\<in> A \\<and>\n  card\n   (A \\<inter>\n    {..<LEAST x. x \\<in> A \\<and> card (A \\<inter> {..<x}) = i}) =\n  i\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}) =\n    i", "by auto"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) \\<in> A\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}) =\n  i\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "obtain b where b: \\<open>b \\<in> A \\<and> card (A \\<inter>{..<b}) = Suc i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        b \\<in> A \\<and> card (A \\<inter> {..<b}) = Suc i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex"], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        b \\<in> A \\<and> card (A \\<inter> {..<b}) = Suc i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> A \\<and> card (A \\<inter> {..<b}) = Suc i\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "have inab: \\<open>?f (Suc i) \\<in> A\\<close> and cardb: \\<open>card (A \\<inter>{..<?f (Suc i)}) = Suc i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i) \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}) =\n    Suc i", "using LeastI[of \\<open>\\<lambda> a. a \\<in> A \\<and> card (A \\<inter>{..<a}) = Suc i\\<close> \\<open>b\\<close>, OF b]"], ["proof (prove)\nusing this:\n  (LEAST x. x \\<in> A \\<and> card (A \\<inter> {..<x}) = Suc i)\n  \\<in> A \\<and>\n  card\n   (A \\<inter>\n    {..<LEAST x. x \\<in> A \\<and> card (A \\<inter> {..<x}) = Suc i}) =\n  Suc i\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i) \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}) =\n    Suc i", "by auto"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i) \\<in> A\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}) =\n  Suc i\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "have \\<open>?f i < ?f (Suc i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n    < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "assume \\<open>\\<not> ?f i < ?f (Suc i)\\<close>"], ["proof (state)\nthis:\n  \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n         < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "hence \\<open>A \\<inter>{..<?f (Suc i)} \\<subseteq> A \\<inter>{..<?f i}\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n         < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)\n\ngoal (1 subgoal):\n 1. A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}\n    \\<subseteq> A \\<inter>\n                {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}", "by auto"], ["proof (state)\nthis:\n  A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}\n  \\<subseteq> A \\<inter>\n              {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}\n\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}\n  \\<subseteq> A \\<inter>\n              {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}\n\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "have \\<open>finite (A \\<inter>{..<?f i})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})", "by auto"], ["proof (state)\nthis:\n  finite\n   (A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})\n\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}\n  \\<subseteq> A \\<inter>\n              {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}\n  finite\n   (A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})", "have \\<open>card(A \\<inter>{..<?f (Suc i)}) \\<le> card (A \\<inter>{..<?f i})\\<close>"], ["proof (prove)\nusing this:\n  A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}\n  \\<subseteq> A \\<inter>\n              {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}\n  finite\n   (A \\<inter> {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})\n\ngoal (1 subgoal):\n 1. card\n     (A \\<inter>\n      {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i})\n    \\<le> card\n           (A \\<inter>\n            {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})", "by (metis (erased, lifting) card_mono)"], ["proof (state)\nthis:\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i})\n  \\<le> card\n         (A \\<inter>\n          {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})\n\ngoal (1 subgoal):\n 1. \\<not> (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n           < (LEAST a.\n                 a \\<in> A \\<and>\n                 card (A \\<inter> {..<a}) = Suc i) \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i})\n  \\<le> card\n         (A \\<inter>\n          {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})\n\ngoal (1 subgoal):\n 1. False", "using card cardb"], ["proof (prove)\nusing this:\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i})\n  \\<le> card\n         (A \\<inter>\n          {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i})\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i}) =\n  i\n  card\n   (A \\<inter>\n    {..<LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i}) =\n  Suc i\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "note this ina"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) \\<in> A\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "}"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc ?i2)\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2) \\<in> A\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "note b = this"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc ?i2)\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2) \\<in> A\n\ngoal (2 subgoals):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range ?f2 = A\n 2. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    \\<forall>i. ?f2 i < ?f2 (Suc i)", "thus \\<open>\\<forall> i. ?f i < ?f (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc ?i2)\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n       < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n     < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "have *: \\<open>range ?f \\<subseteq> A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n    \\<subseteq> A", "using b"], ["proof (prove)\nusing this:\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2)\n  < (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = Suc ?i2)\n  (LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = ?i2) \\<in> A\n\ngoal (1 subgoal):\n 1. range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n    \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  range (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "moreover"], ["proof (state)\nthis:\n  range (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "{"], ["proof (state)\nthis:\n  range (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "assume ina: \\<open>a \\<in> A\\<close>"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "let \\<open>?i\\<close> = \\<open>card (A \\<inter> {..<a})\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "obtain b where b: \\<open>b \\<in> A \\<and> card (A \\<inter>{..<b}) = ?i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        b \\<in> A \\<and>\n        card (A \\<inter> {..<b}) =\n        card (A \\<inter> {..<a}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex"], ["proof (prove)\nusing this:\n  (\\<And>a.\n      \\<lbrakk>a \\<in> A; card (A \\<inter> {..<a}) = ?i8\\<rbrakk>\n      \\<Longrightarrow> ?thesisb5) \\<Longrightarrow>\n  ?thesisb5\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        b \\<in> A \\<and>\n        card (A \\<inter> {..<b}) =\n        card (A \\<inter> {..<a}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> A \\<and> card (A \\<inter> {..<b}) = card (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "have inab: \\<open>?f ?i \\<in> A\\<close> and cardb: \\<open>card (A \\<inter>{..<?f ?i}) = ?i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST aa.\n             aa \\<in> A \\<and>\n             card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}) =\n    card (A \\<inter> {..<a})", "using LeastI[of \\<open>\\<lambda> a. a \\<in> A \\<and> card (A \\<inter>{..<a}) = ?i\\<close> \\<open>b\\<close>, OF b]"], ["proof (prove)\nusing this:\n  (LEAST x.\n      x \\<in> A \\<and> card (A \\<inter> {..<x}) = card (A \\<inter> {..<a}))\n  \\<in> A \\<and>\n  card\n   (A \\<inter>\n    {..<LEAST x.\n           x \\<in> A \\<and>\n           card (A \\<inter> {..<x}) = card (A \\<inter> {..<a})}) =\n  card (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<in> A &&&\n    card\n     (A \\<inter>\n      {..<LEAST aa.\n             aa \\<in> A \\<and>\n             card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}) =\n    card (A \\<inter> {..<a})", "by auto"], ["proof (state)\nthis:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A\n  card\n   (A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}) =\n  card (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "have le: \\<open>?f ?i \\<le> a\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<le> a", "using Least_le[of \\<open>\\<lambda> a. a \\<in> A \\<and> card (A \\<inter>{..<a}) = ?i\\<close> \\<open>a\\<close>] ina"], ["proof (prove)\nusing this:\n  a \\<in> A \\<and>\n  card (A \\<inter> {..<a}) = card (A \\<inter> {..<a}) \\<Longrightarrow>\n  (LEAST x.\n      x \\<in> A \\<and> card (A \\<inter> {..<x}) = card (A \\<inter> {..<a}))\n  \\<le> a\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<le> a", "by auto"], ["proof (state)\nthis:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<le> a\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "have \\<open>a = ?f ?i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. a =\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "have fin: \\<open>finite (A \\<inter> {..<a})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (A \\<inter> {..<a})", "by auto"], ["proof (state)\nthis:\n  finite (A \\<inter> {..<a})\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "assume \\<open>a \\<noteq> ?f ?i\\<close>"], ["proof (state)\nthis:\n  a \\<noteq>\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "hence \\<open>?f ?i < a\\<close>"], ["proof (prove)\nusing this:\n  a \\<noteq>\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    < a", "using le"], ["proof (prove)\nusing this:\n  a \\<noteq>\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<le> a\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    < a", "by simp"], ["proof (state)\nthis:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  < a\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "hence \\<open>?f ?i \\<in> A \\<inter> {..<a}\\<close>"], ["proof (prove)\nusing this:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  < a\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<in> A \\<inter> {..<a}", "using inab"], ["proof (prove)\nusing this:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  < a\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A\n\ngoal (1 subgoal):\n 1. (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n    \\<in> A \\<inter> {..<a}", "by auto"], ["proof (state)\nthis:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "have \\<open>A \\<inter> {..<?f ?i} \\<subseteq> A \\<inter> {..<a}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}\n    \\<subseteq> A \\<inter> {..<a}", "using le"], ["proof (prove)\nusing this:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<le> a\n\ngoal (1 subgoal):\n 1. A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}\n    \\<subseteq> A \\<inter> {..<a}", "by auto"], ["proof (state)\nthis:\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}\n  \\<subseteq> A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "hence \\<open>A \\<inter> {..<?f ?i} = A \\<inter> {..<a}\\<close>"], ["proof (prove)\nusing this:\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}\n  \\<subseteq> A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})} =\n    A \\<inter> {..<a}", "using cardb card_subset_eq[OF fin]"], ["proof (prove)\nusing this:\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}\n  \\<subseteq> A \\<inter> {..<a}\n  card\n   (A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})}) =\n  card (A \\<inter> {..<a})\n  \\<lbrakk>?A \\<subseteq> A \\<inter> {..<a};\n   card ?A = card (A \\<inter> {..<a})\\<rbrakk>\n  \\<Longrightarrow> ?A = A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. A \\<inter>\n    {..<LEAST aa.\n           aa \\<in> A \\<and>\n           card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})} =\n    A \\<inter> {..<a}", "by auto"], ["proof (state)\nthis:\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})} =\n  A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. a \\<noteq>\n    (LEAST aa.\n        aa \\<in> A \\<and>\n        card (A \\<inter> {..<aa}) =\n        card (A \\<inter> {..<a})) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A \\<inter> {..<a}\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})} =\n  A \\<inter> {..<a}", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n  \\<in> A \\<inter> {..<a}\n  A \\<inter>\n  {..<LEAST aa.\n         aa \\<in> A \\<and>\n         card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a})} =\n  A \\<inter> {..<a}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a =\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "hence \\<open>a \\<in> range ?f\\<close>"], ["proof (prove)\nusing this:\n  a =\n  (LEAST aa.\n      aa \\<in> A \\<and>\n      card (A \\<inter> {..<aa}) = card (A \\<inter> {..<a}))\n\ngoal (1 subgoal):\n 1. a \\<in> range\n             (\\<lambda>i.\n                 LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)", "by auto"], ["proof (state)\nthis:\n  a \\<in> range\n           (\\<lambda>i.\n               LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow>\n  ?a2\n  \\<in> range\n         (\\<lambda>i.\n             LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "hence \\<open>A \\<subseteq> range ?f\\<close>"], ["proof (prove)\nusing this:\n  ?a2 \\<in> A \\<Longrightarrow>\n  ?a2\n  \\<in> range\n         (\\<lambda>i.\n             LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n\ngoal (1 subgoal):\n 1. A \\<subseteq> range\n                   (\\<lambda>i.\n                       LEAST a.\n                          a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)", "by auto"], ["proof (state)\nthis:\n  A \\<subseteq> range\n                 (\\<lambda>i.\n                     LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f = A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "ultimately"], ["proof (chain)\npicking this:\n  range (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  \\<subseteq> A\n  A \\<subseteq> range\n                 (\\<lambda>i.\n                     LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)", "show \\<open>range ?f = A\\<close>"], ["proof (prove)\nusing this:\n  range (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n  \\<subseteq> A\n  A \\<subseteq> range\n                 (\\<lambda>i.\n                     LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i)\n\ngoal (1 subgoal):\n 1. range\n     (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n    A", "by auto"], ["proof (state)\nthis:\n  range\n   (\\<lambda>i. LEAST a. a \\<in> A \\<and> card (A \\<inter> {..<a}) = i) =\n  A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mono_ge_id: \\<open>\\<forall> i. f i < f (Suc i) \\<Longrightarrow> i \\<le> f i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. f i < f (Suc i) \\<Longrightarrow> i \\<le> f i", "apply (induction \\<open>i\\<close>,auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<le> f i; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> Suc i \\<le> f (Suc i)", "by (metis not_le not_less_eq_eq order_trans)"], ["", "lemma insort_map_mono: assumes mono: \\<open>\\<forall> n m. n < m \\<longrightarrow> f n < f m\\<close> shows \\<open>map f (insort n ns) = insort (f n) (map f ns)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (insort n ns) = insort (f n) (map f ns)", "apply (induction \\<open>ns\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map f (insort n []) = insort (f n) (map f [])\n 2. \\<And>a ns.\n       map f (insort n ns) = insort (f n) (map f ns) \\<Longrightarrow>\n       map f (insort n (a # ns)) = insort (f n) (map f (a # ns))", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns); n \\<le> a;\n        \\<not> f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f n = f a\n 2. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns); n \\<le> a;\n        \\<not> f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f a # map f ns = insort (f n) (map f ns)\n 3. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f a = f n\n 4. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> insort (f n) (map f ns) = f a # map f ns", "apply (metis not_less not_less_iff_gr_or_eq mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns); n \\<le> a;\n        \\<not> f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f a # map f ns = insort (f n) (map f ns)\n 2. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f a = f n\n 3. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> insort (f n) (map f ns) = f a # map f ns", "apply (metis antisym_conv1 less_imp_le mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> f a = f n\n 2. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> insort (f n) (map f ns) = f a # map f ns", "apply (metis mono not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>map f (insort n ns) = insort (f n) (map f ns);\n        \\<not> n \\<le> a; f n \\<le> f a\\<rbrakk>\n       \\<Longrightarrow> insort (f n) (map f ns) = f a # map f ns", "by (metis mono not_less)"], ["", "lemma sorted_list_of_set_map_mono: assumes mono: \\<open>\\<forall> n m. n < m \\<longrightarrow> f n < f m\\<close> and fin: \\<open>finite A\\<close>\nshows \\<open>map f (sorted_list_of_set A) = sorted_list_of_set (f`A)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (sorted_list_of_set A) = sorted_list_of_set (f ` A)", "using fin"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. map f (sorted_list_of_set A) = sorted_list_of_set (f ` A)", "proof (induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. map f (sorted_list_of_set {}) = sorted_list_of_set (f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. map f (sorted_list_of_set {}) = sorted_list_of_set (f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "thus \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (sorted_list_of_set {}) = sorted_list_of_set (f ` {})", "by simp"], ["proof (state)\nthis:\n  map f (sorted_list_of_set {}) = sorted_list_of_set (f ` {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  map f (sorted_list_of_set A) = sorted_list_of_set (f ` A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "have [simp]:\\<open>sorted_list_of_set (insert x A) = insort x (sorted_list_of_set A)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (insert x A) = insort x (sorted_list_of_set A)", "using insert sorted_list_of_set.insert"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  map f (sorted_list_of_set A) = sorted_list_of_set (f ` A)\n  \\<lbrakk>finite ?A; ?x \\<notin> ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (insert ?x ?A) =\n                    insort ?x (sorted_list_of_set ?A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (insert x A) = insort x (sorted_list_of_set A)", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set (insert x A) = insort x (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "have \\<open>f ` insert x A = insert (f x) (f ` A)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` insert x A = insert (f x) (f ` A)", "by auto"], ["proof (state)\nthis:\n  f ` insert x A = insert (f x) (f ` A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "moreover"], ["proof (state)\nthis:\n  f ` insert x A = insert (f x) (f ` A)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "have \\<open>f x \\<notin> f`A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<notin> f ` A", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f x \\<notin> f ` A \\<Longrightarrow> False", "using insert(2) mono"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  \\<forall>n m. n < m \\<longrightarrow> f n < f m\n\ngoal (1 subgoal):\n 1. \\<not> f x \\<notin> f ` A \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> A;\n        \\<forall>n m. n < m \\<longrightarrow> f n < f m; f x = f xa;\n        xa \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis insert.hyps(2) mono neq_iff)"], ["proof (state)\nthis:\n  f x \\<notin> f ` A\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "ultimately"], ["proof (chain)\npicking this:\n  f ` insert x A = insert (f x) (f ` A)\n  f x \\<notin> f ` A", "have \\<open>sorted_list_of_set (f ` insert x A) = insort (f x) (sorted_list_of_set (f`A))\\<close>"], ["proof (prove)\nusing this:\n  f ` insert x A = insert (f x) (f ` A)\n  f x \\<notin> f ` A\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (f ` insert x A) =\n    insort (f x) (sorted_list_of_set (f ` A))", "using insert(1) sorted_list_of_set.insert"], ["proof (prove)\nusing this:\n  f ` insert x A = insert (f x) (f ` A)\n  f x \\<notin> f ` A\n  finite A\n  \\<lbrakk>finite ?A; ?x \\<notin> ?A\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set (insert ?x ?A) =\n                    insort ?x (sorted_list_of_set ?A)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (f ` insert x A) =\n    insort (f x) (sorted_list_of_set (f ` A))", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set (f ` insert x A) =\n  insort (f x) (sorted_list_of_set (f ` A))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "also"], ["proof (state)\nthis:\n  sorted_list_of_set (f ` insert x A) =\n  insort (f x) (sorted_list_of_set (f ` A))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "have \\<open>\\<dots> = insort (f x) (map f (sorted_list_of_set A))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort (f x) (sorted_list_of_set (f ` A)) =\n    insort (f x) (map f (sorted_list_of_set A))", "using insert.IH"], ["proof (prove)\nusing this:\n  map f (sorted_list_of_set A) = sorted_list_of_set (f ` A)\n\ngoal (1 subgoal):\n 1. insort (f x) (sorted_list_of_set (f ` A)) =\n    insort (f x) (map f (sorted_list_of_set A))", "by auto"], ["proof (state)\nthis:\n  insort (f x) (sorted_list_of_set (f ` A)) =\n  insort (f x) (map f (sorted_list_of_set A))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "also"], ["proof (state)\nthis:\n  insort (f x) (sorted_list_of_set (f ` A)) =\n  insort (f x) (map f (sorted_list_of_set A))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "have \\<open>\\<dots> = map f (insort x (sorted_list_of_set A))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. insort (f x) (map f (sorted_list_of_set A)) =\n    map f (insort x (sorted_list_of_set A))", "using insort_map_mono[OF mono]"], ["proof (prove)\nusing this:\n  map f (insort ?n ?ns) = insort (f ?n) (map f ?ns)\n\ngoal (1 subgoal):\n 1. insort (f x) (map f (sorted_list_of_set A)) =\n    map f (insort x (sorted_list_of_set A))", "by auto"], ["proof (state)\nthis:\n  insort (f x) (map f (sorted_list_of_set A)) =\n  map f (insort x (sorted_list_of_set A))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        map f (sorted_list_of_set F) = sorted_list_of_set (f ` F)\\<rbrakk>\n       \\<Longrightarrow> map f (sorted_list_of_set (insert x F)) =\n                         sorted_list_of_set (f ` insert x F)", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_set (f ` insert x A) =\n  map f (insort x (sorted_list_of_set A))", "show \\<open>map f (sorted_list_of_set (insert x A)) = sorted_list_of_set (f ` insert x A)\\<close>"], ["proof (prove)\nusing this:\n  sorted_list_of_set (f ` insert x A) =\n  map f (insort x (sorted_list_of_set A))\n\ngoal (1 subgoal):\n 1. map f (sorted_list_of_set (insert x A)) =\n    sorted_list_of_set (f ` insert x A)", "by simp"], ["proof (state)\nthis:\n  map f (sorted_list_of_set (insert x A)) =\n  sorted_list_of_set (f ` insert x A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreatestIB:\nfixes n :: \\<open>nat\\<close> and P\nassumes a:\\<open>\\<exists>k\\<le>n. P k\\<close>\nshows GreatestBI: \\<open>P (GREATEST k. k\\<le>n \\<and> P k)\\<close> and GreatestB: \\<open>(GREATEST k. k\\<le>n \\<and> P k) \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (GREATEST k. k \\<le> n \\<and> P k) &&&\n    (GREATEST k. k \\<le> n \\<and> P k) \\<le> n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. P (GREATEST k. k \\<le> n \\<and> P k)\n 2. (GREATEST k. k \\<le> n \\<and> P k) \\<le> n", "show \\<open>P (GREATEST k. k\\<le>n \\<and> P k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (GREATEST k. k \\<le> n \\<and> P k)", "using GreatestI_ex_nat[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      y \\<le> n \\<and> P y \\<Longrightarrow> y \\<le> ?b) \\<Longrightarrow>\n  (GREATEST k. k \\<le> n \\<and> P k) \\<le> n \\<and>\n  P (GREATEST k. k \\<le> n \\<and> P k)\n\ngoal (1 subgoal):\n 1. P (GREATEST k. k \\<le> n \\<and> P k)", "by auto"], ["proof (state)\nthis:\n  P (GREATEST k. k \\<le> n \\<and> P k)\n\ngoal (1 subgoal):\n 1. (GREATEST k. k \\<le> n \\<and> P k) \\<le> n", "show \\<open>(GREATEST k. k\\<le>n \\<and> P k) \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST k. k \\<le> n \\<and> P k) \\<le> n", "using GreatestI_ex_nat[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      y \\<le> n \\<and> P y \\<Longrightarrow> y \\<le> ?b) \\<Longrightarrow>\n  (GREATEST k. k \\<le> n \\<and> P k) \\<le> n \\<and>\n  P (GREATEST k. k \\<le> n \\<and> P k)\n\ngoal (1 subgoal):\n 1. (GREATEST k. k \\<le> n \\<and> P k) \\<le> n", "by auto"], ["proof (state)\nthis:\n  (GREATEST k. k \\<le> n \\<and> P k) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GreatestB_le:\nfixes n :: \\<open>nat\\<close>\nassumes \\<open>x\\<le>n\\<close> and \\<open>P x\\<close>\nshows \\<open>x \\<le> (GREATEST k. k\\<le>n \\<and> P k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> (GREATEST k. k \\<le> n \\<and> P k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<le> (GREATEST k. k \\<le> n \\<and> P k)", "have *: \\<open>\\<forall> y. y\\<le>n \\<and> P y \\<longrightarrow> y<Suc n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y. y \\<le> n \\<and> P y \\<longrightarrow> y < Suc n", "by auto"], ["proof (state)\nthis:\n  \\<forall>y. y \\<le> n \\<and> P y \\<longrightarrow> y < Suc n\n\ngoal (1 subgoal):\n 1. x \\<le> (GREATEST k. k \\<le> n \\<and> P k)", "then"], ["proof (chain)\npicking this:\n  \\<forall>y. y \\<le> n \\<and> P y \\<longrightarrow> y < Suc n", "show \\<open>x \\<le> (GREATEST k. k\\<le>n \\<and> P k)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<le> n \\<and> P y \\<longrightarrow> y < Suc n\n\ngoal (1 subgoal):\n 1. x \\<le> (GREATEST k. k \\<le> n \\<and> P k)", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<le> n \\<and> P y \\<longrightarrow> y < Suc n\n  x \\<le> n\n  P x\n\ngoal (1 subgoal):\n 1. x \\<le> (GREATEST k. k \\<le> n \\<and> P k)", "by (blast intro: Greatest_le_nat)"], ["proof (state)\nthis:\n  x \\<le> (GREATEST k. k \\<le> n \\<and> P k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeastBI_ex: assumes \\<open>\\<exists>k \\<le> n. P k\\<close> shows \\<open>P (LEAST k::'c::wellorder. P k)\\<close> and \\<open>(LEAST k. P k) \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (LEAST k. P k) &&& (LEAST k. P k) \\<le> n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. P (LEAST k. P k)\n 2. (LEAST k. P k) \\<le> n", "from assms"], ["proof (chain)\npicking this:\n  \\<exists>k\\<le>n. P k", "guess k"], ["proof (prove)\nusing this:\n  \\<exists>k\\<le>n. P k\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  k \\<le> n \\<and> P k\n\ngoal (2 subgoals):\n 1. P (LEAST k. P k)\n 2. (LEAST k. P k) \\<le> n", "hence k: \\<open>k \\<le> n\\<close> \\<open>P k\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> n \\<and> P k\n\ngoal (1 subgoal):\n 1. k \\<le> n &&& P k", "by auto"], ["proof (state)\nthis:\n  k \\<le> n\n  P k\n\ngoal (2 subgoals):\n 1. P (LEAST k. P k)\n 2. (LEAST k. P k) \\<le> n", "thus \\<open>P (LEAST k. P k)\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> n\n  P k\n\ngoal (1 subgoal):\n 1. P (LEAST k. P k)", "using LeastI[of \\<open>P\\<close> \\<open>k\\<close>]"], ["proof (prove)\nusing this:\n  k \\<le> n\n  P k\n  P k \\<Longrightarrow> P (LEAST x. P x)\n\ngoal (1 subgoal):\n 1. P (LEAST k. P k)", "by simp"], ["proof (state)\nthis:\n  P (LEAST k. P k)\n\ngoal (1 subgoal):\n 1. (LEAST k. P k) \\<le> n", "show \\<open>(LEAST k. P k) \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST k. P k) \\<le> n", "using Least_le[of \\<open>P\\<close> \\<open>k\\<close>] k"], ["proof (prove)\nusing this:\n  P k \\<Longrightarrow> (LEAST x. P x) \\<le> k\n  k \\<le> n\n  P k\n\ngoal (1 subgoal):\n 1. (LEAST k. P k) \\<le> n", "by auto"], ["proof (state)\nthis:\n  (LEAST k. P k) \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma allB_atLeastLessThan_lower:  assumes \\<open>(i::nat) \\<le> j\\<close> \\<open>\\<forall> x\\<in>{i..<n}. P x\\<close> shows \\<open>\\<forall> x\\<in>{j..<n}. P x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{j..<n}. P x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {j..<n} \\<Longrightarrow> P x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {j..<n} \\<Longrightarrow> P x", "assume \\<open>x\\<in>{j..<n}\\<close>"], ["proof (state)\nthis:\n  x \\<in> {j..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {j..<n} \\<Longrightarrow> P x", "hence \\<open>x\\<in>{i..<n}\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {j..<n}\n\ngoal (1 subgoal):\n 1. x \\<in> {i..<n}", "using assms(1)"], ["proof (prove)\nusing this:\n  x \\<in> {j..<n}\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. x \\<in> {i..<n}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {i..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> {j..<n} \\<Longrightarrow> P x", "thus \\<open>P x\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> {i..<n}\n\ngoal (1 subgoal):\n 1. P x", "using assms(2)"], ["proof (prove)\nusing this:\n  x \\<in> {i..<n}\n  \\<forall>x\\<in>{i..<n}. P x\n\ngoal (1 subgoal):\n 1. P x", "by auto"], ["proof (state)\nthis:\n  P x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Paths\\<close>"], ["", "context IFC\nbegin"], ["", "lemma path0: \\<open>path \\<sigma> 0 = entry\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> 0 = local.entry", "unfolding path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ((local.step ^^ 0) (local.entry, \\<sigma>)) = local.entry", "by auto"], ["", "lemma path_in_nodes[intro]: \\<open>path \\<sigma> k \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> k \\<in> local.nodes", "proof (induction \\<open>k\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. path \\<sigma> 0 \\<in> local.nodes\n 2. \\<And>k.\n       path \\<sigma> k \\<in> local.nodes \\<Longrightarrow>\n       path \\<sigma> (Suc k) \\<in> local.nodes", "case (Suc k)"], ["proof (state)\nthis:\n  path \\<sigma> k \\<in> local.nodes\n\ngoal (2 subgoals):\n 1. path \\<sigma> 0 \\<in> local.nodes\n 2. \\<And>k.\n       path \\<sigma> k \\<in> local.nodes \\<Longrightarrow>\n       path \\<sigma> (Suc k) \\<in> local.nodes", "hence \\<open>\\<And> \\<sigma>'. (path \\<sigma> k, suc (path \\<sigma> k) \\<sigma>') \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma> k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>'.\n       (path \\<sigma> k, suc (path \\<sigma> k) \\<sigma>') \\<in> local.edges", "by auto"], ["proof (state)\nthis:\n  (path \\<sigma> k, suc (path \\<sigma> k) ?\\<sigma>'1) \\<in> local.edges\n\ngoal (2 subgoals):\n 1. path \\<sigma> 0 \\<in> local.nodes\n 2. \\<And>k.\n       path \\<sigma> k \\<in> local.nodes \\<Longrightarrow>\n       path \\<sigma> (Suc k) \\<in> local.nodes", "hence \\<open>(path \\<sigma> k, path \\<sigma> (Suc k)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  (path \\<sigma> k, suc (path \\<sigma> k) ?\\<sigma>'1) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (path \\<sigma> k, path \\<sigma> (Suc k)) \\<in> local.edges", "unfolding path_def"], ["proof (prove)\nusing this:\n  (fst ((local.step ^^ k) (local.entry, \\<sigma>)),\n   suc (fst ((local.step ^^ k) (local.entry, \\<sigma>))) ?\\<sigma>'1)\n  \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (fst ((local.step ^^ k) (local.entry, \\<sigma>)),\n     fst ((local.step ^^ Suc k) (local.entry, \\<sigma>)))\n    \\<in> local.edges", "by (metis suc_def comp_apply funpow.simps(2) prod.collapse)"], ["proof (state)\nthis:\n  (path \\<sigma> k, path \\<sigma> (Suc k)) \\<in> local.edges\n\ngoal (2 subgoals):\n 1. path \\<sigma> 0 \\<in> local.nodes\n 2. \\<And>k.\n       path \\<sigma> k \\<in> local.nodes \\<Longrightarrow>\n       path \\<sigma> (Suc k) \\<in> local.nodes", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (path \\<sigma> k, path \\<sigma> (Suc k)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. path \\<sigma> (Suc k) \\<in> local.nodes", "using edges_nodes"], ["proof (prove)\nusing this:\n  (path \\<sigma> k, path \\<sigma> (Suc k)) \\<in> local.edges\n  local.edges \\<subseteq> local.nodes \\<times> local.nodes\n\ngoal (1 subgoal):\n 1. path \\<sigma> (Suc k) \\<in> local.nodes", "by force"], ["proof (state)\nthis:\n  path \\<sigma> (Suc k) \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. path \\<sigma> 0 \\<in> local.nodes", "qed (auto simp add: path_def)"], ["", "lemma path_is_path[simp]: \\<open>is_path (path \\<sigma>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>)", "unfolding is_path_def path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (fst ((local.step ^^ n) (local.entry, \\<sigma>)),\n        fst ((local.step ^^ Suc n) (local.entry, \\<sigma>)))\n       \\<in> local.edges", "using step_suc_sem"], ["proof (prove)\nusing this:\n  local.step (?n, ?\\<sigma>) = (suc ?n ?\\<sigma>, sem ?n ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (fst ((local.step ^^ n) (local.entry, \\<sigma>)),\n        fst ((local.step ^^ Suc n) (local.entry, \\<sigma>)))\n       \\<in> local.edges", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<And>n \\<sigma>.\n           local.step (n, \\<sigma>) =\n           (suc n \\<sigma>, sem n \\<sigma>)) \\<Longrightarrow>\n       (fst ((local.step ^^ n) (local.entry, \\<sigma>)),\n        fst (local.step ((local.step ^^ n) (local.entry, \\<sigma>))))\n       \\<in> local.edges", "by (metis path_def suc_def edges_complete path_in_nodes prod.collapse)"], ["", "lemma term_path_stable: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> i = return\\<close> and le: \\<open>i \\<le> j\\<close> shows \\<open>\\<pi> j = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j = local.return", "using le"], ["proof (prove)\nusing this:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<pi> j = local.return", "proof (induction \\<open>j\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<le> 0 \\<Longrightarrow> \\<pi> 0 = local.return\n 2. \\<And>j.\n       \\<lbrakk>i \\<le> j \\<Longrightarrow> \\<pi> j = local.return;\n        i \\<le> Suc j\\<rbrakk>\n       \\<Longrightarrow> \\<pi> (Suc j) = local.return", "case (Suc j)"], ["proof (state)\nthis:\n  i \\<le> j \\<Longrightarrow> \\<pi> j = local.return\n  i \\<le> Suc j\n\ngoal (2 subgoals):\n 1. i \\<le> 0 \\<Longrightarrow> \\<pi> 0 = local.return\n 2. \\<And>j.\n       \\<lbrakk>i \\<le> j \\<Longrightarrow> \\<pi> j = local.return;\n        i \\<le> Suc j\\<rbrakk>\n       \\<Longrightarrow> \\<pi> (Suc j) = local.return", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) = local.return", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return", "assume \\<open>i\\<le>j\\<close>"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return", "hence \\<open>\\<pi> j = return\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<pi> j = local.return", "using Suc"], ["proof (prove)\nusing this:\n  i \\<le> j\n  i \\<le> j \\<Longrightarrow> \\<pi> j = local.return\n  i \\<le> Suc j\n\ngoal (1 subgoal):\n 1. \\<pi> j = local.return", "by simp"], ["proof (state)\nthis:\n  \\<pi> j = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return", "hence \\<open>(return, \\<pi> (Suc j)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. (local.return, \\<pi> (Suc j)) \\<in> local.edges", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<pi> j = local.return\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. (local.return, \\<pi> (Suc j)) \\<in> local.edges", "unfolding is_path_def"], ["proof (prove)\nusing this:\n  \\<pi> j = local.return\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (local.return, \\<pi> (Suc j)) \\<in> local.edges", "by metis"], ["proof (state)\nthis:\n  (local.return, \\<pi> (Suc j)) \\<in> local.edges\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> (Suc j) = local.return", "thus \\<open>\\<pi> (Suc j) = return\\<close>"], ["proof (prove)\nusing this:\n  (local.return, \\<pi> (Suc j)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) = local.return", "using edges_return"], ["proof (prove)\nusing this:\n  (local.return, \\<pi> (Suc j)) \\<in> local.edges\n  (local.return, ?x) \\<in> local.edges \\<Longrightarrow> ?x = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc j) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> j \\<Longrightarrow> \\<pi> (Suc j) = local.return", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i \\<le> j \\<Longrightarrow> \\<pi> (Suc j) = local.return", "assume \\<open>\\<not> i \\<le> j\\<close>"], ["proof (state)\nthis:\n  \\<not> i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> j \\<Longrightarrow> \\<pi> (Suc j) = local.return", "hence \\<open>Suc j = i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> j\n\ngoal (1 subgoal):\n 1. Suc j = i", "using Suc"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> j\n  i \\<le> j \\<Longrightarrow> \\<pi> j = local.return\n  i \\<le> Suc j\n\ngoal (1 subgoal):\n 1. Suc j = i", "by auto"], ["proof (state)\nthis:\n  Suc j = i\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> j \\<Longrightarrow> \\<pi> (Suc j) = local.return", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  Suc j = i\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) = local.return", "using assms(2)"], ["proof (prove)\nusing this:\n  Suc j = i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc j) = local.return\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> (Suc j) = local.return\n\ngoal (1 subgoal):\n 1. i \\<le> 0 \\<Longrightarrow> \\<pi> 0 = local.return", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<le> 0 \\<Longrightarrow> \\<pi> 0 = local.return", "case 0"], ["proof (state)\nthis:\n  i \\<le> 0\n\ngoal (1 subgoal):\n 1. i \\<le> 0 \\<Longrightarrow> \\<pi> 0 = local.return", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<pi> 0 = local.return", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> 0\n  is_path \\<pi>\n  \\<pi> i = local.return\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<pi> 0 = local.return", "by simp"], ["proof (state)\nthis:\n  \\<pi> 0 = local.return\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_path_shift: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>is_path (\\<pi>\\<guillemotleft>m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> m)", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> m)", "unfolding is_path_def"], ["proof (prove)\nusing this:\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       ((\\<pi> \\<guillemotleft> m) n, (\\<pi> \\<guillemotleft> m) (Suc n))\n       \\<in> local.edges", "by simp"], ["", "lemma path_cons: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> m = \\<pi>' 0\\<close> shows \\<open>is_path (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>')", "unfolding is_path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "proof(rule,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "assume \\<open>m < n\\<close>"], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "thus \\<open>((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n, (\\<pi> @\\<^bsup>m\\<^esup>  \\<pi>') (Suc n)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "using assms(2)"], ["proof (prove)\nusing this:\n  m < n\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "unfolding is_path_def path_append_def"], ["proof (prove)\nusing this:\n  m < n\n  \\<forall>n. (\\<pi>' n, \\<pi>' (Suc n)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (if n \\<le> m then \\<pi> n else \\<pi>' (n - m),\n     if Suc n \\<le> m then \\<pi> (Suc n) else \\<pi>' (Suc n - m))\n    \\<in> local.edges", "by (auto,metis Suc_diff_Suc diff_Suc_Suc less_SucI)"], ["proof (state)\nthis:\n  ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n   (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n  \\<in> local.edges\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> m < n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> m < n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> m < n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "assume *: \\<open>\\<not> m < n\\<close>"], ["proof (state)\nthis:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> m < n \\<Longrightarrow>\n       ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n        (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n       \\<in> local.edges", "thus \\<open>((\\<pi> @\\<^bsup>m\\<^esup>  \\<pi>') n, (\\<pi> @\\<^bsup>m\\<^esup>  \\<pi>') (Suc n)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> m < n; ?P1\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges\n 2. \\<lbrakk>\\<not> m < n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "assume [simp]: \\<open>n = m\\<close>"], ["proof (state)\nthis:\n  n = m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> m < n; ?P1\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges\n 2. \\<lbrakk>\\<not> m < n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  n = m\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "using assms"], ["proof (prove)\nusing this:\n  n = m\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> m = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "unfolding is_path_def path_append_def"], ["proof (prove)\nusing this:\n  n = m\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n  \\<forall>n. (\\<pi>' n, \\<pi>' (Suc n)) \\<in> local.edges\n  \\<pi> m = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. (if n \\<le> m then \\<pi> n else \\<pi>' (n - m),\n     if Suc n \\<le> m then \\<pi> (Suc n) else \\<pi>' (Suc n - m))\n    \\<in> local.edges", "by force"], ["proof (state)\nthis:\n  ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n   (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n  \\<in> local.edges\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> m < n; n \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> m < n; n \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "assume \\<open>n \\<noteq> m\\<close>"], ["proof (state)\nthis:\n  n \\<noteq> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> m < n; n \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "hence \\<open>Suc n \\<le> m\\<close> \\<open>n\\<le> m\\<close>"], ["proof (prove)\nusing this:\n  n \\<noteq> m\n\ngoal (1 subgoal):\n 1. Suc n \\<le> m &&& n \\<le> m", "using *"], ["proof (prove)\nusing this:\n  n \\<noteq> m\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. Suc n \\<le> m &&& n \\<le> m", "by auto"], ["proof (state)\nthis:\n  Suc n \\<le> m\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> m < n; n \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n                       (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n                      \\<in> local.edges", "with assms(1)"], ["proof (chain)\npicking this:\n  is_path \\<pi>\n  Suc n \\<le> m\n  n \\<le> m", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  Suc n \\<le> m\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "unfolding is_path_def"], ["proof (prove)\nusing this:\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n  Suc n \\<le> m\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n     (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n    \\<in> local.edges", "by auto"], ["proof (state)\nthis:\n  ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n   (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n  \\<in> local.edges\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') n,\n   (\\<pi> @\\<^bsup>m\\<^esup> \\<pi>') (Suc n))\n  \\<in> local.edges\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_path_loop: assumes \\<open>is_path \\<pi>\\<close> \\<open>0 < i\\<close> \\<open>\\<pi> i = \\<pi> 0\\<close> shows \\<open>is_path (\\<lambda> n. \\<pi> (n mod i))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<lambda>n. \\<pi> (n mod i))", "unfolding is_path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "proof (rule,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "assume \\<open>0 < Suc n mod i\\<close>"], ["proof (state)\nthis:\n  0 < Suc n mod i\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "hence \\<open>Suc n mod i = Suc (n mod i)\\<close>"], ["proof (prove)\nusing this:\n  0 < Suc n mod i\n\ngoal (1 subgoal):\n 1. Suc n mod i = Suc (n mod i)", "by (metis mod_Suc neq0_conv)"], ["proof (state)\nthis:\n  Suc n mod i = Suc (n mod i)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "moreover"], ["proof (state)\nthis:\n  Suc n mod i = Suc (n mod i)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "have \\<open>(\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> edges\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges", "using assms(1)"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges", "unfolding is_path_def"], ["proof (prove)\nusing this:\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges", "by auto"], ["proof (state)\nthis:\n  (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n 2. \\<And>n.\n       \\<not> ?P2 n \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "ultimately"], ["proof (chain)\npicking this:\n  Suc n mod i = Suc (n mod i)\n  (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges", "show \\<open>(\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  Suc n mod i = Suc (n mod i)\n  (\\<pi> (n mod i), \\<pi> (Suc (n mod i))) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "by simp"], ["proof (state)\nthis:\n  (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "assume \\<open>\\<not> 0 < Suc n mod i\\<close>"], ["proof (state)\nthis:\n  \\<not> 0 < Suc n mod i\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "hence \\<open>Suc n mod i = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> 0 < Suc n mod i\n\ngoal (1 subgoal):\n 1. Suc n mod i = 0", "by auto"], ["proof (state)\nthis:\n  Suc n mod i = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "moreover"], ["proof (state)\nthis:\n  Suc n mod i = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "hence \\<open>n mod i = i - 1\\<close>"], ["proof (prove)\nusing this:\n  Suc n mod i = 0\n\ngoal (1 subgoal):\n 1. n mod i = i - 1", "using assms(2)"], ["proof (prove)\nusing this:\n  Suc n mod i = 0\n  0 < i\n\ngoal (1 subgoal):\n 1. n mod i = i - 1", "by (metis Zero_neq_Suc diff_Suc_1 mod_Suc)"], ["proof (state)\nthis:\n  n mod i = i - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<not> 0 < Suc n mod i \\<Longrightarrow>\n       (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "ultimately"], ["proof (chain)\npicking this:\n  Suc n mod i = 0\n  n mod i = i - 1", "show \\<open>(\\<pi>(n mod i), \\<pi> (Suc n mod i)) \\<in> edges\\<close>"], ["proof (prove)\nusing this:\n  Suc n mod i = 0\n  n mod i = i - 1\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "using assms(1)"], ["proof (prove)\nusing this:\n  Suc n mod i = 0\n  n mod i = i - 1\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "unfolding is_path_def"], ["proof (prove)\nusing this:\n  Suc n mod i = 0\n  n mod i = i - 1\n  \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges\n\ngoal (1 subgoal):\n 1. (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges", "by (metis assms(3) mod_Suc)"], ["proof (state)\nthis:\n  (\\<pi> (n mod i), \\<pi> (Suc n mod i)) \\<in> local.edges\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_nodes: \\<open>is_path \\<pi> \\<Longrightarrow> \\<pi> k \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<Longrightarrow> \\<pi> k \\<in> local.nodes", "unfolding is_path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges \\<Longrightarrow>\n    \\<pi> k \\<in> local.nodes", "using edges_nodes"], ["proof (prove)\nusing this:\n  local.edges \\<subseteq> local.nodes \\<times> local.nodes\n\ngoal (1 subgoal):\n 1. \\<forall>n. (\\<pi> n, \\<pi> (Suc n)) \\<in> local.edges \\<Longrightarrow>\n    \\<pi> k \\<in> local.nodes", "by force"], ["", "lemma direct_path_return': assumes \\<open>is_path \\<pi> \\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>x \\<noteq> return\\<close> \\<open>\\<pi> n = return\\<close>\nobtains \\<pi>' n' where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' 0 = x\\<close> \\<open>\\<pi>' n' = return\\<close> \\<open>\\<forall> i> 0. \\<pi>' i \\<noteq> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n         \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n         \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction \\<open>n\\<close> arbitrary: \\<open>\\<pi>\\<close>  rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < xa;\n                    \\<And>\\<pi>' n'.\n                       \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x;\n                        \\<pi>' n' = local.return;\n                        \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n                    \\<pi> y = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>\\<pi>' n'.\n           \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n            \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n        \\<pi> xa = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (less n \\<pi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < n;\n   \\<And>\\<pi>' n'.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n       \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   is_path ?\\<pi>1; ?\\<pi>1 0 = x; x \\<noteq> local.return;\n   ?\\<pi>1 ?y1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>is_path ?\\<pi>'1; ?\\<pi>'1 0 = x; ?\\<pi>'1 ?n'1 = local.return;\n   \\<forall>i>0. ?\\<pi>'1 i \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<And>xa \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < xa;\n                    \\<And>\\<pi>' n'.\n                       \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x;\n                        \\<pi>' n' = local.return;\n                        \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n                    \\<pi> y = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>\\<pi>' n'.\n           \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n            \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n        \\<pi> xa = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence ih: \\<open>\\<And> n' \\<pi>'. n' < n \\<Longrightarrow> is_path \\<pi>' \\<Longrightarrow> \\<pi>' 0 = x \\<Longrightarrow> \\<pi>' n' = return \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n;\n   \\<And>\\<pi>' n'.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n       \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   is_path ?\\<pi>1; ?\\<pi>1 0 = x; x \\<noteq> local.return;\n   ?\\<pi>1 ?y1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>is_path ?\\<pi>'1; ?\\<pi>'1 0 = x; ?\\<pi>'1 ?n'1 = local.return;\n   \\<forall>i>0. ?\\<pi>'1 i \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<And>n' \\<pi>'.\n       \\<lbrakk>n' < n; is_path \\<pi>'; \\<pi>' 0 = x;\n        \\<pi>' n' = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < n;\n   \\<And>\\<pi>' n'.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n       \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   is_path ?\\<pi>1; ?\\<pi>1 0 = x; x \\<noteq> local.return;\n   ?\\<pi>1 ?y1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>is_path ?\\<pi>'1; ?\\<pi>'1 0 = x; ?\\<pi>'1 ?n'1 = local.return;\n   \\<forall>i>0. ?\\<pi>'1 i \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<And>n' \\<pi>'.\n       \\<lbrakk>n' < n; is_path \\<pi>'; \\<pi>' 0 = x;\n        \\<pi>' n' = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?n'1 < n; is_path ?\\<pi>'1; ?\\<pi>'1 0 = x;\n   ?\\<pi>'1 ?n'1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>xa \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < xa;\n                    \\<And>\\<pi>' n'.\n                       \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x;\n                        \\<pi>' n' = local.return;\n                        \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n                    \\<pi> y = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>\\<pi>' n'.\n           \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n            \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path \\<pi>; \\<pi> 0 = x; x \\<noteq> local.return;\n        \\<pi> xa = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "assume \\<open>\\<forall> i>0. \\<pi> i \\<noteq> x\\<close>"], ["proof (state)\nthis:\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n\ngoal (1 subgoal):\n 1. thesis", "using less"], ["proof (prove)\nusing this:\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n  \\<lbrakk>?y1 < n;\n   \\<And>\\<pi>' n'.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n       \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   is_path ?\\<pi>1; ?\\<pi>1 0 = x; x \\<noteq> local.return;\n   ?\\<pi>1 ?y1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>is_path ?\\<pi>'1; ?\\<pi>'1 0 = x; ?\\<pi>'1 ?n'1 = local.return;\n   \\<forall>i>0. ?\\<pi>'1 i \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path \\<pi>\n  \\<pi> 0 = x\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "assume \\<open>\\<not> (\\<forall> i>0. \\<pi> i \\<noteq> x)\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x)", "obtain i where \\<open>0<i\\<close> \\<open>\\<pi> i = x\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>0 < i; \\<pi> i = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < i\n  \\<pi> i = x\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "hence \\<open>(\\<pi>\\<guillemotleft>i) 0 = x\\<close>"], ["proof (prove)\nusing this:\n  0 < i\n  \\<pi> i = x\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) 0 = x", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) 0 = x\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) 0 = x\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "have \\<open>i < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n", "using less(3,5,6) \\<open>\\<pi> i = x\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  x \\<noteq> local.return\n  \\<pi> n = local.return\n  \\<pi> i = x\n\ngoal (1 subgoal):\n 1. i < n", "by (metis linorder_neqE_nat term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "hence \\<open>(\\<pi>\\<guillemotleft>i) (n-i) = return\\<close>"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) (n - i) = local.return", "using less(6)"], ["proof (prove)\nusing this:\n  i < n\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) (n - i) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "have \\<open>is_path (\\<pi>\\<guillemotleft>i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "using less(3)"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "by (metis path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "have \\<open>n - i < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n - i < n", "using \\<open>0<i\\<close> \\<open>i < n\\<close>"], ["proof (prove)\nusing this:\n  0 < i\n  i < n\n\ngoal (1 subgoal):\n 1. n - i < n", "by auto"], ["proof (state)\nthis:\n  n - i < n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i>0. \\<pi> i \\<noteq> x) \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> i) 0 = x\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  is_path (\\<pi> \\<guillemotleft> i)\n  n - i < n", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) 0 = x\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  is_path (\\<pi> \\<guillemotleft> i)\n  n - i < n\n\ngoal (1 subgoal):\n 1. thesis", "using ih"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) 0 = x\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  is_path (\\<pi> \\<guillemotleft> i)\n  n - i < n\n  \\<lbrakk>?n'1 < n; is_path ?\\<pi>'1; ?\\<pi>'1 0 = x;\n   ?\\<pi>'1 ?n'1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma direct_path_return: assumes  \\<open>x \\<in> nodes\\<close> \\<open>x \\<noteq> return\\<close>\nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close> \\<open>\\<forall> i> 0. \\<pi> i \\<noteq> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>i>0. \\<pi> i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using direct_path_return'[of _ \\<open>x\\<close>] reaching_ret[OF assms(1)] assms(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> 0 = x; x \\<noteq> local.return;\n   ?\\<pi> ?n = local.return;\n   \\<And>\\<pi>' n'.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = x; \\<pi>' n' = local.return;\n       \\<forall>i>0. \\<pi>' i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = x \\<and> \\<pi> n = local.return\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>i>0. \\<pi> i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma path_append_eq_up_to: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') =\\<^bsub>k\\<^esub> \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') =\\<^bsub>k\\<^esub> \\<pi>", "unfolding eq_up_to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') i = \\<pi> i", "by auto"], ["", "lemma eq_up_to_le: assumes \\<open>k \\<le> n\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> shows \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> n\n  \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  k \\<le> n\n  \\<forall>i\\<le>n. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k. \\<pi> i = \\<pi>' i", "by auto"], ["", "lemma eq_up_to_refl: shows \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> =\\<^bsub>k\\<^esub> \\<pi>", "unfolding eq_up_to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k. \\<pi> i = \\<pi> i", "by auto"], ["", "lemma eq_up_to_sym: assumes \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> shows \\<open>\\<pi>' =\\<^bsub>k\\<^esub> \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' =\\<^bsub>k\\<^esub> \\<pi>", "using assms"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi>' =\\<^bsub>k\\<^esub> \\<pi>", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>k. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>k. \\<pi>' i = \\<pi> i", "by auto"], ["", "lemma eq_up_to_apply: assumes \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> \\<open>j \\<le> k\\<close> shows \\<open>\\<pi> j = \\<pi>' j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j = \\<pi>' j", "using assms"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n  j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<pi> j = \\<pi>' j", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>k. \\<pi> i = \\<pi>' i\n  j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<pi> j = \\<pi>' j", "by auto"], ["", "lemma path_swap_ret: assumes \\<open>is_path \\<pi>\\<close> obtains \\<pi>' n where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> \\<open>\\<pi>' n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have nd: \\<open>\\<pi> k \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<in> local.nodes", "using assms path_nodes"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<in> local.nodes", "by simp"], ["proof (state)\nthis:\n  \\<pi> k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain \\<pi>' n where *: \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' 0 = \\<pi> k\\<close> \\<open>\\<pi>' n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> k;\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret[OF nd]"], ["proof (prove)\nusing this:\n  \\<exists>\\<pi>' n.\n     is_path \\<pi>' \\<and> \\<pi>' 0 = \\<pi> k \\<and> \\<pi>' n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> k;\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> k\n  \\<pi>' n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> =\\<^bsub>k\\<^esub> (\\<pi>@\\<^bsup>k\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "by (metis eq_up_to_sym path_append_eq_up_to)"], ["proof (state)\nthis:\n  \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>is_path (\\<pi>@\\<^bsup>k\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "using assms * path_cons"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> k\n  \\<pi>' n = local.return\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?m = ?\\<pi>' 0\\<rbrakk>\n  \\<Longrightarrow> is_path (?\\<pi> @\\<^bsup>?m\\<^esup> ?\\<pi>')\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "by metis"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>(\\<pi>@\\<^bsup>k\\<^esup> \\<pi>') (k + n) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return", "using *"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> k\n  \\<pi>' n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n         \\<pi>' n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>k\\<^esub> (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n) = local.return\n  \\<lbrakk>is_path ?\\<pi>'1; \\<pi> =\\<^bsub>k\\<^esub> ?\\<pi>'1;\n   ?\\<pi>'1 ?n1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_suc: \\<open>path \\<sigma> (Suc k) = fst (step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> (Suc k) =\n    fst (local.step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))", "by (induction \\<open>k\\<close>, auto simp: path_def kth_state_def)"], ["", "lemma kth_state_suc: \\<open>\\<sigma>\\<^bsup>Suc k\\<^esup>  = snd (step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>Suc k\\<^esup> =\n    snd (local.step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))", "by (induction \\<open>k\\<close>, auto simp: path_def kth_state_def)"], ["", "subsection \\<open>Facts about Post Dominators\\<close>"], ["", "lemma pd_trans: assumes 1: \\<open>y pd\\<rightarrow> x\\<close> and 2: \\<open>z pd\\<rightarrow>y\\<close> shows \\<open>z pd\\<rightarrow>x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "fix \\<pi> n"], ["proof (state)\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "assume 3[simp]: \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close>"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "then"], ["proof (chain)\npicking this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return", "obtain k where \\<open>\\<pi> k = y\\<close> and 7: \\<open>k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>\\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<pi> k = y\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "then"], ["proof (chain)\npicking this:\n  \\<pi> k = y\n  k \\<le> n", "have \\<open>(\\<pi>\\<guillemotleft>k) 0 = y\\<close> and \\<open>(\\<pi>\\<guillemotleft>k) (n-k) = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> k = y\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = y &&&\n    (\\<pi> \\<guillemotleft> k) (n - k) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "have \\<open>is_path (\\<pi>\\<guillemotleft>k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k)", "by(metis 3(1) path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  is_path (\\<pi> \\<guillemotleft> k)", "obtain k' where 8: \\<open>(\\<pi>\\<guillemotleft>k) k' = z\\<close> and \\<open>k' \\<le> n-k\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>(\\<pi> \\<guillemotleft> k) k' = z; k' \\<le> n - k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>(\\<pi> \\<guillemotleft> k) k' = z; k' \\<le> n - k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  y \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = y \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = z))\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>(\\<pi> \\<guillemotleft> k) k' = z; k' \\<le> n - k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) k' = z\n  k' \\<le> n - k\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "hence \\<open>k+k'\\<le>n\\<close> and \\<open>\\<pi> (k+ k') = z\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) k' = z\n  k' \\<le> n - k\n\ngoal (1 subgoal):\n 1. k + k' \\<le> n &&& \\<pi> (k + k') = z", "using 7"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) k' = z\n  k' \\<le> n - k\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. k + k' \\<le> n &&& \\<pi> (k + k') = z", "by auto"], ["proof (state)\nthis:\n  k + k' \\<le> n\n  \\<pi> (k + k') = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "hence \\<open>\\<exists>k\\<le>n. \\<pi> k = z\\<close>"], ["proof (prove)\nusing this:\n  k + k' \\<le> n\n  \\<pi> (k + k') = z\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = z", "using path_nodes"], ["proof (prove)\nusing this:\n  k + k' \\<le> n\n  \\<pi> (k + k') = z\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = z", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<le>n. \\<pi> k = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>3; ?\\<pi>3 0 = x;\n   ?\\<pi>3 ?n3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n3. ?\\<pi>3 k = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>3; ?\\<pi>3 0 = x;\n   ?\\<pi>3 ?n3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n3. ?\\<pi>3 k = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "using 1"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>3; ?\\<pi>3 0 = x;\n   ?\\<pi>3 ?n3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n3. ?\\<pi>3 k = z\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>3; ?\\<pi>3 0 = x;\n   ?\\<pi>3 ?n3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n3. ?\\<pi>3 k = z\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = z))", "by blast"], ["proof (state)\nthis:\n  z pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_path: assumes \\<open>y pd\\<rightarrow> x\\<close>\nobtains \\<pi> n k where \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 = x\\<close> and \\<open>\\<pi> n = return\\<close> and \\<open>\\<pi> k = y\\<close> and \\<open>k \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret[of \\<open>x\\<close>]"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n  x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<pi> k = y; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma pd_antisym: assumes xpdy: \\<open>x pd\\<rightarrow> y\\<close> and ypdx: \\<open>y pd\\<rightarrow> x\\<close> shows \\<open>x = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y", "obtain \\<pi> n where path: \\<open>is_path \\<pi>\\<close> and \\<pi>0: \\<open>\\<pi> 0 = x\\<close> and \\<pi>n: \\<open>\\<pi> n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pd_path[OF ypdx]"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi> n k.\n      \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n       \\<pi> k = y; k \\<le> n\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. x = y", "hence kex: \\<open>\\<exists>k\\<le>n. \\<pi> k = y\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = y", "using ypdx"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = y", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = y", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<le>n. \\<pi> k = y\n\ngoal (1 subgoal):\n 1. x = y", "obtain k where k: \\<open>k = (GREATEST k. k\\<le>n \\<and> \\<pi> k = y)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k = (GREATEST k. k \\<le> n \\<and> \\<pi> k = y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k = (GREATEST k. k \\<le> n \\<and> \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. x = y", "have \\<pi>k: \\<open>\\<pi> k = y\\<close> and kn: \\<open>k \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k = y &&& k \\<le> n", "using k kex"], ["proof (prove)\nusing this:\n  k = (GREATEST k. k \\<le> n \\<and> \\<pi> k = y)\n  \\<exists>k\\<le>n. \\<pi> k = y\n\ngoal (1 subgoal):\n 1. \\<pi> k = y &&& k \\<le> n", "by (auto intro: GreatestIB)"], ["proof (state)\nthis:\n  \\<pi> k = y\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. x = y", "have kpath: \\<open>is_path (\\<pi>\\<guillemotleft>k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k)", "by (metis path_path_shift path)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. x = y", "have k0: \\<open>(\\<pi>\\<guillemotleft>k) 0 = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = y", "using \\<pi>k"], ["proof (prove)\nusing this:\n  \\<pi> k = y\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = y", "by simp"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n\ngoal (1 subgoal):\n 1. x = y", "have kreturn: \\<open>(\\<pi>\\<guillemotleft>k) (n-k) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) = local.return", "using kn \\<pi>n"], ["proof (prove)\nusing this:\n  k \\<le> n\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) = local.return", "by simp"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n\ngoal (1 subgoal):\n 1. x = y", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return", "have ky': \\<open>\\<exists>k'\\<le>(n-k).(\\<pi>\\<guillemotleft>k) k' = x\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x", "using xpdy"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n  y \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = y \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = x))\n\ngoal (1 subgoal):\n 1. \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x", "by simp"], ["proof (state)\nthis:\n  \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x\n\ngoal (1 subgoal):\n 1. x = y", "obtain k' where k': \\<open>k' = (GREATEST k'. k'\\<le>(n-k) \\<and> (\\<pi>\\<guillemotleft>k) k' = x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        k' =\n        (GREATEST k'.\n            k' \\<le> n - k \\<and>\n            (\\<pi> \\<guillemotleft> k) k' = x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k' =\n  (GREATEST k'. k' \\<le> n - k \\<and> (\\<pi> \\<guillemotleft> k) k' = x)\n\ngoal (1 subgoal):\n 1. x = y", "with ky'"], ["proof (chain)\npicking this:\n  \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x\n  k' =\n  (GREATEST k'. k' \\<le> n - k \\<and> (\\<pi> \\<guillemotleft> k) k' = x)", "have \\<pi>k': \\<open>(\\<pi>\\<guillemotleft>k) k' = x\\<close> and kn': \\<open>k' \\<le> (n-k)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k'\\<le>n - k. (\\<pi> \\<guillemotleft> k) k' = x\n  k' =\n  (GREATEST k'. k' \\<le> n - k \\<and> (\\<pi> \\<guillemotleft> k) k' = x)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) k' = x &&& k' \\<le> n - k", "by (auto intro: GreatestIB)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) k' = x\n  k' \\<le> n - k\n\ngoal (1 subgoal):\n 1. x = y", "have k'path: \\<open>is_path (\\<pi>\\<guillemotleft>k\\<guillemotleft>k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')", "using kpath"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')", "by(metis path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n\ngoal (1 subgoal):\n 1. x = y", "have k'0: \\<open>(\\<pi>\\<guillemotleft>k\\<guillemotleft>k') 0 = x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x", "using \\<pi>k'"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) k' = x\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x", "by simp"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n\ngoal (1 subgoal):\n 1. x = y", "have k'return: \\<open>(\\<pi>\\<guillemotleft>k\\<guillemotleft>k') (n-k-k') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') =\n    local.return", "using kn' kreturn"], ["proof (prove)\nusing this:\n  k' \\<le> n - k\n  (\\<pi> \\<guillemotleft> k) (n - k) = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') =\n    local.return", "by (metis path_shift_def le_add_diff_inverse)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') = local.return\n\ngoal (1 subgoal):\n 1. x = y", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') = local.return", "have ky'': \\<open>\\<exists>k''\\<le>(n-k-k').(\\<pi>\\<guillemotleft>k\\<guillemotleft>k') k'' = y\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>k''\\<le>n - k - k'.\n       (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y", "using ypdx"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') = local.return\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<exists>k''\\<le>n - k - k'.\n       (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> k \\<guillemotleft> k')\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') 0 = x\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') (n - k - k') = local.return\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. \\<exists>k''\\<le>n - k - k'.\n       (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y", "by blast"], ["proof (state)\nthis:\n  \\<exists>k''\\<le>n - k - k'.\n     (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y\n\ngoal (1 subgoal):\n 1. x = y", "obtain k'' where k'': \\<open>k''= (GREATEST k''. k''\\<le>(n-k-k') \\<and> (\\<pi>\\<guillemotleft>k\\<guillemotleft>k') k'' = y)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k''.\n        k'' =\n        (GREATEST k''.\n            k'' \\<le> n - k - k' \\<and>\n            (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' =\n            y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k'' =\n  (GREATEST k''.\n      k'' \\<le> n - k - k' \\<and>\n      (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y)\n\ngoal (1 subgoal):\n 1. x = y", "with ky''"], ["proof (chain)\npicking this:\n  \\<exists>k''\\<le>n - k - k'.\n     (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y\n  k'' =\n  (GREATEST k''.\n      k'' \\<le> n - k - k' \\<and>\n      (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y)", "have \\<pi>k'': \\<open>(\\<pi>\\<guillemotleft>k\\<guillemotleft>k') k'' = y\\<close> and kn'': \\<open>k'' \\<le> (n-k-k')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k''\\<le>n - k - k'.\n     (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y\n  k'' =\n  (GREATEST k''.\n      k'' \\<le> n - k - k' \\<and>\n      (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y &&&\n    k'' \\<le> n - k - k'", "by (auto intro: GreatestIB)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y\n  k'' \\<le> n - k - k'\n\ngoal (1 subgoal):\n 1. x = y", "from this(1)"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y", "have  \\<open>\\<pi> (k + k' + k'') = y\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k \\<guillemotleft> k') k'' = y\n\ngoal (1 subgoal):\n 1. \\<pi> (k + k' + k'') = y", "by (metis path_shift_def add.commute add.left_commute)"], ["proof (state)\nthis:\n  \\<pi> (k + k' + k'') = y\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  \\<pi> (k + k' + k'') = y\n\ngoal (1 subgoal):\n 1. x = y", "have \\<open>k + k' +k'' \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + k' + k'' \\<le> n", "using kn'' kn' kn"], ["proof (prove)\nusing this:\n  k'' \\<le> n - k - k'\n  k' \\<le> n - k\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. k + k' + k'' \\<le> n", "by simp"], ["proof (state)\nthis:\n  k + k' + k'' \\<le> n\n\ngoal (1 subgoal):\n 1. x = y", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> (k + k' + k'') = y\n  k + k' + k'' \\<le> n", "have \\<open>k + k' + k''\\<le> k\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + k' + k'') = y\n  k + k' + k'' \\<le> n\n\ngoal (1 subgoal):\n 1. k + k' + k'' \\<le> k", "using k"], ["proof (prove)\nusing this:\n  \\<pi> (k + k' + k'') = y\n  k + k' + k'' \\<le> n\n  k = (GREATEST k. k \\<le> n \\<and> \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. k + k' + k'' \\<le> k", "by(auto simp: GreatestB_le)"], ["proof (state)\nthis:\n  k + k' + k'' \\<le> k\n\ngoal (1 subgoal):\n 1. x = y", "hence \\<open>k' = 0\\<close>"], ["proof (prove)\nusing this:\n  k + k' + k'' \\<le> k\n\ngoal (1 subgoal):\n 1. k' = 0", "by simp"], ["proof (state)\nthis:\n  k' = 0\n\ngoal (1 subgoal):\n 1. x = y", "with k0 \\<pi>k'"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) k' = x\n  k' = 0", "show \\<open>x = y\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = y\n  (\\<pi> \\<guillemotleft> k) k' = x\n  k' = 0\n\ngoal (1 subgoal):\n 1. x = y", "by simp"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_refl[simp]: \\<open>x \\<in> nodes \\<Longrightarrow> x pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<Longrightarrow> x pd\\<rightarrow> x", "unfolding is_pd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<Longrightarrow>\n    x \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = x))", "by blast"], ["", "lemma pdt_trans_in_pdt: \\<open>(x,y) \\<in> pdt\\<^sup>+ \\<Longrightarrow> (x,y) \\<in> pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> pdt\\<^sup>+ \\<Longrightarrow> (x, y) \\<in> pdt", "proof (induction rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y. (x, y) \\<in> pdt \\<Longrightarrow> (x, y) \\<in> pdt\n 2. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> pdt\\<^sup>+; (y, z) \\<in> pdt;\n        (x, y) \\<in> pdt\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> pdt", "case base"], ["proof (state)\nthis:\n  (x, y_) \\<in> pdt\n\ngoal (2 subgoals):\n 1. \\<And>y. (x, y) \\<in> pdt \\<Longrightarrow> (x, y) \\<in> pdt\n 2. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> pdt\\<^sup>+; (y, z) \\<in> pdt;\n        (x, y) \\<in> pdt\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> pdt", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (x, y_) \\<in> pdt\n\ngoal (1 subgoal):\n 1. (x, y_) \\<in> pdt", "by simp"], ["proof (state)\nthis:\n  (x, y_) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> pdt\\<^sup>+; (y, z) \\<in> pdt;\n        (x, y) \\<in> pdt\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> pdt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> pdt\\<^sup>+; (y, z) \\<in> pdt;\n        (x, y) \\<in> pdt\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> pdt", "case (step y z)"], ["proof (state)\nthis:\n  (x, y) \\<in> pdt\\<^sup>+\n  (y, z) \\<in> pdt\n  (x, y) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(x, y) \\<in> pdt\\<^sup>+; (y, z) \\<in> pdt;\n        (x, y) \\<in> pdt\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> pdt", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, z) \\<in> pdt", "unfolding pdt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, z) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "proof (simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> z pd\\<rightarrow> x", "have *: \\<open>y pd\\<rightarrow> x\\<close> \\<open>z pd\\<rightarrow> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x &&& z pd\\<rightarrow> y", "using step"], ["proof (prove)\nusing this:\n  (x, y) \\<in> pdt\\<^sup>+\n  (y, z) \\<in> pdt\n  (x, y) \\<in> pdt\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x &&& z pd\\<rightarrow> y", "unfolding pdt_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\\<^sup>+\n  (y, z) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  (x, y) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x &&& z pd\\<rightarrow> y", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> x\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> z pd\\<rightarrow> x", "hence [simp]: \\<open>z pd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "using pd_trans[where x=\\<open>x\\<close> and y=\\<open>y\\<close> and z=\\<open>z\\<close>]"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n  z pd\\<rightarrow> y\n  \\<lbrakk>y pd\\<rightarrow> x; z pd\\<rightarrow> y\\<rbrakk>\n  \\<Longrightarrow> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> x", "by simp"], ["proof (state)\nthis:\n  z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> z pd\\<rightarrow> x", "have \\<open>x\\<noteq>z\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> z", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x = z \\<Longrightarrow> False", "assume \\<open>x = z\\<close>"], ["proof (state)\nthis:\n  x = z\n\ngoal (1 subgoal):\n 1. x = z \\<Longrightarrow> False", "hence \\<open>z pd\\<rightarrow> y\\<close> \\<open>y pd\\<rightarrow> z\\<close>"], ["proof (prove)\nusing this:\n  x = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y &&& y pd\\<rightarrow> z", "using *"], ["proof (prove)\nusing this:\n  x = z\n  y pd\\<rightarrow> x\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y &&& y pd\\<rightarrow> z", "by auto"], ["proof (state)\nthis:\n  z pd\\<rightarrow> y\n  y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. x = z \\<Longrightarrow> False", "hence \\<open>z = y\\<close>"], ["proof (prove)\nusing this:\n  z pd\\<rightarrow> y\n  y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. z = y", "using pd_antisym"], ["proof (prove)\nusing this:\n  z pd\\<rightarrow> y\n  y pd\\<rightarrow> z\n  \\<lbrakk>?x pd\\<rightarrow> ?y; ?y pd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. z = y", "by auto"], ["proof (state)\nthis:\n  z = y\n\ngoal (1 subgoal):\n 1. x = z \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  z = y\n\ngoal (1 subgoal):\n 1. False", "using step(2)"], ["proof (prove)\nusing this:\n  z = y\n  (y, z) \\<in> pdt\n\ngoal (1 subgoal):\n 1. False", "unfolding pdt_def"], ["proof (prove)\nusing this:\n  z = y\n  (y, z) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<noteq> z\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> z pd\\<rightarrow> x", "thus \\<open>x \\<noteq> z \\<and> z pd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> z\n\ngoal (1 subgoal):\n 1. x \\<noteq> z \\<and> z pd\\<rightarrow> x", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> z \\<and> z pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x, z) \\<in> pdt\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pdt_trancl_pdt: \\<open>pdt\\<^sup>+ = pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. pdt\\<^sup>+ = pdt", "using pdt_trans_in_pdt"], ["proof (prove)\nusing this:\n  (?x, ?y) \\<in> pdt\\<^sup>+ \\<Longrightarrow> (?x, ?y) \\<in> pdt\n\ngoal (1 subgoal):\n 1. pdt\\<^sup>+ = pdt", "by fast"], ["", "lemma trans_pdt: \\<open>trans pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. trans pdt", "by (metis pdt_trancl_pdt trans_trancl)"], ["", "definition [simp]: \\<open>pdt_inv = pdt\\<inverse>\\<close>"], ["", "lemma wf_pdt_inv: \\<open>wf (pdt_inv)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf pdt_inv", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "assume \\<open>\\<not> wf (pdt_inv)\\<close>"], ["proof (state)\nthis:\n  \\<not> wf pdt_inv\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> wf pdt_inv", "obtain f where  \\<open>\\<forall>i. (f (Suc i), f i) \\<in> pdt\\<inverse>\\<close>"], ["proof (prove)\nusing this:\n  \\<not> wf pdt_inv\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>i. (f (Suc i), f i) \\<in> pdt\\<inverse> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_iff_no_infinite_down_chain"], ["proof (prove)\nusing this:\n  \\<not> wf pdt_inv\n  wf ?r = (\\<nexists>f. \\<forall>i. (f (Suc i), f i) \\<in> ?r)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>i. (f (Suc i), f i) \\<in> pdt\\<inverse> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  \\<forall>i. (f (Suc i), f i) \\<in> pdt\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence *: \\<open>\\<forall> i. (f i, f (Suc i)) \\<in> pdt\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. (f (Suc i), f i) \\<in> pdt\\<inverse>\n\ngoal (1 subgoal):\n 1. \\<forall>i. (f i, f (Suc i)) \\<in> pdt", "by simp"], ["proof (state)\nthis:\n  \\<forall>i. (f i, f (Suc i)) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "have **:\\<open>\\<forall> i. \\<forall> j>i. (f i, f j) \\<in> pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j. i < j \\<longrightarrow> (f i, f j) \\<in> pdt", "proof(rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. i < j \\<Longrightarrow> (f i, f j) \\<in> pdt", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j. i < j \\<Longrightarrow> (f i, f j) \\<in> pdt", "assume  \\<open>i < (j::nat)\\<close>"], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. \\<And>i j. i < j \\<Longrightarrow> (f i, f j) \\<in> pdt", "thus \\<open>(f i, f j) \\<in> pdt\\<close>"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. (f i, f j) \\<in> pdt", "proof (induction \\<open>j\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; i < y\\<rbrakk>\n                   \\<Longrightarrow> (f i, f y) \\<in> pdt;\n        i < x\\<rbrakk>\n       \\<Longrightarrow> (f i, f x) \\<in> pdt", "case (less k)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < k; i < ?y1\\<rbrakk>\n  \\<Longrightarrow> (f i, f ?y1) \\<in> pdt\n  i < k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; i < y\\<rbrakk>\n                   \\<Longrightarrow> (f i, f y) \\<in> pdt;\n        i < x\\<rbrakk>\n       \\<Longrightarrow> (f i, f x) \\<in> pdt", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f i, f k) \\<in> pdt", "proof (cases \\<open>Suc i < k\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt\n 2. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "case True"], ["proof (state)\nthis:\n  Suc i < k\n\ngoal (2 subgoals):\n 1. Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt\n 2. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "hence k:\\<open>k-1 < k\\<close> \\<open>i < k-1\\<close> and sk: \\<open>Suc (k-1) = k\\<close>"], ["proof (prove)\nusing this:\n  Suc i < k\n\ngoal (1 subgoal):\n 1. (k - 1 < k &&& i < k - 1) &&& Suc (k - 1) = k", "by auto"], ["proof (state)\nthis:\n  k - 1 < k\n  i < k - 1\n  Suc (k - 1) = k\n\ngoal (2 subgoals):\n 1. Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt\n 2. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f i, f k) \\<in> pdt", "using less(1)[OF k] *[rule_format,of \\<open>k-1\\<close>,unfolded sk] trans_pdt[unfolded trans_def]"], ["proof (prove)\nusing this:\n  (f i, f (k - 1)) \\<in> pdt\n  (f (k - 1), f k) \\<in> pdt\n  \\<forall>x y z.\n     (x, y) \\<in> pdt \\<longrightarrow>\n     (y, z) \\<in> pdt \\<longrightarrow> (x, z) \\<in> pdt\n\ngoal (1 subgoal):\n 1. (f i, f k) \\<in> pdt", "by blast"], ["proof (state)\nthis:\n  (f i, f k) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "case False"], ["proof (state)\nthis:\n  \\<not> Suc i < k\n\ngoal (1 subgoal):\n 1. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "hence \\<open>Suc i = k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> Suc i < k\n\ngoal (1 subgoal):\n 1. Suc i = k", "using less(2)"], ["proof (prove)\nusing this:\n  \\<not> Suc i < k\n  i < k\n\ngoal (1 subgoal):\n 1. Suc i = k", "by auto"], ["proof (state)\nthis:\n  Suc i = k\n\ngoal (1 subgoal):\n 1. \\<not> Suc i < k \\<Longrightarrow> (f i, f k) \\<in> pdt", "then"], ["proof (chain)\npicking this:\n  Suc i = k", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  Suc i = k\n\ngoal (1 subgoal):\n 1. (f i, f k) \\<in> pdt", "using *"], ["proof (prove)\nusing this:\n  Suc i = k\n  \\<forall>i. (f i, f (Suc i)) \\<in> pdt\n\ngoal (1 subgoal):\n 1. (f i, f k) \\<in> pdt", "by auto"], ["proof (state)\nthis:\n  (f i, f k) \\<in> pdt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f i, f k) \\<in> pdt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f i, f j) \\<in> pdt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i j. i < j \\<longrightarrow> (f i, f j) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence ***:\\<open>\\<forall> i. \\<forall> j > i. f j pd\\<rightarrow> f i\\<close> \\<open>\\<forall> i. \\<forall> j > i. f i \\<noteq>  f j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i j. i < j \\<longrightarrow> (f i, f j) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<forall>i j. i < j \\<longrightarrow> f j pd\\<rightarrow> f i &&&\n    \\<forall>i j. i < j \\<longrightarrow> f i \\<noteq> f j", "unfolding pdt_def"], ["proof (prove)\nusing this:\n  \\<forall>i j.\n     i < j \\<longrightarrow>\n     (f i, f j) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<forall>i j. i < j \\<longrightarrow> f j pd\\<rightarrow> f i &&&\n    \\<forall>i j. i < j \\<longrightarrow> f i \\<noteq> f j", "by auto"], ["proof (state)\nthis:\n  \\<forall>i j. i < j \\<longrightarrow> f j pd\\<rightarrow> f i\n  \\<forall>i j. i < j \\<longrightarrow> f i \\<noteq> f j\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence ****:\\<open>\\<forall> i>0. f i pd\\<rightarrow> f 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i j. i < j \\<longrightarrow> f j pd\\<rightarrow> f i\n  \\<forall>i j. i < j \\<longrightarrow> f i \\<noteq> f j\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. f i pd\\<rightarrow> f 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>i>0. f i pd\\<rightarrow> f 0\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence \\<open>f 0 \\<in> nodes\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i>0. f i pd\\<rightarrow> f 0\n\ngoal (1 subgoal):\n 1. f 0 \\<in> local.nodes", "using * is_pd_def"], ["proof (prove)\nusing this:\n  \\<forall>i>0. f i pd\\<rightarrow> f 0\n  \\<forall>i. (f i, f (Suc i)) \\<in> pdt\n  (?y pd\\<rightarrow> ?x) =\n  (?x \\<in> local.nodes \\<and>\n   (\\<forall>\\<pi> n.\n       is_path \\<pi> \\<and>\n       \\<pi> 0 = ?x \\<and> \\<pi> n = local.return \\<longrightarrow>\n       (\\<exists>k\\<le>n. \\<pi> k = ?y)))\n\ngoal (1 subgoal):\n 1. f 0 \\<in> local.nodes", "by fastforce"], ["proof (state)\nthis:\n  f 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  f 0 \\<in> local.nodes", "obtain \\<pi> n where \\<pi>:\\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = f 0\\<close> \\<open>\\<pi> n = return\\<close>"], ["proof (prove)\nusing this:\n  f 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = f 0;\n         \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret"], ["proof (prove)\nusing this:\n  f 0 \\<in> local.nodes\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = f 0;\n         \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = f 0\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence \\<open>\\<forall> i>0. \\<exists> k\\<le>n. \\<pi> k = f i\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = f 0\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i", "using ***(1) \\<open>f 0 \\<in> nodes\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = f 0\n  \\<pi> n = local.return\n  \\<forall>i j. i < j \\<longrightarrow> f j pd\\<rightarrow> f i\n  f 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = f 0\n  \\<pi> n = local.return\n  \\<forall>i j.\n     i < j \\<longrightarrow>\n     f i \\<in> local.nodes \\<and>\n     (\\<forall>\\<pi> n.\n         is_path \\<pi> \\<and>\n         \\<pi> 0 = f i \\<and> \\<pi> n = local.return \\<longrightarrow>\n         (\\<exists>k\\<le>n. \\<pi> k = f j))\n  f 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i", "by blast"], ["proof (state)\nthis:\n  \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence \\<pi>f:\\<open>\\<forall> i. \\<exists> k\\<le>n. \\<pi> k = f i\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<exists>k\\<le>n. \\<pi> k = f i", "using \\<pi>(2)"], ["proof (prove)\nusing this:\n  \\<forall>i>0. \\<exists>k\\<le>n. \\<pi> k = f i\n  \\<pi> 0 = f 0\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<exists>k\\<le>n. \\<pi> k = f i", "by (metis le0 not_gr_zero)"], ["proof (state)\nthis:\n  \\<forall>i. \\<exists>k\\<le>n. \\<pi> k = f i\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "have \\<open>range f \\<subseteq> \\<pi> ` {..n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. range f \\<subseteq> \\<pi> ` {..n}", "proof(rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> range f \\<Longrightarrow> x \\<in> \\<pi> ` {..n}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> range f \\<Longrightarrow> x \\<in> \\<pi> ` {..n}", "assume \\<open>x \\<in> range f\\<close>"], ["proof (state)\nthis:\n  x \\<in> range f\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> range f \\<Longrightarrow> x \\<in> \\<pi> ` {..n}", "then"], ["proof (chain)\npicking this:\n  x \\<in> range f", "obtain i where \\<open>x = f i\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> range f\n\ngoal (1 subgoal):\n 1. (\\<And>i. x = f i \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x = f i\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> range f \\<Longrightarrow> x \\<in> \\<pi> ` {..n}", "then"], ["proof (chain)\npicking this:\n  x = f i", "obtain k where \\<open>x = \\<pi> k\\<close> \\<open>k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  x = f i\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>x = \\<pi> k; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<pi>f"], ["proof (prove)\nusing this:\n  x = f i\n  \\<forall>i. \\<exists>k\\<le>n. \\<pi> k = f i\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>x = \\<pi> k; k \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  x = \\<pi> k\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> range f \\<Longrightarrow> x \\<in> \\<pi> ` {..n}", "thus \\<open>x \\<in> \\<pi> ` {..n}\\<close>"], ["proof (prove)\nusing this:\n  x = \\<pi> k\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> ` {..n}", "by simp"], ["proof (state)\nthis:\n  x \\<in> \\<pi> ` {..n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  range f \\<subseteq> \\<pi> ` {..n}\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence f:\\<open>finite (range f)\\<close>"], ["proof (prove)\nusing this:\n  range f \\<subseteq> \\<pi> ` {..n}\n\ngoal (1 subgoal):\n 1. finite (range f)", "using finite_surj"], ["proof (prove)\nusing this:\n  range f \\<subseteq> \\<pi> ` {..n}\n  \\<lbrakk>finite ?A; ?B \\<subseteq> ?f ` ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?B\n\ngoal (1 subgoal):\n 1. finite (range f)", "by auto"], ["proof (state)\nthis:\n  finite (range f)\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "hence fi:\\<open>\\<exists> i. infinite {j. f j = f i}\\<close>"], ["proof (prove)\nusing this:\n  finite (range f)\n\ngoal (1 subgoal):\n 1. \\<exists>i. infinite {j. f j = f i}", "using pigeonhole_infinite[OF _ f]"], ["proof (prove)\nusing this:\n  finite (range f)\n  infinite UNIV \\<Longrightarrow>\n  \\<exists>a0\\<in>UNIV. infinite {a \\<in> UNIV. f a = f a0}\n\ngoal (1 subgoal):\n 1. \\<exists>i. infinite {j. f j = f i}", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. infinite {j. f j = f i}\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "obtain i where \\<open>infinite {j. f j = f i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        infinite {j. f j = f i} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fi"], ["proof (prove)\nusing this:\n  \\<exists>i. infinite {j. f j = f i}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        infinite {j. f j = f i} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  infinite {j. f j = f i}\n\ngoal (1 subgoal):\n 1. \\<not> wf pdt_inv \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  infinite {j. f j = f i}\n\ngoal (1 subgoal):\n 1. False", "by (metis (mono_tags, lifting) \"***\"(2) bounded_nat_set_is_finite gt_ex mem_Collect_eq nat_neq_iff)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma return_pd: assumes \\<open>x \\<in> nodes\\<close> shows \\<open>return pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.return pd\\<rightarrow> x", "unfolding is_pd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = local.return))", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = local.return))", "by blast"], ["", "lemma pd_total: assumes xz: \\<open>x pd\\<rightarrow> z\\<close> and yz: \\<open>y pd\\<rightarrow> z\\<close> shows \\<open>x pd\\<rightarrow> y \\<or> y pd\\<rightarrow>x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "obtain \\<pi> n where path: \\<open>is_path \\<pi>\\<close> and \\<pi>0: \\<open>\\<pi> 0 = z\\<close> and \\<pi>n: \\<open>\\<pi> n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = z; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xz reaching_ret"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> z\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = z; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  z \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = z \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = x))\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = z; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = z\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have *: \\<open>\\<exists> k\\<le>n. (\\<pi> k = x \\<or> \\<pi> k = y)\\<close> (is \\<open>\\<exists> k\\<le>n. ?P k\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = x \\<or> \\<pi> k = y", "using path \\<pi>0 \\<pi>n xz yz"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = z\n  \\<pi> n = local.return\n  x pd\\<rightarrow> z\n  y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = x \\<or> \\<pi> k = y", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = z\n  \\<pi> n = local.return\n  z \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = z \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = x))\n  z \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = z \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n. \\<pi> k = x \\<or> \\<pi> k = y", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<le>n. \\<pi> k = x \\<or> \\<pi> k = y\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "obtain k where k: \\<open>k = (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k = (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  k = (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence kn: \\<open>k\\<le>n\\<close> and \\<pi>k: \\<open>\\<pi> k = x \\<or> \\<pi> k = y\\<close>"], ["proof (prove)\nusing this:\n  k = (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. k \\<le> n &&& \\<pi> k = x \\<or> \\<pi> k = y", "using LeastBI_ex[OF *]"], ["proof (prove)\nusing this:\n  k = (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y)\n  \\<pi> (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) = x \\<or>\n  \\<pi> (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) = y\n  (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) \\<le> n\n\ngoal (1 subgoal):\n 1. k \\<le> n &&& \\<pi> k = x \\<or> \\<pi> k = y", "by auto"], ["proof (state)\nthis:\n  k \\<le> n\n  \\<pi> k = x \\<or> \\<pi> k = y\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "note k_le = Least_le[where P = \\<open>?P\\<close>]"], ["proof (state)\nthis:\n  \\<pi> ?k = x \\<or> \\<pi> ?k = y \\<Longrightarrow>\n  (LEAST xa. \\<pi> xa = x \\<or> \\<pi> xa = y) \\<le> ?k\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "assume kx: \\<open>\\<pi> k = x\\<close>"], ["proof (state)\nthis:\n  \\<pi> k = x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have k_min: \\<open>\\<And> k'. \\<pi> k' = y \\<Longrightarrow> k \\<le> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k'. \\<pi> k' = y \\<Longrightarrow> k \\<le> k'", "using k_le"], ["proof (prove)\nusing this:\n  \\<pi> ?k = x \\<or> \\<pi> ?k = y \\<Longrightarrow>\n  (LEAST xa. \\<pi> xa = x \\<or> \\<pi> xa = y) \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<And>k'. \\<pi> k' = y \\<Longrightarrow> k \\<le> k'", "unfolding k"], ["proof (prove)\nusing this:\n  \\<pi> ?k = x \\<or> \\<pi> ?k = y \\<Longrightarrow>\n  (LEAST xa. \\<pi> xa = x \\<or> \\<pi> xa = y) \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<pi> k' = y \\<Longrightarrow>\n       (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) \\<le> k'", "by auto"], ["proof (state)\nthis:\n  \\<pi> ?k'1 = y \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "{"], ["proof (state)\nthis:\n  \\<pi> ?k'1 = y \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "fix \\<pi>' \n      and n' :: \\<open>nat\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "assume path': \\<open>is_path \\<pi>'\\<close> and \\<pi>'0: \\<open>\\<pi>' 0 = x\\<close> and \\<pi>'n': \\<open>\\<pi>' n' = return\\<close>"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = x\n  \\<pi>' n' = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have path'': \\<open>is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "using path_cons[OF path path'] kx \\<pi>'0"], ["proof (prove)\nusing this:\n  \\<pi> ?m = \\<pi>' 0 \\<Longrightarrow>\n  is_path (\\<pi> @\\<^bsup>?m\\<^esup> \\<pi>')\n  \\<pi> k = x\n  \\<pi>' 0 = x\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<pi>''0: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z", "using \\<pi>0"], ["proof (prove)\nusing this:\n  \\<pi> 0 = z\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z", "by simp"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<pi>''n: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k+n') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return", "using \\<pi>'n' kx \\<pi>'0"], ["proof (prove)\nusing this:\n  \\<pi>' n' = local.return\n  \\<pi> k = x\n  \\<pi>' 0 = x\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "obtain k' where k': \\<open>k' \\<le> k + n'\\<close> \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using yz path'' \\<pi>''0 \\<pi>''n"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> z\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  z \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = z \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have **: \\<open>k \\<le> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> k'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "assume \\<open>\\<not> k \\<le> k'\\<close>"], ["proof (state)\nthis:\n  \\<not> k \\<le> k'\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "hence \\<open>k' < k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k \\<le> k'\n\ngoal (1 subgoal):\n 1. k' < k", "by simp"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "hence \\<open>\\<pi> k' = y\\<close>"], ["proof (prove)\nusing this:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<pi> k' = y", "using k'"], ["proof (prove)\nusing this:\n  k' < k\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\n\ngoal (1 subgoal):\n 1. \\<pi> k' = y", "by auto"], ["proof (state)\nthis:\n  \\<pi> k' = y\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  k' < k\n  \\<pi> k' = y", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  k' < k\n  \\<pi> k' = y\n\ngoal (1 subgoal):\n 1. False", "using k_min"], ["proof (prove)\nusing this:\n  k' < k\n  \\<pi> k' = y\n  \\<pi> ?k'1 = y \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<le> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence \\<open>\\<pi>' (k' - k) = y\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> k'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' - k) = y", "using k' \\<pi>'0 kx"], ["proof (prove)\nusing this:\n  k \\<le> k'\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\n  \\<pi>' 0 = x\n  \\<pi> k = x\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' - k) = y", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k' - k) = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (k' - k) = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<open>(k' - k) \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' - k \\<le> n'", "using k'"], ["proof (prove)\nusing this:\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = y\n\ngoal (1 subgoal):\n 1. k' - k \\<le> n'", "by auto"], ["proof (state)\nthis:\n  k' - k \\<le> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (k' - k) = y\n  k' - k \\<le> n'", "have \\<open>\\<exists> k\\<le> n'. \\<pi>' k = y\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' - k) = y\n  k' - k \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n'. \\<pi>' k = y", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<le>n'. \\<pi>' k = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = x;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence \\<open>y pd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = x;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x", "using kx path_nodes path"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = x;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = y\n  \\<pi> k = x\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = x;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = y\n  \\<pi> k = x\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = y))", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n 2. \\<not> ?P \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", ".."], ["proof (state)\nthis:\n  x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "next \\<comment> \\<open>This is analogous argument\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "assume kx: \\<open>\\<pi> k \\<noteq> x\\<close>"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence ky: \\<open>\\<pi> k = y\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> k \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<pi> k = y", "using \\<pi>k"], ["proof (prove)\nusing this:\n  \\<pi> k \\<noteq> x\n  \\<pi> k = x \\<or> \\<pi> k = y\n\ngoal (1 subgoal):\n 1. \\<pi> k = y", "by auto"], ["proof (state)\nthis:\n  \\<pi> k = y\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have k_min: \\<open>\\<And> k'. \\<pi> k' = x \\<Longrightarrow> k \\<le> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k'. \\<pi> k' = x \\<Longrightarrow> k \\<le> k'", "using k_le"], ["proof (prove)\nusing this:\n  \\<pi> ?k = x \\<or> \\<pi> ?k = y \\<Longrightarrow>\n  (LEAST xa. \\<pi> xa = x \\<or> \\<pi> xa = y) \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<And>k'. \\<pi> k' = x \\<Longrightarrow> k \\<le> k'", "unfolding k"], ["proof (prove)\nusing this:\n  \\<pi> ?k = x \\<or> \\<pi> ?k = y \\<Longrightarrow>\n  (LEAST xa. \\<pi> xa = x \\<or> \\<pi> xa = y) \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<And>k'.\n       \\<pi> k' = x \\<Longrightarrow>\n       (LEAST k. \\<pi> k = x \\<or> \\<pi> k = y) \\<le> k'", "by auto"], ["proof (state)\nthis:\n  \\<pi> ?k'1 = x \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "{"], ["proof (state)\nthis:\n  \\<pi> ?k'1 = x \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "fix \\<pi>' \n      and n' :: \\<open>nat\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "assume path': \\<open>is_path \\<pi>'\\<close> and \\<pi>'0: \\<open>\\<pi>' 0 = y\\<close> and \\<pi>'n': \\<open>\\<pi>' n' = return\\<close>"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = y\n  \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have path'': \\<open>is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "using path_cons[OF path path'] ky \\<pi>'0"], ["proof (prove)\nusing this:\n  \\<pi> ?m = \\<pi>' 0 \\<Longrightarrow>\n  is_path (\\<pi> @\\<^bsup>?m\\<^esup> \\<pi>')\n  \\<pi> k = y\n  \\<pi>' 0 = y\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<pi>''0: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z", "using \\<pi>0"], ["proof (prove)\nusing this:\n  \\<pi> 0 = z\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z", "by simp"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<pi>''n: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k+n') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return", "using \\<pi>'n' ky \\<pi>'0"], ["proof (prove)\nusing this:\n  \\<pi>' n' = local.return\n  \\<pi> k = y\n  \\<pi>' 0 = y\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "obtain k' where k': \\<open>k' \\<le> k + n'\\<close> \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xz path'' \\<pi>''0 \\<pi>''n"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> z\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  z \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = z \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = x))\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') 0 = z\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') (k + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> k + n';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have **: \\<open>k \\<le> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> k'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "assume \\<open>\\<not> k \\<le> k'\\<close>"], ["proof (state)\nthis:\n  \\<not> k \\<le> k'\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "hence \\<open>k' < k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k \\<le> k'\n\ngoal (1 subgoal):\n 1. k' < k", "by simp"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "hence \\<open>\\<pi> k' = x\\<close>"], ["proof (prove)\nusing this:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<pi> k' = x", "using k'"], ["proof (prove)\nusing this:\n  k' < k\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\n\ngoal (1 subgoal):\n 1. \\<pi> k' = x", "by auto"], ["proof (state)\nthis:\n  \\<pi> k' = x\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> k' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  k' < k\n  \\<pi> k' = x", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  k' < k\n  \\<pi> k' = x\n\ngoal (1 subgoal):\n 1. False", "using k_min"], ["proof (prove)\nusing this:\n  k' < k\n  \\<pi> k' = x\n  \\<pi> ?k'1 = x \\<Longrightarrow> k \\<le> ?k'1\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<le> k'\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence \\<open>\\<pi>' (k' - k) = x\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> k'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' - k) = x", "using k' \\<pi>'0 ky"], ["proof (prove)\nusing this:\n  k \\<le> k'\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\n  \\<pi>' 0 = y\n  \\<pi> k = y\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' - k) = x", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k' - k) = x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (k' - k) = x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "have \\<open>(k' - k) \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' - k \\<le> n'", "using k'"], ["proof (prove)\nusing this:\n  k' \\<le> k + n'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>') k' = x\n\ngoal (1 subgoal):\n 1. k' - k \\<le> n'", "by auto"], ["proof (state)\nthis:\n  k' - k \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (k' - k) = x\n  k' - k \\<le> n'", "have \\<open>\\<exists> k\\<le> n'. \\<pi>' k = x\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' - k) = x\n  k' - k \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>n'. \\<pi>' k = x", "by auto"], ["proof (state)\nthis:\n  \\<exists>k\\<le>n'. \\<pi>' k = x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = y;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = x\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "hence \\<open>x pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = y;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = x\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y", "using ky path_nodes path"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = y;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = x\n  \\<pi> k = y\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = y;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k\\<le>?n'3. ?\\<pi>'3 k = x\n  \\<pi> k = y\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. y \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi> n.\n        is_path \\<pi> \\<and>\n        \\<pi> 0 = y \\<and> \\<pi> n = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>n. \\<pi> k = x))", "by auto"], ["proof (state)\nthis:\n  x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> x \\<Longrightarrow>\n    x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", ".."], ["proof (state)\nthis:\n  x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pds_finite: \\<open>finite {y . (x,y) \\<in> pdt}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {y. (x, y) \\<in> pdt}", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "assume \\<open>x \\<in> nodes\\<close>"], ["proof (state)\nthis:\n  x \\<in> local.nodes\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "then"], ["proof (chain)\npicking this:\n  x \\<in> local.nodes", "obtain \\<pi> n where \\<pi>:\\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "have *: \\<open>\\<forall> y \\<in> {y. (x,y)\\<in> pdt}. y pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. y pd\\<rightarrow> x", "using pdt_def"], ["proof (prove)\nusing this:\n  pdt = {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. y pd\\<rightarrow> x", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. y pd\\<rightarrow> x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "have \\<open>\\<forall> y \\<in> {y. (x,y)\\<in> pdt}. \\<exists> k \\<le> n. \\<pi> k = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. \\<exists>k\\<le>n. \\<pi> k = y", "using * \\<pi> is_pd_def"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. y pd\\<rightarrow> x\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  (?y pd\\<rightarrow> ?x) =\n  (?x \\<in> local.nodes \\<and>\n   (\\<forall>\\<pi> n.\n       is_path \\<pi> \\<and>\n       \\<pi> 0 = ?x \\<and> \\<pi> n = local.return \\<longrightarrow>\n       (\\<exists>k\\<le>n. \\<pi> k = ?y)))\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. \\<exists>k\\<le>n. \\<pi> k = y", "by blast"], ["proof (state)\nthis:\n  \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. \\<exists>k\\<le>n. \\<pi> k = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "hence \\<open>{y. (x,y)\\<in> pdt} \\<subseteq> \\<pi> ` {..n}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>{y. (x, y) \\<in> pdt}. \\<exists>k\\<le>n. \\<pi> k = y\n\ngoal (1 subgoal):\n 1. {y. (x, y) \\<in> pdt} \\<subseteq> \\<pi> ` {..n}", "by auto"], ["proof (state)\nthis:\n  {y. (x, y) \\<in> pdt} \\<subseteq> \\<pi> ` {..n}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}\n 2. \\<not> ?P \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "then"], ["proof (chain)\npicking this:\n  {y. (x, y) \\<in> pdt} \\<subseteq> \\<pi> ` {..n}", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  {y. (x, y) \\<in> pdt} \\<subseteq> \\<pi> ` {..n}\n\ngoal (1 subgoal):\n 1. finite {y. (x, y) \\<in> pdt}", "using finite_surj"], ["proof (prove)\nusing this:\n  {y. (x, y) \\<in> pdt} \\<subseteq> \\<pi> ` {..n}\n  \\<lbrakk>finite ?A; ?B \\<subseteq> ?f ` ?A\\<rbrakk>\n  \\<Longrightarrow> finite ?B\n\ngoal (1 subgoal):\n 1. finite {y. (x, y) \\<in> pdt}", "by blast"], ["proof (state)\nthis:\n  finite {y. (x, y) \\<in> pdt}\n\ngoal (1 subgoal):\n 1. x \\<notin> local.nodes \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> local.nodes \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "assume \\<open>\\<not> x\\<in> nodes\\<close>"], ["proof (state)\nthis:\n  x \\<notin> local.nodes\n\ngoal (1 subgoal):\n 1. x \\<notin> local.nodes \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "hence \\<open>{y. (x,y)\\<in>pdt} = {}\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> local.nodes\n\ngoal (1 subgoal):\n 1. {y. (x, y) \\<in> pdt} = {}", "unfolding pdt_def is_pd_def"], ["proof (prove)\nusing this:\n  x \\<notin> local.nodes\n\ngoal (1 subgoal):\n 1. {y. (x, y)\n        \\<in> {(x, y).\n               x \\<noteq> y \\<and>\n               x \\<in> local.nodes \\<and>\n               (\\<forall>\\<pi> n.\n                   is_path \\<pi> \\<and>\n                   \\<pi> 0 = x \\<and>\n                   \\<pi> n = local.return \\<longrightarrow>\n                   (\\<exists>k\\<le>n. \\<pi> k = y))}} =\n    {}", "using path_nodes reaching_ret"], ["proof (prove)\nusing this:\n  x \\<notin> local.nodes\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. {y. (x, y)\n        \\<in> {(x, y).\n               x \\<noteq> y \\<and>\n               x \\<in> local.nodes \\<and>\n               (\\<forall>\\<pi> n.\n                   is_path \\<pi> \\<and>\n                   \\<pi> 0 = x \\<and>\n                   \\<pi> n = local.return \\<longrightarrow>\n                   (\\<exists>k\\<le>n. \\<pi> k = y))}} =\n    {}", "by fastforce"], ["proof (state)\nthis:\n  {y. (x, y) \\<in> pdt} = {}\n\ngoal (1 subgoal):\n 1. x \\<notin> local.nodes \\<Longrightarrow> finite {y. (x, y) \\<in> pdt}", "then"], ["proof (chain)\npicking this:\n  {y. (x, y) \\<in> pdt} = {}", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  {y. (x, y) \\<in> pdt} = {}\n\ngoal (1 subgoal):\n 1. finite {y. (x, y) \\<in> pdt}", "by simp"], ["proof (state)\nthis:\n  finite {y. (x, y) \\<in> pdt}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_exists: assumes node: \\<open>x \\<in> nodes\\<close> and not_ret: \\<open>x\\<noteq>return\\<close> shows \\<open>\\<exists>y. y ipd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "let \\<open>?Q\\<close> = \\<open>{y. x\\<noteq>y \\<and> y pd\\<rightarrow> x}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "have *: \\<open>return \\<in> ?Q\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.return \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "using assms return_pd"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n  x \\<noteq> local.return\n  ?x \\<in> local.nodes \\<Longrightarrow> local.return pd\\<rightarrow> ?x\n\ngoal (1 subgoal):\n 1. local.return \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "by simp"], ["proof (state)\nthis:\n  local.return \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "hence **: \\<open>\\<exists> x. x\\<in> ?Q\\<close>"], ["proof (prove)\nusing this:\n  local.return \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<exists>xa. xa \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa. xa \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "have fin: \\<open>finite ?Q\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "using pds_finite"], ["proof (prove)\nusing this:\n  finite {y. (?x, y) \\<in> pdt}\n\ngoal (1 subgoal):\n 1. finite {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "unfolding pdt_def"], ["proof (prove)\nusing this:\n  finite\n   {y. (?x, y) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}}\n\ngoal (1 subgoal):\n 1. finite {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "by auto"], ["proof (state)\nthis:\n  finite {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "have tot: \\<open>\\<forall> y z. y\\<in>?Q \\<and> z \\<in> ?Q \\<longrightarrow> z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y z.\n       y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<and>\n       z \\<in> {y. x \\<noteq> y \\<and>\n                   y pd\\<rightarrow> x} \\<longrightarrow>\n       z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z", "using pd_total"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x pd\\<rightarrow> ?z; ?y pd\\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?x pd\\<rightarrow> ?y \\<or> ?y pd\\<rightarrow> ?x\n\ngoal (1 subgoal):\n 1. \\<forall>y z.\n       y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<and>\n       z \\<in> {y. x \\<noteq> y \\<and>\n                   y pd\\<rightarrow> x} \\<longrightarrow>\n       z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z", "by auto"], ["proof (state)\nthis:\n  \\<forall>y z.\n     y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<and>\n     z \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "obtain y where ymax: \\<open>y\\<in> ?Q\\<close> \\<open>\\<forall> z\\<in>?Q. z = y \\<or> z pd\\<rightarrow> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x};\n         \\<forall>z\\<in>{y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}.\n            z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fin ** tot"], ["proof (prove)\nusing this:\n  finite {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<exists>xa. xa \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<forall>y z.\n     y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<and>\n     z \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x} \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x};\n         \\<forall>z\\<in>{y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}.\n            z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y.\n                \\<lbrakk>y \\<in> {};\n                 \\<forall>z\\<in>{}. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x. x \\<in> {};\n     \\<forall>y z.\n        y \\<in> {} \\<and> z \\<in> {} \\<longrightarrow>\n        z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>y.\n                    \\<lbrakk>y \\<in> F;\n                     \\<forall>z\\<in>F.\n                        z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         \\<exists>x. x \\<in> F;\n         \\<forall>y z.\n            y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n            z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>y.\n           \\<lbrakk>y \\<in> insert x F;\n            \\<forall>z\\<in>insert x F.\n               z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<exists>xa. xa \\<in> insert x F;\n        \\<forall>y z.\n           y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n           z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n       \\<Longrightarrow> thesis", "case empty"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 \\<in> {};\n   \\<forall>z\\<in>{}. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> {}\n  \\<forall>y z.\n     y \\<in> {} \\<and> z \\<in> {} \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>y.\n                \\<lbrakk>y \\<in> {};\n                 \\<forall>z\\<in>{}. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<exists>x. x \\<in> {};\n     \\<forall>y z.\n        y \\<in> {} \\<and> z \\<in> {} \\<longrightarrow>\n        z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>y.\n                    \\<lbrakk>y \\<in> F;\n                     \\<forall>z\\<in>F.\n                        z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         \\<exists>x. x \\<in> F;\n         \\<forall>y z.\n            y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n            z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>y.\n           \\<lbrakk>y \\<in> insert x F;\n            \\<forall>z\\<in>insert x F.\n               z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<exists>xa. xa \\<in> insert x F;\n        \\<forall>y z.\n           y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n           z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 \\<in> {};\n   \\<forall>z\\<in>{}. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> {}\n  \\<forall>y z.\n     y \\<in> {} \\<and> z \\<in> {} \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<in> {};\n   \\<forall>z\\<in>{}. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> {}\n  \\<forall>y z.\n     y \\<in> {} \\<and> z \\<in> {} \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>y.\n                    \\<lbrakk>y \\<in> F;\n                     \\<forall>z\\<in>F.\n                        z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         \\<exists>x. x \\<in> F;\n         \\<forall>y z.\n            y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n            z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>y.\n           \\<lbrakk>y \\<in> insert x F;\n            \\<forall>z\\<in>insert x F.\n               z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<exists>xa. xa \\<in> insert x F;\n        \\<forall>y z.\n           y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n           z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>y.\n                    \\<lbrakk>y \\<in> F;\n                     \\<forall>z\\<in>F.\n                        z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         \\<exists>x. x \\<in> F;\n         \\<forall>y z.\n            y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n            z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>y.\n           \\<lbrakk>y \\<in> insert x F;\n            \\<forall>z\\<in>insert x F.\n               z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<exists>xa. xa \\<in> insert x F;\n        \\<forall>y z.\n           y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n           z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>y \\<in> F;\n               \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<exists>x. x \\<in> F;\n   \\<forall>y z.\n      y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n      z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?y1 \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> insert x F\n  \\<forall>y z.\n     y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<lbrakk>\\<And>y.\n                    \\<lbrakk>y \\<in> F;\n                     \\<forall>z\\<in>F.\n                        z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n                    \\<Longrightarrow> thesis;\n         \\<exists>x. x \\<in> F;\n         \\<forall>y z.\n            y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n            z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n        \\<Longrightarrow> thesis;\n        \\<And>y.\n           \\<lbrakk>y \\<in> insert x F;\n            \\<forall>z\\<in>insert x F.\n               z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<exists>xa. xa \\<in> insert x F;\n        \\<forall>y z.\n           y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n           z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \\<open>F = {}\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. F = {} \\<Longrightarrow> thesis\n 2. F \\<noteq> {} \\<Longrightarrow> thesis", "assume \\<open>F = {}\\<close>"], ["proof (state)\nthis:\n  F = {}\n\ngoal (2 subgoals):\n 1. F = {} \\<Longrightarrow> thesis\n 2. F \\<noteq> {} \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  F = {}\n\ngoal (1 subgoal):\n 1. thesis", "using insert(4)[of \\<open>x\\<close>]"], ["proof (prove)\nusing this:\n  F = {}\n  \\<lbrakk>x \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. F \\<noteq> {} \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<noteq> {} \\<Longrightarrow> thesis", "assume \\<open>F \\<noteq> {}\\<close>"], ["proof (state)\nthis:\n  F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. F \\<noteq> {} \\<Longrightarrow> thesis", "hence \\<open>\\<exists> x. x\\<in> F\\<close>"], ["proof (prove)\nusing this:\n  F \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> F", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> F\n\ngoal (1 subgoal):\n 1. F \\<noteq> {} \\<Longrightarrow> thesis", "have \\<open>\\<And>y. y \\<in> F \\<Longrightarrow> \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume a: \\<open>y \\<in> F\\<close> \\<open>\\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<close>"], ["proof (state)\nthis:\n  y \\<in> F\n  \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>x \\<noteq> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y", "using insert a"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>y \\<in> F;\n               \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<exists>x. x \\<in> F;\n   \\<forall>y z.\n      y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n      z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?y1 \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> insert x F\n  \\<forall>y z.\n     y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n  y \\<in> F\n  \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "using insert(6) a(1)"], ["proof (prove)\nusing this:\n  \\<forall>y z.\n     y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n  y \\<in> F\n\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x", "by auto"], ["proof (state)\nthis:\n  x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> F;\n        \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> y \\<or> y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x pd\\<rightarrow> y \\<Longrightarrow> thesis\n 2. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "assume \\<open>x pd\\<rightarrow> y\\<close>"], ["proof (state)\nthis:\n  x pd\\<rightarrow> y\n\ngoal (2 subgoals):\n 1. x pd\\<rightarrow> y \\<Longrightarrow> thesis\n 2. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "hence \\<open>\\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y", "using a(2)"], ["proof (prove)\nusing this:\n  x pd\\<rightarrow> y\n  \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y", "by blast"], ["proof (state)\nthis:\n  \\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (2 subgoals):\n 1. x pd\\<rightarrow> y \\<Longrightarrow> thesis\n 2. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. thesis", "using a(1) insert(4)"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>insert x F. z = y \\<or> z pd\\<rightarrow> y\n  y \\<in> F\n  \\<lbrakk>?y1 \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "assume \\<open>y pd\\<rightarrow> x\\<close>"], ["proof (state)\nthis:\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "have \\<open>\\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> insert x F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> insert x F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "assume \\<open>z\\<in> insert x F\\<close>"], ["proof (state)\nthis:\n  z \\<in> insert x F\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> insert x F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "thus \\<open>z = x \\<or> z pd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> insert x F\n\ngoal (1 subgoal):\n 1. z = x \\<or> z pd\\<rightarrow> x", "proof(rule,simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<in> F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "assume \\<open>z\\<in>F\\<close>"], ["proof (state)\nthis:\n  z \\<in> F\n\ngoal (1 subgoal):\n 1. z \\<in> F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "hence \\<open>z = y \\<or> z pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  z \\<in> F\n\ngoal (1 subgoal):\n 1. z = y \\<or> z pd\\<rightarrow> y", "using a(2)"], ["proof (prove)\nusing this:\n  z \\<in> F\n  \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z = y \\<or> z pd\\<rightarrow> y", "by auto"], ["proof (state)\nthis:\n  z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z \\<in> F \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "thus \\<open>z = x \\<or> z pd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z = x \\<or> z pd\\<rightarrow> x", "proof(rule,simp add: \\<open>y pd\\<rightarrow> x\\<close>)"], ["proof (state)\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "assume \\<open>z pd\\<rightarrow> y\\<close>"], ["proof (state)\nthis:\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y \\<Longrightarrow> z = x \\<or> z pd\\<rightarrow> x", "show \\<open>z = x \\<or> z pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. z = x \\<or> z pd\\<rightarrow> x", "using \\<open>y pd\\<rightarrow> x\\<close> \\<open>z pd\\<rightarrow> y\\<close> pd_trans"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n  z pd\\<rightarrow> y\n  \\<lbrakk>?y pd\\<rightarrow> ?x; ?z pd\\<rightarrow> ?y\\<rbrakk>\n  \\<Longrightarrow> ?z pd\\<rightarrow> ?x\n\ngoal (1 subgoal):\n 1. z = x \\<or> z pd\\<rightarrow> x", "by blast"], ["proof (state)\nthis:\n  z = x \\<or> z pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z = x \\<or> z pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z = x \\<or> z pd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. thesis", "using insert"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>insert x F. z = x \\<or> z pd\\<rightarrow> x\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>y \\<in> F;\n               \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<exists>x. x \\<in> F;\n   \\<forall>y z.\n      y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n      z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?y1 \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> insert x F\n  \\<forall>y z.\n     y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 \\<in> F;\n   \\<forall>z\\<in>F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. F \\<noteq> {} \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 \\<in> F;\n   \\<forall>z\\<in>F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<in> F;\n   \\<forall>z\\<in>F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using insert"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 \\<in> F;\n   \\<forall>z\\<in>F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>y.\n              \\<lbrakk>y \\<in> F;\n               \\<forall>z\\<in>F. z = y \\<or> z pd\\<rightarrow> y\\<rbrakk>\n              \\<Longrightarrow> thesis;\n   \\<exists>x. x \\<in> F;\n   \\<forall>y z.\n      y \\<in> F \\<and> z \\<in> F \\<longrightarrow>\n      z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?y1 \\<in> insert x F;\n   \\<forall>z\\<in>insert x F. z = ?y1 \\<or> z pd\\<rightarrow> ?y1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<exists>x. x \\<in> insert x F\n  \\<forall>y z.\n     y \\<in> insert x F \\<and> z \\<in> insert x F \\<longrightarrow>\n     z pd\\<rightarrow> y \\<or> y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<forall>z\\<in>{y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}.\n     z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "hence ***: \\<open>y pd\\<rightarrow> x\\<close> \\<open>x\\<noteq>y\\<close>"], ["proof (prove)\nusing this:\n  y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<forall>z\\<in>{y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}.\n     z = y \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> x &&& x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> x\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "have \\<open>\\<forall> z. z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow> z pd\\<rightarrow> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n       z pd\\<rightarrow> y", "proof (rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<Longrightarrow>\n       z pd\\<rightarrow> y", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<Longrightarrow>\n       z pd\\<rightarrow> y", "assume a: \\<open> z \\<noteq> x \\<and> z pd\\<rightarrow> x\\<close>"], ["proof (state)\nthis:\n  z \\<noteq> x \\<and> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<Longrightarrow>\n       z pd\\<rightarrow> y", "hence b: \\<open>z \\<in> ?Q\\<close>"], ["proof (prove)\nusing this:\n  z \\<noteq> x \\<and> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. z \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "by auto"], ["proof (state)\nthis:\n  z \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<Longrightarrow>\n       z pd\\<rightarrow> y", "have \\<open>y pd\\<rightarrow> z \\<or> z pd\\<rightarrow> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> z \\<or> z pd\\<rightarrow> y", "using pd_total ***(1) a"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x pd\\<rightarrow> ?z; ?y pd\\<rightarrow> ?z\\<rbrakk>\n  \\<Longrightarrow> ?x pd\\<rightarrow> ?y \\<or> ?y pd\\<rightarrow> ?x\n  y pd\\<rightarrow> x\n  z \\<noteq> x \\<and> z pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> z \\<or> z pd\\<rightarrow> y", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> z \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<Longrightarrow>\n       z pd\\<rightarrow> y", "thus \\<open>z pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> z \\<or> z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> z \\<Longrightarrow> z pd\\<rightarrow> y\n 2. z pd\\<rightarrow> y \\<Longrightarrow> z pd\\<rightarrow> y", "assume c: \\<open>y pd\\<rightarrow> z\\<close>"], ["proof (state)\nthis:\n  y pd\\<rightarrow> z\n\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> z \\<Longrightarrow> z pd\\<rightarrow> y\n 2. z pd\\<rightarrow> y \\<Longrightarrow> z pd\\<rightarrow> y", "hence \\<open>y = z\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. y = z", "using b ymax pdt_def pd_antisym"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> z\n  z \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  y \\<in> {y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<forall>z\\<in>{y. x \\<noteq> y \\<and> y pd\\<rightarrow> x}.\n     z = y \\<or> z pd\\<rightarrow> y\n  pdt = {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n  \\<lbrakk>?x pd\\<rightarrow> ?y; ?y pd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. y = z", "by auto"], ["proof (state)\nthis:\n  y = z\n\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> z \\<Longrightarrow> z pd\\<rightarrow> y\n 2. z pd\\<rightarrow> y \\<Longrightarrow> z pd\\<rightarrow> y", "thus \\<open>z pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  y = z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y", "using c"], ["proof (prove)\nusing this:\n  y = z\n  y pd\\<rightarrow> z\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y", "by simp"], ["proof (state)\nthis:\n  z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. z pd\\<rightarrow> y \\<Longrightarrow> z pd\\<rightarrow> y", "qed simp"], ["proof (state)\nthis:\n  z pd\\<rightarrow> y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>z.\n     z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n     z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "with ***"], ["proof (chain)\npicking this:\n  y pd\\<rightarrow> x\n  x \\<noteq> y\n  \\<forall>z.\n     z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n     z pd\\<rightarrow> y", "have  \\<open>y ipd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n  x \\<noteq> y\n  \\<forall>z.\n     z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n     z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y ipd\\<rightarrow> x", "unfolding is_ipd_def"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n  x \\<noteq> y\n  \\<forall>z.\n     z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n     z pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<and>\n    y pd\\<rightarrow> x \\<and>\n    (\\<forall>z.\n        z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n        z pd\\<rightarrow> y)", "by simp"], ["proof (state)\nthis:\n  y ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<exists>y. y ipd\\<rightarrow> x", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. y ipd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_unique: assumes yipd: \\<open>y ipd\\<rightarrow> x\\<close> and y'ipd: \\<open>y' ipd\\<rightarrow> x\\<close> shows \\<open>y = y'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = y'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y = y'", "have 1: \\<open>y pd\\<rightarrow> y'\\<close> and  2: \\<open>y' pd\\<rightarrow> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> y' &&& y' pd\\<rightarrow> y", "using yipd y'ipd"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n  y' ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> y' &&& y' pd\\<rightarrow> y", "unfolding is_ipd_def"], ["proof (prove)\nusing this:\n  x \\<noteq> y \\<and>\n  y pd\\<rightarrow> x \\<and>\n  (\\<forall>z.\n      z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n      z pd\\<rightarrow> y)\n  x \\<noteq> y' \\<and>\n  y' pd\\<rightarrow> x \\<and>\n  (\\<forall>z.\n      z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n      z pd\\<rightarrow> y')\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> y' &&& y' pd\\<rightarrow> y", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> y'\n  y' pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y = y'", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y = y'", "using pd_antisym[OF 1 2]"], ["proof (prove)\nusing this:\n  y = y'\n\ngoal (1 subgoal):\n 1. y = y'", "."], ["proof (state)\nthis:\n  y = y'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_is_ipd: assumes \\<open>x \\<in> nodes\\<close> and \\<open>x\\<noteq>return\\<close> shows \\<open>ipd x ipd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> local.nodes\n  x \\<noteq> local.return", "obtain y where \\<open>y ipd\\<rightarrow> x\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y ipd\\<rightarrow> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ipd_exists"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes\n  x \\<noteq> local.return\n  \\<lbrakk>?x \\<in> local.nodes; ?x \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>y. y ipd\\<rightarrow> ?x\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y ipd\\<rightarrow> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "moreover"], ["proof (state)\nthis:\n  y ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "hence \\<open>\\<And> z. z ipd\\<rightarrow>x \\<Longrightarrow> z = y\\<close>"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. \\<And>z. z ipd\\<rightarrow> x \\<Longrightarrow> z = y", "using ipd_unique"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n  \\<lbrakk>?y ipd\\<rightarrow> ?x; ?y' ipd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?y = ?y'\n\ngoal (1 subgoal):\n 1. \\<And>z. z ipd\\<rightarrow> x \\<Longrightarrow> z = y", "by simp"], ["proof (state)\nthis:\n  ?z1 ipd\\<rightarrow> x \\<Longrightarrow> ?z1 = y\n\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "ultimately"], ["proof (chain)\npicking this:\n  y ipd\\<rightarrow> x\n  ?z1 ipd\\<rightarrow> x \\<Longrightarrow> ?z1 = y", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n  ?z1 ipd\\<rightarrow> x \\<Longrightarrow> ?z1 = y\n\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "unfolding ipd_def"], ["proof (prove)\nusing this:\n  y ipd\\<rightarrow> x\n  ?z1 ipd\\<rightarrow> x \\<Longrightarrow> ?z1 = y\n\ngoal (1 subgoal):\n 1. (THE y. y ipd\\<rightarrow> x) ipd\\<rightarrow> x", "by (auto intro: theI2)"], ["proof (state)\nthis:\n  ipd x ipd\\<rightarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_ipd_in_pdt: \\<open>y ipd\\<rightarrow> x \\<Longrightarrow> (x,y) \\<in> pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y ipd\\<rightarrow> x \\<Longrightarrow> (x, y) \\<in> pdt", "unfolding is_ipd_def pdt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<and>\n    y pd\\<rightarrow> x \\<and>\n    (\\<forall>z.\n        z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n        z pd\\<rightarrow> y) \\<Longrightarrow>\n    (x, y) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}", "by auto"], ["", "lemma ipd_in_pdt: \\<open>x \\<in> nodes \\<Longrightarrow> x\\<noteq>return \\<Longrightarrow> (x,ipd x) \\<in> pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> local.nodes; x \\<noteq> local.return\\<rbrakk>\n    \\<Longrightarrow> (x, ipd x) \\<in> pdt", "by (metis ipd_is_ipd is_ipd_in_pdt)"], ["", "lemma no_pd_path: assumes \\<open>x \\<in> nodes\\<close> and \\<open>\\<not> y pd\\<rightarrow> x\\<close>\nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 = x\\<close> and \\<open>\\<pi> n = return\\<close> and \\<open>\\<forall> k \\<le> n. \\<pi> k \\<noteq> y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>k\\<le>n. \\<pi> k \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>k\\<le>n. \\<pi> k \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume \\<open>\\<not> thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>k\\<le>n. \\<pi> k \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<forall> \\<pi> n.  is_path \\<pi> \\<and> \\<pi> 0 = x \\<and> \\<pi> n = return \\<longrightarrow> (\\<exists> k\\<le>n . \\<pi> k = y)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>\\<pi> n.\n       is_path \\<pi> \\<and>\n       \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n       (\\<exists>k\\<le>n. \\<pi> k = y)", "using that"], ["proof (prove)\nusing this:\n  \\<not> thesis\n  \\<lbrakk>is_path ?\\<pi>1; ?\\<pi>1 0 = x; ?\\<pi>1 ?n1 = local.return;\n   \\<forall>k\\<le>?n1. ?\\<pi>1 k \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>\\<pi> n.\n       is_path \\<pi> \\<and>\n       \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n       (\\<exists>k\\<le>n. \\<pi> k = y)", "by force"], ["proof (state)\nthis:\n  \\<forall>\\<pi> n.\n     is_path \\<pi> \\<and>\n     \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n     (\\<exists>k\\<le>n. \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>k\\<le>n. \\<pi> k \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>\\<pi> n.\n     is_path \\<pi> \\<and>\n     \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n     (\\<exists>k\\<le>n. \\<pi> k = y)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>\\<pi> n.\n     is_path \\<pi> \\<and>\n     \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n     (\\<exists>k\\<le>n. \\<pi> k = y)\n  x \\<in> local.nodes\n  \\<not> y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. False", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<forall>\\<pi> n.\n     is_path \\<pi> \\<and>\n     \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n     (\\<exists>k\\<le>n. \\<pi> k = y)\n  x \\<in> local.nodes\n  \\<not> (x \\<in> local.nodes \\<and>\n          (\\<forall>\\<pi> n.\n              is_path \\<pi> \\<and>\n              \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n              (\\<exists>k\\<le>n. \\<pi> k = y)))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_pd_ipd: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq>return\\<close> \\<open>y\\<noteq>x\\<close> \\<open>y pd\\<rightarrow> x\\<close> shows \\<open>y pd\\<rightarrow> ipd x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "have \\<open>ipd x pd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd x pd\\<rightarrow> x", "by (metis assms(1,2) ipd_is_ipd is_ipd_def)"], ["proof (state)\nthis:\n  ipd x pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "hence \\<open>y pd\\<rightarrow> ipd x \\<or> ipd x pd\\<rightarrow> y\\<close>"], ["proof (prove)\nusing this:\n  ipd x pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x \\<or> ipd x pd\\<rightarrow> y", "by (metis assms(4) pd_total)"], ["proof (state)\nthis:\n  y pd\\<rightarrow> ipd x \\<or> ipd x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> ipd x \\<or> ipd x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> ipd x \\<Longrightarrow> y pd\\<rightarrow> ipd x\n 2. ipd x pd\\<rightarrow> y \\<Longrightarrow> y pd\\<rightarrow> ipd x", "have 1: \\<open>ipd x ipd\\<rightarrow> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd x ipd\\<rightarrow> x", "by (metis assms(1,2) ipd_is_ipd)"], ["proof (state)\nthis:\n  ipd x ipd\\<rightarrow> x\n\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> ipd x \\<Longrightarrow> y pd\\<rightarrow> ipd x\n 2. ipd x pd\\<rightarrow> y \\<Longrightarrow> y pd\\<rightarrow> ipd x", "moreover"], ["proof (state)\nthis:\n  ipd x ipd\\<rightarrow> x\n\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> ipd x \\<Longrightarrow> y pd\\<rightarrow> ipd x\n 2. ipd x pd\\<rightarrow> y \\<Longrightarrow> y pd\\<rightarrow> ipd x", "assume \\<open>ipd x pd\\<rightarrow> y\\<close>"], ["proof (state)\nthis:\n  ipd x pd\\<rightarrow> y\n\ngoal (2 subgoals):\n 1. y pd\\<rightarrow> ipd x \\<Longrightarrow> y pd\\<rightarrow> ipd x\n 2. ipd x pd\\<rightarrow> y \\<Longrightarrow> y pd\\<rightarrow> ipd x", "ultimately"], ["proof (chain)\npicking this:\n  ipd x ipd\\<rightarrow> x\n  ipd x pd\\<rightarrow> y", "show \\<open>y pd\\<rightarrow> ipd x\\<close>"], ["proof (prove)\nusing this:\n  ipd x ipd\\<rightarrow> x\n  ipd x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "unfolding is_ipd_def"], ["proof (prove)\nusing this:\n  x \\<noteq> ipd x \\<and>\n  ipd x pd\\<rightarrow> x \\<and>\n  (\\<forall>z.\n      z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n      z pd\\<rightarrow> ipd x)\n  ipd x pd\\<rightarrow> y\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "using assms(3,4)"], ["proof (prove)\nusing this:\n  x \\<noteq> ipd x \\<and>\n  ipd x pd\\<rightarrow> x \\<and>\n  (\\<forall>z.\n      z \\<noteq> x \\<and> z pd\\<rightarrow> x \\<longrightarrow>\n      z pd\\<rightarrow> ipd x)\n  ipd x pd\\<rightarrow> y\n  y \\<noteq> x\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x", "by auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> ipd x\n\ngoal (1 subgoal):\n 1. y pd\\<rightarrow> ipd x \\<Longrightarrow> y pd\\<rightarrow> ipd x", "qed auto"], ["proof (state)\nthis:\n  y pd\\<rightarrow> ipd x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_nodes: assumes \\<open>y pd\\<rightarrow> x\\<close> shows pd_node1: \\<open>y \\<in> nodes\\<close> and pd_node2: \\<open>x \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> local.nodes &&& x \\<in> local.nodes", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> local.nodes\n 2. x \\<in> local.nodes", "obtain \\<pi> k where \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> k = y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> k = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> k = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> k = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> k.\n        \\<lbrakk>is_path \\<pi>; \\<pi> k = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> k = y\n\ngoal (2 subgoals):\n 1. y \\<in> local.nodes\n 2. x \\<in> local.nodes", "thus \\<open>y \\<in> nodes\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> k = y\n\ngoal (1 subgoal):\n 1. y \\<in> local.nodes", "using path_nodes"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> k = y\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. y \\<in> local.nodes", "by auto"], ["proof (state)\nthis:\n  y \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "show \\<open>x \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "using assms"], ["proof (prove)\nusing this:\n  y pd\\<rightarrow> x\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  x \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = x \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = y))\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "by simp"], ["proof (state)\nthis:\n  x \\<in> local.nodes\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_ret_is_ret: \\<open>x pd\\<rightarrow> return \\<Longrightarrow> x = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x pd\\<rightarrow> local.return \\<Longrightarrow> x = local.return", "by (metis pd_antisym pd_node1 return_pd)"], ["", "lemma ret_path_none_pd: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq>return\\<close> \nobtains \\<pi> n where \\<open>is_path \\<pi>\\<close>  \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close>  \\<open>\\<forall> i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume \\<open>\\<not>thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence *: \\<open>\\<And> \\<pi> n. \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = return\\<rbrakk> \\<Longrightarrow> \\<exists>i>0. x pd\\<rightarrow> \\<pi> i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i>0. x pd\\<rightarrow> \\<pi> i", "using that"], ["proof (prove)\nusing this:\n  \\<not> thesis\n  \\<lbrakk>is_path ?\\<pi>1; ?\\<pi>1 0 = x; ?\\<pi>1 ?n1 = local.return;\n   \\<forall>i>0. \\<not> x pd\\<rightarrow> ?\\<pi>1 i\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i>0. x pd\\<rightarrow> \\<pi> i", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>1; ?\\<pi>1 0 = x;\n   ?\\<pi>1 ?n1 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i>0. x pd\\<rightarrow> ?\\<pi>1 i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "obtain \\<pi> n where **: \\<open>is_path \\<pi>\\<close>  \\<open>\\<pi> 0 = x\\<close> \\<open>\\<pi> n = return\\<close> \\<open>\\<forall> i>0. \\<pi> i \\<noteq> x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>i>0. \\<pi> i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using direct_path_return[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi> n.\n      \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n       \\<forall>i>0. \\<pi> i \\<noteq> x\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi> n.\n        \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n         \\<forall>i>0. \\<pi> i \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  \\<forall>i>0. \\<pi> i \\<noteq> x", "obtain i where ***: \\<open>i>0\\<close> \\<open>x pd\\<rightarrow> \\<pi> i\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>0 < i; x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n  \\<lbrakk>is_path ?\\<pi>1; ?\\<pi>1 0 = x;\n   ?\\<pi>1 ?n1 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i>0. x pd\\<rightarrow> ?\\<pi>1 i\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>0 < i; x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < i\n  x pd\\<rightarrow> \\<pi> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  0 < i\n  x pd\\<rightarrow> \\<pi> i\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "using pd_ret_is_ret assms(2)"], ["proof (prove)\nusing this:\n  0 < i\n  x pd\\<rightarrow> \\<pi> i\n  ?x pd\\<rightarrow> local.return \\<Longrightarrow> ?x = local.return\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>i < n\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i < n", "using assms(2) term_path_stable **"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  x \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  is_path \\<pi>\n  \\<pi> 0 = x\n  \\<pi> n = local.return\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n\ngoal (1 subgoal):\n 1. i < n", "by (metis linorder_neqE_nat less_imp_le)"], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>i)(n-i) = return\\<close>"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) (n - i) = local.return", "using **(3)"], ["proof (prove)\nusing this:\n  i < n\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) (n - i) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>(\\<pi>\\<guillemotleft>i) (0) = \\<pi> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i", "by simp"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>is_path (\\<pi>\\<guillemotleft>i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "using **(1) path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "by metis"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n  is_path (\\<pi> \\<guillemotleft> i)", "obtain k where \\<open>(\\<pi>\\<guillemotleft>i) k = x\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (\\<pi> \\<guillemotleft> i) k = x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ***(2)"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n  is_path (\\<pi> \\<guillemotleft> i)\n  x pd\\<rightarrow> \\<pi> i\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (\\<pi> \\<guillemotleft> i) k = x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) (n - i) = local.return\n  (\\<pi> \\<guillemotleft> i) 0 = \\<pi> i\n  is_path (\\<pi> \\<guillemotleft> i)\n  \\<pi> i \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' n.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> i \\<and> \\<pi>' n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi>' k = x))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (\\<pi> \\<guillemotleft> i) k = x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) k = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<pi> (i + k) = x\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) k = x\n\ngoal (1 subgoal):\n 1. \\<pi> (i + k) = x", "by auto"], ["proof (state)\nthis:\n  \\<pi> (i + k) = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<pi> n.\n                \\<lbrakk>is_path \\<pi>; \\<pi> 0 = x; \\<pi> n = local.return;\n                 \\<forall>i>0. \\<not> x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (i + k) = x\n\ngoal (1 subgoal):\n 1. False", "using **(4) \\<open>i>0\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (i + k) = x\n  \\<forall>i>0. \\<pi> i \\<noteq> x\n  0 < i\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_pd_ipd0': assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> n \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> 0\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> n\\<close> and \\<open>\\<pi> k = ipd(\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have *: \\<open>\\<pi> n pd\\<rightarrow> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> ipd (\\<pi> 0)", "by (metis is_pd_def assms(3,4) pd_pd_ipd pd_ret_is_ret)"], ["proof (state)\nthis:\n  \\<pi> n pd\\<rightarrow> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "obtain \\<pi>' n' where **: \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' 0 = \\<pi> n\\<close> \\<open>\\<pi>' n' = return\\<close> \\<open>\\<forall> i>0. \\<not> \\<pi> n pd\\<rightarrow> \\<pi>' i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> n;\n         \\<pi>' n' = local.return;\n         \\<forall>i>0. \\<not> \\<pi> n pd\\<rightarrow> \\<pi>' i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(2) assms(4) pd_node1 ret_path_none_pd)"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> n\n  \\<pi>' n' = local.return\n  \\<forall>i>0. \\<not> \\<pi> n pd\\<rightarrow> \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<forall> i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> n\n  \\<pi>' n' = local.return\n  \\<forall>i>0. \\<not> \\<pi> n pd\\<rightarrow> \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)", "using *"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> n\n  \\<pi>' n' = local.return\n  \\<forall>i>0. \\<not> \\<pi> n pd\\<rightarrow> \\<pi>' i\n  \\<pi> n pd\\<rightarrow> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)", "by metis"], ["proof (state)\nthis:\n  \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume \\<open>\\<not> thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<forall> k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)", "using that"], ["proof (prove)\nusing this:\n  \\<not> thesis\n  \\<lbrakk>?k1 \\<le> n; \\<pi> ?k1 = ipd (\\<pi> 0)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)", "by blast"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)\n  \\<forall>k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)", "have \\<open>\\<forall> i. (\\<pi>@\\<^bsup>n\\<^esup>  \\<pi>') i \\<noteq> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i>0. \\<pi>' i \\<noteq> ipd (\\<pi> 0)\n  \\<forall>k\\<le>n. \\<pi> k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)", "by (metis diff_is_0_eq neq0_conv path_append_def)"], ["proof (state)\nthis:\n  \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>n\\<^esup>  \\<pi>') (n + n') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return", "by (metis \\<open>\\<pi>' 0 = \\<pi> n\\<close> \\<open>\\<pi>' n' = return\\<close> add_diff_cancel_left' assms(2) diff_is_0_eq path_append_def)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>n\\<^esup>  \\<pi>') 0 = \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0", "by (metis le0 path_append_def)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>is_path (\\<pi>@\\<^bsup>n\\<^esup>  \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')", "by (metis \\<open>\\<pi>' 0 = \\<pi> n\\<close> \\<open>is_path \\<pi>'\\<close> assms(1) path_cons)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0", "by (metis **(2,3,4) assms(2) assms(4) ipd_is_ipd is_ipd_def neq0_conv pd_node2)"], ["proof (state)\nthis:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>\\<pi> 0 \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> 0 \\<in> local.nodes", "by (metis assms(1) path_nodes)"], ["proof (state)\nthis:\n  \\<pi> 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n  \\<pi> 0 \\<in> local.nodes", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n  \\<pi> 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. False", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<forall>i. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') i \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = \\<pi> 0\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  \\<pi> 0 \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' n.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> 0 \\<and> \\<pi>' n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi>' k = ipd (\\<pi> 0)))\n  \\<pi> 0 \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_pd_ipd0: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> 0 \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> 0\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> n\\<close> and \\<open>\\<pi> k = ipd(\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \\<open>\\<pi> n = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> n = local.return\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<open>ipd (\\<pi> 0) pd\\<rightarrow> (\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0", "by (metis is_ipd_def is_pd_def assms(2,4) ipd_is_ipd)"], ["proof (state)\nthis:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "with assms(1,2,3) *"], ["proof (chain)\npicking this:\n  is_path \\<pi>\n  \\<pi> 0 \\<noteq> local.return\n  \\<pi> n \\<noteq> \\<pi> 0\n  \\<pi> n = local.return\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 \\<noteq> local.return\n  \\<pi> n \\<noteq> \\<pi> 0\n  \\<pi> n = local.return\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> 0 \\<noteq> local.return\n  \\<pi> n \\<noteq> \\<pi> 0\n  \\<pi> n = local.return\n  \\<pi> 0 \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' n.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> 0 \\<and> \\<pi>' n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi>' k = ipd (\\<pi> 0)))\n\ngoal (1 subgoal):\n 1. thesis", "by (metis that)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<pi> n \\<noteq> local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<pi> n \\<noteq> local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<pi> n \\<noteq> local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "from path_pd_ipd0' [OF assms(1) this assms(3,4)] that"], ["proof (chain)\npicking this:\n  (\\<And>k.\n      \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?k1 \\<le> n; \\<pi> ?k1 = ipd (\\<pi> 0)\\<rbrakk>\n  \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>k.\n      \\<lbrakk>k \\<le> n; \\<pi> k = ipd (\\<pi> 0)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?k1 \\<le> n; \\<pi> ?k1 = ipd (\\<pi> 0)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_pd_ipd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>\\<pi> n \\<noteq> \\<pi> k\\<close> and \\<open>\\<pi> n pd\\<rightarrow> \\<pi> k\\<close> and kn: \\<open>k < n\\<close> \nobtains l where \\<open>k < l\\<close> and \\<open>l \\<le> n\\<close> and \\<open>\\<pi> l = ipd(\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>is_path (\\<pi> \\<guillemotleft> k)\\<close> \\<open>(\\<pi> \\<guillemotleft> k) 0 \\<noteq> return\\<close> \\<open>(\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0\\<close> \\<open>(\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow> (\\<pi> \\<guillemotleft> k) 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_path (\\<pi> \\<guillemotleft> k) &&&\n     (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return) &&&\n    (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq>\n    (\\<pi> \\<guillemotleft> k) 0 &&&\n    (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n    (\\<pi> \\<guillemotleft> k) 0", "using assms path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n  \\<pi> n \\<noteq> \\<pi> k\n  \\<pi> n pd\\<rightarrow> \\<pi> k\n  k < n\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. (is_path (\\<pi> \\<guillemotleft> k) &&&\n     (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return) &&&\n    (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq>\n    (\\<pi> \\<guillemotleft> k) 0 &&&\n    (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n    (\\<pi> \\<guillemotleft> k) 0", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0\n  (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) 0\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with path_pd_ipd0[of \\<open>\\<pi>\\<guillemotleft>k\\<close> \\<open>n-k\\<close>]"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_path (\\<pi> \\<guillemotleft> k);\n   (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return;\n   (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0;\n   (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n   (\\<pi> \\<guillemotleft> k) 0;\n   \\<And>ka.\n      \\<lbrakk>ka \\<le> n - k;\n       (\\<pi> \\<guillemotleft> k) ka =\n       ipd ((\\<pi> \\<guillemotleft> k) 0)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0\n  (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) 0", "obtain ka where \\<open>ka \\<le> n - k\\<close> \\<open>(\\<pi> \\<guillemotleft> k) ka = ipd ((\\<pi> \\<guillemotleft> k) 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path (\\<pi> \\<guillemotleft> k);\n   (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return;\n   (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0;\n   (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n   (\\<pi> \\<guillemotleft> k) 0;\n   \\<And>ka.\n      \\<lbrakk>ka \\<le> n - k;\n       (\\<pi> \\<guillemotleft> k) ka =\n       ipd ((\\<pi> \\<guillemotleft> k) 0)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> (\\<pi> \\<guillemotleft> k) 0\n  (\\<pi> \\<guillemotleft> k) (n - k) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) 0\n\ngoal (1 subgoal):\n 1. (\\<And>ka.\n        \\<lbrakk>ka \\<le> n - k;\n         (\\<pi> \\<guillemotleft> k) ka =\n         ipd ((\\<pi> \\<guillemotleft> k) 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  ka \\<le> n - k\n  (\\<pi> \\<guillemotleft> k) ka = ipd ((\\<pi> \\<guillemotleft> k) 0)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>k + ka \\<le> n\\<close> \\<open>\\<pi> (k + ka) = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  ka \\<le> n - k\n  (\\<pi> \\<guillemotleft> k) ka = ipd ((\\<pi> \\<guillemotleft> k) 0)\n\ngoal (1 subgoal):\n 1. k + ka \\<le> n &&& \\<pi> (k + ka) = ipd (\\<pi> k)", "using kn"], ["proof (prove)\nusing this:\n  ka \\<le> n - k\n  (\\<pi> \\<guillemotleft> k) ka = ipd ((\\<pi> \\<guillemotleft> k) 0)\n  k < n\n\ngoal (1 subgoal):\n 1. k + ka \\<le> n &&& \\<pi> (k + ka) = ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>\\<pi> (k + ka) ipd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\nusing this:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi> (k + ka) ipd\\<rightarrow> \\<pi> k", "by (metis assms(1) assms(2) ipd_is_ipd path_nodes)"], ["proof (state)\nthis:\n  \\<pi> (k + ka) ipd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>k < k + ka\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + ka) ipd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. k < k + ka", "unfolding is_ipd_def"], ["proof (prove)\nusing this:\n  \\<pi> k \\<noteq> \\<pi> (k + ka) \\<and>\n  \\<pi> (k + ka) pd\\<rightarrow> \\<pi> k \\<and>\n  (\\<forall>z.\n      z \\<noteq> \\<pi> k \\<and> z pd\\<rightarrow> \\<pi> k \\<longrightarrow>\n      z pd\\<rightarrow> \\<pi> (k + ka))\n\ngoal (1 subgoal):\n 1. k < k + ka", "by (metis nat_neq_iff not_add_less1)"], ["proof (state)\nthis:\n  k < k + ka\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n  k < k + ka", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n  k < k + ka\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<open>k+ka\\<close>]"], ["proof (prove)\nusing this:\n  k + ka \\<le> n\n  \\<pi> (k + ka) = ipd (\\<pi> k)\n  k < k + ka\n  \\<lbrakk>k < k + ka; k + ka \\<le> n;\n   \\<pi> (k + ka) = ipd (\\<pi> k)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_ret_ipd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>\\<pi> n = return\\<close> \nobtains l where \\<open>k < l\\<close> and \\<open>l \\<le> n\\<close> and \\<open>\\<pi> l = ipd(\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> n \\<noteq> \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> \\<pi> k", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> \\<pi> k", "by auto"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>k \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> n", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow> False", "using term_path_stable assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> n \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>k < n\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> n\n\ngoal (1 subgoal):\n 1. k < n", "by (metis assms(2,3) dual_order.order_iff_strict)"], ["proof (state)\nthis:\n  k < n\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  k < n\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> n pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> \\<pi> k", "by (metis assms(1,3) path_nodes return_pd)"], ["proof (state)\nthis:\n  \\<pi> n pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> n \\<noteq> \\<pi> k\n  k < n\n  \\<pi> n pd\\<rightarrow> \\<pi> k", "obtain l where \\<open>k < l\\<close> \\<open>l \\<le> n\\<close> \\<open>\\<pi> l = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> \\<pi> k\n  k < n\n  \\<pi> n pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms path_pd_ipd"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> \\<pi> k\n  k < n\n  \\<pi> n pd\\<rightarrow> \\<pi> k\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n  \\<pi> n = local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?k \\<noteq> local.return;\n   ?\\<pi> ?n \\<noteq> ?\\<pi> ?k; ?\\<pi> ?n pd\\<rightarrow> ?\\<pi> ?k;\n   ?k < ?n;\n   \\<And>l.\n      \\<lbrakk>?k < l; l \\<le> ?n; ?\\<pi> l = ipd (?\\<pi> ?k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k < l\n  l \\<le> n\n  \\<pi> l = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>k < l; l \\<le> n; \\<pi> l = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  k < l\n  l \\<le> n\n  \\<pi> l = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  k < l\n  l \\<le> n\n  \\<pi> l = ipd (\\<pi> k)\n  \\<lbrakk>k < ?l1; ?l1 \\<le> n; \\<pi> ?l1 = ipd (\\<pi> k)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pd_intro: assumes \\<open>l pd\\<rightarrow> k\\<close> \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> 0 = k\\<close> \\<open>\\<pi> n = return\\<close> \nobtains i where \\<open>i \\<le> n\\<close> \\<open>\\<pi> i = l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> n; \\<pi> i = l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  l pd\\<rightarrow> k\n  is_path \\<pi>\n  \\<pi> 0 = k\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> n; \\<pi> i = l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  k \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi> n.\n      is_path \\<pi> \\<and>\n      \\<pi> 0 = k \\<and> \\<pi> n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi> k = l))\n  is_path \\<pi>\n  \\<pi> 0 = k\n  \\<pi> n = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<le> n; \\<pi> i = l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["", "lemma path_pd_pd0: assumes path:  \\<open>is_path \\<pi>\\<close> and lpdn: \\<open>\\<pi> l pd\\<rightarrow> n\\<close> and npd0: \\<open>n pd\\<rightarrow> \\<pi> 0\\<close> \nobtains k where \\<open>k \\<le> l\\<close> \\<open>\\<pi> k = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume \\<open>\\<not> thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence notn: \\<open>\\<And> k. k \\<le> l \\<Longrightarrow> \\<pi> k \\<noteq> n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<And>k. k \\<le> l \\<Longrightarrow> \\<pi> k \\<noteq> n", "using that"], ["proof (prove)\nusing this:\n  \\<not> thesis\n  \\<lbrakk>?k1 \\<le> l; \\<pi> ?k1 = n\\<rbrakk> \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>k. k \\<le> l \\<Longrightarrow> \\<pi> k \\<noteq> n", "by blast"], ["proof (state)\nthis:\n  ?k1 \\<le> l \\<Longrightarrow> \\<pi> ?k1 \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have nret: \\<open>\\<pi> l \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return", "by (metis is_pd_def assms(1,3) notn)"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "obtain \\<pi>' n' where path': \\<open>is_path \\<pi>'\\<close> and \\<pi>0': \\<open>\\<pi>' 0 = \\<pi> l\\<close> and \\<pi>n': \\<open>\\<pi>' n' = return\\<close> and nonepd: \\<open>\\<forall> i>0. \\<not> \\<pi> l pd\\<rightarrow> \\<pi>' i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n' = local.return;\n         \\<forall>i>0. \\<not> \\<pi> l pd\\<rightarrow> \\<pi>' i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using nret path path_nodes ret_path_none_pd"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> local.return\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  \\<lbrakk>?x \\<in> local.nodes; ?x \\<noteq> local.return;\n   \\<And>\\<pi> n.\n      \\<lbrakk>is_path \\<pi>; \\<pi> 0 = ?x; \\<pi> n = local.return;\n       \\<forall>i>0. \\<not> ?x pd\\<rightarrow> \\<pi> i\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n' = local.return;\n         \\<forall>i>0. \\<not> \\<pi> l pd\\<rightarrow> \\<pi>' i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> l\n  \\<pi>' n' = local.return\n  \\<forall>i>0. \\<not> \\<pi> l pd\\<rightarrow> \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>\\<pi> l \\<noteq> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> n", "using notn"], ["proof (prove)\nusing this:\n  ?k1 \\<le> l \\<Longrightarrow> \\<pi> ?k1 \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> n", "by simp"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>\\<forall> i. \\<pi>' i \\<noteq> n\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<pi>' i \\<noteq> n", "using nonepd \\<pi>0' lpdn"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> n\n  \\<forall>i>0. \\<not> \\<pi> l pd\\<rightarrow> \\<pi>' i\n  \\<pi>' 0 = \\<pi> l\n  \\<pi> l pd\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<forall>i. \\<pi>' i \\<noteq> n", "by (metis neq0_conv)"], ["proof (state)\nthis:\n  \\<forall>i. \\<pi>' i \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence notn': \\<open>\\<forall> i. (\\<pi>@\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<pi>' i \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<forall>i. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n", "using notn \\<pi>0'"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<pi>' i \\<noteq> n\n  ?k1 \\<le> l \\<Longrightarrow> \\<pi> ?k1 \\<noteq> n\n  \\<pi>' 0 = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<forall>i. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>is_path (\\<pi>@\\<^bsup>l\\<^esup> \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')", "using path path'"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')", "by (metis \\<pi>0' path_cons)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0", "by simp"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "using \\<pi>0' \\<pi>n'"], ["proof (prove)\nusing this:\n  \\<pi>' 0 = \\<pi> l\n  \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>k \\<le> l; \\<pi> k = n\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n\ngoal (1 subgoal):\n 1. False", "using notn' npd0"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n  \\<forall>i. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n\n  n pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. False", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n  \\<forall>i. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') i \\<noteq> n\n  \\<pi> 0 \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' na.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> 0 \\<and> \\<pi>' na = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>na. \\<pi>' k = n))\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Control Dependencies\\<close>"], ["", "lemma icd_imp_cd: \\<open>n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis is_icdi_def)"], ["", "lemma ipd_impl_not_cd:  assumes \\<open>j \\<in> {k..i}\\<close> and \\<open>\\<pi> j = ipd (\\<pi> k)\\<close> shows \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis assms(1) assms(2) is_cdi_def)"], ["", "lemma cd_not_ret: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<close> shows \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by (metis is_cdi_def assms nat_less_le term_path_stable)"], ["", "lemma cd_path_shift: assumes \\<open>j \\<le> k\\<close> \\<open>is_path \\<pi> \\<close> shows \\<open>(i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i - j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> k-j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "assume a: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence b: \\<open>k < i\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < i", "by (metis is_cdi_def)"], ["proof (state)\nthis:\n  k < i\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>is_path (\\<pi> \\<guillemotleft> j)\\<close> \\<open>k - j < i - j\\<close>"], ["proof (prove)\nusing this:\n  k < i\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j) &&& k - j < i - j", "using assms"], ["proof (prove)\nusing this:\n  k < i\n  j \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j) &&& k - j < i - j", "apply (metis path_path_shift)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k - j < i - j", "by (metis assms(1) b diff_less_mono)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n  k - j < i - j\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n  k - j < i - j\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have c: \\<open>\\<forall> j \\<in> {k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)", "by (metis a ipd_impl_not_cd)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>\\<forall> ja \\<in> {k - j..i - j}. (\\<pi> \\<guillemotleft> j) ja \\<noteq> ipd ((\\<pi> \\<guillemotleft> j) (k - j))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<forall>ja\\<in>{k - j..i - j}.\n       (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n       ipd ((\\<pi> \\<guillemotleft> j) (k - j))", "using b assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n  k < i\n  j \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<forall>ja\\<in>{k - j..i - j}.\n       (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n       ipd ((\\<pi> \\<guillemotleft> j) (k - j))", "by auto fastforce"], ["proof (state)\nthis:\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "moreover"], ["proof (state)\nthis:\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>j < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i", "using assms(1) b"], ["proof (prove)\nusing this:\n  j \\<le> k\n  k < i\n\ngoal (1 subgoal):\n 1. j < i", "by auto"], ["proof (state)\nthis:\n  j < i\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>(\\<pi>\\<guillemotleft>j) (i - j) \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return", "using a"], ["proof (prove)\nusing this:\n  j < i\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  j < i\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n 2. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  k - j < i - j\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n  (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return", "show \\<open>i - j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> k-j\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  k - j < i - j\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n  (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  k - j < i - j\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n  (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j) \\<and>\n    k - j < i - j \\<and>\n    (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return \\<and>\n    (\\<forall>ja\\<in>{k - j..i - j}.\n        (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n        ipd ((\\<pi> \\<guillemotleft> j) (k - j)))", "by simp"], ["proof (state)\nthis:\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "assume a: \\<open>i - j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> k-j\\<close>"], ["proof (state)\nthis:\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence b: \\<open>k - j < i-j\\<close>"], ["proof (prove)\nusing this:\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n\ngoal (1 subgoal):\n 1. k - j < i - j", "by (metis is_cdi_def)"], ["proof (state)\nthis:\n  k - j < i - j\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "moreover"], ["proof (state)\nthis:\n  k - j < i - j\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have c: \\<open>\\<forall> ja \\<in> {k - j..i - j}. (\\<pi> \\<guillemotleft> j) ja \\<noteq> ipd ((\\<pi> \\<guillemotleft> j) (k - j))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ja\\<in>{k - j..i - j}.\n       (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n       ipd ((\\<pi> \\<guillemotleft> j) (k - j))", "by (metis a ipd_impl_not_cd)"], ["proof (state)\nthis:\n  \\<forall>ja\\<in>{k - j..i - j}.\n     (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n     ipd ((\\<pi> \\<guillemotleft> j) (k - j))\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>\\<forall> j \\<in> {k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)", "proof (rule,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> {k..i} \\<Longrightarrow> \\<pi> j \\<noteq> ipd (\\<pi> k)", "case (1 n)"], ["proof (state)\nthis:\n  n \\<in> {k..i}\n\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> {k..i} \\<Longrightarrow> \\<pi> j \\<noteq> ipd (\\<pi> k)", "hence \\<open>n-j \\<in> {k-j..i-j}\\<close>"], ["proof (prove)\nusing this:\n  n \\<in> {k..i}\n\ngoal (1 subgoal):\n 1. n - j \\<in> {k - j..i - j}", "using assms"], ["proof (prove)\nusing this:\n  n \\<in> {k..i}\n  j \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. n - j \\<in> {k - j..i - j}", "by auto"], ["proof (state)\nthis:\n  n - j \\<in> {k - j..i - j}\n\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> {k..i} \\<Longrightarrow> \\<pi> j \\<noteq> ipd (\\<pi> k)", "hence \\<open>\\<pi> (j + (n-j)) \\<noteq> ipd(\\<pi> (j + (k-j)))\\<close>"], ["proof (prove)\nusing this:\n  n - j \\<in> {k - j..i - j}\n\ngoal (1 subgoal):\n 1. \\<pi> (j + (n - j)) \\<noteq> ipd (\\<pi> (j + (k - j)))", "by (metis c path_shift_def)"], ["proof (state)\nthis:\n  \\<pi> (j + (n - j)) \\<noteq> ipd (\\<pi> (j + (k - j)))\n\ngoal (1 subgoal):\n 1. \\<And>j. j \\<in> {k..i} \\<Longrightarrow> \\<pi> j \\<noteq> ipd (\\<pi> k)", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (j + (n - j)) \\<noteq> ipd (\\<pi> (j + (k - j)))\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> ipd (\\<pi> k)", "using 1 assms(1)"], ["proof (prove)\nusing this:\n  \\<pi> (j + (n - j)) \\<noteq> ipd (\\<pi> (j + (k - j)))\n  n \\<in> {k..i}\n  j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> ipd (\\<pi> k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "moreover"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>j < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i", "using assms(1) b"], ["proof (prove)\nusing this:\n  j \\<le> k\n  k - j < i - j\n\ngoal (1 subgoal):\n 1. j < i", "by auto"], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "using a"], ["proof (prove)\nusing this:\n  j < i\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k - j\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  j < i\n  is_path (\\<pi> \\<guillemotleft> j) \\<and>\n  k - j < i - j \\<and>\n  (\\<pi> \\<guillemotleft> j) (i - j) \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{k - j..i - j}.\n      (\\<pi> \\<guillemotleft> j) ja \\<noteq>\n      ipd ((\\<pi> \\<guillemotleft> j) (k - j)))\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i -\n    j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                j\\<^esup>\\<rightarrow> k - j \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "ultimately"], ["proof (chain)\npicking this:\n  k - j < i - j\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n  \\<pi> i \\<noteq> local.return", "show \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  k - j < i - j\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  k - j < i - j\n  \\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k)\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))", "by (metis assms(1) assms(2) diff_is_0_eq' le_diff_iff nat_le_linear nat_less_le)"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_path_shift0: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>(i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i-k cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow>0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0)", "using cd_path_shift[OF _ assms]"], ["proof (prove)\nusing this:\n  ?j \\<le> ?k \\<Longrightarrow>\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?j cd\\<^bsup>\\<pi> \\<guillemotleft> ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0)", "by (metis diff_self_eq_0 le_refl)"], ["", "lemma icd_path_shift: assumes \\<open>l \\<le> k\\<close> \\<open>is_path \\<pi>\\<close> shows \\<open>(i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i - l icd\\<^bsup>\\<pi>\\<guillemotleft>l\\<^esup>\\<rightarrow> k - l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "have \\<open>is_path (\\<pi>\\<guillemotleft>l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> l)", "using path_path_shift assms(2)"], ["proof (prove)\nusing this:\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> l)", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> l)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> l)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "have \\<open>(i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i - l cd\\<^bsup>\\<pi>\\<guillemotleft>l\\<^esup>\\<rightarrow> k - l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "using assms cd_path_shift"], ["proof (prove)\nusing this:\n  l \\<le> k\n  is_path \\<pi>\n  \\<lbrakk>?j \\<le> ?k; is_path ?\\<pi>\\<rbrakk>\n  \\<Longrightarrow> (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n                    (?i -\n                     ?j cd\\<^bsup>?\\<pi> \\<guillemotleft>\n                                  ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "by auto"], ["proof (state)\nthis:\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "moreover"], ["proof (state)\nthis:\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "have \\<open>(\\<forall> m \\<in> {k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) = (\\<forall> m \\<in> {k - l<..<i - l}. \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "assume *: \\<open>\\<forall> m \\<in> {k - l<..<i - l}. \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\\<close> \\<open>m \\<in> {k<..<i}\\<close>"], ["proof (state)\nthis:\n  \\<forall>m\\<in>{k - l<..<i - l}.\n     \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\n  m \\<in> {k<..<i}\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "hence \\<open>m-l \\<in> {k-l<..<i-l}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k - l<..<i - l}.\n     \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\n  m \\<in> {k<..<i}\n\ngoal (1 subgoal):\n 1. m - l \\<in> {k - l<..<i - l}", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k - l<..<i - l}.\n     \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\n  m \\<in> {k<..<i}\n  l \\<le> k\n\ngoal (1 subgoal):\n 1. m - l \\<in> {k - l<..<i - l}", "by auto"], ["proof (state)\nthis:\n  m - l \\<in> {k - l<..<i - l}\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "hence \\<open>\\<not> i - l cd\\<^bsup>\\<pi>\\<guillemotleft>l\\<^esup>\\<rightarrow>(m-l)\\<close>"], ["proof (prove)\nusing this:\n  m - l \\<in> {k - l<..<i - l}\n\ngoal (1 subgoal):\n 1. \\<not> i -\n           l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l", "using *"], ["proof (prove)\nusing this:\n  m - l \\<in> {k - l<..<i - l}\n  \\<forall>m\\<in>{k - l<..<i - l}.\n     \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\n  m \\<in> {k<..<i}\n\ngoal (1 subgoal):\n 1. \\<not> i -\n           l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l", "by blast"], ["proof (state)\nthis:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "moreover"], ["proof (state)\nthis:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "have \\<open>l \\<le> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> m", "using * assms"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k - l<..<i - l}.\n     \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m\n  m \\<in> {k<..<i}\n  l \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. l \\<le> m", "by auto"], ["proof (state)\nthis:\n  l \\<le> m\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n  l \\<le> m", "have \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>m\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n  l \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using assms(2) cd_path_shift"], ["proof (prove)\nusing this:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n  l \\<le> m\n  is_path \\<pi>\n  \\<lbrakk>?j \\<le> ?k; is_path ?\\<pi>\\<rbrakk>\n  \\<Longrightarrow> (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n                    (?i -\n                     ?j cd\\<^bsup>?\\<pi> \\<guillemotleft>\n                                  ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by blast"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>m\\<in>{k - l<..<i - l}.\n              \\<not> i -\n                     l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 l\\<^esup>\\<rightarrow> m;\n   ?m3 \\<in> {k<..<i}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>m\\<in>{k - l<..<i - l}.\n              \\<not> i -\n                     l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 l\\<^esup>\\<rightarrow> m;\n   ?m3 \\<in> {k<..<i}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>m\\<in>{k - l<..<i - l}.\n              \\<not> i -\n                     l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 l\\<^esup>\\<rightarrow> m;\n   ?m3 \\<in> {k<..<i}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "assume *: \\<open>\\<forall> m \\<in> {k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> \\<open>m-l \\<in> {k-l<..<i-l}\\<close>"], ["proof (state)\nthis:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m - l \\<in> {k - l<..<i - l}\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "hence \\<open>m \\<in> {k<..<i}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m - l \\<in> {k - l<..<i - l}\n\ngoal (1 subgoal):\n 1. m \\<in> {k<..<i}", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m - l \\<in> {k - l<..<i - l}\n  l \\<le> k\n\ngoal (1 subgoal):\n 1. m \\<in> {k<..<i}", "by auto"], ["proof (state)\nthis:\n  m \\<in> {k<..<i}\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "hence \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>m\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> {k<..<i}\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using *"], ["proof (prove)\nusing this:\n  m \\<in> {k<..<i}\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m - l \\<in> {k - l<..<i - l}\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by blast"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "moreover"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "have \\<open>l \\<le> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> m", "using * assms"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m - l \\<in> {k - l<..<i - l}\n  l \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. l \\<le> m", "by auto"], ["proof (state)\nthis:\n  l \\<le> m\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  l \\<le> m", "have \\<open>\\<not> i - l cd\\<^bsup>\\<pi>\\<guillemotleft>l\\<^esup>\\<rightarrow>(m-l)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  l \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> i -\n           l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l", "using assms(2) cd_path_shift"], ["proof (prove)\nusing this:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  l \\<le> m\n  is_path \\<pi>\n  \\<lbrakk>?j \\<le> ?k; is_path ?\\<pi>\\<rbrakk>\n  \\<Longrightarrow> (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n                    (?i -\n                     ?j cd\\<^bsup>?\\<pi> \\<guillemotleft>\n                                  ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. \\<not> i -\n           l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l", "by blast"], ["proof (state)\nthis:\n  \\<not> i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m - l\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>m\\<in>{k<..<i}.\n              \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n   ?m3 - l \\<in> {k - l<..<i - l}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i -\n                           l cd\\<^bsup>\\<pi> \\<guillemotleft>\n l\\<^esup>\\<rightarrow> ?m3 - l\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>m\\<in>{k - l<..<i - l}.\n              \\<not> i -\n                     l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 l\\<^esup>\\<rightarrow> m;\n   ?m3 \\<in> {k<..<i}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3\n  \\<lbrakk>\\<forall>m\\<in>{k<..<i}.\n              \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n   ?m3 - l \\<in> {k - l<..<i - l}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i -\n                           l cd\\<^bsup>\\<pi> \\<guillemotleft>\n l\\<^esup>\\<rightarrow> ?m3 - l", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>m\\<in>{k - l<..<i - l}.\n              \\<not> i -\n                     l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 l\\<^esup>\\<rightarrow> m;\n   ?m3 \\<in> {k<..<i}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3\n  \\<lbrakk>\\<forall>m\\<in>{k<..<i}.\n              \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n   ?m3 - l \\<in> {k - l<..<i - l}\\<rbrakk>\n  \\<Longrightarrow> \\<not> i -\n                           l cd\\<^bsup>\\<pi> \\<guillemotleft>\n l\\<^esup>\\<rightarrow> ?m3 - l\n\ngoal (1 subgoal):\n 1. (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n    (\\<forall>m\\<in>{k - l<..<i - l}.\n        \\<not> i -\n               l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "by auto (metis diff_add_inverse)"], ["proof (state)\nthis:\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> \\<guillemotleft> l)\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> l)\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> l)\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (is_path \\<pi> \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<and>\n     (\\<forall>m\\<in>{k<..<i}.\n         \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)) =\n    (is_path (\\<pi> \\<guillemotleft> l) \\<and>\n     i -\n     l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l \\<and>\n     (\\<forall>m\\<in>{k - l<..<i - l}.\n         \\<not> i -\n                l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                            l\\<^esup>\\<rightarrow> m))", "using assms"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> l)\n  (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n  (\\<forall>m\\<in>{k<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) =\n  (\\<forall>m\\<in>{k - l<..<i - l}.\n      \\<not> i -\n             l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> m)\n  l \\<le> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. (is_path \\<pi> \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<and>\n     (\\<forall>m\\<in>{k<..<i}.\n         \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)) =\n    (is_path (\\<pi> \\<guillemotleft> l) \\<and>\n     i -\n     l cd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l \\<and>\n     (\\<forall>m\\<in>{k - l<..<i - l}.\n         \\<not> i -\n                l cd\\<^bsup>\\<pi> \\<guillemotleft>\n                            l\\<^esup>\\<rightarrow> m))", "by blast"], ["proof (state)\nthis:\n  (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  (i - l icd\\<^bsup>\\<pi> \\<guillemotleft> l\\<^esup>\\<rightarrow> k - l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma icd_path_shift0: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>(i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = (i-k icd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow>0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0)", "using icd_path_shift[OF _ assms]"], ["proof (prove)\nusing this:\n  ?l \\<le> ?k \\<Longrightarrow>\n  (?i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i -\n   ?l icd\\<^bsup>\\<pi> \\<guillemotleft> ?l\\<^esup>\\<rightarrow> ?k - ?l)\n\ngoal (1 subgoal):\n 1. (i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0)", "by (metis diff_self_eq_0 le_refl)"], ["", "lemma cdi_path_swap: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>j\\<^esub>  \\<pi>'\\<close> shows \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<pi> =\\<^bsub>j\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "unfolding eq_up_to_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  is_path \\<pi> \\<and>\n  k < j \\<and>\n  \\<pi> j \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..j}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n  \\<forall>i\\<le>j. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    k < j \\<and>\n    \\<pi>' j \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..j}. \\<pi>' j \\<noteq> ipd (\\<pi>' k))", "by auto"], ["", "lemma cdi_path_swap_le: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>j \\<le> n\\<close> shows \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "by (metis assms cdi_path_swap eq_up_to_le)"], ["", "lemma not_cd_impl_ipd:  assumes \\<open>is_path \\<pi>\\<close> and \\<open>k < i\\<close> and \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> obtains j where \\<open>j \\<in> {k..i}\\<close> and \\<open>\\<pi> j = ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> {k..i}; \\<pi> j = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(1) assms(2) assms(3) assms(4) is_cdi_def)"], ["", "lemma icd_is_the_icd: assumes \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "using assms icd_uniq"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?m icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n;\n   ?m icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n\ngoal (1 subgoal):\n 1. k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis the1_equality)"], ["", "lemma all_ipd_imp_ret: assumes \\<open>is_path \\<pi>\\<close> and \\<open>\\<forall> i. \\<pi> i \\<noteq> return \\<longrightarrow> (\\<exists> j>i. \\<pi> j = ipd (\\<pi> i))\\<close> shows \\<open>\\<exists>j. \\<pi> j = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "assume *: \\<open>\\<pi> 0 = x\\<close>"], ["proof (state)\nthis:\n  \\<pi> 0 = x\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "have \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "using wf_pdt_inv * assms"], ["proof (prove)\nusing this:\n  wf pdt_inv\n  \\<pi> 0 = x\n  is_path \\<pi>\n  \\<forall>i.\n     \\<pi> i \\<noteq> local.return \\<longrightarrow>\n     (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "proof(induction \\<open>x\\<close> arbitrary: \\<open>\\<pi>\\<close> rule: wf_induct_rule )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>(y, x) \\<in> pdt_inv; \\<pi> 0 = y;\n                    is_path \\<pi>;\n                    \\<forall>i.\n                       \\<pi> i \\<noteq> local.return \\<longrightarrow>\n                       (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return;\n        \\<pi> 0 = x; is_path \\<pi>;\n        \\<forall>i.\n           \\<pi> i \\<noteq> local.return \\<longrightarrow>\n           (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return", "case (less x \\<pi>)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y1, x) \\<in> pdt_inv; ?\\<pi>1 0 = ?y1; is_path ?\\<pi>1;\n   \\<forall>i.\n      ?\\<pi>1 i \\<noteq> local.return \\<longrightarrow>\n      (\\<exists>j>i. ?\\<pi>1 j = ipd (?\\<pi>1 i))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j. ?\\<pi>1 j = local.return\n  \\<pi> 0 = x\n  is_path \\<pi>\n  \\<forall>i.\n     \\<pi> i \\<noteq> local.return \\<longrightarrow>\n     (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\n\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>(y, x) \\<in> pdt_inv; \\<pi> 0 = y;\n                    is_path \\<pi>;\n                    \\<forall>i.\n                       \\<pi> i \\<noteq> local.return \\<longrightarrow>\n                       (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return;\n        \\<pi> 0 = x; is_path \\<pi>;\n        \\<forall>i.\n           \\<pi> i \\<noteq> local.return \\<longrightarrow>\n           (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "proof (cases \\<open>x = return\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = local.return \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return\n 2. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "case True"], ["proof (state)\nthis:\n  x = local.return\n\ngoal (2 subgoals):\n 1. x = local.return \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return\n 2. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  x = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "using less(2)"], ["proof (prove)\nusing this:\n  x = local.return\n  \\<pi> 0 = x\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. \\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "assume not_ret: \\<open>x \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "moreover"], ["proof (state)\nthis:\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> local.return", "obtain k where k_ipd: \\<open>\\<pi> k = ipd x\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k. \\<pi> k = ipd x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using less(2,4)"], ["proof (prove)\nusing this:\n  x \\<noteq> local.return\n  \\<pi> 0 = x\n  \\<forall>i.\n     \\<pi> i \\<noteq> local.return \\<longrightarrow>\n     (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\n\ngoal (1 subgoal):\n 1. (\\<And>k. \\<pi> k = ipd x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<pi> k = ipd x\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "moreover"], ["proof (state)\nthis:\n  \\<pi> k = ipd x\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "have \\<open>x \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "using less(2,3)"], ["proof (prove)\nusing this:\n  \\<pi> 0 = x\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. x \\<in> local.nodes", "by (metis path_nodes)"], ["proof (state)\nthis:\n  x \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "ultimately"], ["proof (chain)\npicking this:\n  x \\<noteq> local.return\n  \\<pi> k = ipd x\n  x \\<in> local.nodes", "have \\<open>(x, \\<pi> k) \\<in> pdt\\<close>"], ["proof (prove)\nusing this:\n  x \\<noteq> local.return\n  \\<pi> k = ipd x\n  x \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (x, \\<pi> k) \\<in> pdt", "by (metis ipd_in_pdt)"], ["proof (state)\nthis:\n  (x, \\<pi> k) \\<in> pdt\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "hence a: \\<open>(\\<pi> k, x) \\<in> pdt_inv\\<close>"], ["proof (prove)\nusing this:\n  (x, \\<pi> k) \\<in> pdt\n\ngoal (1 subgoal):\n 1. (\\<pi> k, x) \\<in> pdt_inv", "unfolding pdt_inv_def"], ["proof (prove)\nusing this:\n  (x, \\<pi> k) \\<in> pdt\n\ngoal (1 subgoal):\n 1. (\\<pi> k, x) \\<in> pdt\\<inverse>", "by simp"], ["proof (state)\nthis:\n  (\\<pi> k, x) \\<in> pdt_inv\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "have b: \\<open>is_path (\\<pi> \\<guillemotleft> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k)", "by (metis less.prems(2) path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "have c: \\<open>\\<forall> i. (\\<pi>\\<guillemotleft>k) i \\<noteq> return \\<longrightarrow> (\\<exists>j>i. (\\<pi>\\<guillemotleft>k) j = ipd ((\\<pi>\\<guillemotleft>k) i))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (\\<pi> \\<guillemotleft> k) i \\<noteq> local.return \\<longrightarrow>\n       (\\<exists>j>i.\n           (\\<pi> \\<guillemotleft> k) j =\n           ipd ((\\<pi> \\<guillemotleft> k) i))", "using less(4)"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     \\<pi> i \\<noteq> local.return \\<longrightarrow>\n     (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (\\<pi> \\<guillemotleft> k) i \\<noteq> local.return \\<longrightarrow>\n       (\\<exists>j>i.\n           (\\<pi> \\<guillemotleft> k) j =\n           ipd ((\\<pi> \\<guillemotleft> k) i))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   \\<pi> i \\<noteq> local.return \\<longrightarrow>\n                   (\\<exists>j>i. \\<pi> j = ipd (\\<pi> i));\n        \\<pi> (k + i) \\<noteq> local.return\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j>i. \\<pi> (k + j) = ipd (\\<pi> (k + i))", "by (metis (full_types) ab_semigroup_add_class.add_ac(1) less_add_same_cancel1 less_imp_add_positive)"], ["proof (state)\nthis:\n  \\<forall>i.\n     (\\<pi> \\<guillemotleft> k) i \\<noteq> local.return \\<longrightarrow>\n     (\\<exists>j>i.\n         (\\<pi> \\<guillemotleft> k) j = ipd ((\\<pi> \\<guillemotleft> k) i))\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "from less(1)[OF a _ b c]"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k \\<Longrightarrow>\n  \\<exists>j. (\\<pi> \\<guillemotleft> k) j = local.return", "have \\<open>\\<exists>j. (\\<pi>\\<guillemotleft>k) j = return\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k \\<Longrightarrow>\n  \\<exists>j. (\\<pi> \\<guillemotleft> k) j = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. (\\<pi> \\<guillemotleft> k) j = local.return", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. (\\<pi> \\<guillemotleft> k) j = local.return\n\ngoal (1 subgoal):\n 1. x \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>j. \\<pi> j = local.return", "thus \\<open>\\<exists>j. \\<pi> j = return\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>j. (\\<pi> \\<guillemotleft> k) j = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. \\<pi> j = local.return\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j. \\<pi> j = local.return\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j. \\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "}"], ["proof (state)\nthis:\n  \\<pi> 0 = ?x3 \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> 0 = ?x3 \\<Longrightarrow> \\<exists>j. \\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j. \\<pi> j = local.return", "by simp"], ["proof (state)\nthis:\n  \\<exists>j. \\<pi> j = local.return\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma loop_has_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>0 < i\\<close> \\<open>\\<pi> i = \\<pi> 0\\<close> \\<open>\\<pi> 0 \\<noteq> return\\<close> shows \\<open>\\<exists> k < i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k<i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "let \\<open>?\\<pi>\\<close> = \\<open>(\\<lambda> n. \\<pi> (n mod i))\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "assume \\<open>\\<not> (\\<exists>k<i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<exists>k<i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "hence \\<open>\\<forall> k <i. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>k<i. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. \\<forall>k<i. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by blast"], ["proof (state)\nthis:\n  \\<forall>k<i. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "hence *: \\<open>\\<forall> k<i. (\\<exists>j \\<in> {k..i}. \\<pi> j = ipd (\\<pi> k))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<i. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k<i. \\<exists>j\\<in>{k..i}. \\<pi> j = ipd (\\<pi> k)", "using assms(1,3,4) not_cd_impl_ipd"], ["proof (prove)\nusing this:\n  \\<forall>k<i. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  is_path \\<pi>\n  \\<pi> i = \\<pi> 0\n  \\<pi> 0 \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?k < ?i;\n   \\<not> ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   ?\\<pi> ?i \\<noteq> local.return;\n   \\<And>j.\n      \\<lbrakk>j \\<in> {?k..?i}; ?\\<pi> j = ipd (?\\<pi> ?k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<forall>k<i. \\<exists>j\\<in>{k..i}. \\<pi> j = ipd (\\<pi> k)", "by metis"], ["proof (state)\nthis:\n  \\<forall>k<i. \\<exists>j\\<in>{k..i}. \\<pi> j = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "have \\<open>\\<forall> k. (\\<exists> j > k. ?\\<pi> j = ipd (?\\<pi> k))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "have \\<open>k mod i < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k mod i < i", "using assms(2)"], ["proof (prove)\nusing this:\n  0 < i\n\ngoal (1 subgoal):\n 1. k mod i < i", "by auto"], ["proof (state)\nthis:\n  k mod i < i\n\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "with *"], ["proof (chain)\npicking this:\n  \\<forall>k<i. \\<exists>j\\<in>{k..i}. \\<pi> j = ipd (\\<pi> k)\n  k mod i < i", "obtain j where \\<open>j \\<in> {(k mod i)..i}\\<close> \\<open>\\<pi> j = ipd (\\<pi> (k mod i))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<i. \\<exists>j\\<in>{k..i}. \\<pi> j = ipd (\\<pi> k)\n  k mod i < i\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> {k mod i..i};\n         \\<pi> j = ipd (\\<pi> (k mod i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<in> {k mod i..i}\n  \\<pi> j = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "then"], ["proof (chain)\npicking this:\n  j \\<in> {k mod i..i}\n  \\<pi> j = ipd (\\<pi> (k mod i))", "obtain j' where 1: \\<open>j' < i\\<close> \\<open>\\<pi> j' = ipd (\\<pi> (k mod i))\\<close>"], ["proof (prove)\nusing this:\n  j \\<in> {k mod i..i}\n  \\<pi> j = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>j' < i; \\<pi> j' = ipd (\\<pi> (k mod i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \\<open>j = i\\<close>, auto ,metis assms(2) assms(3),metis le_neq_implies_less)"], ["proof (state)\nthis:\n  j' < i\n  \\<pi> j' = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "then"], ["proof (chain)\npicking this:\n  j' < i\n  \\<pi> j' = ipd (\\<pi> (k mod i))", "obtain j'' where 2: \\<open>j'' > k\\<close> \\<open>j'' mod i = j'\\<close>"], ["proof (prove)\nusing this:\n  j' < i\n  \\<pi> j' = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. (\\<And>j''.\n        \\<lbrakk>k < j''; j'' mod i = j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis mod_bound_instance)"], ["proof (state)\nthis:\n  k < j''\n  j'' mod i = j'\n\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "hence \\<open>?\\<pi> j'' = ipd (?\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  k < j''\n  j'' mod i = j'\n\ngoal (1 subgoal):\n 1. \\<pi> (j'' mod i) = ipd (\\<pi> (k mod i))", "using 1"], ["proof (prove)\nusing this:\n  k < j''\n  j'' mod i = j'\n  j' < i\n  \\<pi> j' = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<pi> (j'' mod i) = ipd (\\<pi> (k mod i))", "by auto"], ["proof (state)\nthis:\n  \\<pi> (j'' mod i) = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<And>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "with 2(1)"], ["proof (chain)\npicking this:\n  k < j''\n  \\<pi> (j'' mod i) = ipd (\\<pi> (k mod i))", "show \\<open>\\<exists> j > k. ?\\<pi> j = ipd (?\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  k < j''\n  \\<pi> (j'' mod i) = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))", "by auto"], ["proof (state)\nthis:\n  \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "have \\<open>is_path ?\\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<lambda>n. \\<pi> (n mod i))", "by (metis assms(1) assms(2) assms(3) is_path_loop)"], ["proof (state)\nthis:\n  is_path (\\<lambda>n. \\<pi> (n mod i))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))\n  is_path (\\<lambda>n. \\<pi> (n mod i))", "obtain k where \\<open>?\\<pi> k = return\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>j>k. \\<pi> (j mod i) = ipd (\\<pi> (k mod i))\n  is_path (\\<lambda>n. \\<pi> (n mod i))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<pi> (k mod i) = local.return \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (lifting) all_ipd_imp_ret)"], ["proof (state)\nthis:\n  \\<pi> (k mod i) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<pi> (k mod i) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "have \\<open>k mod i < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k mod i < i", "by (simp add: assms(2))"], ["proof (state)\nthis:\n  k mod i < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> (k mod i) = local.return\n  k mod i < i", "have \\<open>\\<pi> i = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k mod i) = local.return\n  k mod i < i\n\ngoal (1 subgoal):\n 1. \\<pi> i = local.return", "by (metis assms(1) term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>k<i.\n               i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. False", "by (metis assms(3) assms(4))"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma loop_has_cd': assumes \\<open>is_path \\<pi>\\<close> \\<open>j < i\\<close> \\<open>\\<pi> i = \\<pi> j\\<close> \\<open>\\<pi> j \\<noteq> return\\<close> shows \\<open>\\<exists> k \\<in> {j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>\\<exists> k'< i-j. i-j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow>k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k'<i - j.\n       i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k'", "apply(rule loop_has_cd)"], ["proof (prove)\ngoal (4 subgoals):\n 1. is_path (\\<pi> \\<guillemotleft> j)\n 2. 0 < i - j\n 3. (\\<pi> \\<guillemotleft> j) (i - j) = (\\<pi> \\<guillemotleft> j) 0\n 4. (\\<pi> \\<guillemotleft> j) 0 \\<noteq> local.return", "apply (metis assms(1) path_path_shift)"], ["proof (prove)\ngoal (3 subgoals):\n 1. 0 < i - j\n 2. (\\<pi> \\<guillemotleft> j) (i - j) = (\\<pi> \\<guillemotleft> j) 0\n 3. (\\<pi> \\<guillemotleft> j) 0 \\<noteq> local.return", "apply (auto simp add: assms less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>k'<i - j.\n     i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "then"], ["proof (chain)\npicking this:\n  \\<exists>k'<i - j.\n     i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k'", "obtain k where k: \\<open>k<i-j\\<close> \\<open>i-j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k'<i - j.\n     i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < i - j;\n         i -\n         j cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     j\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  k < i - j\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence k': \\<open>(k+j) < i\\<close>  \\<open>i-j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> (k+j)-j\\<close>"], ["proof (prove)\nusing this:\n  k < i - j\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k + j < i &&&\n    i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k + j - j", "by auto"], ["proof (state)\nthis:\n  k + j < i\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k + j - j\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "note cd_path_shift[OF _ assms(1)]"], ["proof (state)\nthis:\n  ?j \\<le> ?k \\<Longrightarrow>\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?j cd\\<^bsup>\\<pi> \\<guillemotleft> ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k+j\\<close>"], ["proof (prove)\nusing this:\n  ?j \\<le> ?k \\<Longrightarrow>\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?j cd\\<^bsup>\\<pi> \\<guillemotleft> ?j\\<^esup>\\<rightarrow> ?k - ?j)\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j", "using k'(2)"], ["proof (prove)\nusing this:\n  ?j \\<le> ?k \\<Longrightarrow>\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?j cd\\<^bsup>\\<pi> \\<guillemotleft> ?j\\<^esup>\\<rightarrow> ?k - ?j)\n  i - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k + j - j\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j", "by (metis le_add1 add.commute)"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "with k'(1)"], ["proof (chain)\npicking this:\n  k + j < i\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  k + j < i\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by force"], ["proof (state)\nthis:\n  \\<exists>k\\<in>{j..<i}. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma claim'': assumes path\\<pi>: \\<open>is_path \\<pi>\\<close> and path\\<pi>': \\<open>is_path \\<pi>'\\<close> \nand \\<pi>i: \\<open>\\<pi> i = \\<pi>' i'\\<close> and \\<pi>j: \\<open>\\<pi> j = \\<pi>' j'\\<close> \nand not_cd:  \\<open>\\<forall> k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  \\<open>\\<forall> k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\\<close> \nand nret: \\<open>\\<pi> i \\<noteq> return\\<close>\nand ilj: \\<open>i < j\\<close>\nshows \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' < j' \\<Longrightarrow> False", "assume \\<open>\\<not> i' < j'\\<close>"], ["proof (state)\nthis:\n  \\<not> i' < j'\n\ngoal (1 subgoal):\n 1. \\<not> i' < j' \\<Longrightarrow> False", "hence jlei: \\<open>j' \\<le> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i' < j'\n\ngoal (1 subgoal):\n 1. j' \\<le> i'", "by auto"], ["proof (state)\nthis:\n  j' \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<not> i' < j' \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume j'li': \\<open>j' < i'\\<close>"], ["proof (state)\nthis:\n  j' < i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "define \\<pi>'' where \\<open>\\<pi>'' \\<equiv> (\\<pi>@\\<^bsup>j\\<^esup>(\\<pi>'\\<guillemotleft>j'))\\<guillemotleft>i\\<close>"], ["proof (state)\nthis:\n  \\<pi>'' \\<equiv>\n  \\<pi> @\\<^bsup>j\\<^esup> (\\<pi>' \\<guillemotleft> j') \\<guillemotleft> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "note \\<pi>''_def[simp]"], ["proof (state)\nthis:\n  \\<pi>'' \\<equiv>\n  \\<pi> @\\<^bsup>j\\<^esup> (\\<pi>' \\<guillemotleft> j') \\<guillemotleft> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>\\<pi> j = (\\<pi>' \\<guillemotleft> j') 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j = (\\<pi>' \\<guillemotleft> j') 0", "by (metis path_shift_def Nat.add_0_right \\<pi>j)"], ["proof (state)\nthis:\n  \\<pi> j = (\\<pi>' \\<guillemotleft> j') 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \\<open>is_path \\<pi>''\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j = (\\<pi>' \\<guillemotleft> j') 0\n\ngoal (1 subgoal):\n 1. is_path \\<pi>''", "using path\\<pi> path\\<pi>' \\<pi>''_def path_path_shift path_cons"], ["proof (prove)\nusing this:\n  \\<pi> j = (\\<pi>' \\<guillemotleft> j') 0\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi>'' \\<equiv>\n  \\<pi> @\\<^bsup>j\\<^esup> (\\<pi>' \\<guillemotleft> j') \\<guillemotleft> i\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?m = ?\\<pi>' 0\\<rbrakk>\n  \\<Longrightarrow> is_path (?\\<pi> @\\<^bsup>?m\\<^esup> ?\\<pi>')\n\ngoal (1 subgoal):\n 1. is_path \\<pi>''", "by presburger"], ["proof (state)\nthis:\n  is_path \\<pi>''\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path \\<pi>''\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>\\<pi>'' (j-i+(i'-j')) = \\<pi>'' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0", "using ilj jlei \\<pi>i \\<pi>j"], ["proof (prove)\nusing this:\n  i < j\n  j' \\<le> i'\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n\ngoal (1 subgoal):\n 1. \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0", "by (auto, metis add_diff_cancel_left' le_antisym le_diff_conv le_eq_less_or_eq)"], ["proof (state)\nthis:\n  \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>\\<pi>'' 0 \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>'' 0 \\<noteq> local.return", "by (simp add: ilj less_or_eq_imp_le nret)"], ["proof (state)\nthis:\n  \\<pi>'' 0 \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>'' 0 \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>0 < j-i+(i'-j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < j - i + (i' - j')", "by (metis add_is_0 ilj neq0_conv zero_less_diff)"], ["proof (state)\nthis:\n  0 < j - i + (i' - j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  is_path \\<pi>''\n  \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0\n  \\<pi>'' 0 \\<noteq> local.return\n  0 < j - i + (i' - j')", "obtain k where k: \\<open>k < j-i+(i'-j')\\<close> \\<open>j-i+(i'-j') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>''\n  \\<pi>'' (j - i + (i' - j')) = \\<pi>'' 0\n  \\<pi>'' 0 \\<noteq> local.return\n  0 < j - i + (i' - j')\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < j - i + (i' - j');\n         j - i + (i' - j') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis loop_has_cd)"], ["proof (state)\nthis:\n  k < j - i + (i' - j')\n  j - i + (i' - j') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence *: \\<open>\\<forall> l \\<in> {k..j-i+(i'-j')}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k)\\<close>"], ["proof (prove)\nusing this:\n  k < j - i + (i' - j')\n  j - i + (i' - j') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{k..j - i + (i' - j')}.\n       \\<pi>'' l \\<noteq> ipd (\\<pi>'' k)", "by (metis is_cdi_def)"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{k..j - i + (i' - j')}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \\<open>k < j-i\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "assume a: \\<open>k < j - i\\<close>"], ["proof (state)\nthis:\n  k < j - i\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "hence b: \\<open>\\<pi>'' k = \\<pi> (i + k)\\<close>"], ["proof (prove)\nusing this:\n  k < j - i\n\ngoal (1 subgoal):\n 1. \\<pi>'' k = \\<pi> (i + k)", "by auto"], ["proof (state)\nthis:\n  \\<pi>'' k = \\<pi> (i + k)\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>\\<forall> l \\<in> {i+k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i+k))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{i + k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "assume l: \\<open>l \\<in> {i + k..j}\\<close>"], ["proof (state)\nthis:\n  l \\<in> {i + k..j}\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "hence \\<open>\\<pi> l = \\<pi>'' (l - i)\\<close>"], ["proof (prove)\nusing this:\n  l \\<in> {i + k..j}\n\ngoal (1 subgoal):\n 1. \\<pi> l = \\<pi>'' (l - i)", "by auto"], ["proof (state)\nthis:\n  \\<pi> l = \\<pi>'' (l - i)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "moreover"], ["proof (state)\nthis:\n  \\<pi> l = \\<pi>'' (l - i)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "from a l"], ["proof (chain)\npicking this:\n  k < j - i\n  l \\<in> {i + k..j}", "have \\<open>l-i \\<in> {k .. j-i + (i'-j')}\\<close>"], ["proof (prove)\nusing this:\n  k < j - i\n  l \\<in> {i + k..j}\n\ngoal (1 subgoal):\n 1. l - i \\<in> {k..j - i + (i' - j')}", "by force"], ["proof (state)\nthis:\n  l - i \\<in> {k..j - i + (i' - j')}\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {i + k..j} \\<Longrightarrow>\n       \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> l = \\<pi>'' (l - i)\n  l - i \\<in> {k..j - i + (i' - j')}", "show \\<open>\\<pi> l \\<noteq> ipd (\\<pi> (i + k))\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l = \\<pi>'' (l - i)\n  l - i \\<in> {k..j - i + (i' - j')}\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "using * b"], ["proof (prove)\nusing this:\n  \\<pi> l = \\<pi>'' (l - i)\n  l - i \\<in> {k..j - i + (i' - j')}\n  \\<forall>l\\<in>{k..j - i + (i' - j')}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k)\n  \\<pi>'' k = \\<pi> (i + k)\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))", "by auto"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> ipd (\\<pi> (i + k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{i + k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{i + k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>i + k < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i + k < j", "using a"], ["proof (prove)\nusing this:\n  k < j - i\n\ngoal (1 subgoal):\n 1. i + k < j", "by simp"], ["proof (state)\nthis:\n  i + k < j\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  i + k < j\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>\\<pi> j \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "by (metis \\<pi>i \\<pi>j j'li' nret path\\<pi>' term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>{i + k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))\n  i + k < j\n  \\<pi> j \\<noteq> local.return", "have \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i+k\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{i + k..j}. \\<pi> l \\<noteq> ipd (\\<pi> (i + k))\n  i + k < j\n  \\<pi> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i + k", "by (metis not_cd_impl_ipd path\\<pi>)"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i + k\n\ngoal (2 subgoals):\n 1. k < j - i \\<Longrightarrow> False\n 2. \\<not> k < j - i \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i + k\n\ngoal (1 subgoal):\n 1. False", "by (metis not_cd(1))"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "assume \\<open>\\<not> k < j - i\\<close>"], ["proof (state)\nthis:\n  \\<not> k < j - i\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "hence a: \\<open>j - i \\<le> k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k < j - i\n\ngoal (1 subgoal):\n 1. j - i \\<le> k", "by simp"], ["proof (state)\nthis:\n  j - i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "hence b: \\<open>\\<pi>'' k = \\<pi>' (j' + (i + k) - j)\\<close>"], ["proof (prove)\nusing this:\n  j - i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<pi>'' k = \\<pi>' (j' + (i + k) - j)", "unfolding \\<pi>''_def path_shift_def path_append_def"], ["proof (prove)\nusing this:\n  j - i \\<le> k\n\ngoal (1 subgoal):\n 1. (if i + k \\<le> j then \\<pi> (i + k) else \\<pi>' (j' + (i + k - j))) =\n    \\<pi>' (j' + (i + k) - j)", "using ilj"], ["proof (prove)\nusing this:\n  j - i \\<le> k\n  i < j\n\ngoal (1 subgoal):\n 1. (if i + k \\<le> j then \\<pi> (i + k) else \\<pi>' (j' + (i + k - j))) =\n    \\<pi>' (j' + (i + k) - j)", "by(auto,metis \\<pi>j add_diff_cancel_left' le_antisym le_diff_conv add.commute)"], ["proof (state)\nthis:\n  \\<pi>'' k = \\<pi>' (j' + (i + k) - j)\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>\\<forall> l \\<in> {j' + (i+k) - j..i'}. \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i+k) - j))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{j' + (i + k) - j..i'}.\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "assume l: \\<open>l \\<in> {j' + (i+k) - j..i'}\\<close>"], ["proof (state)\nthis:\n  l \\<in> {j' + (i + k) - j..i'}\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "hence \\<open>\\<pi>' l = \\<pi>'' (j + l - i - j')\\<close>"], ["proof (prove)\nusing this:\n  l \\<in> {j' + (i + k) - j..i'}\n\ngoal (1 subgoal):\n 1. \\<pi>' l = \\<pi>'' (j + l - i - j')", "unfolding \\<pi>''_def path_shift_def path_append_def"], ["proof (prove)\nusing this:\n  l \\<in> {j' + (i + k) - j..i'}\n\ngoal (1 subgoal):\n 1. \\<pi>' l =\n    (if i + (j + l - i - j') \\<le> j then \\<pi> (i + (j + l - i - j'))\n     else \\<pi>' (j' + (i + (j + l - i - j') - j)))", "using ilj"], ["proof (prove)\nusing this:\n  l \\<in> {j' + (i + k) - j..i'}\n  i < j\n\ngoal (1 subgoal):\n 1. \\<pi>' l =\n    (if i + (j + l - i - j') \\<le> j then \\<pi> (i + (j + l - i - j'))\n     else \\<pi>' (j' + (i + (j + l - i - j') - j)))", "by (auto, metis Nat.diff_add_assoc \\<pi>j a add.commute add_diff_cancel_left' add_leD1 le_antisym le_diff_conv)"], ["proof (state)\nthis:\n  \\<pi>' l = \\<pi>'' (j + l - i - j')\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "moreover"], ["proof (state)\nthis:\n  \\<pi>' l = \\<pi>'' (j + l - i - j')\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "from a l"], ["proof (chain)\npicking this:\n  j - i \\<le> k\n  l \\<in> {j' + (i + k) - j..i'}", "have \\<open>j + l - i - j' \\<in> {k .. j-i + (i'-j')}\\<close>"], ["proof (prove)\nusing this:\n  j - i \\<le> k\n  l \\<in> {j' + (i + k) - j..i'}\n\ngoal (1 subgoal):\n 1. j + l - i - j' \\<in> {k..j - i + (i' - j')}", "by force"], ["proof (state)\nthis:\n  j + l - i - j' \\<in> {k..j - i + (i' - j')}\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> {j' + (i + k) - j..i'} \\<Longrightarrow>\n       \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' l = \\<pi>'' (j + l - i - j')\n  j + l - i - j' \\<in> {k..j - i + (i' - j')}", "show \\<open>\\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' l = \\<pi>'' (j + l - i - j')\n  j + l - i - j' \\<in> {k..j - i + (i' - j')}\n\ngoal (1 subgoal):\n 1. \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "using * b"], ["proof (prove)\nusing this:\n  \\<pi>' l = \\<pi>'' (j + l - i - j')\n  j + l - i - j' \\<in> {k..j - i + (i' - j')}\n  \\<forall>l\\<in>{k..j - i + (i' - j')}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k)\n  \\<pi>'' k = \\<pi>' (j' + (i + k) - j)\n\ngoal (1 subgoal):\n 1. \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))", "by auto"], ["proof (state)\nthis:\n  \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{j' + (i + k) - j..i'}.\n     \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{j' + (i + k) - j..i'}.\n     \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>j' + (i+k) - j < i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' + (i + k) - j < i'", "using a  j'li' ilj k(1)"], ["proof (prove)\nusing this:\n  j - i \\<le> k\n  j' < i'\n  i < j\n  k < j - i + (i' - j')\n\ngoal (1 subgoal):\n 1. j' + (i + k) - j < i'", "by linarith"], ["proof (state)\nthis:\n  j' + (i + k) - j < i'\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  j' + (i + k) - j < i'\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "have \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by (metis \\<pi>i nret)"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>{j' + (i + k) - j..i'}.\n     \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\n  j' + (i + k) - j < i'\n  \\<pi>' i' \\<noteq> local.return", "have \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' + (i+k) - j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{j' + (i + k) - j..i'}.\n     \\<pi>' l \\<noteq> ipd (\\<pi>' (j' + (i + k) - j))\n  j' + (i + k) - j < i'\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' + (i + k) - j", "by (metis not_cd_impl_ipd path\\<pi>')"], ["proof (state)\nthis:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' + (i + k) - j\n\ngoal (1 subgoal):\n 1. \\<not> k < j - i \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' + (i + k) - j\n\ngoal (1 subgoal):\n 1. False", "by (metis not_cd(2))"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> j' < i' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j' < i' \\<Longrightarrow> False", "assume \\<open>\\<not> j' < i'\\<close>"], ["proof (state)\nthis:\n  \\<not> j' < i'\n\ngoal (1 subgoal):\n 1. \\<not> j' < i' \\<Longrightarrow> False", "hence \\<open>j' = i'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> j' < i'\n\ngoal (1 subgoal):\n 1. j' = i'", "by (metis \\<open>\\<not> i' < j'\\<close> linorder_cases)"], ["proof (state)\nthis:\n  j' = i'\n\ngoal (1 subgoal):\n 1. \\<not> j' < i' \\<Longrightarrow> False", "hence \\<open>\\<pi> i = \\<pi> j\\<close>"], ["proof (prove)\nusing this:\n  j' = i'\n\ngoal (1 subgoal):\n 1. \\<pi> i = \\<pi> j", "by (metis \\<pi>i \\<pi>j)"], ["proof (state)\nthis:\n  \\<pi> i = \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<not> j' < i' \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i = \\<pi> j\n\ngoal (1 subgoal):\n 1. False", "by (metis ilj loop_has_cd' not_cd(1) nret path\\<pi>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma other_claim': assumes path: \\<open>is_path \\<pi>\\<close> and eq: \\<open>\\<pi> i = \\<pi> j\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> \nand icd: \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<forall> k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "proof (rule ccontr,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; ?P2\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>i \\<noteq> j; \\<not> ?P2\\<rbrakk> \\<Longrightarrow> False", "assume \\<open>i < j\\<close>"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; ?P2\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>i \\<noteq> j; \\<not> ?P2\\<rbrakk> \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. False", "using assms claim''"], ["proof (prove)\nusing this:\n  i < j\n  is_path \\<pi>\n  \\<pi> i = \\<pi> j\n  \\<pi> i \\<noteq> local.return\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j';\n   \\<forall>k. \\<not> ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<forall>k. \\<not> ?i' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k;\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "assume \\<open>\\<not> i < j\\<close> \\<open>i \\<noteq> j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "hence \\<open>j < i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. j < i", "by auto"], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. False", "using assms claim''"], ["proof (prove)\nusing this:\n  j < i\n  is_path \\<pi>\n  \\<pi> i = \\<pi> j\n  \\<pi> i \\<noteq> local.return\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j';\n   \\<forall>k. \\<not> ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<forall>k. \\<not> ?i' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k;\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. False", "by (metis loop_has_cd')"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma icd_no_cd_path_shift: assumes \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>(\\<forall> k. \\<not> i - 1 cd\\<^bsup>\\<pi>\\<guillemotleft>1\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       \\<not> i -\n              1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k", "proof (rule,rule ccontr,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "case (1 k)"], ["proof (state)\nthis:\n  \\<not> \\<not> i -\n                1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "hence *: \\<open>i - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> \\<not> i -\n                1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. i - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k", "by simp"], ["proof (state)\nthis:\n  i - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "have **: \\<open>1 \\<le> k + 1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<le> k + 1", "by simp"], ["proof (state)\nthis:\n  1 \\<le> k + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "have ***: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by (metis assms is_icdi_def)"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "hence \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k+1\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1", "using cd_path_shift[OF ** ***] *"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1) =\n  (?i - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k + 1 - 1)\n  i - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1", "by auto"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "hence \\<open>k+1 < i\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n\ngoal (1 subgoal):\n 1. k + 1 < i", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k + 1 < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k + 1..i}. \\<pi> j \\<noteq> ipd (\\<pi> (k + 1)))\n\ngoal (1 subgoal):\n 1. k + 1 < i", "by simp"], ["proof (state)\nthis:\n  k + 1 < i\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  k + 1 < i\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "have \\<open>0 < k + 1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k + 1", "by simp"], ["proof (state)\nthis:\n  0 < k + 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<not> \\<not> i -\n                     1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 1\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n  k + 1 < i\n  0 < k + 1", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n  k + 1 < i\n  0 < k + 1\n\ngoal (1 subgoal):\n 1. False", "using assms[unfolded is_icdi_def]"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + 1\n  k + 1 < i\n  0 < k + 1\n  is_path \\<pi> \\<and>\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<and>\n  (\\<forall>m\\<in>{0<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma claim': assumes path\\<pi>: \\<open>is_path \\<pi>\\<close> and path\\<pi>': \\<open>is_path \\<pi>'\\<close> and\n  \\<pi>i: \\<open>\\<pi> i = \\<pi>' i'\\<close> and \\<pi>j: \\<open>\\<pi> j = \\<pi>' j'\\<close> and not_cd:\n  \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>\n  \\<open>i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> 0\\<close> \\<open>j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> 0\\<close>\n   and ilj: \\<open>i < j\\<close>\n   and nret: \\<open>\\<pi> i \\<noteq> return\\<close>\n  shows \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i' < j'", "have g0: \\<open>0 < i\\<close> \\<open>0 < j\\<close> \\<open>0 < i'\\<close> \\<open>0 < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < i &&& 0 < j) &&& 0 < i' &&& 0 < j'", "using not_cd[unfolded is_icdi_def is_cdi_def]"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   0 < i \\<and>\n   \\<pi> i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{0..i}. \\<pi> j \\<noteq> ipd (\\<pi> 0))) \\<and>\n  (\\<forall>m\\<in>{0<..<i}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < i \\<and>\n              \\<pi> i \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   0 < j \\<and>\n   \\<pi> j \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{0..j}. \\<pi> j \\<noteq> ipd (\\<pi> 0))) \\<and>\n  (\\<forall>m\\<in>{0<..<j}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < j \\<and>\n              \\<pi> j \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..j}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n  is_path \\<pi>' \\<and>\n  (is_path \\<pi>' \\<and>\n   0 < i' \\<and>\n   \\<pi>' i' \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{0..i'}. \\<pi>' j \\<noteq> ipd (\\<pi>' 0))) \\<and>\n  (\\<forall>m\\<in>{0<..<i'}.\n      \\<not> (is_path \\<pi>' \\<and>\n              m < i' \\<and>\n              \\<pi>' i' \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..i'}. \\<pi>' j \\<noteq> ipd (\\<pi>' m))))\n  is_path \\<pi>' \\<and>\n  (is_path \\<pi>' \\<and>\n   0 < j' \\<and>\n   \\<pi>' j' \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{0..j'}. \\<pi>' j \\<noteq> ipd (\\<pi>' 0))) \\<and>\n  (\\<forall>m\\<in>{0<..<j'}.\n      \\<not> (is_path \\<pi>' \\<and>\n              m < j' \\<and>\n              \\<pi>' j' \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..j'}. \\<pi>' j \\<noteq> ipd (\\<pi>' m))))\n\ngoal (1 subgoal):\n 1. (0 < i &&& 0 < j) &&& 0 < i' &&& 0 < j'", "by auto"], ["proof (state)\nthis:\n  0 < i\n  0 < j\n  0 < i'\n  0 < j'\n\ngoal (1 subgoal):\n 1. i' < j'", "have  \\<open>(\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\\<close> \\<open>(\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> 1) (i - 1) =\n    (\\<pi>' \\<guillemotleft> 1) (i' - 1) &&&\n    (\\<pi> \\<guillemotleft> 1) (j - 1) =\n    (\\<pi>' \\<guillemotleft> 1) (j' - 1)", "using \\<pi>i \\<pi>j g0"], ["proof (prove)\nusing this:\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n  0 < i\n  0 < j\n  0 < i'\n  0 < j'\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> 1) (i - 1) =\n    (\\<pi>' \\<guillemotleft> 1) (i' - 1) &&&\n    (\\<pi> \\<guillemotleft> 1) (j - 1) =\n    (\\<pi>' \\<guillemotleft> 1) (j' - 1)", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\n  (\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\n\ngoal (1 subgoal):\n 1. i' < j'", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\n  (\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\n\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>\\<forall> k. \\<not> (j - 1) cd\\<^bsup>\\<pi>\\<guillemotleft>1\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<forall> k. \\<not> (i' - 1) cd\\<^bsup>\\<pi>'\\<guillemotleft>1\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k.\n       \\<not> j -\n              1 cd\\<^bsup>\\<pi> \\<guillemotleft>\n                          1\\<^esup>\\<rightarrow> k &&&\n    \\<forall>k.\n       \\<not> i' -\n              1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k", "by (metis icd_no_cd_path_shift not_cd(2)) (metis icd_no_cd_path_shift not_cd(3))"], ["proof (state)\nthis:\n  \\<forall>k.\n     \\<not> j - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  \\<forall>k.\n     \\<not> i' -\n            1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. i' < j'", "moreover"], ["proof (state)\nthis:\n  \\<forall>k.\n     \\<not> j - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  \\<forall>k.\n     \\<not> i' -\n            1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>is_path (\\<pi>\\<guillemotleft>1)\\<close> \\<open>is_path (\\<pi>'\\<guillemotleft>1)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> 1) &&&\n    is_path (\\<pi>' \\<guillemotleft> 1)", "using path\\<pi> path\\<pi>' path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> 1) &&&\n    is_path (\\<pi>' \\<guillemotleft> 1)", "by blast+"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> 1)\n  is_path (\\<pi>' \\<guillemotleft> 1)\n\ngoal (1 subgoal):\n 1. i' < j'", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> 1)\n  is_path (\\<pi>' \\<guillemotleft> 1)\n\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>(\\<pi>\\<guillemotleft>1) (i - 1) \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return", "using g0 nret"], ["proof (prove)\nusing this:\n  0 < i\n  0 < j\n  0 < i'\n  0 < j'\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i' < j'", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>i - 1 < j - 1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i - 1 < j - 1", "using g0 ilj"], ["proof (prove)\nusing this:\n  0 < i\n  0 < j\n  0 < i'\n  0 < j'\n  i < j\n\ngoal (1 subgoal):\n 1. i - 1 < j - 1", "by auto"], ["proof (state)\nthis:\n  i - 1 < j - 1\n\ngoal (1 subgoal):\n 1. i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\n  (\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\n  \\<forall>k.\n     \\<not> j - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  \\<forall>k.\n     \\<not> i' -\n            1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  is_path (\\<pi> \\<guillemotleft> 1)\n  is_path (\\<pi>' \\<guillemotleft> 1)\n  (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return\n  i - 1 < j - 1", "have \\<open>i' - 1 < j' - 1\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\n  (\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\n  \\<forall>k.\n     \\<not> j - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  \\<forall>k.\n     \\<not> i' -\n            1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  is_path (\\<pi> \\<guillemotleft> 1)\n  is_path (\\<pi>' \\<guillemotleft> 1)\n  (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return\n  i - 1 < j - 1\n\ngoal (1 subgoal):\n 1. i' - 1 < j' - 1", "using claim''"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> 1) (i - 1) = (\\<pi>' \\<guillemotleft> 1) (i' - 1)\n  (\\<pi> \\<guillemotleft> 1) (j - 1) = (\\<pi>' \\<guillemotleft> 1) (j' - 1)\n  \\<forall>k.\n     \\<not> j - 1 cd\\<^bsup>\\<pi> \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  \\<forall>k.\n     \\<not> i' -\n            1 cd\\<^bsup>\\<pi>' \\<guillemotleft> 1\\<^esup>\\<rightarrow> k\n  is_path (\\<pi> \\<guillemotleft> 1)\n  is_path (\\<pi>' \\<guillemotleft> 1)\n  (\\<pi> \\<guillemotleft> 1) (i - 1) \\<noteq> local.return\n  i - 1 < j - 1\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j';\n   \\<forall>k. \\<not> ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<forall>k. \\<not> ?i' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k;\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. i' - 1 < j' - 1", "by blast"], ["proof (state)\nthis:\n  i' - 1 < j' - 1\n\ngoal (1 subgoal):\n 1. i' < j'", "thus \\<open>i'<j'\\<close>"], ["proof (prove)\nusing this:\n  i' - 1 < j' - 1\n\ngoal (1 subgoal):\n 1. i' < j'", "by auto"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma other_claim: assumes path: \\<open>is_path \\<pi>\\<close> and eq: \\<open>\\<pi> i = \\<pi> j\\<close> and \\<open>\\<pi> i \\<noteq> return\\<close> \nand icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> and \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j", "proof (rule ccontr,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; ?P2\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>i \\<noteq> j; \\<not> ?P2\\<rbrakk> \\<Longrightarrow> False", "assume \\<open>i < j\\<close>"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; ?P2\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>i \\<noteq> j; \\<not> ?P2\\<rbrakk> \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. False", "using assms claim'"], ["proof (prove)\nusing this:\n  i < j\n  is_path \\<pi>\n  \\<pi> i = \\<pi> j\n  \\<pi> i \\<noteq> local.return\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j'; ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?j icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?i' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0;\n   ?j' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0; ?i < ?j;\n   ?\\<pi> ?i \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "assume \\<open>\\<not> i < j\\<close> \\<open>i \\<noteq> j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "hence \\<open>j < i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. j < i", "by auto"], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; \\<not> i < j\\<rbrakk> \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. False", "using assms claim'"], ["proof (prove)\nusing this:\n  j < i\n  is_path \\<pi>\n  \\<pi> i = \\<pi> j\n  \\<pi> i \\<noteq> local.return\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j'; ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?j icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?i' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0;\n   ?j' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0; ?i < ?j;\n   ?\\<pi> ?i \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. False", "by (metis less_not_refl)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_trans0: assumes \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> and \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "have path: \\<open>is_path \\<pi>\\<close> and ij: \\<open>0 < j\\<close> and jk: \\<open>j < k\\<close> \n  and nret: \\<open>\\<pi> j \\<noteq> return\\<close> \\<open>\\<pi> k \\<noteq> return\\<close>\n  and noipdi: \\<open>\\<forall> l \\<in> {0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0)\\<close>\n  and noipdj: \\<open>\\<forall> l \\<in> {j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_path \\<pi> &&& 0 < j &&& j < k) &&&\n    (\\<pi> j \\<noteq> local.return &&& \\<pi> k \\<noteq> local.return) &&&\n    \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0) &&&\n    \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)", "using assms"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. (is_path \\<pi> &&& 0 < j &&& j < k) &&&\n    (\\<pi> j \\<noteq> local.return &&& \\<pi> k \\<noteq> local.return) &&&\n    \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0) &&&\n    \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  0 < j \\<and>\n  \\<pi> j \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{0..j}. \\<pi> j \\<noteq> ipd (\\<pi> 0))\n  is_path \\<pi> \\<and>\n  j < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n\ngoal (1 subgoal):\n 1. (is_path \\<pi> &&& 0 < j &&& j < k) &&&\n    (\\<pi> j \\<noteq> local.return &&& \\<pi> k \\<noteq> local.return) &&&\n    \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0) &&&\n    \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  0 < j\n  j < k\n  \\<pi> j \\<noteq> local.return\n  \\<pi> k \\<noteq> local.return\n  \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0)\n  \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "assume \\<open>\\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (state)\nthis:\n  \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence \\<open>\\<exists>l \\<in> {0..k}. \\<pi> l = ipd (\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          0 < k \\<and>\n          \\<pi> k \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{0..k}. \\<pi> j \\<noteq> ipd (\\<pi> 0)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)", "using path ij jk nret"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          0 < k \\<and>\n          \\<pi> k \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{0..k}. \\<pi> j \\<noteq> ipd (\\<pi> 0)))\n  is_path \\<pi>\n  0 < j\n  j < k\n  \\<pi> j \\<noteq> local.return\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)", "by force"], ["proof (state)\nthis:\n  \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)", "obtain l where \\<open>l \\<in> {0..k}\\<close> and l: \\<open>\\<pi> l = ipd (\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>{0..k}. \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l \\<in> {0..k}; \\<pi> l = ipd (\\<pi> 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l \\<in> {0..k}\n  \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence jl: \\<open>j<l\\<close> and lk: \\<open>l\\<le>k\\<close>"], ["proof (prove)\nusing this:\n  l \\<in> {0..k}\n  \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. j < l &&& l \\<le> k", "using noipdi ij"], ["proof (prove)\nusing this:\n  l \\<in> {0..k}\n  \\<pi> l = ipd (\\<pi> 0)\n  \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0)\n  0 < j\n\ngoal (1 subgoal):\n 1. j < l &&& l \\<le> k", "by auto"], ["proof (state)\nthis:\n  j < l\n  l \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "have pdj: \\<open>ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "have \\<open>\\<pi> j \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j \\<in> local.nodes", "using path"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<in> local.nodes", "by (metis path_nodes)"], ["proof (state)\nthis:\n  \\<pi> j \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi> j \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "assume \\<open>\\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\\<close>"], ["proof (state)\nthis:\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> j \\<in> local.nodes\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j", "obtain \\<pi>' n where *: \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' 0 = \\<pi> j\\<close> \\<open>\\<pi>' n = return\\<close> \\<open>\\<forall> k\\<le>n. \\<pi>' k \\<noteq> ipd(\\<pi> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j \\<in> local.nodes\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> j;\n         \\<pi>' n = local.return;\n         \\<forall>k\\<le>n. \\<pi>' k \\<noteq> ipd (\\<pi> 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using no_pd_path"], ["proof (prove)\nusing this:\n  \\<pi> j \\<in> local.nodes\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n  \\<lbrakk>?x \\<in> local.nodes; \\<not> ?y pd\\<rightarrow> ?x;\n   \\<And>\\<pi> n.\n      \\<lbrakk>is_path \\<pi>; \\<pi> 0 = ?x; \\<pi> n = local.return;\n       \\<forall>k\\<le>n. \\<pi> k \\<noteq> ?y\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> j;\n         \\<pi>' n = local.return;\n         \\<forall>k\\<le>n. \\<pi>' k \\<noteq> ipd (\\<pi> 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> j\n  \\<pi>' n = local.return\n  \\<forall>k\\<le>n. \\<pi>' k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "hence path': \\<open>is_path (\\<pi> @\\<^bsup>j\\<^esup>  \\<pi>')\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> j\n  \\<pi>' n = local.return\n  \\<forall>k\\<le>n. \\<pi>' k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')", "by (metis path path_cons)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "have \\<open>\\<forall> k \\<le> j + n. (\\<pi>@\\<^bsup>j\\<^esup>  \\<pi>') k \\<noteq> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>j + n.\n       (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)", "using noipdi *(4)"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0)\n  \\<forall>k\\<le>n. \\<pi>' k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>j + n.\n       (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)", "by auto"], ["proof (state)\nthis:\n  \\<forall>k\\<le>j + n.\n     (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>k\\<le>j + n.\n     (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>j\\<^esup>  \\<pi>') 0 = \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "have \\<open>(\\<pi>@\\<^bsup>j\\<^esup>  \\<pi>') (j + n) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return", "using *(2,3)"], ["proof (prove)\nusing this:\n  \\<pi>' 0 = \\<pi> j\n  \\<pi>' n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')\n  \\<forall>k\\<le>j + n.\n     (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return", "have \\<open>\\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')\n  \\<forall>k\\<le>j + n.\n     (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>')\n  \\<forall>k\\<le>j + n.\n     (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> 0)\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>j\\<^esup> \\<pi>') (j + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<pi> 0 \\<in> local.nodes \\<and>\n            (\\<forall>\\<pi>' n.\n                is_path \\<pi>' \\<and>\n                \\<pi>' 0 = \\<pi> 0 \\<and>\n                \\<pi>' n = local.return \\<longrightarrow>\n                (\\<exists>k\\<le>n. \\<pi>' k = ipd (\\<pi> 0))))", "by metis"], ["proof (state)\nthis:\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<not> ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. False", "by (metis is_ipd_def ij ipd_is_ipd nret(1) path path_nodes term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>j) (l-j) pd\\<rightarrow> (\\<pi>\\<guillemotleft>j) 0\\<close>"], ["proof (prove)\nusing this:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n    (\\<pi> \\<guillemotleft> j) 0", "using jl l"], ["proof (prove)\nusing this:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> j\n  j < l\n  \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n    (\\<pi> \\<guillemotleft> j) 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> j) 0\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> j) 0\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "have \\<open>is_path (\\<pi>\\<guillemotleft>j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j)", "by (metis path path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "have \\<open>\\<pi> l \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return", "by (metis lk nret(2) path term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>j) (l-j) \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return", "using jl"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> local.return\n  j < l\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "have \\<open>\\<pi> j \\<noteq> ipd (\\<pi> 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> ipd (\\<pi> 0)", "using noipdi"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{0..j}. \\<pi> l \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> ipd (\\<pi> 0)", "by force"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>j) (l-j) \\<noteq> (\\<pi>\\<guillemotleft>j) 0\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0", "using jl l"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> ipd (\\<pi> 0)\n  j < l\n  \\<pi> l = ipd (\\<pi> 0)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> j) 0\n  is_path (\\<pi> \\<guillemotleft> j)\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0", "obtain k' where \\<open>k' \\<le> l-j\\<close> and \\<open>(\\<pi>\\<guillemotleft>j) k' = ipd ((\\<pi>\\<guillemotleft>j) 0)\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> j) 0\n  is_path (\\<pi> \\<guillemotleft> j)\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> l - j;\n         (\\<pi> \\<guillemotleft> j) k' =\n         ipd ((\\<pi> \\<guillemotleft> j) 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path_pd_ipd0'"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> j) (l - j) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> j) 0\n  is_path (\\<pi> \\<guillemotleft> j)\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> local.return\n  (\\<pi> \\<guillemotleft> j) (l - j) \\<noteq> (\\<pi> \\<guillemotleft> j) 0\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   ?\\<pi> ?n \\<noteq> ?\\<pi> 0; ?\\<pi> ?n pd\\<rightarrow> ?\\<pi> 0;\n   \\<And>k.\n      \\<lbrakk>k \\<le> ?n; ?\\<pi> k = ipd (?\\<pi> 0)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> l - j;\n         (\\<pi> \\<guillemotleft> j) k' =\n         ipd ((\\<pi> \\<guillemotleft> j) 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' \\<le> l - j\n  (\\<pi> \\<guillemotleft> j) k' = ipd ((\\<pi> \\<guillemotleft> j) 0)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "hence \\<open>j + k' \\<in> {j..k}\\<close> \\<open>\\<pi> (j+k') = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  k' \\<le> l - j\n  (\\<pi> \\<guillemotleft> j) k' = ipd ((\\<pi> \\<guillemotleft> j) 0)\n\ngoal (1 subgoal):\n 1. j + k' \\<in> {j..k} &&& \\<pi> (j + k') = ipd (\\<pi> j)", "using jl lk"], ["proof (prove)\nusing this:\n  k' \\<le> l - j\n  (\\<pi> \\<guillemotleft> j) k' = ipd ((\\<pi> \\<guillemotleft> j) 0)\n  j < l\n  l \\<le> k\n\ngoal (1 subgoal):\n 1. j + k' \\<in> {j..k} &&& \\<pi> (j + k') = ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  j + k' \\<in> {j..k}\n  \\<pi> (j + k') = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0 \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j + k' \\<in> {j..k}\n  \\<pi> (j + k') = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. False", "using noipdj"], ["proof (prove)\nusing this:\n  j + k' \\<in> {j..k}\n  \\<pi> (j + k') = ipd (\\<pi> j)\n  \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_trans: assumes \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> and \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "have path: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "using assms is_cdi_def"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "have ij: \\<open>i<j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j", "using assms is_cdi_def"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. i < j", "by auto"], ["proof (state)\nthis:\n  i < j\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "let \\<open>?\\<pi>\\<close> = \\<open>\\<pi>\\<guillemotleft>i\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "have \\<open>j-i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0", "using assms(1) cd_path_shift0 path"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  is_path ?\\<pi> \\<Longrightarrow>\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?k cd\\<^bsup>?\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> 0)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0", "by auto"], ["proof (state)\nthis:\n  j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "moreover"], ["proof (state)\nthis:\n  j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "have \\<open>k-i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow>j-i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> j - i", "by (metis assms(2) cd_path_shift is_cdi_def ij less_imp_le_nat)"], ["proof (state)\nthis:\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> j - i\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "ultimately"], ["proof (chain)\npicking this:\n  j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> j - i", "have \\<open>k-i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\nusing this:\n  j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> j - i\n\ngoal (1 subgoal):\n 1. k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0", "using cd_trans0"], ["proof (prove)\nusing this:\n  j - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> j - i\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0", "by auto"], ["proof (state)\nthis:\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>"], ["proof (prove)\nusing this:\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "using path cd_path_shift0"], ["proof (prove)\nusing this:\n  k - i cd\\<^bsup>\\<pi> \\<guillemotleft> i\\<^esup>\\<rightarrow> 0\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow>\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?k cd\\<^bsup>?\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> 0)\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma excd_impl_exicd: assumes \\<open>\\<exists> k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> shows \\<open>\\<exists> k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "proof(induction \\<open>i\\<close> arbitrary: \\<open>\\<pi>\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < x; Ex (is_cdi y \\<pi>)\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_icdi y \\<pi>);\n        Ex (is_cdi x \\<pi>)\\<rbrakk>\n       \\<Longrightarrow> Ex (is_icdi x \\<pi>)", "case (less i)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < i;\n   \\<exists>a. ?y1 cd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a.\n                       ?y1 icd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\n  \\<exists>a. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < x; Ex (is_cdi y \\<pi>)\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_icdi y \\<pi>);\n        Ex (is_cdi x \\<pi>)\\<rbrakk>\n       \\<Longrightarrow> Ex (is_icdi x \\<pi>)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y1 < i;\n   \\<exists>a. ?y1 cd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a.\n                       ?y1 icd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\n  \\<exists>a. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "obtain k where k: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < i;\n   \\<exists>a. ?y1 cd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a.\n                       ?y1 icd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\n  \\<exists>a. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < x; Ex (is_cdi y \\<pi>)\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_icdi y \\<pi>);\n        Ex (is_cdi x \\<pi>)\\<rbrakk>\n       \\<Longrightarrow> Ex (is_icdi x \\<pi>)", "hence ip: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<pi>.\n       \\<lbrakk>\\<And>y \\<pi>.\n                   \\<lbrakk>y < x; Ex (is_cdi y \\<pi>)\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_icdi y \\<pi>);\n        Ex (is_cdi x \\<pi>)\\<rbrakk>\n       \\<Longrightarrow> Ex (is_icdi x \\<pi>)", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "assume *: \\<open>\\<forall> m \\<in> {k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (state)\nthis:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "hence \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using k ip"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<and>\n    (\\<forall>m\\<in>{k<..<i}.\n        \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)", "by auto"], ["proof (state)\nthis:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "by auto"], ["proof (state)\nthis:\n  \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "assume \\<open>\\<not> (\\<forall> m \\<in> {k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m\\<in>{k<..<i}.\n             \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m\\<in>{k<..<i}.\n             \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)", "obtain m where m: \\<open>m \\<in> {k<..<i}\\<close> \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m\\<in>{k<..<i}.\n             \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> {k<..<i};\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m \\<in> {k<..<i}\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "hence \\<open>i - m cd\\<^bsup>\\<pi>\\<guillemotleft>m\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> {k<..<i}\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0", "by (metis cd_path_shift0 is_cdi_def)"], ["proof (state)\nthis:\n  i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "moreover"], ["proof (state)\nthis:\n  i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "have \\<open>i - m < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i - m < i", "using m"], ["proof (prove)\nusing this:\n  m \\<in> {k<..<i}\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. i - m < i", "by auto"], ["proof (state)\nthis:\n  i - m < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "ultimately"], ["proof (chain)\npicking this:\n  i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0\n  i - m < i", "obtain k' where k': \\<open>i - m icd\\<^bsup>\\<pi>\\<guillemotleft>m\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0\n  i - m < i\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        i -\n        m icd\\<^bsup>\\<pi> \\<guillemotleft>\n                     m\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using less(1)"], ["proof (prove)\nusing this:\n  i - m cd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> 0\n  i - m < i\n  \\<lbrakk>?y1 < i;\n   \\<exists>a. ?y1 cd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a.\n                       ?y1 icd\\<^bsup>?\\<pi>1\\<^esup>\\<rightarrow> a\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        i -\n        m icd\\<^bsup>\\<pi> \\<guillemotleft>\n                     m\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i - m icd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "hence \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' + m\\<close>"], ["proof (prove)\nusing this:\n  i - m icd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' + m", "using ip"], ["proof (prove)\nusing this:\n  i - m icd\\<^bsup>\\<pi> \\<guillemotleft> m\\<^esup>\\<rightarrow> k'\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' + m", "by (metis add.commute add_diff_cancel_right' icd_path_shift le_add1)"], ["proof (state)\nthis:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' + m\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k<..<i}.\n               \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' + m\n\ngoal (1 subgoal):\n 1. \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a", "by auto"], ["proof (state)\nthis:\n  \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>a. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_split: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> obtains m where \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have ki: \\<open>k < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < i", "using assms is_cdi_def"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. k < i", "by auto"], ["proof (state)\nthis:\n  k < i\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain m where m: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis excd_impl_exicd)"], ["proof (state)\nthis:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>k \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. k \\<le> m", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<and>\n  (\\<forall>m\\<in>{m<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. k \\<le> m", "using ki assms(1)"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<and>\n  (\\<forall>m\\<in>{m<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n  k < i\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k \\<le> m", "by force"], ["proof (state)\nthis:\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence km: \\<open>k < m\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> m\n\ngoal (1 subgoal):\n 1. k < m", "using m assms(2)"], ["proof (prove)\nusing this:\n  k \\<le> m\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < m", "by (metis le_eq_less_or_eq)"], ["proof (state)\nthis:\n  k < m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  k < m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> m \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "using m"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   m < i \\<and>\n   \\<pi> i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))) \\<and>\n  (\\<forall>m\\<in>{m<..<i}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < i \\<and>\n              \\<pi> i \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "by (simp, metis term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>m<i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < i", "using m"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m < i", "unfolding is_cdi_def is_icdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   m < i \\<and>\n   \\<pi> i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))) \\<and>\n  (\\<forall>m\\<in>{m<..<i}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < i \\<and>\n              \\<pi> i \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. m < i", "by auto"], ["proof (state)\nthis:\n  m < i\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  k < m\n  \\<pi> m \\<noteq> local.return\n  m < i", "have \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  k < m\n  \\<pi> m \\<noteq> local.return\n  m < i\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using assms(1)"], ["proof (prove)\nusing this:\n  k < m\n  \\<pi> m \\<noteq> local.return\n  m < i\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  k < m\n  \\<pi> m \\<noteq> local.return\n  m < i\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < m \\<and>\n    \\<pi> m \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..m}. \\<pi> j \\<noteq> ipd (\\<pi> k))", "by auto"], ["proof (state)\nthis:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n         m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with m that"], ["proof (chain)\npicking this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m1;\n   ?m1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m1;\n   ?m1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_induct[consumes 1, case_names base IS]: assumes prem: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and base: \\<open>\\<And> i. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k \\<Longrightarrow> P i\\<close> \nand IH: \\<open>\\<And> k' i'. k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow> P k' \\<Longrightarrow> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' \\<Longrightarrow> P i'\\<close> shows \\<open>P i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P i", "using prem IH"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?k'1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P ?k'1;\n   ?i'1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k'1\\<rbrakk>\n  \\<Longrightarrow> P ?i'1\n\ngoal (1 subgoal):\n 1. P i", "proof (induction \\<open>i\\<close> rule: less_induct,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x", "case (less i)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < i; ?y1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<And>k' i'.\n      \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n       i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n      \\<Longrightarrow> P i'\\<rbrakk>\n  \\<Longrightarrow> P ?y1\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?k'1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P ?k'1;\n   ?i'1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k'1\\<rbrakk>\n  \\<Longrightarrow> P ?i'1\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x", "assume \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> ?P5 x\\<rbrakk>\n       \\<Longrightarrow> P x", "thus \\<open>P i\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. P i", "using base"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  ?i1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow> P ?i1\n\ngoal (1 subgoal):\n 1. P i", "by simp"], ["proof (state)\nthis:\n  P i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "case (less i')"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < i'; ?y1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<And>k' i'.\n      \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n       i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n      \\<Longrightarrow> P i'\\<rbrakk>\n  \\<Longrightarrow> P ?y1\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?k'1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P ?k'1;\n   ?i'1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k'1\\<rbrakk>\n  \\<Longrightarrow> P ?i'1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "assume \\<open>\\<not> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  \\<not> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "then"], ["proof (chain)\npicking this:\n  \\<not> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "obtain k' where k': \\<open> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<close> \\<open>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k';\n         k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using less cd_split"], ["proof (prove)\nusing this:\n  \\<not> i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?y1 < i'; ?y1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<And>k' i'.\n      \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n       i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n      \\<Longrightarrow> P i'\\<rbrakk>\n  \\<Longrightarrow> P ?y1\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?k'1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P ?k'1;\n   ?i'1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k'1\\<rbrakk>\n  \\<Longrightarrow> P ?i'1\n  \\<lbrakk>?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<not> ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>m.\n      \\<lbrakk>?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m;\n       m cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k';\n         k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "hence icdk: \\<open>i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'", "using is_icdi_def"], ["proof (prove)\nusing this:\n  i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'", "by auto"], ["proof (state)\nthis:\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "note ih=less(3)[OF k'(2)  _ k'(1)]"], ["proof (state)\nthis:\n  P k' \\<Longrightarrow> P i'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "have ki: \\<open>k' < i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < i'", "using k' is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. k' < i'", "by auto"], ["proof (state)\nthis:\n  k' < i'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "have \\<open>P k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P k'", "using less(1)[OF ki k'(2) ] less(3)"], ["proof (prove)\nusing this:\n  (\\<And>k' i'.\n      \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n       i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n      \\<Longrightarrow> P i') \\<Longrightarrow>\n  P k'\n  \\<lbrakk>?k'1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P ?k'1;\n   ?i'1 icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k'1\\<rbrakk>\n  \\<Longrightarrow> P ?i'1\n\ngoal (1 subgoal):\n 1. P k'", "by auto"], ["proof (state)\nthis:\n  P k'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x; y cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                    \\<And>k' i'.\n                       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n                        P k';\n                        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n                       \\<Longrightarrow> P i'\\<rbrakk>\n                   \\<Longrightarrow> P y;\n        x cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        \\<And>k' i'.\n           \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; P k';\n            i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n           \\<Longrightarrow> P i';\n        \\<not> x icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> P x", "thus \\<open>P i'\\<close>"], ["proof (prove)\nusing this:\n  P k'\n\ngoal (1 subgoal):\n 1. P i'", "using ih"], ["proof (prove)\nusing this:\n  P k'\n  P k' \\<Longrightarrow> P i'\n\ngoal (1 subgoal):\n 1. P i'", "by simp"], ["proof (state)\nthis:\n  P i'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cdi_prefix: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow> m < n' \\<Longrightarrow> n' \\<le> n \\<Longrightarrow> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m; m < n';\n     n' \\<le> n\\<rbrakk>\n    \\<Longrightarrow> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path \\<pi> \\<and>\n             m < n \\<and>\n             \\<pi> n \\<noteq> local.return \\<and>\n             (\\<forall>j\\<in>{m..n}. \\<pi> j \\<noteq> ipd (\\<pi> m));\n     m < n'; n' \\<le> n\\<rbrakk>\n    \\<Longrightarrow> is_path \\<pi> \\<and>\n                      m < n' \\<and>\n                      \\<pi> n' \\<noteq> local.return \\<and>\n                      (\\<forall>j\\<in>{m..n'}.\n                          \\<pi> j \\<noteq> ipd (\\<pi> m))", "by (simp, metis term_path_stable)"], ["", "lemma cr_wn': assumes 1: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and nc: \\<open>\\<not> m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and 3: \\<open>m < m'\\<close> shows \\<open>n < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n < m' \\<Longrightarrow> False", "assume \\<open>\\<not> n < m'\\<close>"], ["proof (state)\nthis:\n  \\<not> n < m'\n\ngoal (1 subgoal):\n 1. \\<not> n < m' \\<Longrightarrow> False", "hence \\<open>m' \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> n < m'\n\ngoal (1 subgoal):\n 1. m' \\<le> n", "by simp"], ["proof (state)\nthis:\n  m' \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> n < m' \\<Longrightarrow> False", "hence \\<open>m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  m' \\<le> n\n\ngoal (1 subgoal):\n 1. m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by (metis 1 3 cdi_prefix)"], ["proof (state)\nthis:\n  m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<not> n < m' \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. False", "using nc"], ["proof (prove)\nusing this:\n  m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<not> m' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cr_wn'': assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> and \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and  \\<open>i \\<le> j\\<close> shows \\<open>m \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "assume \\<open>\\<not>m\\<le>n\\<close>"], ["proof (state)\nthis:\n  \\<not> m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "hence nm: \\<open>n < m\\<close>"], ["proof (prove)\nusing this:\n  \\<not> m \\<le> n\n\ngoal (1 subgoal):\n 1. n < m", "by auto"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "have \\<open>m<j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < j", "using assms(1) assms(4)"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. m < j", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  m < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{m..i}. \\<pi> j \\<noteq> ipd (\\<pi> m))\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. m < j", "by auto"], ["proof (state)\nthis:\n  m < j\n\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n < m\n  m < j", "have \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\nusing this:\n  n < m\n  m < j\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "using assms(2) cdi_prefix"], ["proof (prove)\nusing this:\n  n < m\n  m < j\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<lbrakk>?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m; ?m < ?n';\n   ?n' \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> ?n' cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "by auto"], ["proof (state)\nthis:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<not> m \\<le> n \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. False", "using assms(3)"], ["proof (prove)\nusing this:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ret_no_cd: assumes \\<open>\\<pi> n = return\\<close> shows \\<open>\\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis assms is_cdi_def)"], ["", "lemma ipd_not_self: assumes \\<open>x \\<in> nodes\\<close> \\<open>x\\<noteq> return\\<close> shows \\<open>x \\<noteq> ipd x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> ipd x", "by (metis is_ipd_def assms ipd_is_ipd)"], ["", "lemma icd_cs: assumes \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "from assms"], ["proof (chain)\npicking this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>k = (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k = (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis icd_is_the_icd)"], ["proof (state)\nthis:\n  k = (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "with assms"], ["proof (chain)\npicking this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  k = (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  k = (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_not_pd: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> l \\<noteq> \\<pi> k\\<close> shows \\<open>\\<not> \\<pi> l pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<pi> l pd\\<rightarrow> \\<pi> k", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "assume pd: \\<open>\\<pi> l pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "have nret: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by (metis assms(1) pd pd_ret_is_ret ret_no_cd)"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "have kl: \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "by (metis is_cdi_def assms(1))"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "have path: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by (metis is_cdi_def assms(1))"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "from path_pd_ipd[OF path nret assms(2) pd kl]"], ["proof (chain)\npicking this:\n  (\\<And>la.\n      \\<lbrakk>k < la; la \\<le> l; \\<pi> la = ipd (\\<pi> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain n where \\<open>k < n\\<close> \\<open>n \\<le> l\\<close> \\<open>\\<pi> n = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>la.\n      \\<lbrakk>k < la; la \\<le> l; \\<pi> la = ipd (\\<pi> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>k < n; n \\<le> l; \\<pi> n = ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  k < n\n  n \\<le> l\n  \\<pi> n = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  k < n\n  n \\<le> l\n  \\<pi> n = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. False", "using assms(1)"], ["proof (prove)\nusing this:\n  k < n\n  n \\<le> l\n  \\<pi> n = ipd (\\<pi> k)\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. False", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  k < n\n  n \\<le> l\n  \\<pi> n = ipd (\\<pi> k)\n  is_path \\<pi> \\<and>\n  k < l \\<and>\n  \\<pi> l \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_ipd_is_cd: assumes \\<open>k<m\\<close> \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> and mcdj: \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. \\<not> ?P \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "assume \\<open>j < k\\<close>"], ["proof (state)\nthis:\n  j < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. \\<not> ?P \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  j < k\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by (metis mcdj assms(1) cdi_prefix less_imp_le_nat)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "assume \\<open>\\<not> j < k\\<close>"], ["proof (state)\nthis:\n  \\<not> j < k\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "hence kj: \\<open>k \\<le> j\\<close>"], ["proof (prove)\nusing this:\n  \\<not> j < k\n\ngoal (1 subgoal):\n 1. k \\<le> j", "by simp"], ["proof (state)\nthis:\n  k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have \\<open>k < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < j", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k < j \\<Longrightarrow> False", "using kj assms mcdj"], ["proof (prove)\nusing this:\n  k \\<le> j\n  k < m\n  \\<pi> m = ipd (\\<pi> k)\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<not> k < j \\<Longrightarrow> False", "by (auto, metis is_cdi_def is_ipd_def cd_not_pd ipd_is_ipd path_nodes term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  k < j\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "moreover"], ["proof (state)\nthis:\n  k < j\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have \\<open>j < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < m", "using mcdj is_cdi_def"], ["proof (prove)\nusing this:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. j < m", "by auto"], ["proof (state)\nthis:\n  j < m\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "hence \\<open>\\<forall> n \\<in> {k..j}. \\<pi> n \\<noteq> ipd(\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  j < m\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{k..j}. \\<pi> n \\<noteq> ipd (\\<pi> k)", "using assms(3)"], ["proof (prove)\nusing this:\n  j < m\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>{k..j}. \\<pi> n \\<noteq> ipd (\\<pi> k)", "by force"], ["proof (state)\nthis:\n  \\<forall>n\\<in>{k..j}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "ultimately"], ["proof (chain)\npicking this:\n  k < j\n  \\<forall>n\\<in>{k..j}. \\<pi> n \\<noteq> ipd (\\<pi> k)", "have \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  k < j\n  \\<forall>n\\<in>{k..j}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis mcdj is_cdi_def term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "hence \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis mcdj cd_trans)"], ["proof (state)\nthis:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "hence \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. False", "by (metis is_cdi_def is_ipd_def assms(2) cd_not_pd ipd_is_ipd path_nodes term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> j < k \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by simp"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_pd_cd0: assumes lcd: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close> shows \\<open>ipd (\\<pi> 0) pd\\<rightarrow> (\\<pi> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "obtain k l where \\<pi>0: \\<open>\\<pi> 0 = k\\<close> and \\<pi>n: \\<open>\\<pi> n = l\\<close> and cdi: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>\\<pi> 0 = k; \\<pi> n = l;\n         n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lcd"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>\\<pi> 0 = k; \\<pi> n = l;\n         n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  0 < n \\<and>\n  \\<pi> n \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{0..n}. \\<pi> j \\<noteq> ipd (\\<pi> 0))\n\ngoal (1 subgoal):\n 1. (\\<And>k l.\n        \\<lbrakk>\\<pi> 0 = k; \\<pi> n = l;\n         is_path \\<pi> \\<and>\n         0 < n \\<and>\n         \\<pi> n \\<noteq> local.return \\<and>\n         (\\<forall>j\\<in>{0..n}. \\<pi> j \\<noteq> ipd (\\<pi> 0))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<pi> 0 = k\n  \\<pi> n = l\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have nret: \\<open>k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> local.return", "by (metis is_cdi_def \\<pi>0 cdi term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have  path: \\<open>is_path \\<pi>\\<close> and ipd: \\<open>\\<forall> i\\<le>n. \\<pi> i \\<noteq> ipd k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k", "using cdi"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k", "unfolding is_cdi_def \\<pi>0"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  0 < n \\<and>\n  \\<pi> n \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{0..n}. \\<pi> j \\<noteq> ipd k)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "{"], ["proof (state)\nthis:\n  is_path \\<pi>\n  \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "fix \\<pi>' n'"], ["proof (state)\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "assume path': \\<open>is_path \\<pi>'\\<close>\n    and \\<pi>'0: \\<open>\\<pi>' 0 = l\\<close>\n    and ret: \\<open>\\<pi>' n' = return\\<close>"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = l\n  \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>is_path (\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')", "using path path' \\<pi>n \\<pi>'0"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> n = l\n  \\<pi>' 0 = l\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')", "by (metis path_cons)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>(\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>') (n+n') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return", "using ret \\<pi>n \\<pi>'0"], ["proof (prove)\nusing this:\n  \\<pi>' n' = local.return\n  \\<pi> n = l\n  \\<pi>' 0 = l\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>(\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>') 0 = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k", "using \\<pi>0"], ["proof (prove)\nusing this:\n  \\<pi> 0 = k\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>ipd k pd\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd k pd\\<rightarrow> k", "by (metis is_ipd_def path \\<pi>0 ipd_is_ipd nret path_nodes)"], ["proof (state)\nthis:\n  ipd k pd\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k\n  ipd k pd\\<rightarrow> k", "obtain k' where k': \\<open>k' \\<le> n+n'\\<close> \\<open>(\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>') k' = ipd k\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + n') = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') 0 = k\n  ipd k pd\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>k' \\<le> n + n';\n         (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = ipd k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis pd_intro)"], ["proof (state)\nthis:\n  k' \\<le> n + n'\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>\\<not> k'\\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k' \\<le> n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. k' \\<le> n \\<Longrightarrow> False", "assume \\<open>k' \\<le> n\\<close>"], ["proof (state)\nthis:\n  k' \\<le> n\n\ngoal (1 subgoal):\n 1. k' \\<le> n \\<Longrightarrow> False", "hence \\<open>(\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>') k' = \\<pi> k'\\<close>"], ["proof (prove)\nusing this:\n  k' \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi> k'", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi> k'\n\ngoal (1 subgoal):\n 1. k' \\<le> n \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi> k'\n\ngoal (1 subgoal):\n 1. False", "using k'(2) ipd"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi> k'\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = ipd k\n  \\<forall>i\\<le>n. \\<pi> i \\<noteq> ipd k\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>k' \\<le> n\\<close>)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> k' \\<le> n\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "hence \\<open>(\\<pi> @\\<^bsup>n\\<^esup>  \\<pi>') k' = \\<pi>' (k' - n)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k' \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi>' (k' - n)", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi>' (k' - n)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi>' (k' - n)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>(k' - n) \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' - n \\<le> n'", "using k'"], ["proof (prove)\nusing this:\n  k' \\<le> n + n'\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = ipd k\n\ngoal (1 subgoal):\n 1. k' - n \\<le> n'", "by simp"], ["proof (state)\nthis:\n  k' - n \\<le> n'\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi>' (k' - n)\n  k' - n \\<le> n'", "have \\<open>\\<exists> k'\\<le>n'. \\<pi>' k' = ipd k\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k' = \\<pi>' (k' - n)\n  k' - n \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>k'\\<le>n'. \\<pi>' k' = ipd k", "unfolding k'"], ["proof (prove)\nusing this:\n  ipd k = \\<pi>' (k' - n)\n  k' - n \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<exists>k'\\<le>n'. \\<pi>' k' = ipd k", "by auto"], ["proof (state)\nthis:\n  \\<exists>k'\\<le>n'. \\<pi>' k' = ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = l;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k'\\<le>?n'3. ?\\<pi>'3 k' = ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = l;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k'\\<le>?n'3. ?\\<pi>'3 k' = ipd k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "have \\<open>l \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> local.nodes", "by (metis \\<pi>n path path_nodes)"], ["proof (state)\nthis:\n  l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = l;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k'\\<le>?n'3. ?\\<pi>'3 k' = ipd k\n  l \\<in> local.nodes", "show \\<open>ipd (\\<pi> 0) pd\\<rightarrow> (\\<pi> n)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = l;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k'\\<le>?n'3. ?\\<pi>'3 k' = ipd k\n  l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>'3; ?\\<pi>'3 0 = l;\n   ?\\<pi>'3 ?n'3 = local.return\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k'\\<le>?n'3. ?\\<pi>'3 k' = ipd k\n  l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<in> local.nodes \\<and>\n    (\\<forall>\\<pi>' na.\n        is_path \\<pi>' \\<and>\n        \\<pi>' 0 = \\<pi> n \\<and> \\<pi>' na = local.return \\<longrightarrow>\n        (\\<exists>k\\<le>na. \\<pi>' k = ipd (\\<pi> 0)))", "by (simp add: \\<pi>0 \\<pi>n)"], ["proof (state)\nthis:\n  ipd (\\<pi> 0) pd\\<rightarrow> \\<pi> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_pd_cd: assumes lcd: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>ipd (\\<pi> k) pd\\<rightarrow> (\\<pi> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "have \\<open>l-k cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow>0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0", "using lcd cd_path_shift0 is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  is_path ?\\<pi> \\<Longrightarrow>\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?k cd\\<^bsup>?\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> 0)\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0", "by blast"], ["proof (state)\nthis:\n  l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "moreover"], ["proof (state)\nthis:\n  l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "note ipd_pd_cd0[OF this]"], ["proof (state)\nthis:\n  ipd ((\\<pi> \\<guillemotleft> k) 0) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) (l - k)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "moreover"], ["proof (state)\nthis:\n  ipd ((\\<pi> \\<guillemotleft> k) 0) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) (l - k)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "have \\<open>(\\<pi> \\<guillemotleft> k) 0 = \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "have \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "using lcd"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < l", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k < l \\<and>\n  \\<pi> l \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. k < l", "by simp"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "then"], ["proof (chain)\npicking this:\n  k < l", "have \\<open>(\\<pi> \\<guillemotleft> k) (l - k) = \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (l - k) = \\<pi> l", "by simp"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (l - k) = \\<pi> l\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "ultimately"], ["proof (chain)\npicking this:\n  l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  ipd ((\\<pi> \\<guillemotleft> k) 0) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) (l - k)\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k\n  (\\<pi> \\<guillemotleft> k) (l - k) = \\<pi> l", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  l - k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  ipd ((\\<pi> \\<guillemotleft> k) 0) pd\\<rightarrow>\n  (\\<pi> \\<guillemotleft> k) (l - k)\n  (\\<pi> \\<guillemotleft> k) 0 = \\<pi> k\n  (\\<pi> \\<guillemotleft> k) (l - k) = \\<pi> l\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "by simp"], ["proof (state)\nthis:\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_is_cd_ipd: assumes km: \\<open>k<m\\<close> and ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> and cdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and nipdj: \\<open>ipd (\\<pi> j) \\<noteq> \\<pi> m\\<close> shows \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have path: \\<open>is_path \\<pi>\\<close> \n  and jk: \\<open>j < k\\<close> \n  and nretj: \\<open>\\<pi> k \\<noteq> return\\<close> \n  and nipd: \\<open>\\<forall> l \\<in> {j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_path \\<pi> &&& j < k) &&&\n    \\<pi> k \\<noteq> local.return &&&\n    \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)", "using  cdj is_cdi_def"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. (is_path \\<pi> &&& j < k) &&&\n    \\<pi> k \\<noteq> local.return &&&\n    \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  j < k\n  \\<pi> k \\<noteq> local.return\n  \\<forall>l\\<in>{j..k}. \\<pi> l \\<noteq> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have pd: \\<open>ipd (\\<pi> j) pd\\<rightarrow> \\<pi> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) pd\\<rightarrow> \\<pi> m", "by (metis atLeastAtMost_iff cdj ipd(1) ipd_pd_cd jk le_refl less_imp_le nipd nretj path path_nodes pd_pd_ipd)"], ["proof (state)\nthis:\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> m\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have nretm: \\<open>\\<pi> m \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "by (metis nipdj pd pd_ret_is_ret)"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have jm: \\<open>j < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < m", "using jk km"], ["proof (prove)\nusing this:\n  j < k\n  k < m\n\ngoal (1 subgoal):\n 1. j < m", "by simp"], ["proof (state)\nthis:\n  j < m\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "show \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "assume ncdj: \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (state)\nthis:\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "hence \\<open>\\<exists> l \\<in> {j..m}. \\<pi> l = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>{j..m}. \\<pi> l = ipd (\\<pi> j)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          j < m \\<and>\n          \\<pi> m \\<noteq> local.return \\<and>\n          (\\<forall>ja\\<in>{j..m}. \\<pi> ja \\<noteq> ipd (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>{j..m}. \\<pi> l = ipd (\\<pi> j)", "by (metis jm nretm path)"], ["proof (state)\nthis:\n  \\<exists>l\\<in>{j..m}. \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<in>{j..m}. \\<pi> l = ipd (\\<pi> j)", "obtain l \n    where jl: \\<open>j \\<le> l\\<close> and \\<open>l \\<le> m\\<close> \n    and lipd: \\<open>\\<pi> l = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l\\<in>{j..m}. \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>j \\<le> l; l \\<le> m; \\<pi> l = ipd (\\<pi> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  j \\<le> l\n  l \\<le> m\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "hence lm: \\<open>l < m\\<close>"], ["proof (prove)\nusing this:\n  j \\<le> l\n  l \\<le> m\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. l < m", "using nipdj"], ["proof (prove)\nusing this:\n  j \\<le> l\n  l \\<le> m\n  \\<pi> l = ipd (\\<pi> j)\n  ipd (\\<pi> j) \\<noteq> \\<pi> m\n\ngoal (1 subgoal):\n 1. l < m", "by (metis le_eq_less_or_eq)"], ["proof (state)\nthis:\n  l < m\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have npd: \\<open>\\<not> ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "by (metis ipd(1) lipd nipdj pd pd_antisym)"], ["proof (state)\nthis:\n  \\<not> ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have nd: \\<open>\\<pi> l \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<in> local.nodes", "using path path_nodes"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<in> local.nodes", "by simp"], ["proof (state)\nthis:\n  \\<pi> l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "from no_pd_path[OF nd npd]"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>' n.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l; \\<pi>' n = local.return;\n       \\<forall>ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain \\<pi>' n where path': \\<open>is_path \\<pi>'\\<close> and \\<pi>'0: \\<open>\\<pi>' 0 = \\<pi> l\\<close> and \\<pi>'n: \\<open>\\<pi>' n = return\\<close> and nipd: \\<open>\\<forall> ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>' n.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l; \\<pi>' n = local.return;\n       \\<forall>ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n = local.return;\n         \\<forall>ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> l\n  \\<pi>' n = local.return\n  \\<forall>ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "let \\<open>?\\<pi>\\<close> = \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>') \\<guillemotleft> k\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have path'': \\<open>is_path ?\\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)", "by (metis \\<pi>'0 path path' path_cons path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have kl: \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "using lipd cdj jl"], ["proof (prove)\nusing this:\n  \\<pi> l = ipd (\\<pi> j)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j \\<le> l\n\ngoal (1 subgoal):\n 1. k < l", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<pi> l = ipd (\\<pi> j)\n  is_path \\<pi> \\<and>\n  j < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n  j \\<le> l\n\ngoal (1 subgoal):\n 1. k < l", "by fastforce"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have \\<open>?\\<pi> 0 = \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k", "using kl"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have \\<open>?\\<pi> (l + n - k) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n    local.return", "using \\<pi>'n \\<pi>'0 kl"], ["proof (prove)\nusing this:\n  \\<pi>' n = local.return\n  \\<pi>' 0 = \\<pi> l\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n    local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n  local.return\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n  local.return\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "have \\<open>ipd (\\<pi> k) pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> k", "by (metis is_ipd_def ipd_is_ipd nretj path path_nodes)"], ["proof (state)\nthis:\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n  local.return\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> k", "obtain l' where l': \\<open>l' \\<le> (l + n - k)\\<close> \\<open>?\\<pi> l' = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n  local.return\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' \\<le> l + n - k;\n         (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' =\n         ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k)\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) 0 = \\<pi> k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) (l + n - k) =\n  local.return\n  \\<pi> k \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' n.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> k \\<and> \\<pi>' n = local.return \\<longrightarrow>\n      (\\<exists>ka\\<le>n. \\<pi>' ka = ipd (\\<pi> k)))\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' \\<le> l + n - k;\n         (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' =\n         ipd (\\<pi> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l' \\<le> l + n - k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases )"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume *: \\<open>k + l' \\<le> l\\<close>"], ["proof (state)\nthis:\n  k + l' \\<le> l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \\<open>\\<pi> (k + l') = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  k + l' \\<le> l\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l') = ipd (\\<pi> k)", "using l'"], ["proof (prove)\nusing this:\n  k + l' \\<le> l\n  l' \\<le> l + n - k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l') = ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  \\<pi> (k + l') = ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi> (k + l') = ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>k + l' < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + l' < m", "by (metis \"*\" dual_order.strict_trans2 lm)"], ["proof (state)\nthis:\n  k + l' < m\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> (k + l') = ipd (\\<pi> k)\n  k + l' < m", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + l') = ipd (\\<pi> k)\n  k + l' < m\n\ngoal (1 subgoal):\n 1. False", "using ipd(2)"], ["proof (prove)\nusing this:\n  \\<pi> (k + l') = ipd (\\<pi> k)\n  k + l' < m\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "assume \\<open>\\<not> k + l' \\<le> l\\<close>"], ["proof (state)\nthis:\n  \\<not> k + l' \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "hence \\<open>\\<pi>' (k + l' - l) = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k + l' \\<le> l\n\ngoal (1 subgoal):\n 1. \\<pi>' (k + l' - l) = ipd (\\<pi> k)", "using l'"], ["proof (prove)\nusing this:\n  \\<not> k + l' \\<le> l\n  l' \\<le> l + n - k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi>' (k + l' - l) = ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k + l' - l) = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (k + l' - l) = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "have \\<open>k + l' - l \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + l' - l \\<le> n", "using l' kl"], ["proof (prove)\nusing this:\n  l' \\<le> l + n - k\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>' \\<guillemotleft> k) l' = ipd (\\<pi> k)\n  k < l\n\ngoal (1 subgoal):\n 1. k + l' - l \\<le> n", "by linarith"], ["proof (state)\nthis:\n  k + l' - l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> k + l' \\<le> l \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (k + l' - l) = ipd (\\<pi> k)\n  k + l' - l \\<le> n", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k + l' - l) = ipd (\\<pi> k)\n  k + l' - l \\<le> n\n\ngoal (1 subgoal):\n 1. False", "using nipd"], ["proof (prove)\nusing this:\n  \\<pi>' (k + l' - l) = ipd (\\<pi> k)\n  k + l' - l \\<le> n\n  \\<forall>ka\\<le>n. \\<pi>' ka \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ipd_icd_greatest_cd_not_ipd: assumes ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close>\nand km: \\<open>k < m\\<close> and icdj: \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>j = (GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "let \\<open>?j\\<close> = \\<open>GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "have kcdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using assms cd_ipd_is_cd is_icdi_def"], ["proof (prove)\nusing this:\n  \\<pi> m = ipd (\\<pi> k)\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n  k < m\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<lbrakk>?k < ?m; ?\\<pi> ?m = ipd (?\\<pi> ?k);\n   \\<forall>n\\<in>{?k..<?m}. ?\\<pi> n \\<noteq> ipd (?\\<pi> ?k);\n   ?m cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by blast"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "have nipd: \\<open>ipd (\\<pi> j) \\<noteq> \\<pi> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) \\<noteq> \\<pi> m", "using icdj"], ["proof (prove)\nusing this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) \\<noteq> \\<pi> m", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   j < m \\<and>\n   \\<pi> m \\<noteq> local.return \\<and>\n   (\\<forall>ja\\<in>{j..m}. \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n  (\\<forall>ma\\<in>{j<..<m}.\n      \\<not> (is_path \\<pi> \\<and>\n              ma < m \\<and>\n              \\<pi> m \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{ma..m}. \\<pi> j \\<noteq> ipd (\\<pi> ma))))\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) \\<noteq> \\<pi> m", "by auto"], ["proof (state)\nthis:\n  ipd (\\<pi> j) \\<noteq> \\<pi> m\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "have bound: \\<open>\\<And> j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m \\<Longrightarrow> j \\<le> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m \\<Longrightarrow>\n       j \\<le> k", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       (is_path \\<pi> \\<and>\n        j < k \\<and>\n        \\<pi> k \\<noteq> local.return \\<and>\n        (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m \\<Longrightarrow>\n       j \\<le> k", "by simp"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<and>\n  ipd (\\<pi> ?j1) \\<noteq> \\<pi> m \\<Longrightarrow>\n  ?j1 \\<le> k\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "have exists: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m\\<close> (is \\<open>?P j\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n    ipd (\\<pi> j) \\<noteq> \\<pi> m", "using kcdj nipd"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  ipd (\\<pi> j) \\<noteq> \\<pi> m\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n    ipd (\\<pi> j) \\<noteq> \\<pi> m", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n  ipd (\\<pi> j) \\<noteq> \\<pi> m\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "note GreatestI_nat[of \\<open>?P\\<close> _ \\<open>k\\<close>, OF exists] Greatest_le_nat[of \\<open>?P\\<close> \\<open>j\\<close> \\<open>k\\<close>, OF exists]"], ["proof (state)\nthis:\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST a.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n       ipd (\\<pi> a) \\<noteq> \\<pi> m) \\<and>\n  ipd (\\<pi>\n        (GREATEST a.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n            ipd (\\<pi> a) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  j \\<le> (GREATEST a.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n              ipd (\\<pi> a) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "hence kcdj': \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j\\<close> and ipd': \\<open>ipd (\\<pi> ?j) \\<noteq> \\<pi> m\\<close> and jj: \\<open>j \\<le> ?j\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST a.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n       ipd (\\<pi> a) \\<noteq> \\<pi> m) \\<and>\n  ipd (\\<pi>\n        (GREATEST a.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n            ipd (\\<pi> a) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  j \\<le> (GREATEST a.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n              ipd (\\<pi> a) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> \\<pi> m) &&&\n    ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)) \\<noteq>\n    \\<pi> m &&&\n    j \\<le> (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq> \\<pi> m)", "using bound"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST a.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n       ipd (\\<pi> a) \\<noteq> \\<pi> m) \\<and>\n  ipd (\\<pi>\n        (GREATEST a.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n            ipd (\\<pi> a) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> \\<pi> m \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  j \\<le> (GREATEST a.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n              ipd (\\<pi> a) \\<noteq> \\<pi> m)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<and>\n  ipd (\\<pi> ?j1) \\<noteq> \\<pi> m \\<Longrightarrow>\n  ?j1 \\<le> k\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> \\<pi> m) &&&\n    ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)) \\<noteq>\n    \\<pi> m &&&\n    j \\<le> (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq> \\<pi> m)", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi>\n        (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  j \\<le> (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "hence mcdj': \\<open>m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi>\n        (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  j \\<le> (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> \\<pi> m)", "using ipd km cd_is_cd_ipd"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi>\n        (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> \\<pi> m)) \\<noteq>\n  \\<pi> m\n  j \\<le> (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  \\<pi> m = ipd (\\<pi> k)\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n  k < m\n  \\<lbrakk>?k < ?m; ?\\<pi> ?m = ipd (?\\<pi> ?k);\n   \\<forall>n\\<in>{?k..<?m}. ?\\<pi> n \\<noteq> ipd (?\\<pi> ?k);\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j;\n   ipd (?\\<pi> ?j) \\<noteq> ?\\<pi> ?m\\<rbrakk>\n  \\<Longrightarrow> ?m cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\n\ngoal (1 subgoal):\n 1. m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> \\<pi> m)", "by auto"], ["proof (state)\nthis:\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "show \\<open>j = ?j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m) \\<Longrightarrow>\n    False", "assume \\<open>j \\<noteq> ?j\\<close>"], ["proof (state)\nthis:\n  j \\<noteq>\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j \\<noteq>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m) \\<Longrightarrow>\n    False", "hence jlj: \\<open>j < ?j\\<close>"], ["proof (prove)\nusing this:\n  j \\<noteq>\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j < (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> \\<pi> m)", "using jj"], ["proof (prove)\nusing this:\n  j \\<noteq>\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  j \\<le> (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j < (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> \\<pi> m)", "by simp"], ["proof (state)\nthis:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j \\<noteq>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. j \\<noteq>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m) \\<Longrightarrow>\n    False", "have \\<open>?j < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)\n    < m", "using kcdj' km"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  k < m\n\ngoal (1 subgoal):\n 1. (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)\n    < m", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (GREATEST j.\n      (is_path \\<pi> \\<and>\n       j < k \\<and>\n       \\<pi> k \\<noteq> local.return \\<and>\n       (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{GREATEST j.\n                      (is_path \\<pi> \\<and>\n                       j < k \\<and>\n                       \\<pi> k \\<noteq> local.return \\<and>\n                       (\\<forall>ja\\<in>{j..k}.\n                           \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n                      ipd (\\<pi> j) \\<noteq> \\<pi> m..k}.\n      \\<pi> j \\<noteq>\n      ipd (\\<pi>\n            (GREATEST j.\n                (is_path \\<pi> \\<and>\n                 j < k \\<and>\n                 \\<pi> k \\<noteq> local.return \\<and>\n                 (\\<forall>ja\\<in>{j..k}.\n                     \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n                ipd (\\<pi> j) \\<noteq> \\<pi> m)))\n  k < m\n\ngoal (1 subgoal):\n 1. (GREATEST j.\n        (is_path \\<pi> \\<and>\n         j < k \\<and>\n         \\<pi> k \\<noteq> local.return \\<and>\n         (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)\n    < m", "by auto"], ["proof (state)\nthis:\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < m\n\ngoal (1 subgoal):\n 1. j \\<noteq>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < m", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < m\n\ngoal (1 subgoal):\n 1. False", "using icdj mcdj'"], ["proof (prove)\nusing this:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < m\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. False", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  j < (GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  < m\n  is_path \\<pi> \\<and>\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n  (\\<forall>ma\\<in>{j<..<m}.\n      \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ma)\n  m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_impl_icd_cd: assumes \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "using assms cd_split icd_uniq"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<not> i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  \\<lbrakk>?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<not> ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>m.\n      \\<lbrakk>?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m;\n       m cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>?m icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n;\n   ?m icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "by metis"], ["", "lemma cdi_is_cd_icdi: assumes \\<open>k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> shows \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<longleftrightarrow> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i) =\n    (j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j)", "by (metis assms cd_impl_icd_cd cd_trans icd_imp_cd icd_uniq)"], ["", "lemma same_ipd_stable: assumes \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> \\<open>i<j\\<close> \\<open>ipd (\\<pi> i) = ipd (\\<pi> k)\\<close> shows \\<open>ipd (\\<pi> j) = ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "have jcdi: \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "by (metis is_cdi_def assms(1,2,3) cr_wn' le_antisym less_imp_le_nat)"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "have 1: \\<open>ipd (\\<pi> j) pd\\<rightarrow> \\<pi> k \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) pd\\<rightarrow> \\<pi> k", "by (metis assms(2) ipd_pd_cd)"], ["proof (state)\nthis:\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "have 2: \\<open>ipd (\\<pi> k) pd\\<rightarrow> \\<pi> j \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> j", "by (metis assms(4) ipd_pd_cd jcdi)"], ["proof (state)\nthis:\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "have 3: \\<open>ipd (\\<pi> k) pd\\<rightarrow> (ipd (\\<pi> j))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> ipd (\\<pi> j)", "by (metis 2 IFC_def.is_cdi_def assms(1,2,4) atLeastAtMost_iff jcdi less_imp_le pd_node2 pd_pd_ipd)"], ["proof (state)\nthis:\n  ipd (\\<pi> k) pd\\<rightarrow> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "have 4: \\<open>ipd (\\<pi> j) pd\\<rightarrow> (ipd (\\<pi> k))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) pd\\<rightarrow> ipd (\\<pi> k)", "by (metis 1 2 IFC_def.is_ipd_def assms(2) cd_not_pd ipd_is_ipd jcdi pd_node2 ret_no_cd)"], ["proof (state)\nthis:\n  ipd (\\<pi> j) pd\\<rightarrow> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "using 3 4 pd_antisym"], ["proof (prove)\nusing this:\n  ipd (\\<pi> k) pd\\<rightarrow> ipd (\\<pi> j)\n  ipd (\\<pi> j) pd\\<rightarrow> ipd (\\<pi> k)\n  \\<lbrakk>?x pd\\<rightarrow> ?y; ?y pd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) = ipd (\\<pi> k)", "by simp"], ["proof (state)\nthis:\n  ipd (\\<pi> j) = ipd (\\<pi> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma icd_pd_intermediate': assumes icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  and j: \\<open>k < j\\<close> \\<open>j < i\\<close> shows \\<open>\\<pi> i pd\\<rightarrow> (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "using j"], ["proof (prove)\nusing this:\n  k < j\n  j < i\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "proof (induction \\<open>i - j\\<close> arbitrary: \\<open>j\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "case (less j)"], ["proof (state)\nthis:\n  \\<lbrakk>i - ?j1 < i - j; k < ?j1; ?j1 < i\\<rbrakk>\n  \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ?j1\n  k < j\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "have \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using less.prems icd"], ["proof (prove)\nusing this:\n  k < j\n  j < i\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  k < j\n  j < i\n  is_path \\<pi> \\<and>\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<and>\n  (\\<forall>m\\<in>{k<..<i}. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by force"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "moreover"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "have \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "using icd"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by (metis is_icdi_def)"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "moreover"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "have \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "using icd"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by (metis is_icdi_def ret_no_cd)"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  is_path \\<pi>\n  \\<pi> i \\<noteq> local.return", "have \\<open>\\<exists> l. j \\<le> l \\<and> l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  is_path \\<pi>\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          j < i \\<and>\n          \\<pi> i \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{j..i}. \\<pi> j \\<noteq> ipd (\\<pi> j)))\n  is_path \\<pi>\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)", "using less.prems"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          j < i \\<and>\n          \\<pi> i \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{j..i}. \\<pi> j \\<noteq> ipd (\\<pi> j)))\n  is_path \\<pi>\n  \\<pi> i \\<noteq> local.return\n  k < j\n  j < i\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "then"], ["proof (chain)\npicking this:\n  \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)", "obtain l where l: \\<open>j \\<le> l\\<close> \\<open>l \\<le> i\\<close> \\<open>\\<pi> l = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l\\<ge>j. l \\<le> i \\<and> \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>j \\<le> l; l \\<le> i; \\<pi> l = ipd (\\<pi> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j \\<le> l\n  l \\<le> i\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "hence lpd: \\<open>\\<pi> l pd\\<rightarrow> (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  j \\<le> l\n  l \\<le> i\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> j", "by (metis is_ipd_def \\<open>\\<pi> i \\<noteq> return\\<close> \\<open>is_path \\<pi>\\<close> ipd_is_ipd path_nodes term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<And>ja.\n                   \\<lbrakk>i - ja < i - j; k < ja; ja < i\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ja;\n        k < j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "assume \\<open>l = i\\<close>"], ["proof (state)\nthis:\n  l = i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  l = i\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "using lpd"], ["proof (prove)\nusing this:\n  l = i\n  \\<pi> l pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "by auto"], ["proof (state)\nthis:\n  \\<pi> i pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "assume \\<open>l \\<noteq> i\\<close>"], ["proof (state)\nthis:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "hence \\<open>l < i\\<close>"], ["proof (prove)\nusing this:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. l < i", "using l"], ["proof (prove)\nusing this:\n  l \\<noteq> i\n  j \\<le> l\n  l \\<le> i\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. l < i", "by simp"], ["proof (state)\nthis:\n  l < i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "moreover"], ["proof (state)\nthis:\n  l < i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "have \\<open>j \\<noteq> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<noteq> l", "using l"], ["proof (prove)\nusing this:\n  j \\<le> l\n  l \\<le> i\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> l", "by (metis is_ipd_def \\<open>\\<pi> i \\<noteq> return\\<close> \\<open>is_path \\<pi>\\<close> ipd_is_ipd path_nodes term_path_stable)"], ["proof (state)\nthis:\n  j \\<noteq> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "hence \\<open>j < l\\<close>"], ["proof (prove)\nusing this:\n  j \\<noteq> l\n\ngoal (1 subgoal):\n 1. j < l", "using l"], ["proof (prove)\nusing this:\n  j \\<noteq> l\n  j \\<le> l\n  l \\<le> i\n  \\<pi> l = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. j < l", "by simp"], ["proof (state)\nthis:\n  j < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "moreover"], ["proof (state)\nthis:\n  j < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "hence \\<open>i - l < i - j\\<close>"], ["proof (prove)\nusing this:\n  j < l\n\ngoal (1 subgoal):\n 1. i - l < i - j", "by (metis diff_less_mono2 less.prems(2))"], ["proof (state)\nthis:\n  i - l < i - j\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "moreover"], ["proof (state)\nthis:\n  i - l < i - j\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "have \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "by (metis l(1) less.prems(1) linorder_neqE_nat not_le order.strict_trans)"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "ultimately"], ["proof (chain)\npicking this:\n  l < i\n  j < l\n  i - l < i - j\n  k < l", "have \\<open>\\<pi> i pd\\<rightarrow> (\\<pi> l)\\<close>"], ["proof (prove)\nusing this:\n  l < i\n  j < l\n  i - l < i - j\n  k < l\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> l", "using less.hyps"], ["proof (prove)\nusing this:\n  l < i\n  j < l\n  i - l < i - j\n  k < l\n  \\<lbrakk>i - ?j1 < i - j; k < ?j1; ?j1 < i\\<rbrakk>\n  \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> ?j1\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> l", "by auto"], ["proof (state)\nthis:\n  \\<pi> i pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "using lpd"], ["proof (prove)\nusing this:\n  \\<pi> i pd\\<rightarrow> \\<pi> l\n  \\<pi> l pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "by (metis pd_trans)"], ["proof (state)\nthis:\n  \\<pi> i pd\\<rightarrow> \\<pi> j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> i pd\\<rightarrow> \\<pi> j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma icd_pd_intermediate: assumes icd: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>  and j: \\<open>k < j\\<close> \\<open>j \\<le> i\\<close> shows \\<open>\\<pi> i pd\\<rightarrow> (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "using assms icd_pd_intermediate'[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  k < j\n  j \\<le> i\n  j < i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<pi> i pd\\<rightarrow> \\<pi> j", "apply (cases \\<open>j < i\\<close>,metis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k; k < j; j \\<le> i;\n     j < i \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j;\n     \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> \\<pi> i pd\\<rightarrow> \\<pi> j", "by (metis is_icdi_def le_neq_trans path_nodes pd_refl)"], ["", "lemma no_icd_pd: assumes path: \\<open>is_path \\<pi>\\<close> and noicd: \\<open>\\<forall> l\\<ge>n. \\<not> k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> and nk: \\<open>n \\<le> k\\<close> shows \\<open>\\<pi> k pd\\<rightarrow> \\<pi> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "assume \\<open>\\<pi> k = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> k = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> k = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "by (metis path path_nodes return_pd)"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return \\<Longrightarrow>\n    \\<pi> k pd\\<rightarrow> \\<pi> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return \\<Longrightarrow>\n    \\<pi> k pd\\<rightarrow> \\<pi> n", "assume nret: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return \\<Longrightarrow>\n    \\<pi> k pd\\<rightarrow> \\<pi> n", "have nocd: \\<open>\\<And> l. n\\<le>l \\<Longrightarrow> \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       n \\<le> l \\<Longrightarrow>\n       \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "assume kcd: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> and nl: \\<open>n \\<le> l\\<close>"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  n \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>(k - n) cd\\<^bsup>\\<pi>\\<guillemotleft>n\\<^esup>\\<rightarrow> (l - n)\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  n \\<le> l\n\ngoal (1 subgoal):\n 1. k - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n", "using cd_path_shift[OF nl path]"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  n \\<le> l\n  (?i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  (?i - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n)\n\ngoal (1 subgoal):\n 1. k - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n", "by simp"], ["proof (state)\nthis:\n  k - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>\\<exists> l. (k - n) icd\\<^bsup>\\<pi>\\<guillemotleft>n\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\nusing this:\n  k - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l", "using excd_impl_exicd"], ["proof (prove)\nusing this:\n  k - n cd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l - n\n  \\<exists>k. ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n  \\<exists>k. ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l.\n     k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l.\n     k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l", "guess l'"], ["proof (prove)\nusing this:\n  \\<exists>l.\n     k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (l' + n)\\<close>"], ["proof (prove)\nusing this:\n  k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n", "using icd_path_shift[of \\<open>n\\<close> \\<open>l' + n\\<close> \\<open>\\<pi>\\<close> \\<open>k\\<close>] path"], ["proof (prove)\nusing this:\n  k - n icd\\<^bsup>\\<pi> \\<guillemotleft> n\\<^esup>\\<rightarrow> l'\n  \\<lbrakk>n \\<le> l' + n; is_path \\<pi>\\<rbrakk>\n  \\<Longrightarrow> (k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n) =\n                    (k -\n                     n icd\\<^bsup>\\<pi> \\<guillemotleft>\n                                  n\\<^esup>\\<rightarrow> l' + n - n)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n", "by auto"], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n\n\ngoal (1 subgoal):\n 1. False", "using noicd"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l' + n\n  \\<forall>l\\<ge>n. \\<not> k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<le> ?l1 \\<Longrightarrow>\n  \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?l1\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return \\<Longrightarrow>\n    \\<pi> k pd\\<rightarrow> \\<pi> n", "hence \\<open>\\<And>l. n \\<le> l \\<Longrightarrow> l<k \\<Longrightarrow> \\<exists> j \\<in> {l..k}. \\<pi> j = ipd (\\<pi> l)\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> ?l1 \\<Longrightarrow>\n  \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?l1\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l)", "using path nret"], ["proof (prove)\nusing this:\n  n \\<le> ?l1 \\<Longrightarrow>\n  \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?l1\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  n \\<le> ?l1 \\<Longrightarrow>\n  \\<not> (is_path \\<pi> \\<and>\n          ?l1 < k \\<and>\n          \\<pi> k \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{?l1..k}. \\<pi> j \\<noteq> ipd (\\<pi> ?l1)))\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return \\<Longrightarrow>\n    \\<pi> k pd\\<rightarrow> \\<pi> n", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "using nk"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "proof (induction \\<open>k - n\\<close> arbitrary: \\<open>n\\<close> rule: less_induct,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na\n 2. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; \\<not> ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>k - ?n1 < k - n;\n   \\<And>l.\n      \\<lbrakk>?n1 \\<le> l; l < k\\<rbrakk>\n      \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n   ?n1 \\<le> k\\<rbrakk>\n  \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> ?n1\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  n \\<le> k\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na\n 2. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; \\<not> ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "assume \\<open>n = k\\<close>"], ["proof (state)\nthis:\n  n = k\n\ngoal (2 subgoals):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na\n 2. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; \\<not> ?P5 na\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  n = k\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "using pd_refl path path_nodes"], ["proof (prove)\nusing this:\n  n = k\n  ?x \\<in> local.nodes \\<Longrightarrow> ?x pd\\<rightarrow> ?x\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "by auto"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>k - ?n1 < k - n;\n   \\<And>l.\n      \\<lbrakk>?n1 \\<le> l; l < k\\<rbrakk>\n      \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n   ?n1 \\<le> k\\<rbrakk>\n  \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> ?n1\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "assume \\<open>n \\<noteq> k\\<close>"], ["proof (state)\nthis:\n  n \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "hence nk: \\<open>n < k\\<close>"], ["proof (prove)\nusing this:\n  n \\<noteq> k\n\ngoal (1 subgoal):\n 1. n < k", "using less(3)"], ["proof (prove)\nusing this:\n  n \\<noteq> k\n  n \\<le> k\n\ngoal (1 subgoal):\n 1. n < k", "by auto"], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "with less(2)"], ["proof (chain)\npicking this:\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  n < k", "obtain j where jnk: \\<open>j \\<in> {n..k}\\<close> and ipdj: \\<open>\\<pi> j = ipd (\\<pi> n)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  n < k\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> {n..k}; \\<pi> j = ipd (\\<pi> n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j \\<in> {n..k}\n  \\<pi> j = ipd (\\<pi> n)\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "using nk nret term_path_stable path"], ["proof (prove)\nusing this:\n  n < k\n  \\<pi> k \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "with ipd_is_ipd path path_nodes is_ipd_def ipdj"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> local.nodes; ?x \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> ipd ?x ipd\\<rightarrow> ?x\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  (?y ipd\\<rightarrow> ?x) =\n  (?x \\<noteq> ?y \\<and>\n   ?y pd\\<rightarrow> ?x \\<and>\n   (\\<forall>z.\n       z \\<noteq> ?x \\<and> z pd\\<rightarrow> ?x \\<longrightarrow>\n       z pd\\<rightarrow> ?y))\n  \\<pi> j = ipd (\\<pi> n)\n  \\<pi> n \\<noteq> local.return", "have jpdn: \\<open>\\<pi> j pd\\<rightarrow> \\<pi> n\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> local.nodes; ?x \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> ipd ?x ipd\\<rightarrow> ?x\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n  (?y ipd\\<rightarrow> ?x) =\n  (?x \\<noteq> ?y \\<and>\n   ?y pd\\<rightarrow> ?x \\<and>\n   (\\<forall>z.\n       z \\<noteq> ?x \\<and> z pd\\<rightarrow> ?x \\<longrightarrow>\n       z pd\\<rightarrow> ?y))\n  \\<pi> j = ipd (\\<pi> n)\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> j pd\\<rightarrow> \\<pi> n", "by auto"], ["proof (state)\nthis:\n  \\<pi> j pd\\<rightarrow> \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>k - n < k - na;\n                    \\<And>l.\n                       \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n      \\<pi> j = ipd (\\<pi> l);\n                    n \\<le> k\\<rbrakk>\n                   \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n;\n        \\<And>l.\n           \\<lbrakk>na \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        na \\<le> k;\n        \\<And>l.\n           \\<lbrakk>n \\<le> l; l < k\\<rbrakk>\n           \\<Longrightarrow> \\<exists>j\\<in>{l..k}. \\<pi> j = ipd (\\<pi> l);\n        n \\<le> k; na \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> na", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "assume \\<open>j = k\\<close>"], ["proof (state)\nthis:\n  j = k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n\n 2. \\<not> ?P \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  j = k\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "using jpdn"], ["proof (prove)\nusing this:\n  j = k\n  \\<pi> j pd\\<rightarrow> \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "by simp"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "assume \\<open>j \\<noteq> k\\<close>"], ["proof (state)\nthis:\n  j \\<noteq> k\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "hence jk: \\<open>j < k\\<close>"], ["proof (prove)\nusing this:\n  j \\<noteq> k\n\ngoal (1 subgoal):\n 1. j < k", "using jnk"], ["proof (prove)\nusing this:\n  j \\<noteq> k\n  j \\<in> {n..k}\n\ngoal (1 subgoal):\n 1. j < k", "by auto"], ["proof (state)\nthis:\n  j < k\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "have \\<open>j \\<noteq> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<noteq> n", "using ipdj"], ["proof (prove)\nusing this:\n  \\<pi> j = ipd (\\<pi> n)\n\ngoal (1 subgoal):\n 1. j \\<noteq> n", "by (metis ipd_not_self nretn path path_nodes)"], ["proof (state)\nthis:\n  j \\<noteq> n\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "hence nj: \\<open>n < j\\<close>"], ["proof (prove)\nusing this:\n  j \\<noteq> n\n\ngoal (1 subgoal):\n 1. n < j", "using jnk"], ["proof (prove)\nusing this:\n  j \\<noteq> n\n  j \\<in> {n..k}\n\ngoal (1 subgoal):\n 1. n < j", "by auto"], ["proof (state)\nthis:\n  n < j\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "have *: \\<open>k - j < k - n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k - j < k - n", "using jk nj"], ["proof (prove)\nusing this:\n  j < k\n  n < j\n\ngoal (1 subgoal):\n 1. k - j < k - n", "by auto"], ["proof (state)\nthis:\n  k - j < k - n\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "with less(1)[OF *] less(2) jk nj"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>l.\n              \\<lbrakk>j \\<le> l; l < k\\<rbrakk>\n              \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n                                   \\<pi> j = ipd (\\<pi> l);\n   j \\<le> k\\<rbrakk>\n  \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> j\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  j < k\n  n < j\n  k - j < k - n", "have \\<open>\\<pi> k pd\\<rightarrow> \\<pi> j\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>l.\n              \\<lbrakk>j \\<le> l; l < k\\<rbrakk>\n              \\<Longrightarrow> \\<exists>j\\<in>{l..k}.\n                                   \\<pi> j = ipd (\\<pi> l);\n   j \\<le> k\\<rbrakk>\n  \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> j\n  \\<lbrakk>n \\<le> ?l1; ?l1 < k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j\\<in>{?l1..k}. \\<pi> j = ipd (\\<pi> ?l1)\n  j < k\n  n < j\n  k - j < k - n\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> j", "by auto"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. j \\<noteq> k \\<Longrightarrow> \\<pi> k pd\\<rightarrow> \\<pi> n", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> k pd\\<rightarrow> \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "using jpdn pd_trans"], ["proof (prove)\nusing this:\n  \\<pi> k pd\\<rightarrow> \\<pi> j\n  \\<pi> j pd\\<rightarrow> \\<pi> n\n  \\<lbrakk>?y pd\\<rightarrow> ?x; ?z pd\\<rightarrow> ?y\\<rbrakk>\n  \\<Longrightarrow> ?z pd\\<rightarrow> ?x\n\ngoal (1 subgoal):\n 1. \\<pi> k pd\\<rightarrow> \\<pi> n", "by metis"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> k pd\\<rightarrow> \\<pi> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma first_pd_no_cd: assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>\\<forall> l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "proof (rule ccontr, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "case 1"], ["proof (state)\nthis:\n  \\<not> (\\<forall>l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "obtain l where ncdl: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "hence ln: \\<open>l < n\\<close>"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. l < n", "using is_cdi_def"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. l < n", "by auto"], ["proof (state)\nthis:\n  l < n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "have \\<open>\\<not> \\<pi> n pd\\<rightarrow> \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<pi> n pd\\<rightarrow> \\<pi> l", "using ncdl cd_not_pd"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  \\<lbrakk>?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   ?\\<pi> ?l \\<noteq> ?\\<pi> ?k\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?\\<pi> ?l pd\\<rightarrow> ?\\<pi> ?k\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi> n pd\\<rightarrow> \\<pi> l", "by (metis ln first)"], ["proof (state)\nthis:\n  \\<not> \\<pi> n pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<pi> n pd\\<rightarrow> \\<pi> l", "obtain \\<pi>' n' where path': \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi>' 0 = \\<pi> l\\<close> and \\<pi>n: \\<open>\\<pi>' n' = return\\<close> and not\\<pi>n: \\<open>\\<forall> j\\<le> n'. \\<pi>' j \\<noteq> \\<pi> n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> \\<pi> n pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n' = local.return;\n         \\<forall>j\\<le>n'. \\<pi>' j \\<noteq> \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<pi> l \\<in> local.nodes \\<and>\n          (\\<forall>\\<pi>' na.\n              is_path \\<pi>' \\<and>\n              \\<pi>' 0 = \\<pi> l \\<and>\n              \\<pi>' na = local.return \\<longrightarrow>\n              (\\<exists>k\\<le>na. \\<pi>' k = \\<pi> n)))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n' = local.return;\n         \\<forall>j\\<le>n'. \\<pi>' j \\<noteq> \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path path_nodes"], ["proof (prove)\nusing this:\n  \\<not> (\\<pi> l \\<in> local.nodes \\<and>\n          (\\<forall>\\<pi>' na.\n              is_path \\<pi>' \\<and>\n              \\<pi>' 0 = \\<pi> l \\<and>\n              \\<pi>' na = local.return \\<longrightarrow>\n              (\\<exists>k\\<le>na. \\<pi>' k = \\<pi> n)))\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' n'.\n        \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = \\<pi> l;\n         \\<pi>' n' = local.return;\n         \\<forall>j\\<le>n'. \\<pi>' j \\<noteq> \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>'\n  \\<pi>' 0 = \\<pi> l\n  \\<pi>' n' = local.return\n  \\<forall>j\\<le>n'. \\<pi>' j \\<noteq> \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "let \\<open>?\\<pi>\\<close> = \\<open>\\<pi>@\\<^bsup>l\\<^esup> \\<pi>'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "have \\<open>is_path ?\\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')", "by (metis \\<pi>0 path path' path_cons)"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "have \\<open>?\\<pi> 0 = \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "have \\<open>?\\<pi> (n' + l) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "using \\<pi>0 \\<pi>n"], ["proof (prove)\nusing this:\n  \\<pi>' 0 = \\<pi> l\n  \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return", "obtain j where j: \\<open>j \\<le> n' + l\\<close> and jn: \\<open>?\\<pi> j = \\<pi> n\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> n' + l;\n         (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using pd"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n  \\<pi> n pd\\<rightarrow> \\<pi> 0\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> n' + l;\n         (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') 0 = \\<pi> 0\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') (n' + l) = local.return\n  \\<pi> 0 \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' na.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> 0 \\<and> \\<pi>' na = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>na. \\<pi>' k = \\<pi> n))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> n' + l;\n         (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j \\<le> n' + l\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l.\n               \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume \\<open>j \\<le> l\\<close>"], ["proof (state)\nthis:\n  j \\<le> l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j \\<le> l\n\ngoal (1 subgoal):\n 1. False", "using jn first ln"], ["proof (prove)\nusing this:\n  j \\<le> l\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\n  \\<forall>l<n. \\<pi> l \\<noteq> \\<pi> n\n  l < n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> l \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j \\<le> l \\<Longrightarrow> False", "assume \\<open>\\<not> j \\<le> l\\<close>"], ["proof (state)\nthis:\n  \\<not> j \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> j \\<le> l \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<not> j \\<le> l\n\ngoal (1 subgoal):\n 1. False", "using j jn not\\<pi>n"], ["proof (prove)\nusing this:\n  \\<not> j \\<le> l\n  j \\<le> n' + l\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>') j = \\<pi> n\n  \\<forall>j\\<le>n'. \\<pi>' j \\<noteq> \\<pi> n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma first_pd_no_icd: assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>\\<forall> l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "by (metis first first_pd_no_cd icd_imp_cd path pd)"], ["", "lemma path_nret_ex_nipd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<forall> i. (\\<exists> j\\<ge>i. (\\<forall> k>j. \\<pi> k \\<noteq> ipd (\\<pi> j)))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>j\\<ge>i. \\<forall>k>j. \\<pi> k \\<noteq> ipd (\\<pi> j)", "proof(rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "assume \\<open>\\<not> (\\<exists>j\\<ge>i. \\<forall> k>j. \\<pi> k \\<noteq> ipd (\\<pi> j))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<exists>j\\<ge>i. \\<forall>k>j. \\<pi> k \\<noteq> ipd (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "hence *: \\<open>\\<forall> j\\<ge>i. (\\<exists>k>j. \\<pi> k = ipd (\\<pi> j))\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j\\<ge>i. \\<forall>k>j. \\<pi> k \\<noteq> ipd (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<ge>i. \\<exists>k>j. \\<pi> k = ipd (\\<pi> j)", "by blast"], ["proof (state)\nthis:\n  \\<forall>j\\<ge>i. \\<exists>k>j. \\<pi> k = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "have \\<open>\\<forall> j. (\\<exists>k>j. (\\<pi>\\<guillemotleft>i) k = ipd ((\\<pi>\\<guillemotleft>i) j))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "have \\<open>i + j \\<ge> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> i + j", "by auto"], ["proof (state)\nthis:\n  i \\<le> i + j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "then"], ["proof (chain)\npicking this:\n  i \\<le> i + j", "obtain k where k: \\<open>k>i+j\\<close> \\<open>\\<pi> k = ipd (\\<pi> (i+j))\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> i + j\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>i + j < k; \\<pi> k = ipd (\\<pi> (i + j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  i \\<le> i + j\n  \\<forall>j\\<ge>i. \\<exists>k>j. \\<pi> k = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>i + j < k; \\<pi> k = ipd (\\<pi> (i + j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i + j < k\n  \\<pi> k = ipd (\\<pi> (i + j))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "hence \\<open>(\\<pi>\\<guillemotleft>i) (k - i) = ipd ((\\<pi>\\<guillemotleft>i) j)\\<close>"], ["proof (prove)\nusing this:\n  i + j < k\n  \\<pi> k = ipd (\\<pi> (i + j))\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> i) (k - i) = ipd ((\\<pi> \\<guillemotleft> i) j)", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (k - i) = ipd ((\\<pi> \\<guillemotleft> i) j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) (k - i) = ipd ((\\<pi> \\<guillemotleft> i) j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "have \\<open>k - i > j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < k - i", "using k"], ["proof (prove)\nusing this:\n  i + j < k\n  \\<pi> k = ipd (\\<pi> (i + j))\n\ngoal (1 subgoal):\n 1. j < k - i", "by auto"], ["proof (state)\nthis:\n  j < k - i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<exists>k>j.\n          (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> i) (k - i) = ipd ((\\<pi> \\<guillemotleft> i) j)\n  j < k - i", "show \\<open>\\<exists>k>j. (\\<pi>\\<guillemotleft>i) k = ipd ((\\<pi>\\<guillemotleft>i) j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) (k - i) = ipd ((\\<pi> \\<guillemotleft> i) j)\n  j < k - i\n\ngoal (1 subgoal):\n 1. \\<exists>k>j.\n       (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k>j.\n     (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     \\<exists>k>j.\n        (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     \\<exists>k>j.\n        (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "have \\<open>is_path (\\<pi>\\<guillemotleft>i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "using assms(1) path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> i)", "by simp"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     \\<exists>k>j.\n        (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n  is_path (\\<pi> \\<guillemotleft> i)", "obtain k where \\<open>(\\<pi>\\<guillemotleft>i) k = return\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     \\<exists>k>j.\n        (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n  is_path (\\<pi> \\<guillemotleft> i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (\\<pi> \\<guillemotleft> i) k = local.return \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using all_ipd_imp_ret"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     \\<exists>k>j.\n        (\\<pi> \\<guillemotleft> i) k = ipd ((\\<pi> \\<guillemotleft> i) j)\n  is_path (\\<pi> \\<guillemotleft> i)\n  \\<lbrakk>is_path ?\\<pi>;\n   \\<forall>i.\n      ?\\<pi> i \\<noteq> local.return \\<longrightarrow>\n      (\\<exists>j>i. ?\\<pi> j = ipd (?\\<pi> i))\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j. ?\\<pi> j = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        (\\<pi> \\<guillemotleft> i) k = local.return \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> i) k = local.return\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<not> (\\<exists>j\\<ge>i.\n                  \\<forall>k>j.\n                     \\<pi> k \\<noteq> ipd (\\<pi> j)) \\<Longrightarrow>\n       False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) k = local.return\n\ngoal (1 subgoal):\n 1. False", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> i) k = local.return\n  \\<forall>i. \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_nret_ex_all_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<forall> i. (\\<exists> j\\<ge>i. (\\<forall> k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>j\\<ge>i.\n          \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>j\\<ge>i.\n          \\<forall>k>j.\n             is_path \\<pi> \\<and>\n             j < k \\<and>\n             \\<pi> k \\<noteq> local.return \\<and>\n             (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))", "using assms path_nret_ex_nipd[OF assms]"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<forall>i. \\<pi> i \\<noteq> local.return\n  \\<forall>i. \\<exists>j\\<ge>i. \\<forall>k>j. \\<pi> k \\<noteq> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<exists>j\\<ge>i.\n          \\<forall>k>j.\n             is_path \\<pi> \\<and>\n             j < k \\<and>\n             \\<pi> k \\<noteq> local.return \\<and>\n             (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))", "by (metis atLeastAtMost_iff ipd_not_self linorder_neqE_nat not_le path_nodes)"], ["", "lemma path_nret_inf_all_cd: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> shows \\<open>\\<not> finite {j. \\<forall> k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}", "using unbounded_nat_set_infinite path_nret_ex_all_cd[OF assms]"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<exists>j\\<ge>i. j \\<in> ?A \\<Longrightarrow> infinite ?A\n  \\<forall>i.\n     \\<exists>j\\<ge>i.\n        \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}", "by auto"], ["", "lemma path_nret_inf_icd_seq: assumes path: \\<open>is_path \\<pi>\\<close> and nret: \\<open>\\<forall> i. \\<pi> i \\<noteq> return\\<close> \nobtains f where \\<open>\\<forall> i. f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\\<close> \\<open>range f = {i. \\<forall> j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\\<close> \\<open>\\<not> (\\<exists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note path_nret_inf_all_cd[OF assms]"], ["proof (state)\nthis:\n  infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}", "obtain f where ran: \\<open>range f = {j. \\<forall> k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\\<close> and asc: \\<open>\\<forall> i. f i < f (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f =\n                 {j. \\<forall>k>j.\n                        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j};\n         \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using infinite_ascending"], ["proof (prove)\nusing this:\n  infinite {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n  \\<lbrakk>infinite ?A;\n   \\<And>f.\n      \\<lbrakk>range f = ?A; \\<forall>i. f i < f (Suc i)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>range f =\n                 {j. \\<forall>k>j.\n                        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j};\n         \\<forall>i. f i < f (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n  \\<forall>i. f i < f (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have mono: \\<open>\\<forall> i j. i < j \\<longrightarrow> f i < f j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i j. i < j \\<longrightarrow> f i < f j", "using asc"], ["proof (prove)\nusing this:\n  \\<forall>i. f i < f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<forall>i j. i < j \\<longrightarrow> f i < f j", "by (metis lift_Suc_mono_less)"], ["proof (state)\nthis:\n  \\<forall>i j. i < j \\<longrightarrow> f i < f j\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  \\<forall>i j. i < j \\<longrightarrow> f i < f j\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have cd: \\<open>f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i", "using ran asc"], ["proof (prove)\nusing this:\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n  \\<forall>i. f i < f (Suc i)\n\ngoal (1 subgoal):\n 1. f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i", "by auto"], ["proof (state)\nthis:\n  f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "assume \\<open>\\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\\<close>"], ["proof (state)\nthis:\n  \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i", "obtain m where  im: \\<open>f i < m\\<close> and mi: \\<open> m < f (Suc i)\\<close> and cdm: \\<open>f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>f i < m; m < f (Suc i);\n         f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i \\<and>\n          (\\<forall>m\\<in>{f i<..<f (Suc i)}.\n              \\<not> f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>f i < m; m < f (Suc i);\n         f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) cd"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i \\<and>\n          (\\<forall>m\\<in>{f i<..<f (Suc i)}.\n              \\<not> f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m))\n  is_path \\<pi>\n  f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>f i < m; m < f (Suc i);\n         f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f i < m\n  m < f (Suc i)\n  f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "have \\<open>\\<forall> k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "proof (rule,rule,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "assume \\<open>f (Suc i) < k\\<close>"], ["proof (state)\nthis:\n  f (Suc i) < k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  f (Suc i) < k\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)", "using ran"], ["proof (prove)\nusing this:\n  f (Suc i) < k\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using cdm cd_trans"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f (Suc i)\n  f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by metis"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f (Suc i) < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f (Suc i) < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f (Suc i) < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "assume mk: \\<open>m < k\\<close> and \\<open>\\<not> f (Suc i) < k\\<close>"], ["proof (state)\nthis:\n  m < k\n  \\<not> f (Suc i) < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f (Suc i) < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence ik: \\<open>k \\<le> f (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  m < k\n  \\<not> f (Suc i) < k\n\ngoal (1 subgoal):\n 1. k \\<le> f (Suc i)", "by simp"], ["proof (state)\nthis:\n  k \\<le> f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f (Suc i) < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> f (Suc i)\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using cdm"], ["proof (prove)\nusing this:\n  k \\<le> f (Suc i)\n  f (Suc i) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by (metis cdi_prefix mk)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "hence \\<open>m \\<in> range f\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m \\<in> range f", "using ran"], ["proof (prove)\nusing this:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. m \\<in> range f", "by blast"], ["proof (state)\nthis:\n  m \\<in> range f\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  m \\<in> range f", "obtain j where m: \\<open>m = f j\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> range f\n\ngoal (1 subgoal):\n 1. (\\<And>j. m = f j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  m = f j\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f\n                      i \\<Longrightarrow>\n    False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using im mi mono"], ["proof (prove)\nusing this:\n  f i < m\n  m < f (Suc i)\n  \\<forall>i j. i < j \\<longrightarrow> f i < f j\n\ngoal (1 subgoal):\n 1. False", "unfolding m"], ["proof (prove)\nusing this:\n  f i < f j\n  f j < f (Suc i)\n  \\<forall>i j. i < j \\<longrightarrow> f i < f j\n\ngoal (1 subgoal):\n 1. False", "by (metis Suc_lessI le_less not_le)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume cdm: \\<open>f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (state)\nthis:\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<forall> k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "proof (rule,rule,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "assume \\<open>f 0 < k\\<close>"], ["proof (state)\nthis:\n  f 0 < k\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0\\<close>"], ["proof (prove)\nusing this:\n  f 0 < k\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0", "using ran"], ["proof (prove)\nusing this:\n  f 0 < k\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>m < k; ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>k.\n       \\<lbrakk>m < k; \\<not> ?P4 k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using cdm cd_trans"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f 0\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by metis"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f 0 < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f 0 < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f 0 < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "assume mk: \\<open>m < k\\<close> and \\<open>\\<not> f 0 < k\\<close>"], ["proof (state)\nthis:\n  m < k\n  \\<not> f 0 < k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f 0 < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence ik: \\<open>k \\<le> f 0\\<close>"], ["proof (prove)\nusing this:\n  m < k\n  \\<not> f 0 < k\n\ngoal (1 subgoal):\n 1. k \\<le> f 0", "by simp"], ["proof (state)\nthis:\n  k \\<le> f 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>m < k; \\<not> f 0 < k\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> f 0\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using cdm"], ["proof (prove)\nusing this:\n  k \\<le> f 0\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by (metis cdi_prefix mk)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>m \\<in> range f\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m \\<in> range f", "using ran"], ["proof (prove)\nusing this:\n  \\<forall>k>m. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. m \\<in> range f", "by blast"], ["proof (state)\nthis:\n  m \\<in> range f\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  m \\<in> range f", "obtain j where m: \\<open>m = f j\\<close>"], ["proof (prove)\nusing this:\n  m \\<in> range f\n\ngoal (1 subgoal):\n 1. (\\<And>j. m = f j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  m = f j\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence fj0: \\<open>f j < f 0\\<close>"], ["proof (prove)\nusing this:\n  m = f j\n\ngoal (1 subgoal):\n 1. f j < f 0", "using cdm m is_cdi_def"], ["proof (prove)\nusing this:\n  m = f j\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  m = f j\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. f j < f 0", "by auto"], ["proof (state)\nthis:\n  f j < f 0\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>0 < j\\<close>"], ["proof (prove)\nusing this:\n  f j < f 0\n\ngoal (1 subgoal):\n 1. 0 < j", "by (metis less_irrefl neq0_conv)"], ["proof (state)\nthis:\n  0 < j\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  0 < j\n\ngoal (1 subgoal):\n 1. False", "using fj0 mono"], ["proof (prove)\nusing this:\n  0 < j\n  f j < f 0\n  \\<forall>i j. i < j \\<longrightarrow> f i < f j\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i.\n                    f (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f i;\n         range f =\n         {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n         \\<nexists>i. f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3 \\<Longrightarrow> False", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. thesis", "using that ran"], ["proof (prove)\nusing this:\n  f (Suc ?i3) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> f ?i3\n  f 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?m3 \\<Longrightarrow> False\n  \\<lbrakk>\\<forall>i.\n              ?f1 (Suc i) icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?f1 i;\n   range ?f1 = {i. \\<forall>j>i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i};\n   \\<nexists>i. ?f1 0 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n  \\<Longrightarrow> thesis\n  range f = {j. \\<forall>k>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cdi_iff_no_strict_pd: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longleftrightarrow> is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return \\<and> (\\<forall> j \\<in> {k..i}. \\<not> (\\<pi> k, \\<pi> j) \\<in> pdt)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n    (is_path \\<pi> \\<and>\n     k < i \\<and>\n     \\<pi> i \\<noteq> local.return \\<and>\n     (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n 2. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "assume cd:\\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n 2. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have 1: \\<open>is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> local.return", "using cd"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> local.return", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n 2. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have 2: \\<open>\\<forall> j \\<in> {k..i}. \\<not> (\\<pi> k, \\<pi> j) \\<in> pdt\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{k..i}.\n               (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    False", "assume \\<open> \\<not> (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{k..i}.\n               (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)", "obtain j where \\<open>j \\<in> {k..i}\\<close> and \\<open>(\\<pi> k, \\<pi> j) \\<in> pdt\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> {k..i}; (\\<pi> k, \\<pi> j) \\<in> pdt\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<in> {k..i}\n  (\\<pi> k, \\<pi> j) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{k..i}.\n               (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    False", "hence \\<open>\\<pi> j \\<noteq> \\<pi> k\\<close> and \\<open>\\<pi> j pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\nusing this:\n  j \\<in> {k..i}\n  (\\<pi> k, \\<pi> j) \\<in> pdt\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> \\<pi> k &&& \\<pi> j pd\\<rightarrow> \\<pi> k", "unfolding pdt_def"], ["proof (prove)\nusing this:\n  j \\<in> {k..i}\n  (\\<pi> k, \\<pi> j) \\<in> {(x, y). x \\<noteq> y \\<and> y pd\\<rightarrow> x}\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> \\<pi> k &&& \\<pi> j pd\\<rightarrow> \\<pi> k", "by auto"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> \\<pi> k\n  \\<pi> j pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{k..i}.\n               (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> \\<pi> k\n  \\<pi> j pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. False", "using path_pd_ipd"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> \\<pi> k\n  \\<pi> j pd\\<rightarrow> \\<pi> k\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?k \\<noteq> local.return;\n   ?\\<pi> ?n \\<noteq> ?\\<pi> ?k; ?\\<pi> ?n pd\\<rightarrow> ?\\<pi> ?k;\n   ?k < ?n;\n   \\<And>l.\n      \\<lbrakk>?k < l; l \\<le> ?n; ?\\<pi> l = ipd (?\\<pi> ?k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>j \\<in> {k..i}\\<close> atLeastAtMost_iff cd cd_not_pd cdi_prefix le_eq_less_or_eq)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n    is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n 2. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "show \\<open>is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return \\<and> (\\<forall> j \\<in> {k..i}. \\<not> (\\<pi> k, \\<pi> j) \\<in> pdt)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)", "using 1 2"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> local.return\n  \\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)", "by simp"], ["proof (state)\nthis:\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "assume \\<open>is_path \\<pi> \\<and> k < i \\<and> \\<pi> i \\<noteq> return \\<and> (\\<forall> j \\<in> {k..i}. \\<not> (\\<pi> k, \\<pi> j) \\<in> pdt)\\<close>"], ["proof (state)\nthis:\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    k < i \\<and>\n    \\<pi> i \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k..i}.\n        (\\<pi> k, \\<pi> j) \\<notin> pdt) \\<Longrightarrow>\n    i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "thus \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..i}. (\\<pi> k, \\<pi> j) \\<notin> pdt)\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis ipd_in_pdt term_path_stable less_or_eq_imp_le not_cd_impl_ipd path_nodes)"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Control Slices\\<close>"], ["", "lemma last_cs: \\<open>last (cs\\<^bsup>\\<pi>\\<^esup> i) = \\<pi> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. last (cs\\<^bsup>\\<pi>\\<^esup> i) = \\<pi> i", "by auto"], ["", "lemma cs_not_nil: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n \\<noteq> []\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n \\<noteq> []", "by (auto)"], ["", "lemma cs_return: assumes \\<open>\\<pi> n = return\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]", "by (metis assms cs.elims icd_imp_cd ret_no_cd)"], ["", "lemma cs_0[simp]: \\<open>cs\\<^bsup>\\<pi>\\<^esup> 0 = [\\<pi> 0]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> 0 = [\\<pi> 0]", "using is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> 0 = [\\<pi> 0]", "by auto"], ["", "lemma cs_inj: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> n \\<noteq> return\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<close> shows \\<open>n = n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. n = n'", "proof (induction \\<open>cs\\<^bsup>\\<pi>\\<^esup> n\\<close> arbitrary: \\<open>\\<pi>\\<close> \\<open>n\\<close> \\<open>n'\\<close> rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n n'.\n       \\<lbrakk>[] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "case Nil"], ["proof (state)\nthis:\n  [] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n n'.\n       \\<lbrakk>[] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "hence \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  [] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using cs_not_nil"], ["proof (prove)\nusing this:\n  [] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. False", "by metis"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n n'.\n       \\<lbrakk>[] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'\n 2. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n = n'", "by simp"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "case (snoc x xs \\<pi> n n')"], ["proof (state)\nthis:\n  \\<lbrakk>xs = cs\\<^bsup>?\\<pi>1\\<^esup> ?n1; is_path ?\\<pi>1;\n   ?\\<pi>1 ?n1 \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>1\\<^esup> ?n1 = cs\\<^bsup>?\\<pi>1\\<^esup> ?n'1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?n'1\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<And>x xs \\<pi> n n'.\n       \\<lbrakk>\\<And>\\<pi> n n'.\n                   \\<lbrakk>xs = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n                    \\<pi> n \\<noteq> local.return;\n                    cs\\<^bsup>\\<pi>\\<^esup> n =\n                    cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n                   \\<Longrightarrow> n = n';\n        xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n; is_path \\<pi>;\n        \\<pi> n \\<noteq> local.return;\n        cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<rbrakk>\n       \\<Longrightarrow> n = n'", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n'", "proof (cases \\<open>xs\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence *: \\<open>\\<not> (\\<exists> k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k)\\<close>"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using snoc(2) cs_not_nil"], ["proof (prove)\nusing this:\n  xs = []\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (auto,metis append1_eq_conv append_Nil cs_not_nil)"], ["proof (state)\nthis:\n  \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have \\<open>[x] = cs\\<^bsup>\\<pi>\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] = cs\\<^bsup>\\<pi>\\<^esup> n'", "using Nil snoc"], ["proof (prove)\nusing this:\n  xs = []\n  \\<lbrakk>xs = cs\\<^bsup>?\\<pi>1\\<^esup> ?n1; is_path ?\\<pi>1;\n   ?\\<pi>1 ?n1 \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>1\\<^esup> ?n1 = cs\\<^bsup>?\\<pi>1\\<^esup> ?n'1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?n'1\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. [x] = cs\\<^bsup>\\<pi>\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  [x] = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence **: \\<open>\\<not> (\\<exists> k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k)\\<close>"], ["proof (prove)\nusing this:\n  [x] = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using cs_not_nil"], ["proof (prove)\nusing this:\n  [x] = cs\\<^bsup>\\<pi>\\<^esup> n'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (auto,metis append1_eq_conv append_Nil cs_not_nil)"], ["proof (state)\nthis:\n  \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>\\<forall> k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<forall> k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k &&&\n    \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using excd_impl_exicd"], ["proof (prove)\nusing this:\n  \\<nexists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<nexists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>k. ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n  \\<exists>k. ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k &&&\n    \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by auto blast+"], ["proof (state)\nthis:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence  \\<open>\\<pi> n = \\<pi> n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi> n'", "using snoc(5,2)"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi> n'", "by auto (metis * ** list.inject)"], ["proof (state)\nthis:\n  \\<pi> n = \\<pi> n'\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> n = n'\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<pi> n = \\<pi> n'", "show \\<open>n = n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<pi> n = \\<pi> n'\n\ngoal (1 subgoal):\n 1. n = n'", "using other_claim' snoc"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> n' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<pi> n = \\<pi> n'\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = ?\\<pi> ?j;\n   ?\\<pi> ?i \\<noteq> local.return;\n   \\<forall>k. \\<not> ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<forall>k. \\<not> ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j\n  \\<lbrakk>xs = cs\\<^bsup>?\\<pi>1\\<^esup> ?n1; is_path ?\\<pi>1;\n   ?\\<pi>1 ?n1 \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>1\\<^esup> ?n1 = cs\\<^bsup>?\\<pi>1\\<^esup> ?n'1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?n'1\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. n = n'", "by blast"], ["proof (state)\nthis:\n  n = n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "case (Cons y ys)"], ["proof (state)\nthis:\n  xs = y # ys\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence *: \\<open>\\<exists> k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  xs = y # ys\n\ngoal (1 subgoal):\n 1. \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using snoc(2)"], ["proof (prove)\nusing this:\n  xs = y # ys\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by auto (metis append_is_Nil_conv list.distinct(1) list.inject)"], ["proof (state)\nthis:\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "obtain k where k: \\<open>n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have \\<open>k = (THE k . n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "using k"], ["proof (prove)\nusing this:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis icd_is_the_icd)"], ["proof (state)\nthis:\n  k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence xsk: \\<open>xs = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\nusing this:\n  k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k", "using * k snoc(2)"], ["proof (prove)\nusing this:\n  k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k", "unfolding cs.simps[of \\<open>\\<pi>\\<close> \\<open>n\\<close>]"], ["proof (prove)\nusing this:\n  k = (THE k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  xs @ [x] =\n  (if Ex (is_icdi n \\<pi>)\n   then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n   else [\\<pi> n])\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have **: \\<open>\\<exists> k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using snoc(2)[unfolded snoc(5)]"], ["proof (prove)\nusing this:\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by auto (metis Cons append1_eq_conv append_Nil list.distinct(1))"], ["proof (state)\nthis:\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "obtain k' where k': \\<open>n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence \\<open>k' = (THE k . n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\nusing this:\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "using k'"], ["proof (prove)\nusing this:\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis icd_is_the_icd)"], ["proof (state)\nthis:\n  k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence xsk': \\<open>xs = cs\\<^bsup>\\<pi>\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k'", "using ** k' snoc(5,2)"], ["proof (prove)\nusing this:\n  k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k'", "unfolding cs.simps[of \\<open>\\<pi>\\<close> \\<open>n'\\<close>]"], ["proof (prove)\nusing this:\n  k' = (THE k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  (if Ex (is_icdi n' \\<pi>)\n   then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n' \\<pi>) @ [\\<pi> n']\n   else [\\<pi> n'])\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n\ngoal (1 subgoal):\n 1. xs = cs\\<^bsup>\\<pi>\\<^esup> k'", "by auto"], ["proof (state)\nthis:\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'", "using xsk"], ["proof (prove)\nusing this:\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k'\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have kn: \\<open>k < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < n", "using k"], ["proof (prove)\nusing this:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < n", "by (metis is_icdi_def is_cdi_def)"], ["proof (state)\nthis:\n  k < n\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  k < n\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "using snoc"], ["proof (prove)\nusing this:\n  k < n\n  \\<lbrakk>xs = cs\\<^bsup>?\\<pi>1\\<^esup> ?n1; is_path ?\\<pi>1;\n   ?\\<pi>1 ?n1 \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>1\\<^esup> ?n1 = cs\\<^bsup>?\\<pi>1\\<^esup> ?n'1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?n'1\n  xs @ [x] = cs\\<^bsup>\\<pi>\\<^esup> n\n  is_path \\<pi>\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by (metis term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\n  \\<pi> k \\<noteq> local.return", "have kk'[simp]: \\<open>k' = k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. k' = k", "using snoc(1) xsk snoc(3)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'\n  \\<pi> k \\<noteq> local.return\n  \\<lbrakk>xs = cs\\<^bsup>?\\<pi>1\\<^esup> ?n1; is_path ?\\<pi>1;\n   ?\\<pi>1 ?n1 \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>1\\<^esup> ?n1 = cs\\<^bsup>?\\<pi>1\\<^esup> ?n'1\\<rbrakk>\n  \\<Longrightarrow> ?n1 = ?n'1\n  xs = cs\\<^bsup>\\<pi>\\<^esup> k\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. k' = k", "by metis"], ["proof (state)\nthis:\n  k' = k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have nk0: \\<open>n - k icd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> 0\\<close> \\<open>n' - k icd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0 &&&\n    n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0", "using k k' icd_path_shift0 snoc(3)"], ["proof (prove)\nusing this:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  is_path ?\\<pi> \\<Longrightarrow>\n  (?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?k icd\\<^bsup>?\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> 0)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0 &&&\n    n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0", "by auto"], ["proof (state)\nthis:\n  n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have nkr: \\<open>(\\<pi>\\<guillemotleft>k)(n-k) \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return", "using snoc(4) kn"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> local.return\n  k < n\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have \\<open>is_path (\\<pi>\\<guillemotleft>k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k)", "by (metis path_path_shift snoc.prems(1))"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have kn': \\<open>k < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < n'", "using k' kk'"], ["proof (prove)\nusing this:\n  n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n  k' = k\n\ngoal (1 subgoal):\n 1. k < n'", "by (metis is_icdi_def is_cdi_def)"], ["proof (state)\nthis:\n  k < n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "have \\<open>\\<pi> n = \\<pi> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi> n'", "using snoc(5) * **"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n  \\<exists>k. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>k. n' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi> n'", "by auto"], ["proof (state)\nthis:\n  \\<pi> n = \\<pi> n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "hence \\<open>(\\<pi>\\<guillemotleft>k)(n-k) = (\\<pi>\\<guillemotleft>k)(n'-k)\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> n = \\<pi> n'\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)", "using kn kn'"], ["proof (prove)\nusing this:\n  \\<pi> n = \\<pi> n'\n  k < n\n  k < n'\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "ultimately"], ["proof (chain)\npicking this:\n  n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)", "have \\<open>n - k = n' - k\\<close>"], ["proof (prove)\nusing this:\n  n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)\n\ngoal (1 subgoal):\n 1. n - k = n' - k", "using other_claim"], ["proof (prove)\nusing this:\n  n - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  n' - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  (\\<pi> \\<guillemotleft> k) (n - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  (\\<pi> \\<guillemotleft> k) (n - k) = (\\<pi> \\<guillemotleft> k) (n' - k)\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = ?\\<pi> ?j;\n   ?\\<pi> ?i \\<noteq> local.return;\n   ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?j icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j\n\ngoal (1 subgoal):\n 1. n - k = n' - k", "by auto"], ["proof (state)\nthis:\n  n - k = n' - k\n\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> n = n'", "thus \\<open>n = n'\\<close>"], ["proof (prove)\nusing this:\n  n - k = n' - k\n\ngoal (1 subgoal):\n 1. n = n'", "using kn kn'"], ["proof (prove)\nusing this:\n  n - k = n' - k\n  k < n\n  k < n'\n\ngoal (1 subgoal):\n 1. n = n'", "by auto"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_cases: fixes \\<pi> i \nobtains (base) \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close> and \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> | \n(depend) k where  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \\<open>\\<exists> k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "obtain k where k: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis icd_is_the_icd)"], ["proof (state)\nthis:\n  k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close>"], ["proof (prove)\nusing this:\n  k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]", "using *"], ["proof (prove)\nusing this:\n  k = (THE k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<exists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> ?P4\\<rbrakk>\n    \\<Longrightarrow> thesis", "with k that"], ["proof (chain)\npicking this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n   \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>\\<^esup> ?k1 @ [\\<pi> i];\n   i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n   \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>\\<^esup> ?k1 @ [\\<pi> i];\n   i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \\<open>\\<not> (\\<exists> k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis excd_impl_exicd)"], ["proof (state)\nthis:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]", "using *"], ["proof (prove)\nusing this:\n  \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n              \\<forall>k.\n                 \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n   \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>\\<^esup> ?k1 @ [\\<pi> i];\n   i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_length_one: assumes \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\\<close> shows  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close> and \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i] &&&\n    \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "apply (cases \\<open>i\\<close> \\<open>\\<pi>\\<close> rule: cs_cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n     \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n 2. \\<And>k.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n 3. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using assms cs_not_nil"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (3 subgoals):\n 1. \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n     \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n 2. \\<And>k.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n 3. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>length\n                 (if Ex (is_icdi i \\<pi>)\n                  then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi i \\<pi>) @\n                       [\\<pi> i]\n                  else [\\<pi> i]) =\n                Suc 0;\n        \\<And>\\<pi> n.\n           (if Ex (is_icdi n \\<pi>)\n            then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n            else [\\<pi> n]) \\<noteq>\n           [];\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cases \\<open>i\\<close> \\<open>\\<pi>\\<close> rule: cs_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>length\n                 (if Ex (is_icdi i \\<pi>)\n                  then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi i \\<pi>) @\n                       [\\<pi> i]\n                  else [\\<pi> i]) =\n                Suc 0;\n        \\<And>\\<pi> n.\n           (if Ex (is_icdi n \\<pi>)\n            then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n            else [\\<pi> n]) \\<noteq>\n           [];\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n        \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>k ka.\n       \\<lbrakk>length\n                 (if Ex (is_icdi i \\<pi>)\n                  then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi i \\<pi>) @\n                       [\\<pi> i]\n                  else [\\<pi> i]) =\n                Suc 0;\n        \\<And>\\<pi> n.\n           (if Ex (is_icdi n \\<pi>)\n            then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n            else [\\<pi> n]) \\<noteq>\n           [];\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> ka @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\\<rbrakk>\n       \\<Longrightarrow> False", "using assms cs_not_nil"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>length\n                 (if Ex (is_icdi i \\<pi>)\n                  then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi i \\<pi>) @\n                       [\\<pi> i]\n                  else [\\<pi> i]) =\n                Suc 0;\n        \\<And>\\<pi> n.\n           (if Ex (is_icdi n \\<pi>)\n            then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n            else [\\<pi> n]) \\<noteq>\n           [];\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n        \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>k ka.\n       \\<lbrakk>length\n                 (if Ex (is_icdi i \\<pi>)\n                  then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi i \\<pi>) @\n                       [\\<pi> i]\n                  else [\\<pi> i]) =\n                Suc 0;\n        \\<And>\\<pi> n.\n           (if Ex (is_icdi n \\<pi>)\n            then cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) @ [\\<pi> n]\n            else [\\<pi> n]) \\<noteq>\n           [];\n        i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> ka @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "lemma cs_length_g_one: assumes \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close> obtains k where  \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close> and \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases \\<open>i\\<close> \\<open>\\<pi>\\<close> rule: cs_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                         cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n                 i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n     \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n                    i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> thesis", "using assms cs_not_nil"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                         cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n                 i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n     \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<And>k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n                    i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n        i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["", "lemma claim: assumes  path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  ii: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> and jj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> \nand bl: \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i < j\\<close> \nshows \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof (cases )"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "assume *: \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\\<close>"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "hence **: \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1\\<close>"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n\ngoal (1 subgoal):\n 1. (length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1 &&&\n     length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1) &&&\n    length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1 &&&\n    length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1", "apply metis"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1\n 2. length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\n 3. length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1", "apply (metis \"*\" bl butlast.simps(2) butlast_snoc cs_length_g_one cs_length_one(1) cs_not_nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\n 2. length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1", "apply (metis \"*\" ii)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1", "by (metis \"*\" bl butlast.simps(2) butlast_snoc cs_length_g_one cs_length_one(1) cs_not_nil jj)"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n  length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "then"], ["proof (chain)\npicking this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n  length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1", "obtain \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\\<close> \\<open>cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\\<close> \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i'= [\\<pi>' i']\\<close> \n    \\<open>\\<forall> k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<forall> k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<forall> k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) = 1\n  length (cs\\<^bsup>\\<pi>\\<^esup> j) = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> i') = 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> j') = 1\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i];\n      cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j];\n      cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j'];\n      cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i'];\n      \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n      \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n      \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis cs_length_one ** )"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "hence \\<open>\\<pi> i = \\<pi>' i'\\<close> \\<open>\\<pi> j = \\<pi>' j'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> i = \\<pi>' i' &&& \\<pi> j = \\<pi>' j'", "using  assms"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n  \\<pi> i \\<noteq> local.return\n  i < j\n\ngoal (1 subgoal):\n 1. \\<pi> i = \\<pi>' i' &&& \\<pi> j = \\<pi>' j'", "by auto"], ["proof (state)\nthis:\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' < j'\n 2. \\<not> ?P \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'", "show \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n\ngoal (1 subgoal):\n 1. i' < j'", "using nret ilj path claim''"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = [\\<pi>' j']\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = [\\<pi>' i']\n  \\<forall>k. \\<not> j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<forall>k. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n  \\<pi> i \\<noteq> local.return\n  i < j\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j';\n   \\<forall>k. \\<not> ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n   \\<forall>k. \\<not> ?i' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k;\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. i' < j'", "by blast"], ["proof (state)\nthis:\n  i' < j'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "assume *: \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close>"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "hence **: \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> j) \\<noteq> 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>'\\<^esup> i') \\<noteq> 1\\<close> \\<open>length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1\\<close>"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 &&&\n     length (cs\\<^bsup>\\<pi>\\<^esup> j) \\<noteq> 1) &&&\n    length (cs\\<^bsup>\\<pi>'\\<^esup> i') \\<noteq> 1 &&&\n    length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1", "apply metis"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> j) \\<noteq> 1\n 2. length (cs\\<^bsup>\\<pi>'\\<^esup> i') \\<noteq> 1\n 3. length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1", "apply (metis \"*\" bl butlast.simps(2) butlast_snoc cs_length_g_one cs_length_one(1) cs_not_nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (cs\\<^bsup>\\<pi>'\\<^esup> i') \\<noteq> 1\n 2. length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1", "apply (metis \"*\" ii)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1", "by (metis \"*\" bl butlast.simps(2) butlast_snoc cs_length_g_one cs_length_one(1) cs_not_nil jj)"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n  length (cs\\<^bsup>\\<pi>\\<^esup> j) \\<noteq> 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> i') \\<noteq> 1\n  length (cs\\<^bsup>\\<pi>'\\<^esup> j') \\<noteq> 1\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "obtain k l k' l' where ***:\n    \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> k)@[\\<pi> i]\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = (cs\\<^bsup>\\<pi>\\<^esup> l)@[\\<pi> j]\\<close>  \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' = (cs\\<^bsup>\\<pi>'\\<^esup> k')@[\\<pi>' i']\\<close> \\<open>cs\\<^bsup>\\<pi>'\\<^esup> j' = (cs\\<^bsup>\\<pi>'\\<^esup> l')@[\\<pi>' j']\\<close> and\n    icds: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close> \\<open>i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close> \\<open>j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k l k' l'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> l @ [\\<pi> j];\n         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n         cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' i'];\n         cs\\<^bsup>\\<pi>'\\<^esup> j' =\n         cs\\<^bsup>\\<pi>'\\<^esup> l' @ [\\<pi>' j'];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l;\n         i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ** cs_length_g_one)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> l @ [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' i']\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> l' @ [\\<pi>' j']\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\\<close> \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> l @ [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' i']\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> l' @ [\\<pi>' j']\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l &&&\n    cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using assms"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> l @ [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' i']\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> l' @ [\\<pi>' j']\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n  \\<pi> i \\<noteq> local.return\n  i < j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l &&&\n    cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>\\<pi>' k' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return &&& \\<pi>' k' \\<noteq> local.return", "using nret"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return &&& \\<pi>' k' \\<noteq> local.return", "apply (metis is_icdi_def icds(1) is_cdi_def term_path_stable less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "by (metis is_cdi_def is_icdi_def icds(3) term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n  \\<pi>' k' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<pi> k \\<noteq> local.return\n  \\<pi>' k' \\<noteq> local.return", "have lk[simp]: \\<open>l = k\\<close> \\<open>l' = k'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<pi> k \\<noteq> local.return\n  \\<pi>' k' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. l = k &&& l' = k'", "using path cs_inj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<pi> k \\<noteq> local.return\n  \\<pi>' k' \\<noteq> local.return\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n\ngoal (1 subgoal):\n 1. l = k &&& l' = k'", "by auto"], ["proof (state)\nthis:\n  l = k\n  l' = k'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "let \\<open>?\\<pi>\\<close> = \\<open>\\<pi> \\<guillemotleft> k\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "let \\<open>?\\<pi>'\\<close> = \\<open>\\<pi>'\\<guillemotleft>k'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<open>i-k icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\\<close> \\<open>j-k icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0\\<close> \\<open>i'-k' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0\\<close> \\<open>j'-k' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0 &&&\n     j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0) &&&\n    i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0 &&&\n    j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0", "using icd_path_shift0 path icds"], ["proof (prove)\nusing this:\n  is_path ?\\<pi> \\<Longrightarrow>\n  (?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (?i - ?k icd\\<^bsup>?\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> 0)\n  is_path \\<pi>\n  is_path \\<pi>'\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. (i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0 &&&\n     j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0) &&&\n    i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0 &&&\n    j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0", "by auto"], ["proof (state)\nthis:\n  i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have ki: \\<open>k < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < i", "using icds"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. k < i", "by (metis is_icdi_def is_cdi_def)"], ["proof (state)\nthis:\n  k < i\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "hence \\<open>i-k < j-k\\<close>"], ["proof (prove)\nusing this:\n  k < i\n\ngoal (1 subgoal):\n 1. i - k < j - k", "by (metis diff_is_0_eq diff_less_mono ilj nat_le_linear order.strict_trans)"], ["proof (state)\nthis:\n  i - k < j - k\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  i - k < j - k\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<pi>i: \\<open>\\<pi> i = \\<pi>' i'\\<close> \\<open>\\<pi> j = \\<pi>' j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i = \\<pi>' i' &&& \\<pi> j = \\<pi>' j'", "using assms ***"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n  \\<pi> i \\<noteq> local.return\n  i < j\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i]\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> l @ [\\<pi> j]\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' i']\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> l' @ [\\<pi>' j']\n\ngoal (1 subgoal):\n 1. \\<pi> i = \\<pi>' i' &&& \\<pi> j = \\<pi>' j'", "by auto"], ["proof (state)\nthis:\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<open>k' < i'\\<close> \\<open>k' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < i' &&& k' < j'", "using icds"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. k' < i' &&& k' < j'", "unfolding lk"], ["proof (prove)\nusing this:\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  i' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  j' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' < i' &&& k' < j'", "by (metis is_cdi_def is_icdi_def)+"], ["proof (state)\nthis:\n  k' < i'\n  k' < j'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "hence \\<open>?\\<pi> (i-k) = ?\\<pi>' (i'-k')\\<close> \\<open>?\\<pi> (j-k) = ?\\<pi>' (j'-k')\\<close>"], ["proof (prove)\nusing this:\n  k' < i'\n  k' < j'\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (i - k) =\n    (\\<pi>' \\<guillemotleft> k') (i' - k') &&&\n    (\\<pi> \\<guillemotleft> k) (j - k) =\n    (\\<pi>' \\<guillemotleft> k') (j' - k')", "using \\<pi>i ki ilj"], ["proof (prove)\nusing this:\n  k' < i'\n  k' < j'\n  \\<pi> i = \\<pi>' i'\n  \\<pi> j = \\<pi>' j'\n  k < i\n  i < j\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (i - k) =\n    (\\<pi>' \\<guillemotleft> k') (i' - k') &&&\n    (\\<pi> \\<guillemotleft> k) (j - k) =\n    (\\<pi>' \\<guillemotleft> k') (j' - k')", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (i - k) =\n  (\\<pi>' \\<guillemotleft> k') (i' - k')\n  (\\<pi> \\<guillemotleft> k) (j - k) =\n  (\\<pi>' \\<guillemotleft> k') (j' - k')\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (i - k) =\n  (\\<pi>' \\<guillemotleft> k') (i' - k')\n  (\\<pi> \\<guillemotleft> k) (j - k) =\n  (\\<pi>' \\<guillemotleft> k') (j' - k')\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<open>?\\<pi> (i-k) \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return", "using nret ki"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  k < i\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "have \\<open>is_path ?\\<pi>\\<close> \\<open>is_path ?\\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k) &&&\n    is_path (\\<pi>' \\<guillemotleft> k')", "using path path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> k) &&&\n    is_path (\\<pi>' \\<guillemotleft> k')", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> k)\n  is_path (\\<pi>' \\<guillemotleft> k')\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  i - k < j - k\n  (\\<pi> \\<guillemotleft> k) (i - k) =\n  (\\<pi>' \\<guillemotleft> k') (i' - k')\n  (\\<pi> \\<guillemotleft> k) (j - k) =\n  (\\<pi>' \\<guillemotleft> k') (j' - k')\n  (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  is_path (\\<pi>' \\<guillemotleft> k')", "have \\<open>i'-k' < j' - k'\\<close>"], ["proof (prove)\nusing this:\n  i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  i - k < j - k\n  (\\<pi> \\<guillemotleft> k) (i - k) =\n  (\\<pi>' \\<guillemotleft> k') (i' - k')\n  (\\<pi> \\<guillemotleft> k) (j - k) =\n  (\\<pi>' \\<guillemotleft> k') (j' - k')\n  (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  is_path (\\<pi>' \\<guillemotleft> k')\n\ngoal (1 subgoal):\n 1. i' - k' < j' - k'", "using claim'"], ["proof (prove)\nusing this:\n  i - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  j - k icd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> 0\n  i' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  j' - k' icd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> 0\n  i - k < j - k\n  (\\<pi> \\<guillemotleft> k) (i - k) =\n  (\\<pi>' \\<guillemotleft> k') (i' - k')\n  (\\<pi> \\<guillemotleft> k) (j - k) =\n  (\\<pi>' \\<guillemotleft> k') (j' - k')\n  (\\<pi> \\<guillemotleft> k) (i - k) \\<noteq> local.return\n  is_path (\\<pi> \\<guillemotleft> k)\n  is_path (\\<pi>' \\<guillemotleft> k')\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?i = ?\\<pi>' ?i';\n   ?\\<pi> ?j = ?\\<pi>' ?j'; ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?j icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> 0;\n   ?i' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0;\n   ?j' icd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> 0; ?i < ?j;\n   ?\\<pi> ?i \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n\ngoal (1 subgoal):\n 1. i' - k' < j' - k'", "by blast"], ["proof (state)\nthis:\n  i' - k' < j' - k'\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1 \\<Longrightarrow> i' < j'", "thus \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  i' - k' < j' - k'\n\ngoal (1 subgoal):\n 1. i' < j'", "by (metis diff_is_0_eq diff_less_mono less_nat_zero_code linorder_neqE_nat nat_le_linear)"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_split': assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs@[x,x']@ys\\<close>  shows \\<open>\\<exists> m. cs\\<^bsup>\\<pi>\\<^esup> m = xs@[x] \\<and> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using assms"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ ys\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "proof (induction \\<open>ys\\<close> arbitrary: \\<open>i\\<close> rule:rev_induct )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "case (snoc y ys)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = xs @ [x, x'] @ ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     ?i1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ ys @ [y]\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = xs @ [x, x'] @ ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     ?i1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ ys @ [y]\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1", "by auto"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "then"], ["proof (chain)\npicking this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1", "obtain i' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> i') @ [\\<pi> i]\\<close> and *: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_length_g_one[of \\<open>\\<pi>\\<close> \\<open>i\\<close>]"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n  \\<lbrakk>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1;\n   \\<And>k.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n               cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n       i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i]\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> i' = xs@[x,x']@ys\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i]\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys", "using snoc(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i]\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ ys @ [y]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys", "by (metis append1_eq_conv append_assoc)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys", "obtain m where **: \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\\<close> and \\<open>i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x];\n         i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using snoc(1)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x, x'] @ ys\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = xs @ [x, x'] @ ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     ?i1 cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x];\n         i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using * cd_trans"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by (metis is_icdi_def)"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n 2. \\<And>xa xsa i.\n       \\<lbrakk>\\<And>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   xs @ [x, x'] @ xsa \\<Longrightarrow>\n                   \\<exists>m.\n                      cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                      i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ xsa @ [xa]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n                            i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "with **"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by blast"], ["proof (state)\nthis:\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "case Nil"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ []\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ []\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1", "by auto"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "then"], ["proof (chain)\npicking this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1", "obtain i' where a: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (cs\\<^bsup>\\<pi>\\<^esup> i') @ [\\<pi> i]\\<close> and *: \\<open>i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_length_g_one[of \\<open>\\<pi>\\<close> \\<open>i\\<close>]"], ["proof (prove)\nusing this:\n  length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1\n  \\<lbrakk>length (cs\\<^bsup>\\<pi>\\<^esup> i) \\<noteq> 1;\n   \\<And>k.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n               cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> i];\n       i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i =\n                 cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i];\n         i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i]\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = (xs@[x])@[x']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = (xs @ [x]) @ [x']", "using Nil"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ []\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = (xs @ [x]) @ [x']", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = (xs @ [x]) @ [x']\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> i' = xs@[x]\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = (xs @ [x]) @ [x']\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]", "using append1_eq_conv a"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = (xs @ [x]) @ [x']\n  (?xs @ [?x] = ?ys @ [?y]) = (?xs = ?ys \\<and> ?x = ?y)\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i' @ [\\<pi> i]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ [] \\<Longrightarrow>\n       \\<exists>m.\n          cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n          i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using *"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]\n  i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i' = xs @ [x]\n  is_path \\<pi> \\<and>\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i' \\<and>\n  (\\<forall>m\\<in>{i'<..<i}.\n      \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by blast"], ["proof (state)\nthis:\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_split: assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs@[x]@ys@[\\<pi> i]\\<close>  shows \\<open>\\<exists> m. cs\\<^bsup>\\<pi>\\<^esup> m = xs@[x] \\<and> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "obtain x' ys' where \\<open>ys@[\\<pi> i] = [x']@ys'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' ys'.\n        ys @ [\\<pi> i] = [x'] @ ys' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Cons append_Nil neq_Nil_conv)"], ["proof (state)\nthis:\n  ys @ [\\<pi> i] = [x'] @ ys'\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ys @ [\\<pi> i] = [x'] @ ys'\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "using cs_split'[of \\<open>\\<pi>\\<close> \\<open>i\\<close> \\<open>xs\\<close> \\<open>x\\<close> \\<open>x'\\<close> \\<open>ys'\\<close>] assms"], ["proof (prove)\nusing this:\n  ys @ [\\<pi> i] = [x'] @ ys'\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, x'] @ ys' \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys @ [\\<pi> i]\n\ngoal (1 subgoal):\n 1. \\<exists>m.\n       cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by auto"], ["proof (state)\nthis:\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x] \\<and>\n     i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_less_split: assumes \\<open>xs \\<prec> ys\\<close> obtains a as where \\<open>ys = xs@a#as\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        ys = xs @ a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  xs \\<prec> ys\n\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        ys = xs @ a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding cs_less.simps"], ["proof (prove)\nusing this:\n  \\<exists>xsa ysa.\n     xs = xsa \\<and>\n     ys = ysa \\<and>\n     length xsa < length ysa \\<and> take (length xsa) ysa = xsa\n\ngoal (1 subgoal):\n 1. (\\<And>a as.\n        ys = xs @ a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a as. ys = xs @ a # as \\<Longrightarrow> thesis;\n     length xs < length ys; take (length xs) ys = xs\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Cons_nth_drop_Suc append_take_drop_id)"], ["", "lemma cs_select_is_cs: assumes \\<open>is_path \\<pi>\\<close> \\<open>xs \\<noteq> Nil\\<close> \\<open>xs \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (\\<pi>\\<exclamdown>xs) = xs\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi>\\<exclamdown>xs)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs &&&\n    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "obtain b bs where b: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = xs@b#bs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        cs\\<^bsup>\\<pi>\\<^esup> k = xs @ b # bs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms cs_less_split"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  xs \\<noteq> []\n  xs \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<lbrakk>?xs \\<prec> ?ys;\n   \\<And>a as. ?ys = ?xs @ a # as \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        cs\\<^bsup>\\<pi>\\<^esup> k = xs @ b # bs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ b # bs\n\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "obtain a as where a: \\<open>xs = as@[a]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as a. xs = as @ [a] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  xs \\<noteq> []\n  xs \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. (\\<And>as a. xs = as @ [a] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis rev_exhaust)"], ["proof (state)\nthis:\n  xs = as @ [a]\n\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = as@[a,b]@bs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs", "using a b"], ["proof (prove)\nusing this:\n  xs = as @ [a]\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ b # bs\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs\n\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs", "obtain k' where csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k' = xs\\<close> and is_cd: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k' = xs;\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_split' a"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = as @ [a, b] @ bs\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n  xs = as @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k' = xs;\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k' = xs\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "hence nret: \\<open>\\<pi> k' \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k' = xs\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<pi> k' \\<noteq> local.return", "by (metis is_cdi_def term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> k' \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n 2. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "show a: \\<open>cs\\<^bsup>\\<pi>\\<^esup> (\\<pi>\\<exclamdown>xs) = xs\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs", "unfolding cs_select_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE k. cs\\<^bsup>\\<pi>\\<^esup> k = xs) = xs", "using cs_inj[OF assms(1) nret] csk the_equality[of _ \\<open>k'\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> ?n' \\<Longrightarrow>\n  k' = ?n'\n  cs\\<^bsup>\\<pi>\\<^esup> k' = xs\n  \\<lbrakk>?P k'; \\<And>x. ?P x \\<Longrightarrow> x = k'\\<rbrakk>\n  \\<Longrightarrow> (THE x. ?P x) = k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE k. cs\\<^bsup>\\<pi>\\<^esup> k = xs) = xs", "by (metis (mono_tags))"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> xs) = xs\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "show \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi>\\<exclamdown>xs)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)", "unfolding cs_select_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n         cs\\<^bsup>\\<pi>\\<^esup> k = xs)", "by (metis a assms(1) cs_inj cs_select_def csk is_cd nret)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (\\<pi> \\<exclamdown> xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_in_cs: assumes \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> shows \\<open>\\<exists> ns. cs\\<^bsup>\\<pi>\\<^esup> n = (cs\\<^bsup>\\<pi>\\<^esup> m) @ ns @[\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       cs\\<^bsup>\\<pi>\\<^esup> n =\n       cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]", "using assms"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       cs\\<^bsup>\\<pi>\\<^esup> n =\n       cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]", "proof (induction rule: cd_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow>\n       \\<exists>ns.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i]\n 2. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "case (base  n)"], ["proof (state)\nthis:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m \\<Longrightarrow>\n       \\<exists>ns.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i]\n 2. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       cs\\<^bsup>\\<pi>\\<^esup> n =\n       cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]", "by (metis append_Nil cs.simps icd_is_the_icd)"], ["proof (state)\nthis:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]\n\ngoal (1 subgoal):\n 1. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "case (IS k n)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> n]\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> n]", "by (metis cs.simps icd_is_the_icd)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> n]\n\ngoal (1 subgoal):\n 1. \\<And>k' i'.\n       \\<lbrakk>k' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m;\n        \\<exists>ns.\n           cs\\<^bsup>\\<pi>\\<^esup> k' =\n           cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k'];\n        i' icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            cs\\<^bsup>\\<pi>\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> i']", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> n]\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       cs\\<^bsup>\\<pi>\\<^esup> n =\n       cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]", "using IS"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> n]\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       cs\\<^bsup>\\<pi>\\<^esup> n =\n       cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]", "by force"], ["proof (state)\nthis:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> m @ ns @ [\\<pi> n]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma butlast_cs_not_cd: assumes \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close> shows \\<open>\\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "by (metis append_Cons append_Nil append_assoc assms cd_in_cs cs_not_nil list.distinct(1) self_append_conv snoc_eq_iff_butlast)"], ["", "lemma wn_cs_butlast: assumes \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close> \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close> \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> \\<open>m<n\\<close> shows \\<open>i<j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "assume \\<open>\\<not> i < j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "have \\<open>\\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "by (metis assms(1) butlast_cs_not_cd)"], ["proof (state)\nthis:\n  \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> i < j\n  \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m", "have \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. n \\<le> m", "using assms(2,3) cr_wn''"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  \\<not> n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<lbrakk>?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m;\n   ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n;\n   \\<not> ?m cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. n \\<le> m", "by auto"], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. False", "using assms(4)"], ["proof (prove)\nusing this:\n  n \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This is the central theorem making the control slice suitable for matching indices between executions.\\<close>"], ["", "theorem cs_order: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nand csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i < j\\<close>   \nshows \\<open>i'<j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j", "using cs_inj[OF path(1) nret] ilj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> ?n' \\<Longrightarrow>\n  i = ?n'\n  i < j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\n\ngoal (1 subgoal):\n 1. i' < j'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\n\ngoal (1 subgoal):\n 1. i' < j'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> Nil\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j \\<noteq> Nil\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> [] &&&\n    cs\\<^bsup>\\<pi>\\<^esup> j \\<noteq> []", "by (metis cs_not_nil)+"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> []\n  cs\\<^bsup>\\<pi>\\<^esup> j \\<noteq> []\n\ngoal (1 subgoal):\n 1. i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> []\n  cs\\<^bsup>\\<pi>\\<^esup> j \\<noteq> []", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> []\n  cs\\<^bsup>\\<pi>\\<^esup> j \\<noteq> []\n\ngoal (1 subgoal):\n 1. i' < j'", "proof (cases rule: list_neq_prefix_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xs x x' ys ys'.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys;\n        cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'; x \\<noteq> x'\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 3. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "case (diverge xs x x' ys ys')"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'\n  x \\<noteq> x'\n\ngoal (3 subgoals):\n 1. \\<And>xs x x' ys ys'.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys;\n        cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'; x \\<noteq> x'\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 3. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note csx = \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys\n\ngoal (3 subgoals):\n 1. \\<And>xs x x' ys ys'.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys;\n        cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'; x \\<noteq> x'\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 3. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note csx' = \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'\n\ngoal (3 subgoals):\n 1. \\<And>xs x x' ys ys'.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys;\n        cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'; x \\<noteq> x'\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 3. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note xx = \\<open>x \\<noteq> x'\\<close>"], ["proof (state)\nthis:\n  x \\<noteq> x'\n\ngoal (3 subgoals):\n 1. \\<And>xs x x' ys ys'.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] @ ys;\n        cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x'] @ ys'; x \\<noteq> x'\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 3. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "show \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof (cases \\<open>ys\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "assume ys: \\<open>ys = Nil\\<close>"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof (cases \\<open>ys'\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "assume ys': \\<open>ys' = Nil\\<close>"], ["proof (state)\nthis:\n  ys' = []\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have cs: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] &&&\n    cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']", "by (metis append_Nil2 csx ys, metis append_Nil2 csx' ys')"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "hence bl: \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>\\<^esup> i) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> j)", "by auto"], ["proof (state)\nthis:\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "show \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "using claim[OF path csi csj bl nret ilj]"], ["proof (prove)\nusing this:\n  i' < j'\n\ngoal (1 subgoal):\n 1. i' < j'", "."], ["proof (state)\nthis:\n  i' < j'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "fix y' zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "assume ys': \\<open>ys' = y'#zs'\\<close>"], ["proof (state)\nthis:\n  ys' = y' # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have cs: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x',y']@ zs'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x] &&&\n    cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'", "by (metis append_Nil2 csx ys, metis append_Cons append_Nil csx' ys')"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n where n: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = xs@[x']\\<close> and jn: \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x'];\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x'];\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n' where n': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs@[x']\\<close> and jn': \\<open>j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding csj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x']\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have csn : \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and bl: \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' &&&\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> i) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n)", "using n n' cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x']\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' &&&\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> i) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n)", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "hence bl': \\<open>butlast (cs\\<^bsup>\\<pi>'\\<^esup> i') = butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>'\\<^esup> i') =\n    butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')", "using csi"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> i) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>'\\<^esup> i') =\n    butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')", "by auto"], ["proof (state)\nthis:\n  butlast (cs\\<^bsup>\\<pi>'\\<^esup> i') =\n  butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have notcd: \\<open>\\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "by (metis butlast_cs_not_cd bl)"], ["proof (state)\nthis:\n  \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have nin: \\<open>i \\<noteq> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> n", "using cs n xx"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. i \\<noteq> n", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have iln: \\<open>i < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow> False", "using cr_wn'[OF jn notcd] nin ilj"], ["proof (prove)\nusing this:\n  n < i \\<Longrightarrow> j < i\n  i \\<noteq> n\n  i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "note claim[OF path csi csn bl nret iln]"], ["proof (state)\nthis:\n  i' < n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "hence \\<open>i' < n'\\<close>"], ["proof (prove)\nusing this:\n  i' < n'\n\ngoal (1 subgoal):\n 1. i' < n'", "."], ["proof (state)\nthis:\n  i' < n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "thus \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  i' < n'\n\ngoal (1 subgoal):\n 1. i' < j'", "using jn'"], ["proof (prove)\nusing this:\n  i' < n'\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. i' < j'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  i' < n'\n  is_path \\<pi>' \\<and>\n  n' < j' \\<and>\n  \\<pi>' j' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{n'..j'}. \\<pi>' j \\<noteq> ipd (\\<pi>' n'))\n\ngoal (1 subgoal):\n 1. i' < j'", "by auto"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' < j'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "fix y zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "assume ys: \\<open>ys = y#zs\\<close>"], ["proof (state)\nthis:\n  ys = y # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys = a # list \\<Longrightarrow> i' < j'", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "proof (cases \\<open>ys'\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "assume ys' : \\<open>ys' = Nil\\<close>"], ["proof (state)\nthis:\n  ys' = []\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have cs: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x,y]@zs\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs &&&\n    cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']", "by (metis append_Cons append_Nil csx ys, metis append_Nil2 csx' ys')"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n where n: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = xs@[x]\\<close> and jn: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n' where n': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs@[x]\\<close> and jn': \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding csi"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x]\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have csn : \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and bl: \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> n) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' &&&\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> j)", "using n n' cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x]\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x']\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' &&&\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> j)", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> n) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "hence bl': \\<open>butlast (cs\\<^bsup>\\<pi>'\\<^esup> j') = butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> n) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>'\\<^esup> j') =\n    butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')", "using csj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> n) = butlast (cs\\<^bsup>\\<pi>\\<^esup> j)\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>'\\<^esup> j') =\n    butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')", "by auto"], ["proof (state)\nthis:\n  butlast (cs\\<^bsup>\\<pi>'\\<^esup> j') =\n  butlast (cs\\<^bsup>\\<pi>'\\<^esup> n')\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have notcd: \\<open>\\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "by (metis butlast_cs_not_cd bl')"], ["proof (state)\nthis:\n  \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have nin: \\<open>n < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < i", "using jn"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. n < i", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  n < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{n..i}. \\<pi> j \\<noteq> ipd (\\<pi> n))\n\ngoal (1 subgoal):\n 1. n < i", "by auto"], ["proof (state)\nthis:\n  n < i\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have nlj: \\<open>n < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < j", "using nin ilj"], ["proof (prove)\nusing this:\n  n < i\n  i < j\n\ngoal (1 subgoal):\n 1. n < j", "by auto"], ["proof (state)\nthis:\n  n < j\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "note claim[OF path csn csj bl _ nlj]"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return \\<Longrightarrow> n' < j'\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "hence nj': \\<open>n' < j'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> local.return \\<Longrightarrow> n' < j'\n\ngoal (1 subgoal):\n 1. n' < j'", "using term_path_stable[OF path(1) _] less_imp_le nin nret"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> local.return \\<Longrightarrow> n' < j'\n  \\<lbrakk>\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> \\<pi> ?j = local.return\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n  n < i\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. n' < j'", "by auto"], ["proof (state)\nthis:\n  n' < j'\n\ngoal (2 subgoals):\n 1. ys' = [] \\<Longrightarrow> i' < j'\n 2. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "show \\<open>i' < j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < j'", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> i' < j' \\<Longrightarrow> False", "using cdi_prefix[OF jn' nj'] notcd"], ["proof (prove)\nusing this:\n  j' \\<le> i' \\<Longrightarrow> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<not> j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<not> i' < j' \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  i' < j'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "fix y' zs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "assume ys' : \\<open>ys' = y'#zs'\\<close>"], ["proof (state)\nthis:\n  ys' = y' # zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have cs: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = xs@[x,y]@zs\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = xs@[x',y']@zs'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs &&&\n    cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'", "by (metis append_Cons append_Nil csx ys,metis append_Cons append_Nil csx' ys')"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have neq: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j", "using cs_inj path nret ilj"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> i \\<noteq> local.return\n  i < j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> j\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain m where m: \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = xs@[x]\\<close> and im: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n where n: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = xs@[x']\\<close> and jn: \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x'];\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x'];\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain m' where m': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> m' = xs@[x]\\<close> and im': \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding csi"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x];\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x]\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "obtain n' where n': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs@[x']\\<close> and jn': \\<open>j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>\\<^esup> j = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding csj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = xs @ [x, y] @ zs\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = xs @ [x', y'] @ zs'\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x'];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x']\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have \\<open>m \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n", "using ilj m n wn_cs_butlast[OF _ jn im]"], ["proof (prove)\nusing this:\n  i < j\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  \\<lbrakk>butlast (cs\\<^bsup>\\<pi>\\<^esup> n) =\n           butlast (cs\\<^bsup>\\<pi>\\<^esup> m);\n   n < m\\<rbrakk>\n  \\<Longrightarrow> j < i\n\ngoal (1 subgoal):\n 1. m \\<le> n", "by force"], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have \\<open>m \\<noteq> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> n", "using m n xx"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. m \\<noteq> n", "by (metis last_snoc)"], ["proof (state)\nthis:\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n\n  m \\<noteq> n", "have mn: \\<open>m < n\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> n\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. m < n", "by auto"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have \\<open>\\<pi> m \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "by (metis last_cs last_snoc m mn n path(1) term_path_stable xx less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "have \\<open>butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>\\<^esup> m) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n) &&&\n    cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m' &&&\n    cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'", "using m n n' m'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = xs @ [x]\n  cs\\<^bsup>\\<pi>\\<^esup> n = xs @ [x']\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x']\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x]\n\ngoal (1 subgoal):\n 1. butlast (cs\\<^bsup>\\<pi>\\<^esup> m) =\n    butlast (cs\\<^bsup>\\<pi>\\<^esup> n) &&&\n    cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m' &&&\n    cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  m < n\n  \\<pi> m \\<noteq> local.return\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'", "have \\<open>m' < n'\\<close>"], ["proof (prove)\nusing this:\n  m < n\n  \\<pi> m \\<noteq> local.return\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. m' < n'", "using claim path"], ["proof (prove)\nusing this:\n  m < n\n  \\<pi> m \\<noteq> local.return\n  butlast (cs\\<^bsup>\\<pi>\\<^esup> m) = butlast (cs\\<^bsup>\\<pi>\\<^esup> n)\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?i = cs\\<^bsup>?\\<pi>'\\<^esup> ?i';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?j = cs\\<^bsup>?\\<pi>'\\<^esup> ?j';\n   butlast (cs\\<^bsup>?\\<pi>\\<^esup> ?i) =\n   butlast (cs\\<^bsup>?\\<pi>\\<^esup> ?j);\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. m' < n'", "by blast"], ["proof (state)\nthis:\n  m' < n'\n\ngoal (1 subgoal):\n 1. \\<And>a list. ys' = a # list \\<Longrightarrow> i' < j'", "thus \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  m' < n'\n\ngoal (1 subgoal):\n 1. i' < j'", "using m' n' im' jn' wn_cs_butlast"], ["proof (prove)\nusing this:\n  m' < n'\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = xs @ [x]\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x']\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m'\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<lbrakk>butlast (cs\\<^bsup>?\\<pi>\\<^esup> ?m) =\n           butlast (cs\\<^bsup>?\\<pi>\\<^esup> ?n);\n   ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m;\n   ?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n; ?m < ?n\\<rbrakk>\n  \\<Longrightarrow> ?i < ?j\n\ngoal (1 subgoal):\n 1. i' < j'", "by (metis butlast_snoc)"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' < j'\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "case (prefix1 xs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs\n  xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note pfx = \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note xs = \\<open>xs \\<noteq> []\\<close>"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "obtain a as where \\<open>xs = a#as\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a as. xs = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xs"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as. xs = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.exhaust)"], ["proof (state)\nthis:\n  xs = a # as\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  xs = a # as\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "obtain bs b where bj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = bs@[b]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bs b.\n        cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using cs_not_nil"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>bs b.\n        cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis rev_exhaust)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b]\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b]", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = bs@[b,a]@as\\<close>"], ["proof (prove)\nusing this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as", "using pfx"], ["proof (prove)\nusing this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b]\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as", "obtain m where \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = bs@[b]\\<close> and cdep:  \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = bs @ [b];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = bs @ [b, a] @ as\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> m = bs @ [b];\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = bs @ [b]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "hence mi: \\<open>m = j\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = bs @ [b]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m = j", "using bj cs_inj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = bs @ [b]\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>\\<^esup> j = bs @ [b]\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n\ngoal (1 subgoal):\n 1. m = j", "by (metis is_cdi_def term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  m = j\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "hence \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  m = j\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using cdep"], ["proof (prove)\nusing this:\n  m = j\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by auto"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "hence \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. False", "using ilj"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  i < j\n\ngoal (1 subgoal):\n 1. False", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  j < i \\<and>\n  \\<pi> i \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..i}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n  i < j\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> j @ xs;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'\n 2. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "thus \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. i' < j'", ".."], ["proof (state)\nthis:\n  i' < j'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "case (prefix2 xs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "have pfx : \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' @ xs = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' @ xs = cs\\<^bsup>\\<pi>'\\<^esup> j'", "using prefix2 csi csj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j\n  xs \\<noteq> []\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' @ xs = cs\\<^bsup>\\<pi>'\\<^esup> j'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' @ xs = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "note xs = \\<open>xs \\<noteq> []\\<close>"], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "obtain a as where \\<open>xs = a#as\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a as. xs = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using xs"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>a as. xs = a # as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.exhaust)"], ["proof (state)\nthis:\n  xs = a # as\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "moreover"], ["proof (state)\nthis:\n  xs = a # as\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "obtain bs b where bj: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i'  = bs@[b]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bs b.\n        cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using cs_not_nil"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>bs b.\n        cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis rev_exhaust)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b]\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "ultimately"], ["proof (chain)\npicking this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b]", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> j' = bs@[b,a]@as\\<close>"], ["proof (prove)\nusing this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as", "using pfx"], ["proof (prove)\nusing this:\n  xs = a # as\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b]\n  cs\\<^bsup>\\<pi>'\\<^esup> i' @ xs = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as", "obtain m where \\<open>cs\\<^bsup>\\<pi>'\\<^esup> m = bs@[b]\\<close> and cdep:  \\<open>j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m = bs @ [b];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_split'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> j' = bs @ [b, a] @ as\n  cs\\<^bsup>?\\<pi>\\<^esup> ?i = ?xs @ [?x, ?x'] @ ?ys \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>?\\<pi>\\<^esup> m = ?xs @ [?x] \\<and>\n     ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m = bs @ [b];\n         j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m = bs @ [b]\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "hence mi: \\<open>m = i'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> m = bs @ [b]\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. m = i'", "using bj cs_inj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> m = bs @ [b]\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = bs @ [b]\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n\ngoal (1 subgoal):\n 1. m = i'", "by (metis is_cdi_def term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  m = i'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "hence \\<open>j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (prove)\nusing this:\n  m = i'\n\ngoal (1 subgoal):\n 1. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'", "using cdep"], ["proof (prove)\nusing this:\n  m = i'\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'", "by auto"], ["proof (state)\nthis:\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i @ xs = cs\\<^bsup>\\<pi>\\<^esup> j;\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> i' < j'", "thus \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. i' < j'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  i' < j' \\<and>\n  \\<pi>' j' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{i'..j'}. \\<pi>' j \\<noteq> ipd (\\<pi>' i'))\n\ngoal (1 subgoal):\n 1. i' < j'", "by auto"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' < j'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_order_le: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nand csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and nret: \\<open>\\<pi> i \\<noteq> return\\<close> and ilj: \\<open>i \\<le> j\\<close>   \nshows \\<open>i'\\<le>j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' \\<le> j'\n 2. \\<not> ?P \\<Longrightarrow> i' \\<le> j'", "assume \\<open>i < j\\<close>"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> i' \\<le> j'\n 2. \\<not> ?P \\<Longrightarrow> i' \\<le> j'", "with cs_order[OF assms(1,2,3,4,5)]"], ["proof (chain)\npicking this:\n  i < j \\<Longrightarrow> i' < j'\n  i < j", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  i < j \\<Longrightarrow> i' < j'\n  i < j\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by simp"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "assume \\<open>\\<not> i < j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "hence \\<open>i = j\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. i = j", "using ilj"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. i = j", "by simp"], ["proof (state)\nthis:\n  i = j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "hence csij: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> j'", "using csi csj"], ["proof (prove)\nusing this:\n  i = j\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> j'", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "have nret': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "using nret last_cs csi"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> i' \\<le> j'", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using cs_inj[OF path(2) nret' csij]"], ["proof (prove)\nusing this:\n  i' = j'\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by simp"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas cs_induct[case_names cs] = cs.induct"], ["", "lemma icdi_path_swap: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>j\\<^esub>  \\<pi>'\\<close> shows \\<open>j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<pi> =\\<^bsub>j\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "unfolding eq_up_to_def is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   k < j \\<and>\n   \\<pi> j \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..j}. \\<pi> j \\<noteq> ipd (\\<pi> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<j}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < j \\<and>\n              \\<pi> j \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..j}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n  \\<forall>i\\<le>j. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    (is_path \\<pi>' \\<and>\n     k < j \\<and>\n     \\<pi>' j \\<noteq> local.return \\<and>\n     (\\<forall>j\\<in>{k..j}. \\<pi>' j \\<noteq> ipd (\\<pi>' k))) \\<and>\n    (\\<forall>m\\<in>{k<..<j}.\n        \\<not> (is_path \\<pi>' \\<and>\n                m < j \\<and>\n                \\<pi>' j \\<noteq> local.return \\<and>\n                (\\<forall>j\\<in>{m..j}. \\<pi>' j \\<noteq> ipd (\\<pi>' m))))", "by auto"], ["", "lemma icdi_path_swap_le: assumes \\<open>is_path \\<pi>'\\<close> \\<open>j icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>k\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>j \\<le> n\\<close> shows \\<open>j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k", "by (metis assms icdi_path_swap eq_up_to_le)"], ["", "lemma cs_path_swap: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "using assms(1,3)"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "proof (induction \\<open>\\<pi>\\<close> \\<open>k\\<close> rule:cs_induct,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "case (cs \\<pi> k)"], ["proof (state)\nthis:\n  \\<lbrakk>Ex (is_icdi k \\<pi>); is_path \\<pi>;\n   \\<pi> =\\<^bsub>The (is_icdi k \\<pi>)\\<^esub> \\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n                    cs\\<^bsup>\\<pi>'\\<^esup> The (is_icdi k \\<pi>)\n  is_path \\<pi>\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "let \\<open>?l\\<close> = \\<open>(THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "assume *: \\<open>\\<exists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (state)\nthis:\n  \\<exists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "have kicd: \\<open>k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n          k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "by (metis \"*\" icd_is_the_icd)"], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence \\<open>?l < k\\<close>"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k", "unfolding is_cdi_def[of \\<open>k\\<close> \\<open>\\<pi>\\<close> \\<open>?l\\<close>] is_icdi_def[of \\<open>k\\<close> \\<open>\\<pi>\\<close> \\<open>?l\\<close>]"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   The (is_icdi k \\<pi>) < k \\<and>\n   \\<pi> k \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{The (is_icdi k \\<pi>)..k}.\n       \\<pi> j \\<noteq> ipd (\\<pi> (The (is_icdi k \\<pi>))))) \\<and>\n  (\\<forall>m\\<in>{The (is_icdi k \\<pi>)<..<k}.\n      \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k", "by auto"], ["proof (state)\nthis:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence \\<open>\\<forall> i\\<le>?l. \\<pi> i = \\<pi>' i\\<close>"], ["proof (prove)\nusing this:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n       \\<pi> i = \\<pi>' i", "using cs(2,3)"], ["proof (prove)\nusing this:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k\n  is_path \\<pi>\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n       \\<pi> i = \\<pi>' i", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) < k\n  is_path \\<pi>\n  \\<forall>i\\<le>k. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n       \\<pi> i = \\<pi>' i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n     \\<pi> i = \\<pi>' i\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?l = cs\\<^bsup>\\<pi>'\\<^esup> ?l\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n     \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                                k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n    cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                                 k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "using cs(1,2) *"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n     \\<pi> i = \\<pi>' i\n  \\<lbrakk>Ex (is_icdi k \\<pi>); is_path \\<pi>;\n   \\<pi> =\\<^bsub>The (is_icdi k \\<pi>)\\<^esub> \\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n                    cs\\<^bsup>\\<pi>'\\<^esup> The (is_icdi k \\<pi>)\n  is_path \\<pi>\n  \\<exists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                                k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n    cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                                 k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l.\n     \\<pi> i = \\<pi>' i\n  \\<lbrakk>Ex (is_icdi k \\<pi>); is_path \\<pi>;\n   \\<forall>i\\<le>The (is_icdi k \\<pi>). \\<pi> i = \\<pi>' i\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n                    cs\\<^bsup>\\<pi>'\\<^esup> The (is_icdi k \\<pi>)\n  is_path \\<pi>\n  \\<exists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                                k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n    cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                                 k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "have kicd: \\<open>k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n          k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "by (metis \"*\" icd_is_the_icd)"], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> ?l @ [\\<pi> k]\\<close>"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                                k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n    [\\<pi> k]", "using kicd"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                                k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n    [\\<pi> k]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi> k]\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "have kicd': \\<open>k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> (THE l.\n           k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "using kicd icdi_path_swap[OF assms(2) _ cs(3)]"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE l.\n        k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?k\n\ngoal (1 subgoal):\n 1. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> (THE l.\n           k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)", "by simp"], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> (THE l.\n         k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence \\<open>?l = (THE l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)\\<close>"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> (THE l.\n         k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n    (THE l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)", "by (metis icd_is_the_icd)"], ["proof (state)\nthis:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  (THE l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence csk': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> ?l @ [\\<pi>' k]\\<close>"], ["proof (prove)\nusing this:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  (THE l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k =\n    cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                                 k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n    [\\<pi>' k]", "using kicd'"], ["proof (prove)\nusing this:\n  (THE l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  (THE l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)\n  k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> (THE l.\n         k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k =\n    cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                                 k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n    [\\<pi>' k]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi>' k]\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "have \\<open>\\<pi>' k = \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' k = \\<pi> k", "using cs(3)"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi>' k = \\<pi> k", "unfolding eq_up_to_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>k. \\<pi> i = \\<pi>' i\n\ngoal (1 subgoal):\n 1. \\<pi>' k = \\<pi> k", "by auto"], ["proof (state)\nthis:\n  \\<pi>' k = \\<pi> k\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'; \\<not> ?P3 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "with csl csk csk'"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi> k]\n  cs\\<^bsup>\\<pi>'\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi>' k]\n  \\<pi>' k = \\<pi> k", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> (THE l.\n                              k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi> k]\n  cs\\<^bsup>\\<pi>'\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> (THE l.\n                               k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l) @\n  [\\<pi>' k]\n  \\<pi>' k = \\<pi> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "case (cs \\<pi> k)"], ["proof (state)\nthis:\n  \\<lbrakk>Ex (is_icdi k \\<pi>); is_path \\<pi>;\n   \\<pi> =\\<^bsub>The (is_icdi k \\<pi>)\\<^esub> \\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n                    cs\\<^bsup>\\<pi>'\\<^esup> The (is_icdi k \\<pi>)\n  is_path \\<pi>\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "assume *: \\<open>\\<not> (\\<exists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "have \\<open>\\<not> (\\<exists>l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>l.\n               k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "using * icdi_path_swap_le[OF cs(2) _, of \\<open>k\\<close> \\<open>\\<pi>'\\<close>] cs(3)"], ["proof (prove)\nusing this:\n  \\<nexists>l. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n  \\<lbrakk>k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?k;\n   \\<pi>' =\\<^bsub>?n\\<^esub> \\<pi>; k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>l.\n               k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l) \\<Longrightarrow>\n    False", "by (metis eq_up_to_sym le_refl)"], ["proof (state)\nthis:\n  \\<nexists>l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "hence csk': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>l. k icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 \\<pi>'' =\\<^bsub>The (is_icdi n\n  \\<pi>'')\\<^esub> \\<pi>'\\<rbrakk>\n                \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> The\n                       (is_icdi n \\<pi>'') =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> The\n                      (is_icdi n \\<pi>'');\n        is_path \\<pi>''; \\<pi>'' =\\<^bsub>n\\<^esub> \\<pi>'; is_path \\<pi>;\n        \\<pi> =\\<^bsub>k\\<^esub> \\<pi>';\n        \\<nexists>l. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> l\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>''\\<^esup> n =\n                         cs\\<^bsup>\\<pi>'\\<^esup> n", "with csk"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n  cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n  cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "using cs(3) eq_up_to_apply"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n  cs\\<^bsup>\\<pi>'\\<^esup> k = [\\<pi>' k]\n  \\<pi> =\\<^bsub>k\\<^esub> \\<pi>'\n  \\<lbrakk>?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'; ?j \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = ?\\<pi>' ?j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_path_swap_le: assumes \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>k \\<le> n\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k", "by (metis assms cs_path_swap eq_up_to_le)"], ["", "lemma cs_path_swap_cd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \nobtains k' where \\<open>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from cd_in_cs[OF assms(4)]"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n]", "obtain ns where *: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n]\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n]\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        cs\\<^bsup>\\<pi>\\<^esup> n =\n        cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n]\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain xs x where csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [x]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs x.\n        cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [x] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis cs_not_nil rev_exhaust)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [x]\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> n = \\<pi>' n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi>' n'", "using assms(3) last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> n = \\<pi>' n'", "by metis"], ["proof (state)\nthis:\n  \\<pi> n = \\<pi>' n'\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence **: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n' = xs@[x]@ns@[\\<pi>' n']\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> n = \\<pi>' n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x] @ ns @ [\\<pi>' n']", "using * assms(3) csk"], ["proof (prove)\nusing this:\n  \\<pi> n = \\<pi>' n'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> n]\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [x]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x] @ ns @ [\\<pi>' n']", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' = xs @ [x] @ ns @ [\\<pi>' n']\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from cs_split[OF **]"], ["proof (chain)\npicking this:\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [x] \\<and>\n     n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m", "obtain k' where \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k' = xs @ [x]\\<close> \\<open>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [x] \\<and>\n     n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = xs @ [x];\n         n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = xs @ [x]\n  n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = xs @ [x]\n  n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. thesis", "using that csk"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = xs @ [x]\n  n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<lbrakk>n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?k'1;\n   cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> ?k'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [x]\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_ipd_swap: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> k \\<noteq> return\\<close> \\<open>k < n\\<close> \nobtains \\<pi>' m where \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>'\\<close> \\<open>k < m\\<close> \\<open>\\<pi>' m = ipd (\\<pi>' k)\\<close> \\<open>\\<forall> l \\<in> {k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain \\<pi>' r where *: \\<open>\\<pi>' 0 = \\<pi> n\\<close> \\<open>is_path \\<pi>'\\<close> \\<open>\\<pi>' r = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' r.\n        \\<lbrakk>\\<pi>' 0 = \\<pi> n; is_path \\<pi>';\n         \\<pi>' r = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(1) path_nodes reaching_ret)"], ["proof (state)\nthis:\n  \\<pi>' 0 = \\<pi> n\n  is_path \\<pi>'\n  \\<pi>' r = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let \\<open>?\\<pi>\\<close> = \\<open>\\<pi>@\\<^bsup>n\\<^esup>  \\<pi>'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have path: \\<open>is_path ?\\<pi>\\<close> and ret: \\<open>?\\<pi> (n + r) = return\\<close> and equpto:  \\<open>?\\<pi> =\\<^bsub>n\\<^esub>  \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') &&&\n    (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + r) = local.return &&&\n    (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') =\\<^bsub>n\\<^esub> \\<pi>", "using assms path_cons * path_append_eq_up_to"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> k \\<noteq> local.return\n  k < n\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> ?m = ?\\<pi>' 0\\<rbrakk>\n  \\<Longrightarrow> is_path (?\\<pi> @\\<^bsup>?m\\<^esup> ?\\<pi>')\n  \\<pi>' 0 = \\<pi> n\n  is_path \\<pi>'\n  \\<pi>' r = local.return\n  (?\\<pi> @\\<^bsup>?k\\<^esup> ?\\<pi>') =\\<^bsub>?k\\<^esub> ?\\<pi>\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') &&&\n    (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + r) = local.return &&&\n    (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') =\\<^bsub>n\\<^esub> \\<pi>", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') (n + r) = local.return\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') =\\<^bsub>n\\<^esub> \\<pi>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<pi>k: \\<open>?\\<pi> k = \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k = \\<pi> k", "by (metis assms(3) less_imp_le_nat path_append_def)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k = \\<pi> k\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain j where j: \\<open>k < j \\<and> j \\<le> (n + r) \\<and> ?\\<pi> j = ipd (\\<pi> k)\\<close> (is \\<open>?P j\\<close> )"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        k < j \\<and>\n        j \\<le> n + r \\<and>\n        (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') j =\n        ipd (\\<pi> k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<pi>k assms(2) path path_ret_ipd ret)"], ["proof (state)\nthis:\n  k < j \\<and>\n  j \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') j = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define m where m: \\<open>m \\<equiv> LEAST m . ?P m\\<close>"], ["proof (state)\nthis:\n  m \\<equiv>\n  LEAST m.\n     k < m \\<and>\n     m \\<le> n + r \\<and>\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have Pm: \\<open>?P m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m \\<and>\n    m \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)", "using LeastI[of \\<open>?P\\<close> \\<open>j\\<close>] j m"], ["proof (prove)\nusing this:\n  k < j \\<and>\n  j \\<le> n + r \\<and>\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') j = ipd (\\<pi> k) \\<Longrightarrow>\n  k < (LEAST x.\n          k < x \\<and>\n          x \\<le> n + r \\<and>\n          (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') x = ipd (\\<pi> k)) \\<and>\n  (LEAST x.\n      k < x \\<and>\n      x \\<le> n + r \\<and>\n      (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') x = ipd (\\<pi> k))\n  \\<le> n + r \\<and>\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>')\n   (LEAST x.\n       k < x \\<and>\n       x \\<le> n + r \\<and>\n       (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') x = ipd (\\<pi> k)) =\n  ipd (\\<pi> k)\n  k < j \\<and>\n  j \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') j = ipd (\\<pi> k)\n  m \\<equiv>\n  LEAST m.\n     k < m \\<and>\n     m \\<le> n + r \\<and>\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. k < m \\<and>\n    m \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  k < m \\<and>\n  m \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence km: \\<open>k < m\\<close> \\<open>m \\<le> (n + r)\\<close> \\<open>?\\<pi> m = ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  k < m \\<and>\n  m \\<le> n + r \\<and> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. k < m &&&\n    m \\<le> n + r &&& (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  k < m\n  m \\<le> n + r\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have le: \\<open>\\<And>l. ?P l \\<Longrightarrow> m \\<le> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       k < l \\<and>\n       l \\<le> n + r \\<and>\n       (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l = ipd (\\<pi> k) \\<Longrightarrow>\n       m \\<le> l", "using Least_le[of \\<open>?P\\<close>] m"], ["proof (prove)\nusing this:\n  k < ?k \\<and>\n  ?k \\<le> n + r \\<and>\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') ?k = ipd (\\<pi> k) \\<Longrightarrow>\n  (LEAST x.\n      k < x \\<and>\n      x \\<le> n + r \\<and>\n      (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') x = ipd (\\<pi> k))\n  \\<le> ?k\n  m \\<equiv>\n  LEAST m.\n     k < m \\<and>\n     m \\<le> n + r \\<and>\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       k < l \\<and>\n       l \\<le> n + r \\<and>\n       (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l = ipd (\\<pi> k) \\<Longrightarrow>\n       m \\<le> l", "by blast"], ["proof (state)\nthis:\n  k < ?l1 \\<and>\n  ?l1 \\<le> n + r \\<and>\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') ?l1 = ipd (\\<pi> k) \\<Longrightarrow>\n  m \\<le> ?l1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<pi>knipd: \\<open>?\\<pi> k \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> k)", "by (metis \\<pi>k assms(1) assms(2) ipd_not_self path_nodes)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have nipd': \\<open>\\<And>l. k < l \\<Longrightarrow> l < m \\<Longrightarrow> ?\\<pi> l \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>k < l; l < m\\<rbrakk>\n       \\<Longrightarrow> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq>\n                         ipd (\\<pi> k)", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>k < l; l < m;\n        \\<not> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq>\n               ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "using le km(2)"], ["proof (prove)\nusing this:\n  k < ?l1 \\<and>\n  ?l1 \\<le> n + r \\<and>\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') ?l1 = ipd (\\<pi> k) \\<Longrightarrow>\n  m \\<le> ?l1\n  m \\<le> n + r\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>k < l; l < m;\n        \\<not> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq>\n               ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>k < ?l1; ?l1 < m\\<rbrakk>\n  \\<Longrightarrow> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') ?l1 \\<noteq>\n                    ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<forall> l \\<in> {k..<m}. ?\\<pi> l \\<noteq> ipd(\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{k..<m}.\n       (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq> ipd (\\<pi> k)", "using \\<pi>knipd nipd'"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') k \\<noteq> ipd (\\<pi> k)\n  \\<lbrakk>k < ?l1; ?l1 < m\\<rbrakk>\n  \\<Longrightarrow> (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') ?l1 \\<noteq>\n                    ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{k..<m}.\n       (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq> ipd (\\<pi> k)", "by(auto, metis le_eq_less_or_eq,metis le_eq_less_or_eq)"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{k..<m}.\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>' m.\n        \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n         \\<pi>' m = ipd (\\<pi>' k);\n         \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{k..<m}.\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{k..<m}.\n     (\\<pi> @\\<^bsup>n\\<^esup> \\<pi>') l \\<noteq> ipd (\\<pi> k)\n  \\<lbrakk>is_path ?\\<pi>'1; \\<pi> =\\<^bsub>n\\<^esub> ?\\<pi>'1; k < ?m1;\n   ?\\<pi>'1 ?m1 = ipd (?\\<pi>'1 k);\n   \\<forall>l\\<in>{k..<?m1}. ?\\<pi>'1 l \\<noteq> ipd (?\\<pi>'1 k)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (metis \\<pi>k eq_up_to_sym km(1) km(3) path path_append_eq_up_to)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_sorted_list_of_cd': \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = map \\<pi> (sorted_list_of_set { i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @ [\\<pi> k]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> k]", "proof (induction \\<open>\\<pi>\\<close> \\<open>k\\<close> rule: cs.induct, cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "case (1 \\<pi> k)"], ["proof (state)\nthis:\n  Ex (is_icdi k \\<pi>) \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. The (is_icdi k \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> (The (is_icdi k \\<pi>))]\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "assume \\<open>\\<exists> j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (state)\nthis:\n  \\<exists>j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "then"], ["proof (chain)\npicking this:\n  \\<exists>j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "guess j"], ["proof (prove)\nusing this:\n  \\<exists>j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "note j = this"], ["proof (state)\nthis:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "hence csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = map \\<pi> (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @ [\\<pi> j]\\<close>"], ["proof (prove)\nusing this:\n  k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j =\n    map \\<pi>\n     (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> j]", "by (metis \"1.IH\" icd_is_the_icd)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  map \\<pi>\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> j]\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "have \\<open>{i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "using cdi_is_cd_icdi[OF j]"], ["proof (prove)\nusing this:\n  (k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i) =\n  (j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i \\<or> ?i = j)\n\ngoal (1 subgoal):\n 1. {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "by auto"], ["proof (state)\nthis:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "moreover"], ["proof (state)\nthis:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "have f: \\<open>finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {i. is_path \\<pi> \\<and>\n         i < j \\<and>\n         \\<pi> j \\<noteq> local.return \\<and>\n         (\\<forall>j\\<in>{i..j}. \\<pi> j \\<noteq> ipd (\\<pi> i))}", "by auto"], ["proof (state)\nthis:\n  finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "moreover"], ["proof (state)\nthis:\n  finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "have \\<open>j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<notin> {i. is_path \\<pi> \\<and>\n                   i < j \\<and>\n                   \\<pi> j \\<noteq> local.return \\<and>\n                   (\\<forall>j\\<in>{i..j}. \\<pi> j \\<noteq> ipd (\\<pi> i))}", "by auto"], ["proof (state)\nthis:\n  j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "ultimately"], ["proof (chain)\npicking this:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "have \\<open>sorted_list_of_set { i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = insort j (sorted_list_of_set { i . j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\\<close>"], ["proof (prove)\nusing this:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    insort j\n     (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})", "using sorted_list_of_set_insert"], ["proof (prove)\nusing this:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insert j {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  finite {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  j \\<notin> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  finite ?A \\<Longrightarrow>\n  sorted_list_of_set (insert ?x ?A) =\n  insort ?x (sorted_list_of_set (?A - {?x}))\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    insort j\n     (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})", "by auto"], ["proof (state)\nthis:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insort j\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "moreover"], ["proof (state)\nthis:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insort j\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "have \\<open>\\<forall> x \\<in>  {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}. x < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}. x < j", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{i. is_path \\<pi> \\<and>\n                       i < j \\<and>\n                       \\<pi> j \\<noteq> local.return \\<and>\n                       (\\<forall>j\\<in>{i..j}.\n                           \\<pi> j \\<noteq> ipd (\\<pi> i))}.\n       x < j", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}. x < j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "hence \\<open>\\<forall> x \\<in> set (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}). x < j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}. x < j\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (sorted_list_of_set\n                         {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}).\n       x < j", "by (simp add: f)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (sorted_list_of_set\n                       {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}).\n     x < j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "ultimately"], ["proof (chain)\npicking this:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insort j\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n  \\<forall>x\\<in>set (sorted_list_of_set\n                       {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}).\n     x < j", "have \\<open>sorted_list_of_set { i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = (sorted_list_of_set { i . j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})@[j]\\<close>"], ["proof (prove)\nusing this:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insort j\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n  \\<forall>x\\<in>set (sorted_list_of_set\n                       {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}).\n     x < j\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} @ [j]", "using insort_greater"], ["proof (prove)\nusing this:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  insort j\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n  \\<forall>x\\<in>set (sorted_list_of_set\n                       {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}).\n     x < j\n  \\<forall>x\\<in>set ?ls. x < ?y \\<Longrightarrow>\n  insort ?y ?ls = ?ls @ [?y]\n\ngoal (1 subgoal):\n 1. sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} @ [j]", "by auto"], ["proof (state)\nthis:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} @ [j]\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = map \\<pi> (sorted_list_of_set { i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\\<close>"], ["proof (prove)\nusing this:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} @ [j]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j =\n    map \\<pi>\n     (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})", "using csj"], ["proof (prove)\nusing this:\n  sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} @ [j]\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  map \\<pi>\n   (sorted_list_of_set {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> j]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j =\n    map \\<pi>\n     (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  map \\<pi>\n   (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]\n 2. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<not> ?P1 \\<pi> n\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  map \\<pi>\n   (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> k]", "by (metis icd_cs j)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "case (1 \\<pi> k)"], ["proof (state)\nthis:\n  Ex (is_icdi k \\<pi>) \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi k \\<pi>) =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. The (is_icdi k \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> (The (is_icdi k \\<pi>))]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "assume *: \\<open>\\<not> (\\<exists> j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j. k icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]", "by (metis cs_cases)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "have \\<open>{ i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {}", "by (auto, metis * excd_impl_exicd)"], ["proof (state)\nthis:\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi> n.\n       \\<lbrakk>Ex (is_icdi n \\<pi>) \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi n \\<pi>) =\n                map \\<pi>\n                 (sorted_list_of_set\n                   {i. The (is_icdi n\n                             \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                [\\<pi> (The (is_icdi n \\<pi>))];\n        \\<nexists>j. n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> n =\n                         map \\<pi>\n                          (sorted_list_of_set\n                            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n                         [\\<pi> n]", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {}", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = [\\<pi> k]\n  {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> k]", "by (metis append_Nil list.simps(8) sorted_list_of_set_empty)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> k]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_sorted_list_of_cd: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = map \\<pi> (sorted_list_of_set ({ i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "have le: \\<open>\\<forall> x \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>i}.\\<forall> y \\<in> {k}. x < y\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}.\n       \\<forall>y\\<in>{k}. x < y", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{i. is_path \\<pi> \\<and>\n                       i < k \\<and>\n                       \\<pi> k \\<noteq> local.return \\<and>\n                       (\\<forall>j\\<in>{i..k}.\n                           \\<pi> j \\<noteq> ipd (\\<pi> i))}.\n       \\<forall>y\\<in>{k}. x < y", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>{i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}.\n     \\<forall>y\\<in>{k}. x < y\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "have fin: \\<open>finite {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>i}\\<close> \\<open>finite {k}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} &&& finite {k}", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {i. is_path \\<pi> \\<and>\n         i < k \\<and>\n         \\<pi> k \\<noteq> local.return \\<and>\n         (\\<forall>j\\<in>{i..k}. \\<pi> j \\<noteq> ipd (\\<pi> i))} &&&\n    finite {k}", "by auto"], ["proof (state)\nthis:\n  finite {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n  finite {k}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "unfolding cs_sorted_list_of_cd'[of \\<open>\\<pi>\\<close> \\<open>k\\<close>] sorted_list_of_set_append[OF fin le]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> (sorted_list_of_set (Collect (is_cdi k \\<pi>))) @ [\\<pi> k] =\n    map \\<pi>\n     (sorted_list_of_set (Collect (is_cdi k \\<pi>)) @\n      sorted_list_of_set {k})", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_not_ipd: assumes \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<close> (is \\<open>?Q j\\<close>)\nshows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) = [n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> ipd (\\<pi> k)]\\<close>\n(is \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?j = filter ?P _\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = map \\<pi> (sorted_list_of_set ({ i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i } \\<union> {k}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))", "by (metis cs_sorted_list_of_cd)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?j = map \\<pi> (sorted_list_of_set ({i. ?j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i } \\<union> {?j}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq>\n                ipd (\\<pi>\n                      k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n        {GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}))", "by (metis cs_sorted_list_of_cd)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq>\n              ipd (\\<pi>\n                    k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n      {GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have bound: \\<open>\\<forall> j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> ipd(\\<pi> k) \\<longrightarrow> j \\<le> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<longrightarrow>\n       j \\<le> k", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       (is_path \\<pi> \\<and>\n        j < k \\<and>\n        \\<pi> k \\<noteq> local.return \\<and>\n        (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))) \\<and>\n       ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<longrightarrow>\n       j \\<le> k", "by simp"], ["proof (state)\nthis:\n  \\<forall>j.\n     k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<longrightarrow>\n     j \\<le> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have kcdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j\\<close> and ipd': \\<open>ipd (\\<pi> ?j) \\<noteq> ipd(\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) &&&\n    ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) \\<noteq>\n    ipd (\\<pi> k)", "using GreatestI_nat[of \\<open>?Q\\<close> \\<open>j\\<close> \\<open>k\\<close>, OF assms] bound"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> ipd (\\<pi> k) \\<Longrightarrow>\n      y \\<le> k) \\<Longrightarrow>\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST a.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n       ipd (\\<pi> a) \\<noteq> ipd (\\<pi> k)) \\<and>\n  ipd (\\<pi>\n        (GREATEST a.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n            ipd (\\<pi> a) \\<noteq> ipd (\\<pi> k))) \\<noteq>\n  ipd (\\<pi> k)\n  \\<forall>j.\n     k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<longrightarrow>\n     j \\<le> k\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) &&&\n    ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) \\<noteq>\n    ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n  ipd (\\<pi>\n        (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) \\<noteq>\n  ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have greatest: \\<open>\\<And> j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<Longrightarrow> j \\<le> ?j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> j \\<le> (GREATEST j.\n                                     k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))", "using Greatest_le_nat[of \\<open>?Q\\<close>  _ \\<open>k\\<close>] bound"], ["proof (prove)\nusing this:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and>\n           ipd (\\<pi> ?k) \\<noteq> ipd (\\<pi> k);\n   \\<And>y.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      ipd (\\<pi> y) \\<noteq> ipd (\\<pi> k) \\<Longrightarrow>\n      y \\<le> k\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST a.\n                                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> a \\<and>\n                                 ipd (\\<pi> a) \\<noteq> ipd (\\<pi> k))\n  \\<forall>j.\n     k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<longrightarrow>\n     j \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> j \\<le> (GREATEST j.\n                                     k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1;\n   ipd (\\<pi> ?j1) \\<noteq> ipd (\\<pi> k)\\<rbrakk>\n  \\<Longrightarrow> ?j1\n                    \\<le> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have less_not_ipdk: \\<open>\\<And> j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> j < ?j \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        j < (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n       \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)", "by (metis (lifting) ipd' kcdj same_ipd_stable)"], ["proof (state)\nthis:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1;\n   ?j1\n   < (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n  \\<Longrightarrow> ipd (\\<pi> ?j1) \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "hence le_not_ipdk: \\<open>\\<And> j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> j \\<le> ?j \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1;\n   ?j1\n   < (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n  \\<Longrightarrow> ipd (\\<pi> ?j1) \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        j \\<le> (GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n       \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)", "using kcdj ipd'"], ["proof (prove)\nusing this:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1;\n   ?j1\n   < (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n  \\<Longrightarrow> ipd (\\<pi> ?j1) \\<noteq> ipd (\\<pi> k)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n  ipd (\\<pi>\n        (GREATEST j.\n            k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n            ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) \\<noteq>\n  ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        j \\<le> (GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n       \\<Longrightarrow> ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)", "by (case_tac \\<open>j = ?j\\<close>,auto)"], ["proof (state)\nthis:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1;\n   ?j1\n   \\<le> (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\\<rbrakk>\n  \\<Longrightarrow> ipd (\\<pi> ?j1) \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have *: \\<open>{j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>i} \\<union> {k}. ?P (\\<pi> j)} = insert ?j { i . ?j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n     ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)} =\n    insert\n     (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n     {i. (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq>\n             ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<noteq>\n                (GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k));\n        ipd (\\<pi> x) \\<noteq> ipd (\\<pi> k);\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> (GREATEST j.\n                             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                             ipd (\\<pi> j) \\<noteq>\n                             ipd (\\<pi>\n                                   k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\n 2. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) \\<Longrightarrow>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    k\n 3. ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) =\n    ipd (\\<pi> k) \\<Longrightarrow>\n    False\n 4. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> x = k\n 5. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis (lifting, no_types) greatest cr_wn'' kcdj le_antisym le_refl)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) \\<Longrightarrow>\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    k\n 2. ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) =\n    ipd (\\<pi> k) \\<Longrightarrow>\n    False\n 3. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> x = k\n 4. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis kcdj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ipd (\\<pi>\n          (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))) =\n    ipd (\\<pi> k) \\<Longrightarrow>\n    False\n 2. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> x = k\n 3. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis ipd')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        \\<not> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> x = k\n 2. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis (full_types) cd_trans kcdj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subgoal_tac \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k);\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x", "apply (metis (lifting, no_types) is_cdi_def less_not_ipdk)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(GREATEST j.\n                    k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                    ipd (\\<pi> j) \\<noteq>\n                    ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x;\n        ipd (\\<pi> x) = ipd (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> x", "by (metis (full_types) cd_trans kcdj)"], ["proof (state)\nthis:\n  {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n   ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)} =\n  insert\n   (GREATEST j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n   {i. (GREATEST j.\n           k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n           ipd (\\<pi> j) \\<noteq>\n           ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have \\<open>finite ({i . k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({i. is_path \\<pi> \\<and>\n          i < k \\<and>\n          \\<pi> k \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{i..k}. \\<pi> j \\<noteq> ipd (\\<pi> i))} \\<union>\n      {k})", "by auto"], ["proof (state)\nthis:\n  finite ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "note filter_sorted_list_of_set[OF this, of \\<open>?P o \\<pi>\\<close>]"], ["proof (state)\nthis:\n  filter ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>)\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})) =\n  sorted_list_of_set\n   {x \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n    ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>) x}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "hence \\<open>[n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> ipd(\\<pi> k)] = map \\<pi> (sorted_list_of_set {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>i} \\<union> {k}. ?P (\\<pi> j)})\\<close>"], ["proof (prove)\nusing this:\n  filter ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>)\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})) =\n  sorted_list_of_set\n   {x \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n    ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>) x}\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k) =\n    map \\<pi>\n     (sorted_list_of_set\n       {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)})", "unfolding csk filter_map"], ["proof (prove)\nusing this:\n  filter ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>)\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})) =\n  sorted_list_of_set\n   {x \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n    ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>) x}\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (filter ((\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k)) \\<circ> \\<pi>)\n       (sorted_list_of_set (Collect (is_cdi k \\<pi>) \\<union> {k}))) =\n    map \\<pi>\n     (sorted_list_of_set\n       {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)})", "by auto"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  map \\<pi>\n   (sorted_list_of_set\n     {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n      ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)})\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "also"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  map \\<pi>\n   (sorted_list_of_set\n     {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n      ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)})\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have \\<open>\\<dots> =  map \\<pi> (sorted_list_of_set (insert ?j { i . ?j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n        ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}) =\n    map \\<pi>\n     (sorted_list_of_set\n       (insert\n         (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n         {i. (GREATEST j.\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                 ipd (\\<pi> j) \\<noteq>\n                 ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       (insert\n         (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n         (Collect\n           (is_cdi\n             (GREATEST j.\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                 ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n             \\<pi>)))) =\n    map \\<pi>\n     (sorted_list_of_set\n       (insert\n         (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n         {i. (GREATEST j.\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                 ipd (\\<pi> j) \\<noteq>\n                 ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}))", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n      ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}) =\n  map \\<pi>\n   (sorted_list_of_set\n     (insert\n       (GREATEST j.\n           k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n           ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n       {i. (GREATEST j.\n               k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n               ipd (\\<pi> j) \\<noteq>\n               ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n      ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}) =\n  map \\<pi>\n   (sorted_list_of_set\n     (insert\n       (GREATEST j.\n           k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n           ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n       {i. (GREATEST j.\n               k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n               ipd (\\<pi> j) \\<noteq>\n               ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "have \\<open>\\<dots> = cs\\<^bsup>\\<pi>\\<^esup> ?j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       (insert\n         (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n         {i. (GREATEST j.\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                 ipd (\\<pi> j) \\<noteq>\n                 ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})) =\n    cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))", "using csj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. (GREATEST j.\n              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n              ipd (\\<pi> j) \\<noteq>\n              ipd (\\<pi>\n                    k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n      {GREATEST j.\n          k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n          ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)}))\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       (insert\n         (GREATEST j.\n             k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n         {i. (GREATEST j.\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                 ipd (\\<pi> j) \\<noteq>\n                 ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})) =\n    cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     (insert\n       (GREATEST j.\n           k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n           ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n       {i. (GREATEST j.\n               k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n               ipd (\\<pi> j) \\<noteq>\n               ipd (\\<pi> k)) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i})) =\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "finally"], ["proof (chain)\npicking this:\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                                k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n    filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n     (cs\\<^bsup>\\<pi>\\<^esup> k)", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_ipd: assumes ipd: \\<open>\\<pi> m = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close>\nand km: \\<open>k < m\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = [n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> \\<pi> m] @ [\\<pi> m]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "assume \\<open>\\<exists> j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (state)\nthis:\n  \\<exists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "then"], ["proof (chain)\npicking this:\n  \\<exists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "obtain j where jicd: \\<open>m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "hence *: \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> j @ [\\<pi> m]\\<close>"], ["proof (prove)\nusing this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> j @ [\\<pi> m]", "by (metis icd_cs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> j @ [\\<pi> m]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have j: \\<open>j = (GREATEST j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> ipd (\\<pi> j) \\<noteq> \\<pi> m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "using jicd assms ipd_icd_greatest_cd_not_ipd"], ["proof (prove)\nusing this:\n  m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<pi> m = ipd (\\<pi> k)\n  \\<forall>n\\<in>{k..<m}. \\<pi> n \\<noteq> ipd (\\<pi> k)\n  k < m\n  \\<lbrakk>?\\<pi> ?m = ipd (?\\<pi> ?k);\n   \\<forall>n\\<in>{?k..<?m}. ?\\<pi> n \\<noteq> ipd (?\\<pi> ?k); ?k < ?m;\n   ?m icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?j =\n                    (GREATEST j.\n                        ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                        ipd (?\\<pi> j) \\<noteq> ?\\<pi> ?m)\n\ngoal (1 subgoal):\n 1. j =\n    (GREATEST j.\n        k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n        ipd (\\<pi> j) \\<noteq> \\<pi> m)", "by blast"], ["proof (state)\nthis:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "moreover"], ["proof (state)\nthis:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have \\<open>ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)", "by (metis is_cdi_def is_icdi_def is_ipd_def cd_not_pd ipd(1) ipd_is_ipd jicd path_nodes less_imp_le term_path_stable)"], ["proof (state)\nthis:\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "moreover"], ["proof (state)\nthis:\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "unfolding j"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         ipd (\\<pi> j) \\<noteq> \\<pi> m)", "by (metis (lifting, no_types) assms(3) cd_ipd_is_cd icd_imp_cd ipd(1) ipd(2) j jicd)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "ultimately"], ["proof (chain)\npicking this:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = [n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> \\<pi> m]\\<close>"], ["proof (prove)\nusing this:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k)", "using cs_not_ipd[of \\<open>k\\<close> \\<open>\\<pi>\\<close> \\<open>j\\<close>] ipd(1)"], ["proof (prove)\nusing this:\n  j =\n  (GREATEST j.\n      k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n      ipd (\\<pi> j) \\<noteq> \\<pi> m)\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n  ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k) \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> (GREATEST j.\n                              k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                              ipd (\\<pi> j) \\<noteq> ipd (\\<pi> k)) =\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (\\<pi> k))\n   (cs\\<^bsup>\\<pi>\\<^esup> k)\n  \\<pi> m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k)", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]\n 2. \\<not> ?P \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "using *"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k)\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> j @ [\\<pi> m]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) @\n  [\\<pi> m]\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "assume noicd: \\<open>\\<not> (\\<exists> j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "hence csm: \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = [\\<pi> m]\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m = [\\<pi> m]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = [\\<pi> m]\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have \\<open>\\<And>j. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow>j \\<Longrightarrow> ipd(\\<pi> j) = \\<pi> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n       ipd (\\<pi> j) = \\<pi> m", "using cd_is_cd_ipd[OF km ipd]"], ["proof (prove)\nusing this:\n  \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j;\n   ipd (\\<pi> ?j) \\<noteq> \\<pi> m\\<rbrakk>\n  \\<Longrightarrow> m cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n       ipd (\\<pi> j) = \\<pi> m", "by (metis excd_impl_exicd noicd)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  ipd (\\<pi> ?j1) = \\<pi> m\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "hence *: \\<open>{j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}. ipd (\\<pi> j) \\<noteq> \\<pi> m} = {}\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  ipd (\\<pi> ?j1) = \\<pi> m\n\ngoal (1 subgoal):\n 1. {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n     ipd (\\<pi> j) \\<noteq> \\<pi> m} =\n    {}", "using ipd(1)"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  ipd (\\<pi> ?j1) = \\<pi> m\n  \\<pi> m = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n     ipd (\\<pi> j) \\<noteq> \\<pi> m} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {j \\<in> {i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}.\n   ipd (\\<pi> j) \\<noteq> \\<pi> m} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have **: \\<open>((\\<lambda>n. ipd n \\<noteq> \\<pi> m) o \\<pi>) = (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. ipd n \\<noteq> \\<pi> m) \\<circ> \\<pi> =\n    (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>n. ipd n \\<noteq> \\<pi> m) \\<circ> \\<pi> =\n  (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have fin: \\<open>finite ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ({i. is_path \\<pi> \\<and>\n          i < k \\<and>\n          \\<pi> k \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{i..k}. \\<pi> j \\<noteq> ipd (\\<pi> i))} \\<union>\n      {k})", "by auto"], ["proof (state)\nthis:\n  finite ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "note csk = cs_sorted_list_of_cd[of \\<open>\\<pi>\\<close> \\<open>k\\<close>]"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "hence \\<open>[n\\<leftarrow>cs\\<^bsup>\\<pi>\\<^esup> k . ipd n \\<noteq> \\<pi> m] = [n\\<leftarrow> (map \\<pi> (sorted_list_of_set ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) . ipd n \\<noteq> \\<pi> m]\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (map \\<pi>\n       (sorted_list_of_set\n         ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n   (map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "also"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n   (map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have \\<open>\\<dots> = map \\<pi> [n <- sorted_list_of_set ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}). ipd (\\<pi> n) \\<noteq> \\<pi> m]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (map \\<pi>\n       (sorted_list_of_set\n         ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) =\n    map \\<pi>\n     (filter (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n       (sorted_list_of_set\n         ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))", "by (auto simp add: filter_map **)"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n   (map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) =\n  map \\<pi>\n   (filter (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "also"], ["proof (state)\nthis:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n   (map \\<pi>\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) =\n  map \\<pi>\n   (filter (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k})))\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "have \\<open>\\<dots> = []\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (filter (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n       (sorted_list_of_set\n         ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) =\n    []", "unfolding * filter_sorted_list_of_set[OF fin, of \\<open>\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m\\<close>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> (sorted_list_of_set {}) = []", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (filter (\\<lambda>n. ipd (\\<pi> n) \\<noteq> \\<pi> m)\n     (sorted_list_of_set\n       ({i. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {k}))) =\n  []\n\ngoal (1 subgoal):\n 1. \\<nexists>j. m icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n    cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "finally"], ["proof (chain)\npicking this:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  []", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  []\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "using csm"], ["proof (prove)\nusing this:\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) =\n  []\n  cs\\<^bsup>\\<pi>\\<^esup> m = [\\<pi> m]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m =\n    filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m)\n     (cs\\<^bsup>\\<pi>\\<^esup> k) @\n    [\\<pi> m]", "by (metis append_Nil)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> m) (cs\\<^bsup>\\<pi>\\<^esup> k) @\n  [\\<pi> m]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_ipd_same_icd: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and icd: \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and suc: \\<open>\\<pi> (Suc k) = \\<pi>' (Suc k')\\<close>\nand ipd: \\<open>\\<pi>' m' = ipd (\\<pi> k)\\<close> \\<open>\\<forall> n \\<in> {k'..<m'}. \\<pi>' n \\<noteq> ipd (\\<pi> k)\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume l: \\<open>l = Suc k\\<close>"], ["proof (state)\nthis:\n  l = Suc k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  l = Suc k\n\ngoal (1 subgoal):\n 1. Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using icd"], ["proof (prove)\nusing this:\n  l = Suc k\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis is_icdi_def)"], ["proof (state)\nthis:\n  Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>\\<pi> (Suc k) \\<noteq> ipd (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc k) \\<noteq> ipd (\\<pi> k)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  k < Suc k \\<and>\n  \\<pi> (Suc k) \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..Suc k}. \\<pi> j \\<noteq> ipd (\\<pi> k))\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc k) \\<noteq> ipd (\\<pi> k)", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc k) \\<noteq> ipd (\\<pi> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>\\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc k) \\<noteq> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')", "by (metis csk last_cs suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>\\<pi>' (Suc k') \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc k') \\<noteq> local.return", "by (metis \\<open>Suc k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> ret_no_cd suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc k') \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n  \\<pi>' (Suc k') \\<noteq> local.return", "have \\<open>Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n  \\<pi>' (Suc k') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n  \\<pi>' (Suc k') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    k' < Suc k' \\<and>\n    \\<pi>' (Suc k') \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k'..Suc k'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k'))", "using path(2)"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k')\n  \\<pi>' (Suc k') \\<noteq> local.return\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    k' < Suc k' \\<and>\n    \\<pi>' (Suc k') \\<noteq> local.return \\<and>\n    (\\<forall>j\\<in>{k'..Suc k'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k'))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<pi>' (Suc k') \\<noteq> ipd (\\<pi>' k');\n        \\<pi>' (Suc k') \\<noteq> local.return; is_path \\<pi>';\n        \\<pi>' j = ipd (\\<pi>' k'); k' \\<le> j; j \\<le> Suc k'\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis ipd_not_self le_Suc_eq le_antisym path_nodes term_path_stable)"], ["proof (state)\nthis:\n  Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>Suc k' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. Suc k' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<and>\n    (\\<forall>m\\<in>{k'<..<Suc k'}.\n        \\<not> Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)", "using path(2)"], ["proof (prove)\nusing this:\n  Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<and>\n    (\\<forall>m\\<in>{k'<..<Suc k'}.\n        \\<not> Suc k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)", "by fastforce"], ["proof (state)\nthis:\n  Suc k' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (Suc k') = cs\\<^bsup>\\<pi>'\\<^esup> k' @[\\<pi>' (Suc k')]\\<close>"], ["proof (prove)\nusing this:\n  Suc k' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n    cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]", "using icd_cs"], ["proof (prove)\nusing this:\n  Suc k' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  ?l icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?l = cs\\<^bsup>?\\<pi>\\<^esup> ?k @ [?\\<pi> ?l]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n    cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "using icd icd_cs"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  ?l icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?l = cs\\<^bsup>?\\<pi>\\<^esup> ?k @ [?\\<pi> ?l]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> Suc k' =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' (Suc k')]\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> Suc k'", "by (metis csk l suc)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> Suc k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> Suc k'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume nsuck: \\<open>l \\<noteq> Suc k\\<close>"], ["proof (state)\nthis:\n  l \\<noteq> Suc k\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kk'[simp]: \\<open>\\<pi>' k' = \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' k' = \\<pi> k", "by (metis csk last_cs)"], ["proof (state)\nthis:\n  \\<pi>' k' = \\<pi> k\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kl: \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "using icd"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < l", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   k < l \\<and>\n   \\<pi> l \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<l}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < l \\<and>\n              \\<pi> l \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..l}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. k < l", "by auto"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence skl: \\<open>Suc k < l\\<close>"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. Suc k < l", "by (metis Suc_lessI nsuck)"], ["proof (state)\nthis:\n  Suc k < l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence lpd: \\<open>\\<pi> l pd\\<rightarrow> \\<pi> (Suc k)\\<close>"], ["proof (prove)\nusing this:\n  Suc k < l\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> (Suc k)", "using icd icd_pd_intermediate"], ["proof (prove)\nusing this:\n  Suc k < l\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k; ?k < ?j;\n   ?j \\<le> ?i\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?i pd\\<rightarrow> ?\\<pi> ?j\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> (Suc k)", "by auto"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have km: \\<open>k < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m", "by (metis converge(1) kl order.strict_trans)"], ["proof (state)\nthis:\n  k < m\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lcd: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using icd is_icdi_def"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by auto"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence ipdk_pdl: \\<open>ipd (\\<pi> k) pd\\<rightarrow> (\\<pi> l)\\<close>"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l", "by (metis ipd_pd_cd)"], ["proof (state)\nthis:\n  ipd (\\<pi> k) pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have *: \\<open>ipd (\\<pi> k) \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> k) \\<in> local.nodes", "by (metis ipdk_pdl pd_node1)"], ["proof (state)\nthis:\n  ipd (\\<pi> k) \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nretk: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by (metis kl lcd path(1) ret_no_cd term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have **: \\<open>\\<not> (\\<pi> l) pd\\<rightarrow> ipd (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<pi> l pd\\<rightarrow> ipd (\\<pi> k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> ipd (\\<pi> k) \\<Longrightarrow> False", "assume a: \\<open>\\<pi> l pd\\<rightarrow> ipd (\\<pi> k)\\<close>"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> ipd (\\<pi> k) \\<Longrightarrow> False", "hence \\<open>\\<pi> l pd\\<rightarrow> (\\<pi> k)\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l pd\\<rightarrow> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi> k", "by (metis is_ipd_def \\<open>k < l\\<close> ipd_is_ipd ipdk_pdl path(1) path_nodes pd_antisym term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> ipd (\\<pi> k) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> ipd (\\<pi> k) \\<Longrightarrow> False", "have \\<open>\\<pi> l \\<noteq> (\\<pi> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> \\<pi> k", "by (metis \"*\" a ipd_not_self ipdk_pdl lcd pd_antisym ret_no_cd)"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> \\<pi> k\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> ipd (\\<pi> k) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n  \\<pi> l \\<noteq> \\<pi> k", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n  \\<pi> l \\<noteq> \\<pi> k\n\ngoal (1 subgoal):\n 1. False", "using lcd cd_not_pd"], ["proof (prove)\nusing this:\n  \\<pi> l pd\\<rightarrow> \\<pi> k\n  \\<pi> l \\<noteq> \\<pi> k\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   ?\\<pi> ?l \\<noteq> ?\\<pi> ?k\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?\\<pi> ?l pd\\<rightarrow> ?\\<pi> ?k\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> \\<pi> l pd\\<rightarrow> ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have km': \\<open>k' < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < m'", "using cs_order[OF path csk converge(2) nretk km]"], ["proof (prove)\nusing this:\n  k' < m'\n\ngoal (1 subgoal):\n 1. k' < m'", "."], ["proof (state)\nthis:\n  k' < m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain \\<pi>'' n'' where path'': \\<open>is_path \\<pi>''\\<close>  and \\<pi>''0: \\<open>\\<pi>'' 0 = ipd (\\<pi> k)\\<close> and \\<pi>''n: \\<open>\\<pi>'' n'' = return\\<close> and not\\<pi>l: \\<open>\\<forall> i\\<le>n''. \\<pi>'' i \\<noteq> \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>'' n''.\n        \\<lbrakk>is_path \\<pi>''; \\<pi>'' 0 = ipd (\\<pi> k);\n         \\<pi>'' n'' = local.return;\n         \\<forall>i\\<le>n''. \\<pi>'' i \\<noteq> \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using no_pd_path[OF * **]"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>' n.\n      \\<lbrakk>is_path \\<pi>'; \\<pi>' 0 = ipd (\\<pi> k);\n       \\<pi>' n = local.return;\n       \\<forall>k\\<le>n. \\<pi>' k \\<noteq> \\<pi> l\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>'' n''.\n        \\<lbrakk>is_path \\<pi>''; \\<pi>'' 0 = ipd (\\<pi> k);\n         \\<pi>'' n'' = local.return;\n         \\<forall>i\\<le>n''. \\<pi>'' i \\<noteq> \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  is_path \\<pi>''\n  \\<pi>'' 0 = ipd (\\<pi> k)\n  \\<pi>'' n'' = local.return\n  \\<forall>i\\<le>n''. \\<pi>'' i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "let \\<open>?\\<pi>'\\<close> = \\<open>(\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'') \\<guillemotleft> Suc k'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>is_path ?\\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')", "by (metis \\<pi>''0 ipd(1) path'' path(2) path_cons path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>?\\<pi>' 0 = \\<pi> (Suc k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n    \\<pi> (Suc k)", "using km' suc"], ["proof (prove)\nusing this:\n  k' < m'\n  \\<pi> (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n    \\<pi> (Suc k)", "by auto"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>?\\<pi>' (m' - Suc k' + n'') = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n     (m' - Suc k' + n'') =\n    local.return", "using \\<pi>''n km' \\<pi>''0 ipd(1)"], ["proof (prove)\nusing this:\n  \\<pi>'' n'' = local.return\n  k' < m'\n  \\<pi>'' 0 = ipd (\\<pi> k)\n  \\<pi>' m' = ipd (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n     (m' - Suc k' + n'') =\n    local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n   (m' - Suc k' + n'') =\n  local.return\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n   (m' - Suc k' + n'') =\n  local.return", "obtain l'' where l'': \\<open>l'' \\<le> m' - Suc k' + n''\\<close> \\<open>?\\<pi>' l'' = \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n   (m' - Suc k' + n'') =\n  local.return\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>l'' \\<le> m' - Suc k' + n'';\n         (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' =\n         \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lpd"], ["proof (prove)\nusing this:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n   (m' - Suc k' + n'') =\n  local.return\n  \\<pi> l pd\\<rightarrow> \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>l'' \\<le> m' - Suc k' + n'';\n         (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' =\n         \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k')\n   (m' - Suc k' + n'') =\n  local.return\n  \\<pi> (Suc k) \\<in> local.nodes \\<and>\n  (\\<forall>\\<pi>' n.\n      is_path \\<pi>' \\<and>\n      \\<pi>' 0 = \\<pi> (Suc k) \\<and>\n      \\<pi>' n = local.return \\<longrightarrow>\n      (\\<exists>k\\<le>n. \\<pi>' k = \\<pi> l))\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>l'' \\<le> m' - Suc k' + n'';\n         (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' =\n         \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l'' \\<le> m' - Suc k' + n''\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' = \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have l''m: \\<open>l'' \\<le> m' - Suc k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' \\<le> m' - Suc k'", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> m' - Suc k' \\<Longrightarrow> False", "using l'' not\\<pi>l km'"], ["proof (prove)\nusing this:\n  l'' \\<le> m' - Suc k' + n''\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' = \\<pi> l\n  \\<forall>i\\<le>n''. \\<pi>'' i \\<noteq> \\<pi> l\n  k' < m'\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> m' - Suc k' \\<Longrightarrow> False", "by (cases \\<open>Suc (k' + l'') \\<le> m'\\<close>, auto)"], ["proof (state)\nthis:\n  l'' \\<le> m' - Suc k'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "let \\<open>?l'\\<close> = \\<open>Suc ( k' + l'')\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lm': \\<open>?l' \\<le> m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (k' + l'') \\<le> m'", "using l''m km'"], ["proof (prove)\nusing this:\n  l'' \\<le> m' - Suc k'\n  k' < m'\n\ngoal (1 subgoal):\n 1. Suc (k' + l'') \\<le> m'", "by auto\n  \n  \\<comment> \\<open>Now we have found our desired l'\\<close>"], ["proof (state)\nthis:\n  Suc (k' + l'') \\<le> m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have 1: \\<open>\\<pi>' ?l' = \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (k' + l'')) = \\<pi> l", "using  l'' l''m lm'"], ["proof (prove)\nusing this:\n  l'' \\<le> m' - Suc k' + n''\n  (\\<pi>' @\\<^bsup>m'\\<^esup> \\<pi>'' \\<guillemotleft> Suc k') l'' = \\<pi> l\n  l'' \\<le> m' - Suc k'\n  Suc (k' + l'') \\<le> m'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (k' + l'')) = \\<pi> l", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have 2: \\<open>k' < ?l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < Suc (k' + l'')", "by simp"], ["proof (state)\nthis:\n  k' < Suc (k' + l'')\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have 3: \\<open>?l' < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (k' + l'') < m'", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Suc (k' + l'') < m' \\<Longrightarrow> False", "using lm'"], ["proof (prove)\nusing this:\n  Suc (k' + l'') \\<le> m'\n\ngoal (1 subgoal):\n 1. \\<not> Suc (k' + l'') < m' \\<Longrightarrow> False", "by (simp, metis \"**\" 1 ipd(1) ipdk_pdl)  \n  \n  \\<comment> \\<open>Need the least such l'\\<close>"], ["proof (state)\nthis:\n  Suc (k' + l'') < m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "let \\<open>?P\\<close> = \\<open>\\<lambda> l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have *: \\<open>?P ?l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (k' + l'')) = \\<pi> l \\<and>\n    k' < Suc (k' + l'') \\<and> Suc (k' + l'') < m'", "using 1 2 3"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l\n  k' < Suc (k' + l'')\n  Suc (k' + l'') < m'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (k' + l'')) = \\<pi> l \\<and>\n    k' < Suc (k' + l'') \\<and> Suc (k' + l'') < m'", "by blast"], ["proof (state)\nthis:\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l \\<and>\n  k' < Suc (k' + l'') \\<and> Suc (k' + l'') < m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "define l' where l': \\<open>l' == LEAST l'. ?P l'\\<close>"], ["proof (state)\nthis:\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>l': \\<open>\\<pi>' l' = \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' l' = \\<pi> l", "using l' 1 2 3 LeastI[of \\<open>?P\\<close>]"], ["proof (prove)\nusing this:\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l\n  k' < Suc (k' + l'')\n  Suc (k' + l'') < m'\n  \\<pi>' ?k = \\<pi> l \\<and> k' < ?k \\<and> ?k < m' \\<Longrightarrow>\n  \\<pi>' (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') =\n  \\<pi> l \\<and>\n  k' < (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') \\<and>\n  (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') < m'\n\ngoal (1 subgoal):\n 1. \\<pi>' l' = \\<pi> l", "by blast"], ["proof (state)\nthis:\n  \\<pi>' l' = \\<pi> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kl': \\<open>k' < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < l'", "using l' 1 2 3 LeastI[of \\<open>?P\\<close>]"], ["proof (prove)\nusing this:\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l\n  k' < Suc (k' + l'')\n  Suc (k' + l'') < m'\n  \\<pi>' ?k = \\<pi> l \\<and> k' < ?k \\<and> ?k < m' \\<Longrightarrow>\n  \\<pi>' (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') =\n  \\<pi> l \\<and>\n  k' < (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') \\<and>\n  (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') < m'\n\ngoal (1 subgoal):\n 1. k' < l'", "by blast"], ["proof (state)\nthis:\n  k' < l'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lm': \\<open>l' < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < m'", "using l' 1 2 3 LeastI[of \\<open>?P\\<close>]"], ["proof (prove)\nusing this:\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n  \\<pi>' (Suc (k' + l'')) = \\<pi> l\n  k' < Suc (k' + l'')\n  Suc (k' + l'') < m'\n  \\<pi>' ?k = \\<pi> l \\<and> k' < ?k \\<and> ?k < m' \\<Longrightarrow>\n  \\<pi>' (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') =\n  \\<pi> l \\<and>\n  k' < (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') \\<and>\n  (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') < m'\n\ngoal (1 subgoal):\n 1. l' < m'", "by blast"], ["proof (state)\nthis:\n  l' < m'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nretl': \\<open>\\<pi>' l' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' l' \\<noteq> local.return", "by (metis \\<pi>''n \\<pi>l' le_refl not\\<pi>l)"], ["proof (state)\nthis:\n  \\<pi>' l' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nipd': \\<open>\\<forall> j \\<in> {k'..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k'..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k')", "using lm' kk' ipd(2) kl'"], ["proof (prove)\nusing this:\n  l' < m'\n  \\<pi>' k' = \\<pi> k\n  \\<forall>n\\<in>{k'..<m'}. \\<pi>' n \\<noteq> ipd (\\<pi> k)\n  k' < l'\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k'..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k')", "by force"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k'..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' k')\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lcd': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "by (metis is_cdi_def kl' nipd' nretl' path(2))"], ["proof (state)\nthis:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have licd: \\<open>l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have \\<open>\\<forall> m \\<in> {k'<..<l'}. \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>{k'<..<l'}.\n       \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "assume \\<open>\\<not> (\\<forall> m \\<in> {k'<..<l'}. \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n             \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n             \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)", "obtain j' where kj': \\<open>k' < j'\\<close> and jl': \\<open>j' < l'\\<close> and lcdj': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n             \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' < j'; j' < l';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  k' < j'\n  j' < l'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have jm': \\<open>j'<m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < m'", "by (metis jl' lm' order.strict_trans)"], ["proof (state)\nthis:\n  j' < m'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have \\<open>\\<pi>' j' \\<noteq> \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' j' \\<noteq> \\<pi> l", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<pi>' j' \\<noteq> \\<pi> l \\<Longrightarrow> False", "using l' kj' jm' jl' Least_le[of \\<open>?P\\<close> \\<open>j'\\<close>]"], ["proof (prove)\nusing this:\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n  k' < j'\n  j' < m'\n  j' < l'\n  \\<pi>' j' = \\<pi> l \\<and> k' < j' \\<and> j' < m' \\<Longrightarrow>\n  (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m') \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi>' j' \\<noteq> \\<pi> l \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  \\<pi>' j' \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "hence \\<open>\\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' j' \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'", "using cd_not_pd lcdj' \\<pi>l'"], ["proof (prove)\nusing this:\n  \\<pi>' j' \\<noteq> \\<pi> l\n  \\<lbrakk>?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   ?\\<pi> ?l \\<noteq> ?\\<pi> ?k\\<rbrakk>\n  \\<Longrightarrow> \\<not> ?\\<pi> ?l pd\\<rightarrow> ?\\<pi> ?k\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<pi>' l' = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'", "by metis"], ["proof (state)\nthis:\n  \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have \\<open>\\<pi>' j' \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' j' \\<in> local.nodes", "using path(2) path_nodes"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi>' j' \\<in> local.nodes", "by auto"], ["proof (state)\nthis:\n  \\<pi>' j' \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'\n  \\<pi>' j' \\<in> local.nodes", "obtain \\<pi>\\<^sub>1 n\\<^sub>1 where path\\<^sub>1: \\<open>is_path \\<pi>\\<^sub>1\\<close> and \\<pi>0\\<^sub>1: \\<open>\\<pi>\\<^sub>1 0 = \\<pi>' j'\\<close> and \\<pi>n\\<^sub>1: \\<open>\\<pi>\\<^sub>1 n\\<^sub>1 = return\\<close> and nl': \\<open>\\<forall> l \\<le>n\\<^sub>1. \\<pi>\\<^sub>1 l \\<noteq> \\<pi>' l'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> \\<pi>' l' pd\\<rightarrow> \\<pi>' j'\n  \\<pi>' j' \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1 n\\<^sub>1.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1; \\<pi>\\<^sub>1 0 = \\<pi>' j';\n         \\<pi>\\<^sub>1 n\\<^sub>1 = local.return;\n         \\<forall>l\\<le>n\\<^sub>1.\n            \\<pi>\\<^sub>1 l \\<noteq> \\<pi>' l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_pd_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<pi>' j' \\<in> local.nodes \\<and>\n          (\\<forall>\\<pi> n.\n              is_path \\<pi> \\<and>\n              \\<pi> 0 = \\<pi>' j' \\<and>\n              \\<pi> n = local.return \\<longrightarrow>\n              (\\<exists>k\\<le>n. \\<pi> k = \\<pi>' l')))\n  \\<pi>' j' \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1 n\\<^sub>1.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1; \\<pi>\\<^sub>1 0 = \\<pi>' j';\n         \\<pi>\\<^sub>1 n\\<^sub>1 = local.return;\n         \\<forall>l\\<le>n\\<^sub>1.\n            \\<pi>\\<^sub>1 l \\<noteq> \\<pi>' l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>\\<^sub>1\n  \\<pi>\\<^sub>1 0 = \\<pi>' j'\n  \\<pi>\\<^sub>1 n\\<^sub>1 = local.return\n  \\<forall>l\\<le>n\\<^sub>1. \\<pi>\\<^sub>1 l \\<noteq> \\<pi>' l'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "let \\<open>?\\<pi>''\\<close> = \\<open>(\\<pi>'@\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1) \\<guillemotleft> Suc k'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have \\<open>is_path ?\\<pi>''\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path\n     (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')", "by (metis \\<pi>0\\<^sub>1 path(2) path\\<^sub>1 path_cons path_path_shift)"], ["proof (state)\nthis:\n  is_path (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have \\<open>?\\<pi>'' 0 = \\<pi> (Suc k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n    \\<pi> (Suc k)", "by (simp, metis kj' less_eq_Suc_le suc)"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "have kj': \\<open>Suc k' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k' \\<le> j'", "by (metis kj' less_eq_Suc_le)"], ["proof (state)\nthis:\n  Suc k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "hence \\<open>?\\<pi>'' (j' - Suc k' + n\\<^sub>1) = return\\<close>"], ["proof (prove)\nusing this:\n  Suc k' \\<le> j'\n\ngoal (1 subgoal):\n 1. (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n     (j' - Suc k' + n\\<^sub>1) =\n    local.return", "by (simp, metis \\<pi>0\\<^sub>1 \\<pi>n\\<^sub>1)"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n   (j' - Suc k' + n\\<^sub>1) =\n  local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n   (j' - Suc k' + n\\<^sub>1) =\n  local.return", "obtain l'' where *: \\<open>?\\<pi>'' l'' = \\<pi> l\\<close> and **: \\<open>l'' \\<le>j' - Suc k' + n\\<^sub>1\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n   (j' - Suc k' + n\\<^sub>1) =\n  local.return\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>(\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft>\n                  Suc k')\n                  l'' =\n                 \\<pi> l;\n         l'' \\<le> j' - Suc k' + n\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lpd is_pd_def"], ["proof (prove)\nusing this:\n  is_path (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') 0 =\n  \\<pi> (Suc k)\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k')\n   (j' - Suc k' + n\\<^sub>1) =\n  local.return\n  \\<pi> l pd\\<rightarrow> \\<pi> (Suc k)\n  (?y pd\\<rightarrow> ?x) =\n  (?x \\<in> local.nodes \\<and>\n   (\\<forall>\\<pi> n.\n       is_path \\<pi> \\<and>\n       \\<pi> 0 = ?x \\<and> \\<pi> n = local.return \\<longrightarrow>\n       (\\<exists>k\\<le>n. \\<pi> k = ?y)))\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>(\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft>\n                  Suc k')\n                  l'' =\n                 \\<pi> l;\n         l'' \\<le> j' - Suc k' + n\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') l'' =\n  \\<pi> l\n  l'' \\<le> j' - Suc k' + n\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>m\\<in>{k'<..<l'}.\n               \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m) \\<Longrightarrow>\n    False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "assume a: \\<open>l'' \\<le> j' - Suc k'\\<close>"], ["proof (state)\nthis:\n  l'' \\<le> j' - Suc k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "hence \\<open>\\<pi>' (l'' + Suc k') = \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  l'' \\<le> j' - Suc k'\n\ngoal (1 subgoal):\n 1. \\<pi>' (l'' + Suc k') = \\<pi> l", "using * kj'"], ["proof (prove)\nusing this:\n  l'' \\<le> j' - Suc k'\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') l'' =\n  \\<pi> l\n  Suc k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<pi>' (l'' + Suc k') = \\<pi> l", "by(simp, metis Nat.le_diff_conv2 add_Suc diff_add_inverse le_add1 le_add_diff_inverse2)"], ["proof (state)\nthis:\n  \\<pi>' (l'' + Suc k') = \\<pi> l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (l'' + Suc k') = \\<pi> l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>l'' + Suc k' < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' + Suc k' < l'", "by (metis a jl' add_diff_cancel_right' kj' le_add_diff_inverse less_imp_diff_less ordered_cancel_comm_monoid_diff_class.le_diff_conv2)"], ["proof (state)\nthis:\n  l'' + Suc k' < l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  l'' + Suc k' < l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>l'' + Suc k' < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' + Suc k' < m'", "by (metis Suc_lessD calculation(2) less_trans_Suc lm')"], ["proof (state)\nthis:\n  l'' + Suc k' < m'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  l'' + Suc k' < m'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "have \\<open>k' < l'' + Suc k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < l'' + Suc k'", "by simp"], ["proof (state)\nthis:\n  k' < l'' + Suc k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> False\n 2. \\<not> ?P \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (l'' + Suc k') = \\<pi> l\n  l'' + Suc k' < l'\n  l'' + Suc k' < m'\n  k' < l'' + Suc k'", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (l'' + Suc k') = \\<pi> l\n  l'' + Suc k' < l'\n  l'' + Suc k' < m'\n  k' < l'' + Suc k'\n\ngoal (1 subgoal):\n 1. False", "using Least_le[of \\<open>?P\\<close> \\<open>l'' + Suc k'\\<close>] l'"], ["proof (prove)\nusing this:\n  \\<pi>' (l'' + Suc k') = \\<pi> l\n  l'' + Suc k' < l'\n  l'' + Suc k' < m'\n  k' < l'' + Suc k'\n  \\<pi>' (l'' + Suc k') = \\<pi> l \\<and>\n  k' < l'' + Suc k' \\<and> l'' + Suc k' < m' \\<Longrightarrow>\n  (LEAST x. \\<pi>' x = \\<pi> l \\<and> k' < x \\<and> x < m')\n  \\<le> l'' + Suc k'\n  l' \\<equiv> LEAST l'. \\<pi>' l' = \\<pi> l \\<and> k' < l' \\<and> l' < m'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "assume a: \\<open>\\<not> l'' \\<le> j' - Suc k'\\<close>"], ["proof (state)\nthis:\n  \\<not> l'' \\<le> j' - Suc k'\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "hence \\<open>\\<not> Suc (k' + l'') \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> l'' \\<le> j' - Suc k'\n\ngoal (1 subgoal):\n 1. \\<not> Suc (k' + l'') \\<le> j'", "by simp"], ["proof (state)\nthis:\n  \\<not> Suc (k' + l'') \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "hence \\<open>\\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  \\<not> Suc (k' + l'') \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l", "using * kj'"], ["proof (prove)\nusing this:\n  \\<not> Suc (k' + l'') \\<le> j'\n  (\\<pi>' @\\<^bsup>j'\\<^esup> \\<pi>\\<^sub>1 \\<guillemotleft> Suc k') l'' =\n  \\<pi> l\n  Suc k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l", "by simp"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "have \\<open>Suc (k' + l'') - j' \\<le> n\\<^sub>1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (k' + l'') - j' \\<le> n\\<^sub>1", "using ** kj'"], ["proof (prove)\nusing this:\n  l'' \\<le> j' - Suc k' + n\\<^sub>1\n  Suc k' \\<le> j'\n\ngoal (1 subgoal):\n 1. Suc (k' + l'') - j' \\<le> n\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  Suc (k' + l'') - j' \\<le> n\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<not> l'' \\<le> j' - Suc k' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\n  Suc (k' + l'') - j' \\<le> n\\<^sub>1", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\n  Suc (k' + l'') - j' \\<le> n\\<^sub>1\n\ngoal (1 subgoal):\n 1. False", "using nl'"], ["proof (prove)\nusing this:\n  \\<pi>\\<^sub>1 (Suc (k' + l'') - j') = \\<pi> l\n  Suc (k' + l'') - j' \\<le> n\\<^sub>1\n  \\<forall>l\\<le>n\\<^sub>1. \\<pi>\\<^sub>1 l \\<noteq> \\<pi>' l'\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<pi>l')"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<in>{k'<..<l'}.\n     \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k'<..<l'}.\n     \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k'<..<l'}.\n     \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<and>\n    (\\<forall>m\\<in>{k'<..<l'}.\n        \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)", "using lcd' path(2)"], ["proof (prove)\nusing this:\n  \\<forall>m\\<in>{k'<..<l'}.\n     \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. is_path \\<pi>' \\<and>\n    l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<and>\n    (\\<forall>m\\<in>{k'<..<l'}.\n        \\<not> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)", "by simp"], ["proof (state)\nthis:\n  l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' l']\\<close>"], ["proof (prove)\nusing this:\n  l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' l']", "by (metis icd_cs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>'\\<^esup> k' @ [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l", "by (metis \\<pi>l' csk icd icd_cs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. l \\<noteq> Suc k \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by metis"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_same_icd: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and converge: \\<open>l < n\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> \nand csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and icd: \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and suc: \\<open>\\<pi> (Suc k) = \\<pi>' (Suc k')\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nret: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "using icd"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   k < l \\<and>\n   \\<pi> l \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<l}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < l \\<and>\n              \\<pi> l \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..l}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "using term_path_stable less_imp_le"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   k < l \\<and>\n   \\<pi> l \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<l}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < l \\<and>\n              \\<pi> l \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..l}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kl: \\<open>k < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l", "using icd"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < l", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  (is_path \\<pi> \\<and>\n   k < l \\<and>\n   \\<pi> l \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..l}. \\<pi> j \\<noteq> ipd (\\<pi> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<l}.\n      \\<not> (is_path \\<pi> \\<and>\n              m < l \\<and>\n              \\<pi> l \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..l}. \\<pi> j \\<noteq> ipd (\\<pi> m))))\n\ngoal (1 subgoal):\n 1. k < l", "by auto"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kn: \\<open>k < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < n", "using converge kl"], ["proof (prove)\nusing this:\n  l < n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  k < l\n\ngoal (1 subgoal):\n 1. k < n", "by simp"], ["proof (state)\nthis:\n  k < n\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "from path_ipd_swap[OF path(1) nret kn]"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>' m.\n      \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n       \\<pi>' m = ipd (\\<pi>' k);\n       \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain \\<rho> m where path\\<rho>: \\<open>is_path \\<rho>\\<close> and \\<pi>\\<rho>: \\<open>\\<pi> =\\<^bsub>n\\<^esub>  \\<rho>\\<close> and km: \\<open>k < m\\<close> and ipd: \\<open>\\<rho> m = ipd (\\<rho> k)\\<close> \\<open>\\<forall> l \\<in> {k..<m}. \\<rho> l \\<noteq> ipd (\\<rho> k)\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>' m.\n      \\<lbrakk>is_path \\<pi>'; \\<pi> =\\<^bsub>n\\<^esub> \\<pi>'; k < m;\n       \\<pi>' m = ipd (\\<pi>' k);\n       \\<forall>l\\<in>{k..<m}. \\<pi>' l \\<noteq> ipd (\\<pi>' k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho> m.\n        \\<lbrakk>is_path \\<rho>; \\<pi> =\\<^bsub>n\\<^esub> \\<rho>; k < m;\n         \\<rho> m = ipd (\\<rho> k);\n         \\<forall>l\\<in>{k..<m}. \\<rho> l \\<noteq> ipd (\\<rho> k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  is_path \\<rho>\n  \\<pi> =\\<^bsub>n\\<^esub> \\<rho>\n  k < m\n  \\<rho> m = ipd (\\<rho> k)\n  \\<forall>l\\<in>{k..<m}. \\<rho> l \\<noteq> ipd (\\<rho> k)\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csk1: \\<open>cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k", "using cs_path_swap_le path path\\<rho> \\<pi>\\<rho> kn"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?n\\<^esub> ?\\<pi>'; ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path \\<rho>\n  \\<pi> =\\<^bsub>n\\<^esub> \\<rho>\n  k < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have suc\\<rho>: \\<open>\\<rho> (Suc k) = \\<pi> (Suc k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> (Suc k) = \\<pi> (Suc k)", "by (metis \\<pi>\\<rho> eq_up_to_def kn less_eq_Suc_le)"], ["proof (state)\nthis:\n  \\<rho> (Suc k) = \\<pi> (Suc k)\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nret': \\<open>\\<pi>' k' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "by (metis csk last_cs nret)"], ["proof (state)\nthis:\n  \\<pi>' k' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have kn': \\<open>k' < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < n'", "using cs_order[OF path csk converge(2) nret kn]"], ["proof (prove)\nusing this:\n  k' < n'\n\ngoal (1 subgoal):\n 1. k' < n'", "."], ["proof (state)\nthis:\n  k' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "from path_ipd_swap[OF path(2) nret' kn']"], ["proof (chain)\npicking this:\n  (\\<And>\\<pi>'' m.\n      \\<lbrakk>is_path \\<pi>''; \\<pi>' =\\<^bsub>n'\\<^esub> \\<pi>''; k' < m;\n       \\<pi>'' m = ipd (\\<pi>'' k');\n       \\<forall>l\\<in>{k'..<m}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain \\<rho>' m' where path\\<rho>': \\<open>is_path \\<rho>'\\<close> and \\<pi>\\<rho>': \\<open>\\<pi>' =\\<^bsub>n'\\<^esub> \\<rho>'\\<close> and km': \\<open>k' < m'\\<close> and ipd': \\<open>\\<rho>' m' = ipd (\\<rho>' k')\\<close> \\<open>\\<forall> l \\<in> {k'..<m'}. \\<rho>' l \\<noteq> ipd (\\<rho>' k')\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>\\<pi>'' m.\n      \\<lbrakk>is_path \\<pi>''; \\<pi>' =\\<^bsub>n'\\<^esub> \\<pi>''; k' < m;\n       \\<pi>'' m = ipd (\\<pi>'' k');\n       \\<forall>l\\<in>{k'..<m}. \\<pi>'' l \\<noteq> ipd (\\<pi>'' k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>' m'.\n        \\<lbrakk>is_path \\<rho>'; \\<pi>' =\\<^bsub>n'\\<^esub> \\<rho>';\n         k' < m'; \\<rho>' m' = ipd (\\<rho>' k');\n         \\<forall>l\\<in>{k'..<m'}.\n            \\<rho>' l \\<noteq> ipd (\\<rho>' k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  is_path \\<rho>'\n  \\<pi>' =\\<^bsub>n'\\<^esub> \\<rho>'\n  k' < m'\n  \\<rho>' m' = ipd (\\<rho>' k')\n  \\<forall>l\\<in>{k'..<m'}. \\<rho>' l \\<noteq> ipd (\\<rho>' k')\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csk1': \\<open>cs\\<^bsup>\\<rho>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> k'", "using cs_path_swap_le path path\\<rho>' \\<pi>\\<rho>' kn'"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?n\\<^esub> ?\\<pi>'; ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path \\<rho>'\n  \\<pi>' =\\<^bsub>n'\\<^esub> \\<rho>'\n  k' < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> k'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have suc\\<rho>': \\<open>\\<rho>' (Suc k') = \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>' (Suc k') = \\<pi>' (Suc k')", "by (metis \\<pi>\\<rho>' eq_up_to_def kn' less_eq_Suc_le)"], ["proof (state)\nthis:\n  \\<rho>' (Suc k') = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have icd\\<rho>: \\<open>l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k", "using icdi_path_swap_le[OF path\\<rho> icd \\<pi>\\<rho>] converge"], ["proof (prove)\nusing this:\n  l \\<le> n \\<Longrightarrow> l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k\n  l < n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k", "by simp"], ["proof (state)\nthis:\n  l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lm: \\<open>l < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < m", "using ipd(1) icd\\<rho> km"], ["proof (prove)\nusing this:\n  \\<rho> m = ipd (\\<rho> k)\n  l icd\\<^bsup>\\<rho>\\<^esup>\\<rightarrow> k\n  k < m\n\ngoal (1 subgoal):\n 1. l < m", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  \\<rho> m = ipd (\\<rho> k)\n  is_path \\<rho> \\<and>\n  (is_path \\<rho> \\<and>\n   k < l \\<and>\n   \\<rho> l \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{k..l}. \\<rho> j \\<noteq> ipd (\\<rho> k))) \\<and>\n  (\\<forall>m\\<in>{k<..<l}.\n      \\<not> (is_path \\<rho> \\<and>\n              m < l \\<and>\n              \\<rho> l \\<noteq> local.return \\<and>\n              (\\<forall>j\\<in>{m..l}. \\<rho> j \\<noteq> ipd (\\<rho> m))))\n  k < m\n\ngoal (1 subgoal):\n 1. l < m", "by auto"], ["proof (state)\nthis:\n  l < m\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csk': \\<open>cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'", "using csk1 csk1' csk"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k\n  cs\\<^bsup>\\<rho>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence kk': \\<open>\\<rho>' k' = \\<rho> k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<rho>' k' = \\<rho> k", "using last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<rho>\\<^esup> k = cs\\<^bsup>\\<rho>'\\<^esup> k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<rho>' k' = \\<rho> k", "by metis"], ["proof (state)\nthis:\n  \\<rho>' k' = \\<rho> k\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have suc': \\<open>\\<rho> (Suc k) = \\<rho>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> (Suc k) = \\<rho>' (Suc k')", "using suc suc\\<rho> suc\\<rho>'"], ["proof (prove)\nusing this:\n  \\<pi> (Suc k) = \\<pi>' (Suc k')\n  \\<rho> (Suc k) = \\<pi> (Suc k)\n  \\<rho>' (Suc k') = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<rho> (Suc k) = \\<rho>' (Suc k')", "by auto"], ["proof (state)\nthis:\n  \\<rho> (Suc k) = \\<rho>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have mm': \\<open>\\<rho>' m' = \\<rho> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho>' m' = \\<rho> m", "using ipd(1) ipd'(1) kk'"], ["proof (prove)\nusing this:\n  \\<rho> m = ipd (\\<rho> k)\n  \\<rho>' m' = ipd (\\<rho>' k')\n  \\<rho>' k' = \\<rho> k\n\ngoal (1 subgoal):\n 1. \\<rho>' m' = \\<rho> m", "by auto"], ["proof (state)\nthis:\n  \\<rho>' m' = \\<rho> m\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "from cs_ipd[OF ipd km] cs_ipd[OF ipd' km',unfolded mm', folded csk']"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<rho>\\<^esup> m =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<rho> m)\n   (cs\\<^bsup>\\<rho>\\<^esup> k) @\n  [\\<rho> m]\n  cs\\<^bsup>\\<rho>'\\<^esup> m' =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<rho> m)\n   (cs\\<^bsup>\\<rho>\\<^esup> k) @\n  [\\<rho> m]", "have csm: \\<open>cs\\<^bsup>\\<rho>\\<^esup> m = cs\\<^bsup>\\<rho>'\\<^esup> m'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<rho>\\<^esup> m =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<rho> m)\n   (cs\\<^bsup>\\<rho>\\<^esup> k) @\n  [\\<rho> m]\n  cs\\<^bsup>\\<rho>'\\<^esup> m' =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<rho> m)\n   (cs\\<^bsup>\\<rho>\\<^esup> k) @\n  [\\<rho> m]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> m = cs\\<^bsup>\\<rho>'\\<^esup> m'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>\\<^esup> m = cs\\<^bsup>\\<rho>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "from converged_ipd_same_icd[OF path\\<rho> path\\<rho>' lm  csm csk' icd\\<rho> suc' ipd'[unfolded kk']]"], ["proof (chain)\npicking this:\n  \\<exists>l'. cs\\<^bsup>\\<rho>\\<^esup> l = cs\\<^bsup>\\<rho>'\\<^esup> l'", "obtain l' where csl: \\<open>cs\\<^bsup>\\<rho>\\<^esup> l = cs\\<^bsup>\\<rho>'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l'. cs\\<^bsup>\\<rho>\\<^esup> l = cs\\<^bsup>\\<rho>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<rho>\\<^esup> l =\n        cs\\<^bsup>\\<rho>'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>\\<^esup> l = cs\\<^bsup>\\<rho>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csl\\<rho>: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<rho>\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<rho>\\<^esup> l", "using \\<pi>\\<rho> converge(1) cs_path_swap_le less_imp_le_nat path(1) path\\<rho>"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>n\\<^esub> \\<rho>\n  l < n\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?n\\<^esub> ?\\<pi>'; ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  is_path \\<pi>\n  is_path \\<rho>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<rho>\\<^esup> l", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<rho>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nretl: \\<open>\\<rho> l \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> l \\<noteq> local.return", "by (metis icd\\<rho> icd_imp_cd ret_no_cd)"], ["proof (state)\nthis:\n  \\<rho> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csn': \\<open>cs\\<^bsup>\\<rho>\\<^esup> n = cs\\<^bsup>\\<rho>'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> n = cs\\<^bsup>\\<rho>'\\<^esup> n'", "using converge(2) cs_path_swap path path\\<rho> path\\<rho>' \\<pi>\\<rho> \\<pi>\\<rho>'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path \\<rho>\n  is_path \\<rho>'\n  \\<pi> =\\<^bsub>n\\<^esub> \\<rho>\n  \\<pi>' =\\<^bsub>n'\\<^esub> \\<rho>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<rho>\\<^esup> n = cs\\<^bsup>\\<rho>'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<rho>\\<^esup> n = cs\\<^bsup>\\<rho>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have ln': \\<open>l' < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < n'", "using cs_order[OF path\\<rho> path\\<rho>' csl csn' nretl converge(1)]"], ["proof (prove)\nusing this:\n  l' < n'\n\ngoal (1 subgoal):\n 1. l' < n'", "."], ["proof (state)\nthis:\n  l' < n'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csl\\<rho>': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<rho>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<rho>'\\<^esup> l'", "using cs_path_swap_le[OF path(2) path\\<rho>' \\<pi>\\<rho>'] ln'"], ["proof (prove)\nusing this:\n  ?k \\<le> n' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> ?k = cs\\<^bsup>\\<rho>'\\<^esup> ?k\n  l' < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<rho>'\\<^esup> l'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<rho>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csl': \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using csl\\<rho> csl\\<rho>' csl"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<rho>\\<^esup> l\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<rho>'\\<^esup> l'\n  cs\\<^bsup>\\<rho>\\<^esup> l = cs\\<^bsup>\\<rho>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cd_is_cs_less: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "obtain xs where csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ xs @[\\<pi> l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        cs\\<^bsup>\\<pi>\\<^esup> l =\n        cs\\<^bsup>\\<pi>\\<^esup> k @ xs @ [\\<pi> l] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using cd_in_cs[OF assms]"], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        cs\\<^bsup>\\<pi>\\<^esup> l =\n        cs\\<^bsup>\\<pi>\\<^esup> k @ xs @ [\\<pi> l] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ xs @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "hence len: \\<open>length(cs\\<^bsup>\\<pi>\\<^esup> k) < length (cs\\<^bsup>\\<pi>\\<^esup> l)\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ xs @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. length (cs\\<^bsup>\\<pi>\\<^esup> k) < length (cs\\<^bsup>\\<pi>\\<^esup> l)", "by auto"], ["proof (state)\nthis:\n  length (cs\\<^bsup>\\<pi>\\<^esup> k) < length (cs\\<^bsup>\\<pi>\\<^esup> l)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "have take: \\<open>take (length (cs\\<^bsup>\\<pi>\\<^esup> k)) (cs\\<^bsup>\\<pi>\\<^esup> l) = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (cs\\<^bsup>\\<pi>\\<^esup> k)) (cs\\<^bsup>\\<pi>\\<^esup> l) =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "using csl"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ xs @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. take (length (cs\\<^bsup>\\<pi>\\<^esup> k)) (cs\\<^bsup>\\<pi>\\<^esup> l) =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  take (length (cs\\<^bsup>\\<pi>\\<^esup> k)) (cs\\<^bsup>\\<pi>\\<^esup> l) =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "using cs_less.intros[OF len take]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k \\<prec> cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_select_id: assumes \\<open>is_path \\<pi>\\<close> \\<open>\\<pi> k \\<noteq> return\\<close> shows \\<open>\\<pi>\\<exclamdown>cs\\<^bsup>\\<pi>\\<^esup> k = k\\<close> (is \\<open>?k = k\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "have *: \\<open>\\<And> i . cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k  \\<Longrightarrow> i = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n       i = k", "using cs_inj[OF assms]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> ?n' \\<Longrightarrow>\n  k = ?n'\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n       i = k", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  ?i1 = k\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?k = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  ?i1 = k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown>\n                             cs\\<^bsup>\\<pi>\\<^esup> k) =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "unfolding cs_select_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  ?i1 = k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE ka.\n                                cs\\<^bsup>\\<pi>\\<^esup> ka =\n                                cs\\<^bsup>\\<pi>\\<^esup> k) =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "using theI[of \\<open>\\<lambda> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> k\\<close> \\<open>k\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  ?i1 = k\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k;\n   \\<And>x.\n      cs\\<^bsup>\\<pi>\\<^esup> x =\n      cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n      x = k\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> (THE x.\n          cs\\<^bsup>\\<pi>\\<^esup> x = cs\\<^bsup>\\<pi>\\<^esup> k) =\n                    cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (THE ka.\n                                cs\\<^bsup>\\<pi>\\<^esup> ka =\n                                cs\\<^bsup>\\<pi>\\<^esup> k) =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "thus \\<open>?k = k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "using *"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n  cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  ?i1 = k\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> k) = k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_single_nocd: assumes \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = [x]\\<close> shows \\<open>\\<forall> k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "have \\<open>\\<not> (\\<exists> k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>k.\n               i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "using assms cs_not_nil"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = [x]\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>k.\n               i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) \\<Longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "hence \\<open>\\<not> (\\<exists> k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>k. i icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<nexists>k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by (metis excd_impl_exicd)"], ["proof (state)\nthis:\n  \\<nexists>k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>k. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by blast"], ["proof (state)\nthis:\n  \\<forall>k. \\<not> i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_single_pd_intermed: assumes \\<open>is_path \\<pi>\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close> \\<open>k \\<le> n\\<close> shows \\<open>\\<pi> n pd\\<rightarrow> \\<pi> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> \\<pi> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> \\<pi> k", "have \\<open>\\<forall> l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l", "by (metis assms(2) cs_single_nocd icd_imp_cd)"], ["proof (state)\nthis:\n  \\<forall>l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> \\<pi> k", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l. \\<not> n icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<pi> n pd\\<rightarrow> \\<pi> k", "by (metis assms(1) assms(3) no_icd_pd)"], ["proof (state)\nthis:\n  \\<pi> n pd\\<rightarrow> \\<pi> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_first_pd:  assumes path: \\<open>is_path \\<pi>\\<close> and pd: \\<open>\\<pi> n pd\\<rightarrow> \\<pi> 0\\<close> and first: \\<open>\\<forall> l < n. \\<pi> l \\<noteq> \\<pi> n\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = [\\<pi> n]", "by (metis cs_cases first first_pd_no_cd icd_imp_cd path pd)"], ["", "lemma converged_pd_cs_single: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and mpdl: \\<open>\\<pi> m pd\\<rightarrow> \\<pi> l\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have *: \\<open>\\<pi> l pd\\<rightarrow> \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi>' 0", "using cs_single_pd_intermed[OF path(1) csl] \\<pi>0[symmetric]"], ["proof (prove)\nusing this:\n  ?k \\<le> l \\<Longrightarrow> \\<pi> l pd\\<rightarrow> \\<pi> ?k\n  \\<pi>' 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<pi> l pd\\<rightarrow> \\<pi>' 0", "by auto"], ["proof (state)\nthis:\n  \\<pi> l pd\\<rightarrow> \\<pi>' 0\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>m: \\<open>\\<pi> m = \\<pi>' m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m = \\<pi>' m'", "by (metis converge(2) last_cs)"], ["proof (state)\nthis:\n  \\<pi> m = \\<pi>' m'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence **: \\<open>\\<pi>' m' pd\\<rightarrow> \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> m = \\<pi>' m'\n\ngoal (1 subgoal):\n 1. \\<pi>' m' pd\\<rightarrow> \\<pi> l", "using mpdl"], ["proof (prove)\nusing this:\n  \\<pi> m = \\<pi>' m'\n  \\<pi> m pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi>' m' pd\\<rightarrow> \\<pi> l", "by metis"], ["proof (state)\nthis:\n  \\<pi>' m' pd\\<rightarrow> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain l' where lm': \\<open>l' \\<le> m'\\<close> and \\<pi>l:  \\<open>\\<pi>' l' = \\<pi> l\\<close> (is \\<open>?P l'\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' \\<le> m'; \\<pi>' l' = \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path_pd_pd0[OF path(2) ** *]"], ["proof (prove)\nusing this:\n  (\\<And>k.\n      \\<lbrakk>k \\<le> m'; \\<pi>' k = \\<pi> l\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' \\<le> m'; \\<pi>' l' = \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  l' \\<le> m'\n  \\<pi>' l' = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "let \\<open>?l\\<close> = \\<open>(LEAST l'. \\<pi>' l' = \\<pi> l)\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>l': \\<open>\\<pi>' ?l = \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l", "using LeastI[of \\<open>?P\\<close>,OF \\<pi>l]"], ["proof (prove)\nusing this:\n  \\<pi>' (LEAST x. \\<pi>' x = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l", "."], ["proof (state)\nthis:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>\\<forall> i <?l. \\<pi>' i \\<noteq> \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l. \\<pi>' i \\<noteq> \\<pi> l", "using Least_le[of \\<open>?P\\<close>]"], ["proof (prove)\nusing this:\n  \\<pi>' ?k = \\<pi> l \\<Longrightarrow>\n  (LEAST x. \\<pi>' x = \\<pi> l) \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l. \\<pi>' i \\<noteq> \\<pi> l", "by (metis not_less)"], ["proof (state)\nthis:\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l. \\<pi>' i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>\\<forall> i <?l. \\<pi>' i \\<noteq> \\<pi>' ?l\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l. \\<pi>' i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n       \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)", "using \\<pi>l'"], ["proof (prove)\nusing this:\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l. \\<pi>' i \\<noteq> \\<pi> l\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n       \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)", "by metis"], ["proof (state)\nthis:\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n     \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n     \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>\\<pi>' ?l pd\\<rightarrow> \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0", "using * \\<pi>l'"], ["proof (prove)\nusing this:\n  \\<pi> l pd\\<rightarrow> \\<pi>' 0\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0", "by metis"], ["proof (state)\nthis:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n     \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> ?l = [\\<pi>' ?l]\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n     \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (LEAST l'. \\<pi>' l' = \\<pi> l) =\n    [\\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)]", "using cs_first_pd[OF path(2)]"], ["proof (prove)\nusing this:\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n  \\<forall>i<LEAST l'. \\<pi>' l' = \\<pi> l.\n     \\<pi>' i \\<noteq> \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) pd\\<rightarrow> \\<pi>' 0\n  \\<lbrakk>\\<pi>' ?n pd\\<rightarrow> \\<pi>' 0;\n   \\<forall>l<?n. \\<pi>' l \\<noteq> \\<pi>' ?n\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>'\\<^esup> ?n = [\\<pi>' ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (LEAST l'. \\<pi>' l' = \\<pi> l) =\n    [\\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)]", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> (LEAST l'. \\<pi>' l' = \\<pi> l) =\n  [\\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)]\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> (LEAST l'. \\<pi>' l' = \\<pi> l) =\n  [\\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)]\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using csl \\<pi>l'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> (LEAST l'. \\<pi>' l' = \\<pi> l) =\n  [\\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l)]\n  cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\n  \\<pi>' (LEAST l'. \\<pi>' l' = \\<pi> l) = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by metis"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_cs_single: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and  converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nand \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\\<close>\nshows \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume *: \\<open>\\<pi> l = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> l = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>\\<pi> m = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> m = local.return", "by (metis converge(1) path(1) term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> m = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = [return]\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> m = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m = [local.return]", "using cs_return"], ["proof (prove)\nusing this:\n  \\<pi> m = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m = [local.return]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = [local.return]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> m' = [return]\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = [local.return]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]", "using converge"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = [local.return]\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [return]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = [local.return]", "using * cs_return"], ["proof (prove)\nusing this:\n  \\<pi> l = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = [local.return]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = [local.return]\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]\n  cs\\<^bsup>\\<pi>\\<^esup> l = [local.return]", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> m' = [local.return]\n  cs\\<^bsup>\\<pi>\\<^esup> l = [local.return]\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by metis"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume nret: \\<open>\\<pi> l \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>m: \\<open>\\<pi> m = \\<pi>' m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m = \\<pi>' m'", "by (metis converge(2) last_cs)"], ["proof (state)\nthis:\n  \\<pi> m = \\<pi>' m'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain \\<pi>\\<^sub>1 n where path1: \\<open>is_path \\<pi>\\<^sub>1\\<close> and upto: \\<open>\\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1\\<close> and \\<pi>n: \\<open>\\<pi>\\<^sub>1 n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1 n.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1;\n         \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1;\n         \\<pi>\\<^sub>1 n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path(1) path_swap_ret"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<lbrakk>is_path ?\\<pi>;\n   \\<And>\\<pi>' n.\n      \\<lbrakk>is_path \\<pi>'; ?\\<pi> =\\<^bsub>?k\\<^esub> \\<pi>';\n       \\<pi>' n = local.return\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1 n.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1;\n         \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1;\n         \\<pi>\\<^sub>1 n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>\\<^sub>1\n  \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1\n  \\<pi>\\<^sub>1 n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain \\<pi>\\<^sub>1' n' where path1': \\<open>is_path \\<pi>\\<^sub>1'\\<close> and upto': \\<open>\\<pi>' =\\<^bsub>m'\\<^esub>  \\<pi>\\<^sub>1'\\<close> and \\<pi>n': \\<open>\\<pi>\\<^sub>1' n' = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1' n'.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1';\n         \\<pi>' =\\<^bsub>m'\\<^esub> \\<pi>\\<^sub>1';\n         \\<pi>\\<^sub>1' n' = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path(2) path_swap_ret"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<lbrakk>is_path ?\\<pi>;\n   \\<And>\\<pi>' n.\n      \\<lbrakk>is_path \\<pi>'; ?\\<pi> =\\<^bsub>?k\\<^esub> \\<pi>';\n       \\<pi>' n = local.return\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>\\<^sub>1' n'.\n        \\<lbrakk>is_path \\<pi>\\<^sub>1';\n         \\<pi>' =\\<^bsub>m'\\<^esub> \\<pi>\\<^sub>1';\n         \\<pi>\\<^sub>1' n' = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_path \\<pi>\\<^sub>1'\n  \\<pi>' =\\<^bsub>m'\\<^esub> \\<pi>\\<^sub>1'\n  \\<pi>\\<^sub>1' n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>1l: \\<open>\\<pi>\\<^sub>1 l = \\<pi> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 l = \\<pi> l", "using upto converge(1)"], ["proof (prove)\nusing this:\n  \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1\n  l < m\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 l = \\<pi> l", "by (metis eq_up_to_def nat_less_le)"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 l = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have cs1l: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> l", "using cs_path_swap_le upto path1 path(1) converge(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?n\\<^esub> ?\\<pi>'; ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1\n  is_path \\<pi>\\<^sub>1\n  is_path \\<pi>\n  l < m\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> l", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csl1: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = [\\<pi>\\<^sub>1 l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = [\\<pi>\\<^sub>1 l]", "by (metis \\<pi>1l cs1l csl)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = [\\<pi>\\<^sub>1 l]\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have converge1: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> n = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> n = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> n'", "using \\<pi>n \\<pi>n' cs_return"], ["proof (prove)\nusing this:\n  \\<pi>\\<^sub>1 n = local.return\n  \\<pi>\\<^sub>1' n' = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> n = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> n = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have ln: \\<open>l < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < n", "using nret \\<pi>n \\<pi>1l term_path_stable[OF path1 \\<pi>n]"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> local.return\n  \\<pi>\\<^sub>1 n = local.return\n  \\<pi>\\<^sub>1 l = \\<pi> l\n  n \\<le> ?j \\<Longrightarrow> \\<pi>\\<^sub>1 ?j = local.return\n\ngoal (1 subgoal):\n 1. l < n", "by (auto, metis linorder_neqE_nat less_imp_le)"], ["proof (state)\nthis:\n  l < n\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>01: \\<open>\\<pi>\\<^sub>1 0 = \\<pi>\\<^sub>1' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 0 = \\<pi>\\<^sub>1' 0", "using \\<pi>0 eq_up_to_apply[OF upto] eq_up_to_apply[OF upto']"], ["proof (prove)\nusing this:\n  \\<pi> 0 = \\<pi>' 0\n  ?j \\<le> m \\<Longrightarrow> \\<pi> ?j = \\<pi>\\<^sub>1 ?j\n  ?j \\<le> m' \\<Longrightarrow> \\<pi>' ?j = \\<pi>\\<^sub>1' ?j\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 0 = \\<pi>\\<^sub>1' 0", "by auto"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 0 = \\<pi>\\<^sub>1' 0\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have pd: \\<open>\\<pi>\\<^sub>1 n pd\\<rightarrow> \\<pi>\\<^sub>1 l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 n pd\\<rightarrow> \\<pi>\\<^sub>1 l", "using \\<pi>n"], ["proof (prove)\nusing this:\n  \\<pi>\\<^sub>1 n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 n pd\\<rightarrow> \\<pi>\\<^sub>1 l", "by (metis path1 path_nodes return_pd)"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 n pd\\<rightarrow> \\<pi>\\<^sub>1 l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain l' where csl: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l =\n        cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using converged_pd_cs_single[OF path1 path1' ln converge1 \\<pi>01 pd csl1]"], ["proof (prove)\nusing this:\n  \\<exists>l'.\n     cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l =\n        cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have cs1m: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> m", "using cs_path_swap upto path1 path(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  \\<pi> =\\<^bsub>m\\<^esub> \\<pi>\\<^sub>1\n  is_path \\<pi>\\<^sub>1\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> m", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> m\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have cs1m': \\<open>cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'", "using cs_path_swap upto' path1' path(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  \\<pi>' =\\<^bsub>m'\\<^esub> \\<pi>\\<^sub>1'\n  is_path \\<pi>\\<^sub>1'\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence converge1: \\<open>cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m'", "using converge(2) cs1m"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m' = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^esup> m\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> m = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have nret1: \\<open>\\<pi>\\<^sub>1 l \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 l \\<noteq> local.return", "using nret \\<pi>1l"], ["proof (prove)\nusing this:\n  \\<pi> l \\<noteq> local.return\n  \\<pi>\\<^sub>1 l = \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi>\\<^sub>1 l \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>\\<^sub>1 l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have lm': \\<open>l' < m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < m'", "using cs_order[OF path1 path1' csl converge1 nret1 converge(1)]"], ["proof (prove)\nusing this:\n  l' < m'\n\ngoal (1 subgoal):\n 1. l' < m'", "."], ["proof (state)\nthis:\n  l' < m'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'", "using cs_path_swap_le[OF path(2) path1' upto'] lm'"], ["proof (prove)\nusing this:\n  ?k \\<le> m' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> ?k = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> ?k\n  l' < m'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l", "using cs_path_swap_le[OF path(1) path1 upto] converge(1)"], ["proof (prove)\nusing this:\n  ?k \\<le> m \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> ?k = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> ?k\n  l < m\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using csl"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l\n  cs\\<^bsup>\\<pi>\\<^sub>1\\<^esup> l = cs\\<^bsup>\\<pi>\\<^sub>1'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_cd_same_suc: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand cd_suc: \\<open>\\<forall> k k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow> \\<pi> (Suc k) = \\<pi>' (Suc k')\\<close> and converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nshows  \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using path init cd_suc converge"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof (induction \\<open>\\<pi>\\<close> \\<open>l\\<close> rule: cs_induct,cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "case (cs \\<pi> l)"], ["proof (state)\nthis:\n  \\<lbrakk>Ex (is_icdi l \\<pi>); is_path \\<pi>; is_path \\<pi>';\n   \\<pi> 0 = \\<pi>' 0;\n   \\<forall>k k'.\n      cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n      The (is_icdi l\n            \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n      \\<pi> (Suc k) = \\<pi>' (Suc k');\n   The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume *: \\<open>\\<exists>k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  \\<exists>k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "let \\<open>?k\\<close> = \\<open>THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "have icd: \\<open>l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n          l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis \"*\" icd_is_the_icd)"], ["proof (state)\nthis:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n        l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence lcdk: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k\\<close>"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n        l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n         l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)", "by (metis is_icdi_def)"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n       l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence kl: \\<open>?k<l\\<close>"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n       l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n\ngoal (1 subgoal):\n 1. (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l", "using is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n       l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l", "by metis"], ["proof (state)\nthis:\n  (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>\\<And> j. ?k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       (THE k.\n           l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using icd cd_trans is_icdi_def"], ["proof (prove)\nusing this:\n  l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n        l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n  (?n icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n') =\n  (is_path ?\\<pi> \\<and>\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?n' \\<and>\n   (\\<forall>m\\<in>{?n'<..<?n}.\n       \\<not> ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> m))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       (THE k.\n           l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow>\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by fast"], ["proof (state)\nthis:\n  (THE k.\n      l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence suc': \\<open>\\<forall> j j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j' \\<and> ?k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> \\<pi> (Suc j) = \\<pi>' (Suc j')\\<close>"], ["proof (prove)\nusing this:\n  (THE k.\n      l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1\n\ngoal (1 subgoal):\n 1. \\<forall>j j'.\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j' \\<and>\n       (THE k.\n           l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n       \\<pi> (Suc j) = \\<pi>' (Suc j')", "using cs.prems(4)"], ["proof (prove)\nusing this:\n  (THE k.\n      l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1 \\<Longrightarrow>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?j1\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<forall>j j'.\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j' \\<and>\n       (THE k.\n           l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n       \\<pi> (Suc j) = \\<pi>' (Suc j')", "by blast"], ["proof (state)\nthis:\n  \\<forall>j j'.\n     cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j' \\<and>\n     (THE k.\n         l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     \\<pi> (Suc j) = \\<pi>' (Suc j')\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "from cs.IH[OF * cs(2) path(2) cs(4) suc'] cs.prems kl"], ["proof (chain)\npicking this:\n  \\<lbrakk>The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l", "have \\<open>\\<exists>k'. cs\\<^bsup>\\<pi>\\<^esup> (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l\n\ngoal (1 subgoal):\n 1. \\<exists>k'.\n       cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                                   l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n       cs\\<^bsup>\\<pi>'\\<^esup> k'", "by (metis Suc_lessD less_trans_Suc)"], ["proof (state)\nthis:\n  \\<exists>k'.\n     cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                                 l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n     cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "then"], ["proof (chain)\npicking this:\n  \\<exists>k'.\n     cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                                 l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n     cs\\<^bsup>\\<pi>'\\<^esup> k'", "obtain k' where csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k'.\n     cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                                 l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n     cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                                    l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n        cs\\<^bsup>\\<pi>'\\<^esup> k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                              l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "have suc2: \\<open>\\<pi> (Suc ?k) = \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)) =\n    \\<pi>' (Suc k')", "using cs.prems(4) lcdk csk"], ["proof (prove)\nusing this:\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (THE k.\n       l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\n  cs\\<^bsup>\\<pi>\\<^esup> (THE k.\n                              l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) =\n  cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)) =\n    \\<pi>' (Suc k')", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)) =\n  \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "have km: \\<open>?k < m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < m", "using kl cs.prems(5)"], ["proof (prove)\nusing this:\n  (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < l\n  l < m\n\ngoal (1 subgoal):\n 1. (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < m", "by simp"], ["proof (state)\nthis:\n  (THE k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k) < m\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<not> ?P7 \\<pi>'' n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "from converged_same_icd[OF cs(2) path(2) cs.prems(5) cs.prems(6) csk icd suc2]"], ["proof (chain)\npicking this:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "."], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<nexists>k. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<nexists>k. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "case (cs \\<pi> l)"], ["proof (state)\nthis:\n  \\<lbrakk>Ex (is_icdi l \\<pi>); is_path \\<pi>; is_path \\<pi>';\n   \\<pi> 0 = \\<pi>' 0;\n   \\<forall>k k'.\n      cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n      The (is_icdi l\n            \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n      \\<pi> (Suc k) = \\<pi>' (Suc k');\n   The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<nexists>k. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume \\<open>\\<not> (\\<exists>k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<nexists>k. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>k. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>'' n.\n       \\<lbrakk>\\<lbrakk>Ex (is_icdi n \\<pi>''); is_path \\<pi>'';\n                 is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n                 \\<forall>k k'.\n                    cs\\<^bsup>\\<pi>''\\<^esup> k =\n                    cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n                    The (is_icdi n\n                          \\<pi>'') cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n                    \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n                 The (is_icdi n \\<pi>'') < m;\n                 cs\\<^bsup>\\<pi>''\\<^esup> m =\n                 cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l'.\n                                     cs\\<^bsup>\\<pi>''\\<^esup> The\n                          (is_icdi n \\<pi>'') =\n                                     cs\\<^bsup>\\<pi>'\\<^esup> l';\n        is_path \\<pi>''; is_path \\<pi>'; \\<pi>'' 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>''\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           n cd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi>'' (Suc k) = \\<pi>' (Suc k');\n        n < m; cs\\<^bsup>\\<pi>''\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        is_path \\<pi>; is_path \\<pi>'; \\<pi> 0 = \\<pi>' 0;\n        \\<forall>k k'.\n           cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n           l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n           \\<pi> (Suc k) = \\<pi>' (Suc k');\n        l < m; cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        \\<nexists>k. n icd\\<^bsup>\\<pi>''\\<^esup>\\<rightarrow> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l'.\n                            cs\\<^bsup>\\<pi>''\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> l'", "with cs converged_cs_single"], ["proof (chain)\npicking this:\n  \\<lbrakk>Ex (is_icdi l \\<pi>); is_path \\<pi>; is_path \\<pi>';\n   \\<pi> 0 = \\<pi>' 0;\n   \\<forall>k k'.\n      cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n      The (is_icdi l\n            \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n      \\<pi> (Suc k) = \\<pi>' (Suc k');\n   The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?l < ?m;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?m = cs\\<^bsup>?\\<pi>'\\<^esup> ?m';\n   ?\\<pi> 0 = ?\\<pi>' 0; cs\\<^bsup>?\\<pi>\\<^esup> ?l = [?\\<pi> ?l]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>?\\<pi>\\<^esup> ?l =\n                       cs\\<^bsup>?\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>Ex (is_icdi l \\<pi>); is_path \\<pi>; is_path \\<pi>';\n   \\<pi> 0 = \\<pi>' 0;\n   \\<forall>k k'.\n      cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n      The (is_icdi l\n            \\<pi>) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n      \\<pi> (Suc k) = \\<pi>' (Suc k');\n   The (is_icdi l \\<pi>) < m;\n   cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>\\<pi>\\<^esup> The (is_icdi l \\<pi>) =\n                       cs\\<^bsup>\\<pi>'\\<^esup> l'\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?l < ?m;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?m = cs\\<^bsup>?\\<pi>'\\<^esup> ?m';\n   ?\\<pi> 0 = ?\\<pi>' 0; cs\\<^bsup>?\\<pi>\\<^esup> ?l = [?\\<pi> ?l]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>?\\<pi>\\<^esup> ?l =\n                       cs\\<^bsup>?\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = [\\<pi> l]\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by metis"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_cd_diverge: \nassumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and notin: \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and converge: \\<open>l < m\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close> \nobtains k k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms converged_cd_same_suc"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<pi> 0 = \\<pi>' 0\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> 0 = ?\\<pi>' 0;\n   \\<forall>k k'.\n      cs\\<^bsup>?\\<pi>\\<^esup> k = cs\\<^bsup>?\\<pi>'\\<^esup> k' \\<and>\n      ?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n      ?\\<pi> (Suc k) = ?\\<pi>' (Suc k');\n   ?l < ?m;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?m = cs\\<^bsup>?\\<pi>'\\<^esup> ?m'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>l'.\n                       cs\\<^bsup>?\\<pi>\\<^esup> ?l =\n                       cs\\<^bsup>?\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma converged_cd_same_suc_return: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand cd_suc: \\<open>\\<forall> k k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow> \\<pi> (Suc k) = \\<pi>' (Suc k')\\<close> and ret: \\<open>\\<pi>' n' = return\\<close> \nshows  \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume \\<open>\\<pi> l = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> l = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> n'", "using ret cs_return"], ["proof (prove)\nusing this:\n  \\<pi> l = local.return\n  \\<pi>' n' = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> n'", "by presburger"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by blast"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "assume nretl: \\<open>\\<pi> l \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>\\<pi> l \\<in> nodes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<in> local.nodes", "using path path_nodes"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<in> local.nodes", "by auto"], ["proof (state)\nthis:\n  \\<pi> l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "then"], ["proof (chain)\npicking this:\n  \\<pi> l \\<in> local.nodes", "obtain \\<pi>l n where ipl: \\<open>is_path \\<pi>l\\<close> and \\<pi>l:  \\<open>\\<pi> l = \\<pi>l 0\\<close> and retn: \\<open>\\<pi>l n = return\\<close> and notl: \\<open>\\<forall> i>0. \\<pi>l i \\<noteq> \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> l \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>l n.\n        \\<lbrakk>is_path \\<pi>l; \\<pi> l = \\<pi>l 0;\n         \\<pi>l n = local.return;\n         \\<forall>i>0. \\<pi>l i \\<noteq> \\<pi> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis direct_path_return nretl)"], ["proof (state)\nthis:\n  is_path \\<pi>l\n  \\<pi> l = \\<pi>l 0\n  \\<pi>l n = local.return\n  \\<forall>i>0. \\<pi>l i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence ip: \\<open>is_path (\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l)\\<close> and l: \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l) l = \\<pi> l\\<close> and retl: \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l) (l + n) = return\\<close> and nl: \\<open>\\<forall> i>l. (\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l) i \\<noteq> \\<pi> l\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>l\n  \\<pi> l = \\<pi>l 0\n  \\<pi>l n = local.return\n  \\<forall>i>0. \\<pi>l i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. (is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) &&&\n     (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) l = \\<pi> l) &&&\n    (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (l + n) = local.return &&&\n    \\<forall>i>l. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) i \\<noteq> \\<pi> l", "using path_cons[OF path(1) ipl \\<pi>l]"], ["proof (prove)\nusing this:\n  is_path \\<pi>l\n  \\<pi> l = \\<pi>l 0\n  \\<pi>l n = local.return\n  \\<forall>i>0. \\<pi>l i \\<noteq> \\<pi> l\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l)\n\ngoal (1 subgoal):\n 1. (is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) &&&\n     (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) l = \\<pi> l) &&&\n    (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (l + n) = local.return &&&\n    \\<forall>i>l. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) i \\<noteq> \\<pi> l", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l)\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) l = \\<pi> l\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (l + n) = local.return\n  \\<forall>i>l. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) i \\<noteq> \\<pi> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<pi>0': \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l) 0 = \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "unfolding cs_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "using  \\<pi>l \\<pi>0"], ["proof (prove)\nusing this:\n  \\<pi> l = \\<pi>l 0\n  \\<pi> 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csn: \\<open>cs\\<^bsup>\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  (l+n) = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> (l + n) =\n    cs\\<^bsup>\\<pi>'\\<^esup> n'", "using ret retl cs_return"], ["proof (prove)\nusing this:\n  \\<pi>' n' = local.return\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (l + n) = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> (l + n) =\n    cs\\<^bsup>\\<pi>'\\<^esup> n'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> (l + n) =\n  cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have eql: \\<open>(\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>", "by (metis path_append_eq_up_to)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have csl': \\<open>cs\\<^bsup>\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  l = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n    cs\\<^bsup>\\<pi>\\<^esup> l", "using eql cs_path_swap ip path(1)"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  is_path (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n    cs\\<^bsup>\\<pi>\\<^esup> l", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>0 < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using nretl[unfolded \\<pi>l] retn"], ["proof (prove)\nusing this:\n  \\<pi>l 0 \\<noteq> local.return\n  \\<pi>l n = local.return\n\ngoal (1 subgoal):\n 1. 0 < n", "by (metis neq0_conv)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "hence ln: \\<open>l < l + n\\<close>"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. l < l + n", "by simp"], ["proof (state)\nthis:\n  l < l + n\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have *: \\<open>\\<forall> k k'. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<longrightarrow> (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "proof (rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "fix k k'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "assume *: \\<open>cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "hence kl: \\<open>k < l\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < l", "using is_cdi_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. k < l", "by auto"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n    l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "using eql * cs_path_swap_le[OF ip path(1) eql,of \\<open>k\\<close>] cdi_path_swap_le[OF path(1) _ eql,of \\<open>l\\<close> \\<open>k\\<close>]"], ["proof (prove)\nusing this:\n  k < l\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k\n  k \\<le> l \\<Longrightarrow>\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<lbrakk>l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k;\n   l \\<le> l\\<rbrakk>\n  \\<Longrightarrow> l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n    l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "hence \\<open>\\<pi> (Suc k) = \\<pi>' (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc k) = \\<pi>' (Suc k')", "using cd_suc"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc k) = \\<pi>' (Suc k')", "by blast"], ["proof (state)\nthis:\n  \\<pi> (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<And>k k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n       l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n       (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "then"], ["proof (chain)\npicking this:\n  \\<pi> (Suc k) = \\<pi>' (Suc k')", "show \\<open>(\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "using cs_path_swap_le[OF ip path(1) eql,of \\<open>Suc k\\<close>] kl"], ["proof (prove)\nusing this:\n  \\<pi> (Suc k) = \\<pi>' (Suc k')\n  Suc k \\<le> l \\<Longrightarrow>\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> Suc k =\n  cs\\<^bsup>\\<pi>\\<^esup> Suc k\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> k =\n     cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) (Suc k) = \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain l' where \\<open>cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n        cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_same_suc[OF ip path(2) \\<pi>0' * ln csn]"], ["proof (prove)\nusing this:\n  \\<exists>l'.\n     cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n     cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n        cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "have \\<open>cs\\<^bsup>\\<pi>@\\<^bsup>l\\<^esup> \\<pi>l\\<^esup>  l = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n    cs\\<^bsup>\\<pi>\\<^esup> l", "using eql"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l) =\\<^bsub>l\\<^esub> \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n    cs\\<^bsup>\\<pi>\\<^esup> l", "by (metis cs_path_swap ip path(1))"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>\\<^esup> l", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi> @\\<^bsup>l\\<^esup> \\<pi>l\\<^esup> l =\n  cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by metis"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_cd_diverge_return: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and init: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand notin: \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and ret: \\<open>\\<pi>' m' = return\\<close> \nobtains k k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_same_suc_return[OF path init _ ret, of \\<open>l\\<close>] notin"], ["proof (prove)\nusing this:\n  \\<forall>k k'.\n     cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k' \\<and>\n     l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k \\<longrightarrow>\n     \\<pi> (Suc k) = \\<pi>' (Suc k') \\<Longrightarrow>\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma returned_missing_cd_or_loop: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> \nand notin': \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close> and nret: \\<open>\\<forall> n'. \\<pi>' n' \\<noteq> return\\<close> and ret: \\<open>\\<pi> n = return\\<close> \nobtains i i' where \\<open>i<k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'> i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain f where icdf: \\<open>\\<forall> i'. f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i'\\<close> and ran: \\<open>range f = {i'. \\<forall> j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'}\\<close> and icdf0: \\<open>\\<not> (\\<exists>i'. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i'.\n                    f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i';\n         range f =\n         {i'. \\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'};\n         \\<nexists>i'. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path(2) path_nret_inf_icd_seq nret"], ["proof (prove)\nusing this:\n  is_path \\<pi>'\n  \\<lbrakk>is_path ?\\<pi>; \\<forall>i. ?\\<pi> i \\<noteq> local.return;\n   \\<And>f.\n      \\<lbrakk>\\<forall>i.\n                  f (Suc i) icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> f i;\n       range f =\n       {i. \\<forall>j>i. j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i};\n       \\<nexists>i. f 0 cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<forall>n'. \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<forall>i'.\n                    f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i';\n         range f =\n         {i'. \\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'};\n         \\<nexists>i'. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>i'. f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i'\n  range f =\n  {i'. \\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'}\n  \\<nexists>i'. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "assume \\<open>\\<exists> j. \\<not> (\\<exists> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> (f j))\\<close>"], ["proof (state)\nthis:\n  \\<exists>j.\n     \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>j.\n     \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j", "obtain j where ni\\<pi>: \\<open>\\<not> (\\<exists> i. cs\\<^bsup>\\<pi>'\\<^esup> (f j) = cs\\<^bsup>\\<pi>\\<^esup> i)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>j.\n     \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<nexists>i.\n           cs\\<^bsup>\\<pi>'\\<^esup> f j =\n           cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<nexists>i. cs\\<^bsup>\\<pi>'\\<^esup> f j = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "note converged_cd_diverge_return[OF path(2,1) \\<pi>0[symmetric] ni\\<pi> ret] that"], ["proof (state)\nthis:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis", "obtain i k' where csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and cdj: \\<open>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close> and div:  \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k';\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "have \\<open>k' \\<in> range f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<in> range f", "using cdj"], ["proof (prove)\nusing this:\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "proof (induction \\<open>j\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f\n 2. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "case 0"], ["proof (state)\nthis:\n  f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f\n 2. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "using icdf0"], ["proof (prove)\nusing this:\n  f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<nexists>i'. f 0 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "by blast"], ["proof (state)\nthis:\n  k' \\<in> range f\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "case (Suc j)"], ["proof (state)\nthis:\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n  k' \\<in> range f\n  f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "have icdfj: \\<open>f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f j", "using icdf"], ["proof (prove)\nusing this:\n  \\<forall>i'. f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i'\n\ngoal (1 subgoal):\n 1. f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f j", "by auto"], ["proof (state)\nthis:\n  f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n                k' \\<in> range f;\n        f (Suc j) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<rbrakk>\n       \\<Longrightarrow> k' \\<in> range f", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<in> range f", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> k' \\<in> range f\n 2. \\<not> ?P \\<Longrightarrow> k' \\<in> range f", "assume \\<open>f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (state)\nthis:\n  f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> k' \\<in> range f\n 2. \\<not> ?P \\<Longrightarrow> k' \\<in> range f", "hence \\<open>k' = f j\\<close>"], ["proof (prove)\nusing this:\n  f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' = f j", "using icdfj"], ["proof (prove)\nusing this:\n  f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f j\n\ngoal (1 subgoal):\n 1. k' = f j", "by (metis icd_uniq)"], ["proof (state)\nthis:\n  k' = f j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> k' \\<in> range f\n 2. \\<not> ?P \\<Longrightarrow> k' \\<in> range f", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  k' = f j\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "by auto"], ["proof (state)\nthis:\n  k' \\<in> range f\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f", "assume \\<open>\\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (state)\nthis:\n  \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f", "hence \\<open>f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "using cd_impl_icd_cd[OF Suc.prems icdfj]"], ["proof (prove)\nusing this:\n  \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "by auto"], ["proof (state)\nthis:\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<not> f (Suc j) icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    k' \\<in> range f", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "using Suc.IH"], ["proof (prove)\nusing this:\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  f j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n  k' \\<in> range f\n\ngoal (1 subgoal):\n 1. k' \\<in> range f", "by auto"], ["proof (state)\nthis:\n  k' \\<in> range f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k' \\<in> range f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k' \\<in> range f\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "hence alldep: \\<open>\\<forall> i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\nusing this:\n  k' \\<in> range f\n\ngoal (1 subgoal):\n 1. \\<forall>i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "using ran"], ["proof (prove)\nusing this:\n  k' \\<in> range f\n  range f =\n  {i'. \\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'}\n\ngoal (1 subgoal):\n 1. \\<forall>i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "by auto"], ["proof (state)\nthis:\n  \\<forall>i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "assume \\<open>i < k\\<close>"], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> thesis\n 2. \\<not> ?P \\<Longrightarrow> thesis", "with alldep that[OF _ csk div]"], ["proof (chain)\npicking this:\n  \\<forall>i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<lbrakk>i < k;\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n   (\\<forall>j'>k'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k')\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i < k", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i'>k'. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n  \\<lbrakk>i < k;\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n   (\\<forall>j'>k'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k')\\<rbrakk>\n  \\<Longrightarrow> thesis\n  i < k\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "assume \\<open>\\<not> i < k\\<close>"], ["proof (state)\nthis:\n  \\<not> i < k\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "hence ki: \\<open>k\\<le>i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < k\n\ngoal (1 subgoal):\n 1. k \\<le> i", "by auto"], ["proof (state)\nthis:\n  k \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "have \\<open>k \\<noteq> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> i", "using notin' csk"], ["proof (prove)\nusing this:\n  \\<nexists>k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. k \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  k \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "hence ki': \\<open>k<i\\<close>"], ["proof (prove)\nusing this:\n  k \\<noteq> i\n\ngoal (1 subgoal):\n 1. k < i", "using ki"], ["proof (prove)\nusing this:\n  k \\<noteq> i\n  k \\<le> i\n\ngoal (1 subgoal):\n 1. k < i", "by auto"], ["proof (state)\nthis:\n  k < i\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "obtain ka k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\\<close> \\<open>\\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ka k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n         \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge[OF path \\<pi>0 notin' ki' csk]"], ["proof (prove)\nusing this:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n       \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>ka k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n         \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "hence \\<open>ka < k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  is_path \\<pi> \\<and>\n  ka < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{ka..k}. \\<pi> j \\<noteq> ipd (\\<pi> ka))\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "by auto"], ["proof (state)\nthis:\n  ka < k\n\ngoal (1 subgoal):\n 1. \\<not> i < k \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "assume \\<open>\\<not>(\\<exists> j. \\<not> (\\<exists> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> (f j)))\\<close>"], ["proof (state)\nthis:\n  \\<nexists>j.\n     \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "hence allin: \\<open>\\<forall> j. (\\<exists> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> (f j))\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j.\n     \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j", "by blast"], ["proof (state)\nthis:\n  \\<forall>j.\n     \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "define f' where f': \\<open>f' \\<equiv> \\<lambda> j. (SOME i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> (f j))\\<close>"], ["proof (state)\nthis:\n  f' \\<equiv>\n  \\<lambda>j.\n     SOME i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "have \\<open>\\<forall> i. f' i < f' (Suc i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. f' i < f' (Suc i)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "have csi: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (f i) = cs\\<^bsup>\\<pi>\\<^esup> (f' i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f i = cs\\<^bsup>\\<pi>\\<^esup> f' i", "unfolding f'"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f i =\n    cs\\<^bsup>\\<pi>\\<^esup> (SOME ia.\n                                cs\\<^bsup>\\<pi>\\<^esup> ia =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f i)", "using allin"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f i =\n    cs\\<^bsup>\\<pi>\\<^esup> (SOME ia.\n                                cs\\<^bsup>\\<pi>\\<^esup> ia =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f i)", "by (metis (mono_tags) someI_ex)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> f i = cs\\<^bsup>\\<pi>\\<^esup> f' i\n\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "have cssuci: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (f (Suc i)) = cs\\<^bsup>\\<pi>\\<^esup> (f' (Suc i))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i) = cs\\<^bsup>\\<pi>\\<^esup> f' (Suc i)", "unfolding f'"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i) =\n    cs\\<^bsup>\\<pi>\\<^esup> (SOME ia.\n                                cs\\<^bsup>\\<pi>\\<^esup> ia =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i))", "using allin"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i) =\n    cs\\<^bsup>\\<pi>\\<^esup> (SOME ia.\n                                cs\\<^bsup>\\<pi>\\<^esup> ia =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i))", "by (metis (mono_tags) someI_ex)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> f (Suc i) = cs\\<^bsup>\\<pi>\\<^esup> f' (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "have fi: \\<open>f i < f (Suc i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f i < f (Suc i)", "using icdf"], ["proof (prove)\nusing this:\n  \\<forall>i'. f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i'\n\ngoal (1 subgoal):\n 1. f i < f (Suc i)", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  \\<forall>i'.\n     is_path \\<pi>' \\<and>\n     (is_path \\<pi>' \\<and>\n      f i' < f (Suc i') \\<and>\n      \\<pi>' (f (Suc i')) \\<noteq> local.return \\<and>\n      (\\<forall>j\\<in>{f i'..f (Suc i')}.\n          \\<pi>' j \\<noteq> ipd (\\<pi>' (f i')))) \\<and>\n     (\\<forall>m\\<in>{f i'<..<f (Suc i')}.\n         \\<not> (is_path \\<pi>' \\<and>\n                 m < f (Suc i') \\<and>\n                 \\<pi>' (f (Suc i')) \\<noteq> local.return \\<and>\n                 (\\<forall>j\\<in>{m..f (Suc i')}.\n                     \\<pi>' j \\<noteq> ipd (\\<pi>' m))))\n\ngoal (1 subgoal):\n 1. f i < f (Suc i)", "by auto"], ["proof (state)\nthis:\n  f i < f (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "have \\<open>f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i", "using icdf"], ["proof (prove)\nusing this:\n  \\<forall>i'. f (Suc i') icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i'\n\ngoal (1 subgoal):\n 1. f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i", "unfolding is_icdi_def"], ["proof (prove)\nusing this:\n  \\<forall>i'.\n     is_path \\<pi>' \\<and>\n     f (Suc i') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i' \\<and>\n     (\\<forall>m\\<in>{f i'<..<f (Suc i')}.\n         \\<not> f (Suc i') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m)\n\ngoal (1 subgoal):\n 1. f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i", "by blast"], ["proof (state)\nthis:\n  f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "hence nreti: \\<open>\\<pi>' (f i) \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  f (Suc i) cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> f i\n\ngoal (1 subgoal):\n 1. \\<pi>' (f i) \\<noteq> local.return", "by (metis cd_not_ret)"], ["proof (state)\nthis:\n  \\<pi>' (f i) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>i. f' i < f' (Suc i)", "show \\<open>f' i < f' (Suc i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f' i < f' (Suc i)", "using cs_order[OF path(2,1) csi cssuci nreti fi]"], ["proof (prove)\nusing this:\n  f' i < f' (Suc i)\n\ngoal (1 subgoal):\n 1. f' i < f' (Suc i)", "."], ["proof (state)\nthis:\n  f' i < f' (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i. f' i < f' (Suc i)\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "hence kle: \\<open>k < f' (Suc k)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. f' i < f' (Suc i)\n\ngoal (1 subgoal):\n 1. k < f' (Suc k)", "using mono_ge_id[of \\<open>f'\\<close> \\<open>Suc k\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>i. f' i < f' (Suc i)\n  \\<forall>i. f' i < f' (Suc i) \\<Longrightarrow> Suc k \\<le> f' (Suc k)\n\ngoal (1 subgoal):\n 1. k < f' (Suc k)", "by auto"], ["proof (state)\nthis:\n  k < f' (Suc k)\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "have cssk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> (f' (Suc k)) = cs\\<^bsup>\\<pi>'\\<^esup> (f (Suc k))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> f' (Suc k) = cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)", "unfolding f'"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (SOME i.\n                                cs\\<^bsup>\\<pi>\\<^esup> i =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)) =\n    cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)", "using allin"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> f j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (SOME i.\n                                cs\\<^bsup>\\<pi>\\<^esup> i =\n                                cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)) =\n    cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)", "by (metis (mono_tags) someI_ex)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> f' (Suc k) = cs\\<^bsup>\\<pi>'\\<^esup> f (Suc k)\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "obtain ka k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\\<close> \\<open>\\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ka k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n         \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge[OF path \\<pi>0 notin' kle cssk]"], ["proof (prove)\nusing this:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n       \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>ka k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n         \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "hence \\<open>ka < k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  is_path \\<pi> \\<and>\n  ka < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{ka..k}. \\<pi> j \\<noteq> ipd (\\<pi> ka))\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "by auto"], ["proof (state)\nthis:\n  ka < k\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       \\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i =\n          cs\\<^bsup>\\<pi>'\\<^esup> f j \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma missing_cd_or_loop: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close> and notin': \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close>  \nobtains i i' where \\<open>i < k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'> i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>\\<exists> n'. \\<pi>' n' = return\\<close>"], ["proof (state)\nthis:\n  \\<exists>n'. \\<pi>' n' = local.return\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>n'. \\<pi>' n' = local.return", "obtain n' where retn: \\<open>\\<pi>' n' = return\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n'. \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<pi>' n' = local.return \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<pi>' n' = local.return\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "note converged_cd_diverge_return[OF path \\<pi>0 notin' retn]"], ["proof (state)\nthis:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n       \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n       \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain ka k' where \\<open>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\\<close> \\<open>\\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n       \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>ka k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka;\n         \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>ka < k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  is_path \\<pi> \\<and>\n  ka < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{ka..k}. \\<pi> j \\<noteq> ipd (\\<pi> ka))\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. ka < k", "by auto"], ["proof (state)\nthis:\n  ka < k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> ka = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ka\n  \\<pi> (Suc ka) \\<noteq> \\<pi>' (Suc k')\n  ka < k\n  \\<lbrakk>?i1 < k;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc ?i1) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i1 \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>\\<not> (\\<exists> n'. \\<pi>' n' = return)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>n'. \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence notret: \\<open>\\<forall> n'. \\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>n'. \\<pi>' n' = local.return\n\ngoal (1 subgoal):\n 1. \\<forall>n'. \\<pi>' n' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'. \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<forall>n'. \\<pi>' n' \\<noteq> local.return", "obtain \\<pi>l n where ipl: \\<open>is_path \\<pi>l\\<close> and \\<pi>l:  \\<open>\\<pi> k = \\<pi>l 0\\<close> and retn: \\<open>\\<pi>l n = return\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n'. \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>l n.\n        \\<lbrakk>is_path \\<pi>l; \\<pi> k = \\<pi>l 0;\n         \\<pi>l n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reaching_ret path(1) path_nodes"], ["proof (prove)\nusing this:\n  \\<forall>n'. \\<pi>' n' \\<noteq> local.return\n  ?x \\<in> local.nodes \\<Longrightarrow>\n  \\<exists>\\<pi> n.\n     is_path \\<pi> \\<and> \\<pi> 0 = ?x \\<and> \\<pi> n = local.return\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> ?\\<pi> ?k \\<in> local.nodes\n\ngoal (1 subgoal):\n 1. (\\<And>\\<pi>l n.\n        \\<lbrakk>is_path \\<pi>l; \\<pi> k = \\<pi>l 0;\n         \\<pi>l n = local.return\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_path \\<pi>l\n  \\<pi> k = \\<pi>l 0\n  \\<pi>l n = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence ip: \\<open>is_path (\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l)\\<close> and l: \\<open>(\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l) k = \\<pi> k\\<close> and retl: \\<open>(\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l) (k + n) = return\\<close>"], ["proof (prove)\nusing this:\n  is_path \\<pi>l\n  \\<pi> k = \\<pi>l 0\n  \\<pi>l n = local.return\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) &&&\n    (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) k = \\<pi> k &&&\n    (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (k + n) = local.return", "using path_cons[OF path(1) ipl \\<pi>l]"], ["proof (prove)\nusing this:\n  is_path \\<pi>l\n  \\<pi> k = \\<pi>l 0\n  \\<pi>l n = local.return\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) &&&\n    (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) k = \\<pi> k &&&\n    (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (k + n) = local.return", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l)\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) k = \\<pi> k\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<pi>0': \\<open>(\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l) 0 = \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "unfolding cs_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "using  \\<pi>l \\<pi>0"], ["proof (prove)\nusing this:\n  \\<pi> k = \\<pi>l 0\n  \\<pi> 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) 0 = \\<pi>' 0", "by auto"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have eql: \\<open>(\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l) =\\<^bsub>k\\<^esub> \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) =\\<^bsub>k\\<^esub> \\<pi>", "by (metis path_append_eq_up_to)"], ["proof (state)\nthis:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) =\\<^bsub>k\\<^esub> \\<pi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have csl': \\<open>cs\\<^bsup>\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l\\<^esup>  k = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "using eql cs_path_swap ip path(1)"], ["proof (prove)\nusing this:\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) =\\<^bsub>k\\<^esub> \\<pi>\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   ?\\<pi> =\\<^bsub>?k\\<^esub> ?\\<pi>'\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n                    cs\\<^bsup>?\\<pi>'\\<^esup> ?k\n  is_path (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n    cs\\<^bsup>\\<pi>\\<^esup> k", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence notin: \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l\\<^esup>  k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<nexists>k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k'", "using notin'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n  cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<nexists>k'. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<nexists>k'.\n       cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n       cs\\<^bsup>\\<pi>'\\<^esup> k'", "by auto"], ["proof (state)\nthis:\n  \\<nexists>k'.\n     cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n     cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "obtain i i' where *: \\<open>i < k\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l\\<^esup>  i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> and suci: \\<open>(\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close>  and cdloop: \\<open>k cd\\<^bsup>\\<pi>@\\<^bsup>k\\<^esup>\\<pi>l\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n         cs\\<^bsup>\\<pi>'\\<^esup> i';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using returned_missing_cd_or_loop[OF ip path(2) \\<pi>0' notin notret retl]"], ["proof (prove)\nusing this:\n  (\\<And>i i'.\n      \\<lbrakk>i < k;\n       cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i';\n       (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i');\n       k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i \\<or>\n       (\\<forall>j'>i'.\n           j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i i'.\n        \\<lbrakk>i < k;\n         cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n         cs\\<^bsup>\\<pi>'\\<^esup> i';\n         (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i');\n         k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i \\<or>\n         (\\<forall>j'>i'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < k\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n  cs\\<^bsup>\\<pi>'\\<^esup> i'\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i')\n  k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<open>i \\<noteq> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> k", "using notin csi"], ["proof (prove)\nusing this:\n  \\<nexists>k'.\n     cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> k =\n     cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n  cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence ik: \\<open>i < k\\<close>"], ["proof (prove)\nusing this:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. i < k", "using *"], ["proof (prove)\nusing this:\n  i \\<noteq> k\n  i < k\n\ngoal (1 subgoal):\n 1. i < k", "by auto"], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'", "using csi cs_path_swap_le[OF ip path(1) eql]"], ["proof (prove)\nusing this:\n  i < k\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> i =\n  cs\\<^bsup>\\<pi>'\\<^esup> i'\n  ?k \\<le> k \\<Longrightarrow>\n  cs\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup> ?k =\n  cs\\<^bsup>\\<pi>\\<^esup> ?k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')", "using ik eq_up_to_apply[OF eql, of \\<open>Suc i\\<close>] suci"], ["proof (prove)\nusing this:\n  i < k\n  Suc i \\<le> k \\<Longrightarrow>\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) = \\<pi> (Suc i)\n  (\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l) (Suc i) \\<noteq> \\<pi>' (Suc i')\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> (\\<forall> j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n    (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')", "using cdloop cdi_path_swap_le[OF path(1) _ eql, of \\<open>k\\<close> \\<open>i\\<close>]"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\n  \\<lbrakk>k cd\\<^bsup>\\<pi> @\\<^bsup>k\\<^esup> \\<pi>l\\<^esup>\\<rightarrow> i;\n   k \\<le> k\\<rbrakk>\n  \\<Longrightarrow> k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n    (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')", "by auto"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i i'.\n                \\<lbrakk>i < k;\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                 \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n                 k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n                 (\\<forall>j'>i'.\n                     j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<nexists>n'. \\<pi>' n' = local.return\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\n\ngoal (1 subgoal):\n 1. thesis", "using that[OF *]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n  (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc ?i'1);\n   k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n   (\\<forall>j'>?i'1.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?i'1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_shift_set_cd: assumes \\<open>is_path \\<pi>\\<close> shows \\<open>{k + j| j . n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j } = {i. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "assume \\<open>i\\<in>{k+j | j . n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j }\\<close>"], ["proof (state)\nthis:\n  i \\<in> {k + j |j.\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "then"], ["proof (chain)\npicking this:\n  i \\<in> {k + j |j.\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}", "obtain j where \\<open>i = k+j\\<close> \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {k + j |j.\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i = k + j;\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i = k + j\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence \\<open>k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\\<close>"], ["proof (prove)\nusing this:\n  i = k + j\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i", "using cd_path_shift[OF _ assms, of \\<open>k\\<close> \\<open>k+j\\<close> \\<open>k+n\\<close>]"], ["proof (prove)\nusing this:\n  i = k + j\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n  k \\<le> k + j \\<Longrightarrow>\n  (k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j) =\n  (k + n -\n   k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> k + j - k)\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i", "by simp"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence \\<open>i\\<in>{ i. k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }\\<close>"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\n\ngoal (1 subgoal):\n 1. i \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                k \\<le> i}", "by blast"], ["proof (state)\nthis:\n  i \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "}"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j} \\<Longrightarrow>\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "moreover"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j} \\<Longrightarrow>\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "{"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j} \\<Longrightarrow>\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "assume \\<open>i\\<in>{ i. k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence *: \\<open>k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i", "by blast"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "then"], ["proof (chain)\npicking this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i", "obtain j where i: \\<open>i = k+j\\<close>"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\n\ngoal (1 subgoal):\n 1. (\\<And>j. i = k + j \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (metis le_Suc_ex)"], ["proof (state)\nthis:\n  i = k + j\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence \\<open>k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k+j\\<close>"], ["proof (prove)\nusing this:\n  i = k + j\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j", "using *"], ["proof (prove)\nusing this:\n  i = k + j\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j", "by auto"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j\n\ngoal (1 subgoal):\n 1. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j", "using cd_path_shift[OF _ assms, of \\<open>k\\<close> \\<open>k+j\\<close> \\<open>k+n\\<close>]"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j\n  k \\<le> k + j \\<Longrightarrow>\n  (k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + j) =\n  (k + n -\n   k cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> k + j - k)\n\ngoal (1 subgoal):\n 1. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j", "by simp"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "hence \\<open>i\\<in>{k+j | j . n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> j }\\<close>"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. i \\<in> {k + j |j.\n             n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}", "using i"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j\n  i = k + j\n\ngoal (1 subgoal):\n 1. i \\<in> {k + j |j.\n             n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}", "by simp"], ["proof (state)\nthis:\n  i \\<in> {k + j |j.\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "}"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            k \\<le> i} \\<Longrightarrow>\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "ultimately"], ["proof (chain)\npicking this:\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j} \\<Longrightarrow>\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            k \\<le> i} \\<Longrightarrow>\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> j} \\<Longrightarrow>\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n  ?i3\n  \\<in> {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            k \\<le> i} \\<Longrightarrow>\n  ?i3\n  \\<in> {k + j |j.\n         n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j}\n\ngoal (1 subgoal):\n 1. {k + j |j.\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n    {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "by blast"], ["proof (state)\nthis:\n  {k + j |j. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> j} =\n  {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_path_shift_set_cd: assumes path: \\<open>is_path \\<pi>\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = map \\<pi> (sorted_list_of_set {i. k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i }) @ [\\<pi> (k+n)]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have mono:\\<open>\\<forall>n m. n < m \\<longrightarrow> k + n < k + m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n m. n < m \\<longrightarrow> k + n < k + m", "by auto"], ["proof (state)\nthis:\n  \\<forall>n m. n < m \\<longrightarrow> k + n < k + m\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have fin: \\<open>finite {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {i. is_path (\\<pi> \\<guillemotleft> k) \\<and>\n         i < n \\<and>\n         (\\<pi> \\<guillemotleft> k) n \\<noteq> local.return \\<and>\n         (\\<forall>j\\<in>{i..n}.\n             (\\<pi> \\<guillemotleft> k) j \\<noteq>\n             ipd ((\\<pi> \\<guillemotleft> k) i))}", "by auto"], ["proof (state)\nthis:\n  finite {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have *: \\<open>(\\<lambda> x. k+x)`{i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i} = {k + i | i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (+) k `\n    {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i} =\n    {k + i |i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}", "by auto"], ["proof (state)\nthis:\n  (+) k ` {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i} =\n  {k + i |i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = map (\\<pi>\\<guillemotleft>k) (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i}) @ [(\\<pi>\\<guillemotleft>k) n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map (\\<pi> \\<guillemotleft> k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [(\\<pi> \\<guillemotleft> k) n]", "using cs_sorted_list_of_cd'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n  map ?\\<pi>\n   (sorted_list_of_set {i. ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [?\\<pi> ?k]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map (\\<pi> \\<guillemotleft> k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [(\\<pi> \\<guillemotleft> k) n]", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  map (\\<pi> \\<guillemotleft> k)\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "also"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  map (\\<pi> \\<guillemotleft> k)\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have \\<open>\\<dots> = map \\<pi> (map (\\<lambda> x. k+x) (sorted_list_of_set{i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i})) @ [\\<pi> (k+n)]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<pi> \\<guillemotleft> k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [(\\<pi> \\<guillemotleft> k) n] =\n    map \\<pi>\n     (map ((+) k)\n       (sorted_list_of_set\n         {i. n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                         k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)]", "by auto"], ["proof (state)\nthis:\n  map (\\<pi> \\<guillemotleft> k)\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [(\\<pi> \\<guillemotleft> k) n] =\n  map \\<pi>\n   (map ((+) k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "also"], ["proof (state)\nthis:\n  map (\\<pi> \\<guillemotleft> k)\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [(\\<pi> \\<guillemotleft> k) n] =\n  map \\<pi>\n   (map ((+) k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set ((\\<lambda> x. k+x)`{i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i})) @ [\\<pi> (k+n)]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (map ((+) k)\n       (sorted_list_of_set\n         {i. n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                         k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       ((+) k `\n        {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)]", "using sorted_list_of_set_map_mono[OF mono fin]"], ["proof (prove)\nusing this:\n  map ((+) k)\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) =\n  sorted_list_of_set\n   ((+) k `\n    {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (map ((+) k)\n       (sorted_list_of_set\n         {i. n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                         k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       ((+) k `\n        {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (map ((+) k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)] =\n  map \\<pi>\n   (sorted_list_of_set\n     ((+) k `\n      {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (map ((+) k)\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)] =\n  map \\<pi>\n   (sorted_list_of_set\n     ((+) k `\n      {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set ({k + i | i. n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> i})) @ [\\<pi> (k+n)]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ((+) k `\n        {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       {k + i |i.\n        n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> (k + n)]", "using *"], ["proof (prove)\nusing this:\n  (+) k ` {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i} =\n  {k + i |i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ((+) k `\n        {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       {k + i |i.\n        n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> (k + n)]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ((+) k `\n      {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)] =\n  map \\<pi>\n   (sorted_list_of_set\n     {k + i |i.\n      n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ((+) k `\n      {i. n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i})) @\n  [\\<pi> (k + n)] =\n  map \\<pi>\n   (sorted_list_of_set\n     {k + i |i.\n      n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set ({i. k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> (k+n)]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {k + i |i.\n        n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "using path_shift_set_cd[OF path]"], ["proof (prove)\nusing this:\n  {?k + j |j.\n   ?n cd\\<^bsup>\\<pi> \\<guillemotleft> ?k\\<^esup>\\<rightarrow> j} =\n  {i. ?k + ?n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> ?k \\<le> i}\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {k + i |i.\n        n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> (k + n)] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {k + i |i.\n      n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> (k + n)] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "finally"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> (k + n)]", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> (k + n)]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> (k + n)]", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> (k + n)]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_split_shift_cd: assumes \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and \\<open>j < k\\<close> and \\<open>k < n\\<close> and \\<open>\\<forall>j'<k. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have path: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "using assms"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j < k\n  k < n\n  \\<forall>j'<k.\n     n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  j < n \\<and>\n  \\<pi> n \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..n}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n  j < k\n  k < n\n  \\<forall>j'<k.\n     is_path \\<pi> \\<and>\n     j' < n \\<and>\n     \\<pi> n \\<noteq> local.return \\<and>\n     (\\<forall>j\\<in>{j'..n}.\n         \\<pi> j \\<noteq> ipd (\\<pi> j')) \\<longrightarrow>\n     j' \\<le> j\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have 1: \\<open>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n    {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "by auto"], ["proof (state)\nthis:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have le: \\<open>\\<forall> i\\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}. \\<forall> j\\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}. i < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                       i < k}.\n       \\<forall>j\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                          k \\<le> i}.\n          i < j", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}.\n     \\<forall>j\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                        k \\<le> i}.\n        i < j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have 2: \\<open>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} = {i . j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "assume \\<open>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "hence cd: \\<open>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> and ik:\\<open>i < k\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\n\ngoal (1 subgoal):\n 1. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i &&& i < k", "by auto"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  i < k\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "have \\<open>i\\<in>{i . j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n 2. \\<not> ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "assume \\<open>i < j\\<close>"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n 2. \\<not> ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "hence \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "by (metis is_cdi_def assms(1) cd cdi_prefix nat_less_le)"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n 2. \\<not> ?P \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "by simp"], ["proof (state)\nthis:\n  i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "assume \\<open>\\<not> i < j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "moreover"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "have \\<open>i \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j", "using assms(4) ik cd"], ["proof (prove)\nusing this:\n  \\<forall>j'<k.\n     n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\n  i < k\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow>\n    i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> i < j\n  i \\<le> j", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "by auto"], ["proof (state)\nthis:\n  i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "}"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            i < k} \\<Longrightarrow>\n  ?i3 \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "moreover"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            i < k} \\<Longrightarrow>\n  ?i3 \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "{"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            i < k} \\<Longrightarrow>\n  ?i3 \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "assume \\<open>i\\<in>{i . j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "hence \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j", "by auto"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "hence \\<open>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\n\ngoal (1 subgoal):\n 1. i \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}", "using assms(1,2) cd_trans[OF _ assms(1)]"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or> i = j\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j < k\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i \\<Longrightarrow>\n  n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?i\n\ngoal (1 subgoal):\n 1. i \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j; j < k;\n     \\<And>i.\n        j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<Longrightarrow>\n        n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n     j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<rbrakk>\n    \\<Longrightarrow> i < k", "unfolding is_cdi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_path \\<pi> \\<and>\n             j < n \\<and>\n             \\<pi> n \\<noteq> local.return \\<and>\n             (\\<forall>ja\\<in>{j..n}. \\<pi> ja \\<noteq> ipd (\\<pi> j));\n     j < k;\n     \\<And>i.\n        is_path \\<pi> \\<and>\n        i < j \\<and>\n        \\<pi> j \\<noteq> local.return \\<and>\n        (\\<forall>j\\<in>{i..j}.\n            \\<pi> j \\<noteq> ipd (\\<pi> i)) \\<Longrightarrow>\n        is_path \\<pi> \\<and>\n        i < n \\<and>\n        \\<pi> n \\<noteq> local.return \\<and>\n        (\\<forall>j\\<in>{i..n}. \\<pi> j \\<noteq> ipd (\\<pi> i));\n     is_path \\<pi> \\<and>\n     i < j \\<and>\n     \\<pi> j \\<noteq> local.return \\<and>\n     (\\<forall>j\\<in>{i..j}. \\<pi> j \\<noteq> ipd (\\<pi> i))\\<rbrakk>\n    \\<Longrightarrow> i < k", "by (metis (poly_guards_query) diff_diff_cancel diff_is_0_eq le_refl le_trans nat_less_le)"], ["proof (state)\nthis:\n  i \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "}"], ["proof (state)\nthis:\n  ?i3\n  \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n        {j} \\<Longrightarrow>\n  ?i3 \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "ultimately"], ["proof (chain)\npicking this:\n  ?i3\n  \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            i < k} \\<Longrightarrow>\n  ?i3 \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n  ?i3\n  \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n        {j} \\<Longrightarrow>\n  ?i3 \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ?i3\n  \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n            i < k} \\<Longrightarrow>\n  ?i3 \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n  ?i3\n  \\<in> {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union>\n        {j} \\<Longrightarrow>\n  ?i3 \\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n    {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}", "by blast"], ["proof (state)\nthis:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n  {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} =\n  {i. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {j}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n]", "using cs_sorted_list_of_cd'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n  map ?\\<pi>\n   (sorted_list_of_set {i. ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [?\\<pi> ?k]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n]", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n]", "using 1"], ["proof (prove)\nusing this:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n]", "by metis"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = map \\<pi> ((sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @ (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n      sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "using sorted_list_of_set_append[OF _ _ le] is_cdi_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite\n            {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k};\n   finite\n    {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\\<rbrakk>\n  \\<Longrightarrow> sorted_list_of_set\n                     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                          i < k} \\<union>\n                      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                          k \\<le> i}) =\n                    sorted_list_of_set\n                     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                         i < k} @\n                    sorted_list_of_set\n                     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                         k \\<le> i}\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n      sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n    sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n    sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = (map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k})) @ (map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n      sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n    sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} @\n    sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = cs\\<^bsup>\\<pi>\\<^esup> j @ (map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "unfolding 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi> (sorted_list_of_set (Collect (is_cdi j \\<pi>) \\<union> {j})) @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "using cs_sorted_list_of_cd"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n  map ?\\<pi>\n   (sorted_list_of_set\n     ({i. ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i} \\<union> {?k}))\n\ngoal (1 subgoal):\n 1. map \\<pi> (sorted_list_of_set (Collect (is_cdi j \\<pi>) \\<union> {j})) @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}) @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "using cs_path_shift_set_cd[OF path, of \\<open>k\\<close> \\<open>n-k\\<close>] assms(3)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k) =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + (n - k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n         k \\<le> i}) @\n  [\\<pi> (k + (n - k))]\n  k < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j @\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "finally"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi>\\<^esup> j @\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_split_shift_nocd: assumes \\<open>is_path \\<pi>\\<close> and \\<open>k < n\\<close> and \\<open>\\<forall>j. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have path: \\<open>is_path \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi>", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  k < n\n  \\<forall>j.\n     n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\n\ngoal (1 subgoal):\n 1. is_path \\<pi>", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have 1: \\<open>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} = {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n    {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n    {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}", "by auto"], ["proof (state)\nthis:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have le: \\<open>\\<forall> i\\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}. \\<forall> j\\<in> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}. i < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                       i < k}.\n       \\<forall>j\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                          k \\<le> i}.\n          i < j", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k}.\n     \\<forall>j\\<in>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n                        k \\<le> i}.\n        i < j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have 2: \\<open>{i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} = {}", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  k < n\n  \\<forall>j.\n     n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\n\ngoal (1 subgoal):\n 1. {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} = {}", "by auto"], ["proof (state)\nthis:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} = {}\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n]", "using cs_sorted_list_of_cd'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k =\n  map ?\\<pi>\n   (sorted_list_of_set {i. ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [?\\<pi> ?k]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n]", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union> {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n]", "using 1"], ["proof (prove)\nusing this:\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i} =\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n  {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n]", "by metis"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i}) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = map \\<pi> (sorted_list_of_set {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @ [\\<pi> n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "unfolding 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       ({} \\<union>\n        {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n    [\\<pi> n] =\n    map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n]", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "also"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     ({i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> i < k} \\<union>\n      {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i})) @\n  [\\<pi> n] =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "have \\<open>\\<dots> = cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> (n-k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "using cs_path_shift_set_cd[OF path, of \\<open>k\\<close> \\<open>n-k\\<close>] assms(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k) =\n  map \\<pi>\n   (sorted_list_of_set\n     {i. k + (n - k) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and>\n         k \\<le> i}) @\n  [\\<pi> (k + (n - k))]\n  k < n\n\ngoal (1 subgoal):\n 1. map \\<pi>\n     (sorted_list_of_set\n       {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n    [\\<pi> n] =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "by auto"], ["proof (state)\nthis:\n  map \\<pi>\n   (sorted_list_of_set\n     {i. n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<and> k \\<le> i}) @\n  [\\<pi> n] =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "finally"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (n - k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shifted_cs_eq_is_eq: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) = cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "note path = assms(1,2)"], ["proof (state)\nthis:\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "note csk = assms(3)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "note csn = assms(4)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "assume ne: \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have nretkn:\\<open>\\<pi> (k+n) \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (k + n) \\<noteq> local.return", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "assume 1:\\<open>\\<pi> (k+n) = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>k) n = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>'\\<guillemotleft>k') n' = return\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') n' = local.return", "using last_cs assms(4)"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') n' = local.return", "by metis"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence \\<open>\\<pi>' (k' + n') = return\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. False", "using ne 1 cs_return"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  \\<pi> (k + n) = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> (k + n) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "hence nretk: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "using term_path_stable[OF assms(1), of \\<open>k\\<close> \\<open>k +n\\<close>]"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) \\<noteq> local.return\n  \\<lbrakk>\\<pi> k = local.return; k \\<le> k + n\\<rbrakk>\n  \\<Longrightarrow> \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have nretkn': \\<open>\\<pi>' (k'+n') \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') \\<noteq> local.return", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "assume 1:\\<open>\\<pi>' (k'+n') = return\\<close>"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>'\\<guillemotleft>k') n' = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') n' = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>k) n = return\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return", "using last_cs assms(4)"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return", "by metis"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence \\<open>\\<pi> (k + n) = return\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. False", "using ne 1 cs_return"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  \\<pi>' (k' + n') = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "hence nretk': \\<open>\\<pi>' k' \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "using term_path_stable[OF assms(2), of \\<open>k'\\<close> \\<open>k' +n'\\<close>]"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') \\<noteq> local.return\n  \\<lbrakk>\\<pi>' k' = local.return; k' \\<le> k' + n'\\<rbrakk>\n  \\<Longrightarrow> \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' k' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have n0:\\<open>n > 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "assume *: \\<open>\\<not> 0 < n\\<close>"], ["proof (state)\nthis:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "hence 1:\\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> 0 = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using assms(3,4)"], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "have \\<open>(\\<pi>\\<guillemotleft>k) 0 = (\\<pi>'\\<guillemotleft>k') 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = (\\<pi>' \\<guillemotleft> k') 0", "using assms(3) last_cs path_shift_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  ?\\<pi> \\<guillemotleft> ?m = (\\<lambda>n. ?\\<pi> (?m + n))\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) 0 = (\\<pi>' \\<guillemotleft> k') 0", "by (metis monoid_add_class.add.right_neutral)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) 0 = (\\<pi>' \\<guillemotleft> k') 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> 0 = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = (\\<pi>' \\<guillemotleft> k') 0\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using 1 cs_0"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) 0 = (\\<pi>' \\<guillemotleft> k') 0\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>?\\<pi>\\<^esup> 0 = [?\\<pi> 0]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "hence n0': \\<open>n' = 0\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. n' = 0", "using cs_inj[of \\<open>\\<pi>'\\<guillemotleft>k'\\<close> \\<open>0\\<close> \\<open>n'\\<close> ] * assms(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  \\<lbrakk>is_path (\\<pi>' \\<guillemotleft> k');\n   (\\<pi>' \\<guillemotleft> k') 0 \\<noteq> local.return;\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<rbrakk>\n  \\<Longrightarrow> 0 = n'\n  \\<not> 0 < n\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. n' = 0", "by (metis path_shift_def assms(4) last_cs nretkn path_path_shift)"], ["proof (state)\nthis:\n  n' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  n' = 0\n\ngoal (1 subgoal):\n 1. False", "using ne * assms(3)"], ["proof (prove)\nusing this:\n  n' = 0\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  \\<not> 0 < n\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have n0':\\<open>n' > 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "assume *: \\<open>\\<not> 0 < n'\\<close>"], ["proof (state)\nthis:\n  \\<not> 0 < n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "hence 1:\\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> 0 = cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> 0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using assms(3,4)"], ["proof (prove)\nusing this:\n  \\<not> 0 < n'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "have \\<open>(\\<pi>'\\<guillemotleft>k') 0 = (\\<pi>\\<guillemotleft>k) 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') 0 = (\\<pi> \\<guillemotleft> k) 0", "using assms(3) last_cs path_shift_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  ?\\<pi> \\<guillemotleft> ?m = (\\<lambda>n. ?\\<pi> (?m + n))\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') 0 = (\\<pi> \\<guillemotleft> k) 0", "by (metis monoid_add_class.add.right_neutral)"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') 0 = (\\<pi> \\<guillemotleft> k) 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> 0 = cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') 0 = (\\<pi> \\<guillemotleft> k) 0\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using 1 cs_0"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') 0 = (\\<pi> \\<guillemotleft> k) 0\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> 0 =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>?\\<pi>\\<^esup> 0 = [?\\<pi> 0]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "hence n0: \\<open>n = 0\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. n = 0", "using cs_inj[of \\<open>\\<pi>\\<guillemotleft>k\\<close> \\<open>0\\<close> \\<open>n\\<close> ] * assms(1)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  \\<lbrakk>is_path (\\<pi> \\<guillemotleft> k);\n   (\\<pi> \\<guillemotleft> k) 0 \\<noteq> local.return;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> 0 =\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\\<rbrakk>\n  \\<Longrightarrow> 0 = n\n  \\<not> 0 < n'\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. n = 0", "by (metis path_shift_def assms(4) last_cs nretkn path_path_shift)"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. False", "using ne * assms(3)"], ["proof (prove)\nusing this:\n  n = 0\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  \\<not> 0 < n'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have cdleswap': \\<open>\\<forall> j'<k'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow> (\\<exists>j<k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'<k'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       (\\<exists>j<k.\n           k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n           cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "proof (rule,rule,rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "fix j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "assume jk': \\<open>j'<k'\\<close> and ncdj': \\<open>(k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close> and ne: \\<open>\\<not> (\\<exists>j<k. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (state)\nthis:\n  j' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> (\\<exists>j<k.\n             k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence kcdj': \\<open>k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\nusing this:\n  j' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> (\\<exists>j<k.\n             k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "using cr_wn'"], ["proof (prove)\nusing this:\n  j' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> (\\<exists>j<k.\n             k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  \\<lbrakk>?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m;\n   \\<not> ?m' cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m; ?m < ?m'\\<rbrakk>\n  \\<Longrightarrow> ?n < ?m'\n\ngoal (1 subgoal):\n 1. k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "by blast"], ["proof (state)\nthis:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "obtain j where kcdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\nusing this:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using csk cs_path_swap_cd path"], ["proof (prove)\nusing this:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> ?n';\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>?n' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence jk: \\<open>j < k\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. j < k", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  j < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. j < k", "by auto"], ["proof (state)\nthis:\n  j < k\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ncdn: \\<open>\\<not> (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using ne csj jk"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j<k.\n             k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j < k\n\ngoal (1 subgoal):\n 1. \\<not> k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by blast"], ["proof (state)\nthis:\n  \\<not> k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "obtain l' where lnocd': \\<open>l' = n' \\<or> n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l'\\<close> and cslsing': \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l' = [(\\<pi>'\\<guillemotleft>k') l']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' = n' \\<or>\n                 n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                              k'\\<^esup>\\<rightarrow> l';\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n         [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n' = [(\\<pi>'\\<guillemotleft>k') n']\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<open>n'\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [(\\<pi>' \\<guillemotleft> k') n']\n  \\<lbrakk>n' = n' \\<or>\n           n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> n';\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n   [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n' \\<noteq> [(\\<pi>'\\<guillemotleft>k') n']\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n  [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n  [(\\<pi>' \\<guillemotleft> k') n']", "obtain x ys where \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n' = [x]@ys@[(\\<pi>'\\<guillemotleft>k') n']\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n  [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (1 subgoal):\n 1. (\\<And>x ys.\n        cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n        [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n'] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Cons append_Nil cs_length_g_one cs_length_one(1) neq_Nil_conv)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n']", "obtain l' where \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l' = [x]\\<close> and cdl': \\<open>n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n']\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' = [x];\n         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                      k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_split[of \\<open>\\<pi>'\\<guillemotleft>k'\\<close> \\<open>n'\\<close> \\<open>Nil\\<close> \\<open>x\\<close> \\<open>ys\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n']\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' =\n  [] @ [x] @ ys @ [(\\<pi>' \\<guillemotleft> k') n'] \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> m = [] @ [x] \\<and>\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' = [x];\n         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                      k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' = [x]\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l' = [(\\<pi>'\\<guillemotleft>k') l']\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' = [x]\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n    [(\\<pi>' \\<guillemotleft> k') l']", "using last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' = [x]\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n    [(\\<pi>' \\<guillemotleft> k') l']", "by (metis last.simps)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n                 [(\\<pi>' \\<guillemotleft> k') l']\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<noteq>\n     [(\\<pi>' \\<guillemotleft> k') n']\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. thesis", "using that cdl'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n  \\<lbrakk>?l'1 = n' \\<or>\n           n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                        k'\\<^esup>\\<rightarrow> ?l'1;\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> ?l'1 =\n   [(\\<pi>' \\<guillemotleft> k') ?l'1]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence ln': \\<open>l'\\<le>n'\\<close>"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. l' \\<le> n'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  is_path (\\<pi>' \\<guillemotleft> k') \\<and>\n  l' < n' \\<and>\n  (\\<pi>' \\<guillemotleft> k') n' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{l'..n'}.\n      (\\<pi>' \\<guillemotleft> k') j \\<noteq>\n      ipd ((\\<pi>' \\<guillemotleft> k') l'))\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. l' \\<le> n'", "by auto"], ["proof (state)\nthis:\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence lcdj': \\<open>k'+l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\nusing this:\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "using jk' ncdj'"], ["proof (prove)\nusing this:\n  l' \\<le> n'\n  j' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "by (metis add_le_cancel_left cdi_prefix trans_less_add1)"], ["proof (state)\nthis:\n  k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "obtain l where lnocd: \\<open>l = n \\<or> n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l = n \\<or>\n                 n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                             k\\<^esup>\\<rightarrow> l;\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lnocd'"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l = n \\<or>\n                 n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                             k\\<^esup>\\<rightarrow> l;\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     l' = n'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>l' = n'\\<close>"], ["proof (state)\nthis:\n  l' = n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     l' = n'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  l' = n'\n\ngoal (1 subgoal):\n 1. thesis", "using csn that[of \\<open>n\\<close>]"], ["proof (prove)\nusing this:\n  l' = n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  \\<lbrakk>n = n \\<or>\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> n;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (state)\nthis:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'", "obtain l where \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l\\<close> \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                             k\\<^esup>\\<rightarrow> l;\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_path_swap_cd path csn"], ["proof (prove)\nusing this:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> ?n';\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>?n' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                             k\\<^esup>\\<rightarrow> l;\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path_path_shift)"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  \\<lbrakk>?l1 = n \\<or>\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> ?l1;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> ?l1 =\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have cslsing: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = [(\\<pi>\\<guillemotleft>k) l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n    [(\\<pi> \\<guillemotleft> k) l]", "using cslsing' last_cs csl last.simps"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  last (?x # ?xs) = (if ?xs = [] then ?x else last ?xs)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n    [(\\<pi> \\<guillemotleft> k) l]", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ln: \\<open>l\\<le>n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> n", "using lnocd"], ["proof (prove)\nusing this:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. l \\<le> n", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  l = n \\<or>\n  is_path (\\<pi> \\<guillemotleft> k) \\<and>\n  l < n \\<and>\n  (\\<pi> \\<guillemotleft> k) n \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{l..n}.\n      (\\<pi> \\<guillemotleft> k) j \\<noteq>\n      ipd ((\\<pi> \\<guillemotleft> k) l))\n\ngoal (1 subgoal):\n 1. l \\<le> n", "by auto"], ["proof (state)\nthis:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence nretkl: \\<open>\\<pi> (k + l) \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l) \\<noteq> local.return", "using term_path_stable[of \\<open>\\<pi>\\<close> \\<open>k+l\\<close> \\<open>k+n\\<close>] nretkn path(1)"], ["proof (prove)\nusing this:\n  l \\<le> n\n  \\<lbrakk>is_path \\<pi>; \\<pi> (k + l) = local.return;\n   k + l \\<le> k + n\\<rbrakk>\n  \\<Longrightarrow> \\<pi> (k + n) = local.return\n  \\<pi> (k + n) \\<noteq> local.return\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l) \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (k + l) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have *: \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l \\<Longrightarrow> k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k+l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                k\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n    k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + l", "using cd_path_shift[of \\<open>k\\<close> \\<open>k+l\\<close> \\<open>\\<pi>\\<close> \\<open>k+n\\<close>] path(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>k \\<le> k + l; is_path \\<pi>\\<rbrakk>\n  \\<Longrightarrow> (k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + l) =\n                    (k + n -\n                     k cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                 k\\<^esup>\\<rightarrow> k + l - k)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                k\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n    k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + l", "by auto"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft>\n              k\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + l\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ncdl: \\<open>\\<not> (k+l) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "using lnocd"], ["proof (prove)\nusing this:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<Longrightarrow> False", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j; l = n\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> False", "using ncdn"], ["proof (prove)\nusing this:\n  \\<not> k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j; l = n\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> False", "using cd_trans ncdn *"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n  \\<not> k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  n cd\\<^bsup>\\<pi> \\<guillemotleft>\n              k\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k + l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<not> k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>\\<exists> i\\<in> {j..k+l}. \\<pi> i = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          j < k + l \\<and>\n          \\<pi> (k + l) \\<noteq> local.return \\<and>\n          (\\<forall>ja\\<in>{j..k + l}. \\<pi> ja \\<noteq> ipd (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)", "using path(1) jk nretkl"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi> \\<and>\n          j < k + l \\<and>\n          \\<pi> (k + l) \\<noteq> local.return \\<and>\n          (\\<forall>ja\\<in>{j..k + l}. \\<pi> ja \\<noteq> ipd (\\<pi> j)))\n  is_path \\<pi>\n  j < k\n  \\<pi> (k + l) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>\\<exists> i\\<in> {k<..k+l}. \\<pi> i = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)", "using kcdj"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{j..k + l}. \\<pi> i = ipd (\\<pi> j)\n  is_path \\<pi> \\<and>\n  j < k \\<and>\n  \\<pi> k \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..k}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)", "by force"], ["proof (state)\nthis:\n  \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)", "obtain i where ki: \\<open>k < i\\<close> and il: \\<open>i \\<le> k+l\\<close> and ipdi: \\<open>\\<pi> i = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{k<..k + l}. \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>k < i; i \\<le> k + l; \\<pi> i = ipd (\\<pi> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  k < i\n  i \\<le> k + l\n  \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>k) (i-k) = ipd (\\<pi> j)\\<close> \\<open>i-k \\<le> l\\<close>"], ["proof (prove)\nusing this:\n  k < i\n  i \\<le> k + l\n  \\<pi> i = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) (i - k) = ipd (\\<pi> j) &&& i - k \\<le> l", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) (i - k) = ipd (\\<pi> j)\n  i - k \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence pd: \\<open>(\\<pi>\\<guillemotleft>k) l pd\\<rightarrow> ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) (i - k) = ipd (\\<pi> j)\n  i - k \\<le> l\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)", "using cs_single_pd_intermed[OF _ cslsing] path(1) path_path_shift"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) (i - k) = ipd (\\<pi> j)\n  i - k \\<le> l\n  \\<lbrakk>is_path (\\<pi> \\<guillemotleft> k); ?k \\<le> l\\<rbrakk>\n  \\<Longrightarrow> (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow>\n                    (\\<pi> \\<guillemotleft> k) ?k\n  is_path \\<pi>\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)", "by metis"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>(\\<pi>\\<guillemotleft>k) l = \\<pi>' (k' + l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')", "using csl last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')", "by (metis path_shift_def)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>\\<pi> j = \\<pi>' j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j = \\<pi>' j'", "using csj last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> j = \\<pi>' j'", "by metis"], ["proof (state)\nthis:\n  \\<pi> j = \\<pi>' j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)\n  (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')\n  \\<pi> j = \\<pi>' j'", "have \\<open>\\<pi>' (k'+l') pd\\<rightarrow> ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) l pd\\<rightarrow> ipd (\\<pi> j)\n  (\\<pi> \\<guillemotleft> k) l = \\<pi>' (k' + l')\n  \\<pi> j = \\<pi>' j'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')", "by simp"], ["proof (state)\nthis:\n  \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k'+l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')", "using ipd_pd_cd[OF lcdj']"], ["proof (prove)\nusing this:\n  ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')\n\ngoal (1 subgoal):\n 1. ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')", "."], ["proof (state)\nthis:\n  ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')\n  ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')", "have \\<open>\\<pi>' (k'+l') = ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')\n  ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + l') = ipd (\\<pi>' j')", "using pd_antisym"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + l') pd\\<rightarrow> ipd (\\<pi>' j')\n  ipd (\\<pi>' j') pd\\<rightarrow> \\<pi>' (k' + l')\n  \\<lbrakk>?x pd\\<rightarrow> ?y; ?y pd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + l') = ipd (\\<pi>' j')", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k' + l') = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>j' < k'; k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> (\\<exists>j<k.\n                   k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + l') = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. False", "using lcdj'"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + l') = ipd (\\<pi>' j')\n  k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. False", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + l') = ipd (\\<pi>' j')\n  is_path \\<pi>' \\<and>\n  j' < k' + l' \\<and>\n  \\<pi>' (k' + l') \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{j'..k' + l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed\n  \n  \\<comment> \\<open>Symmetric version of the above statement\\<close>"], ["proof (state)\nthis:\n  \\<forall>j'<k'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     (\\<exists>j<k.\n         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have cdleswap: \\<open>\\<forall> j<k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> (\\<exists>j'<k'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and> cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n       (\\<exists>j'<k'.\n           k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n           cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "proof (rule,rule,rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "assume jk: \\<open>j<k\\<close> and ncdj: \\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and ne: \\<open>\\<not> (\\<exists>j'<k'. k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and> cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (state)\nthis:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<not> (\\<exists>j'<k'.\n             k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence kcdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<not> (\\<exists>j'<k'.\n             k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using cr_wn'"], ["proof (prove)\nusing this:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<not> (\\<exists>j'<k'.\n             k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  \\<lbrakk>?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m;\n   \\<not> ?m' cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m; ?m < ?m'\\<rbrakk>\n  \\<Longrightarrow> ?n < ?m'\n\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by blast"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "obtain j' where kcdj': \\<open>k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close> and csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using csk cs_path_swap_cd path"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> ?n';\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>?n' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence jk': \\<open>j' < k'\\<close>"], ["proof (prove)\nusing this:\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. j' < k'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  j' < k' \\<and>\n  \\<pi>' k' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{j'..k'}. \\<pi>' j \\<noteq> ipd (\\<pi>' j'))\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. j' < k'", "by auto"], ["proof (state)\nthis:\n  j' < k'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ncdn': \\<open>\\<not> (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "using ne csj jk'"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j'<k'.\n             k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n             cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j' < k'\n\ngoal (1 subgoal):\n 1. \\<not> k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "by blast"], ["proof (state)\nthis:\n  \\<not> k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "obtain l where lnocd: \\<open>l = n \\<or> n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l\\<close> and cslsing: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = [(\\<pi>\\<guillemotleft>k) l]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>l = n \\<or>\n                 n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                             k\\<^esup>\\<rightarrow> l;\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = [(\\<pi>\\<guillemotleft>k) n]\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> ?P3\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<open>n\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [(\\<pi> \\<guillemotleft> k) n]\n  \\<lbrakk>n = n \\<or>\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> n;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n   [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume *: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n \\<noteq> [(\\<pi>\\<guillemotleft>k) n]\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  [(\\<pi> \\<guillemotleft> k) n]", "obtain x ys where \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = [x]@ys@[(\\<pi>\\<guillemotleft>k) n]\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. (\\<And>x ys.\n        cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n        [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Cons append_Nil cs_length_g_one cs_length_one(1) neq_Nil_conv)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n]", "obtain l where \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = [x]\\<close> and cdl: \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n]\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l = [x];\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_split[of \\<open>\\<pi>\\<guillemotleft>k\\<close> \\<open>n\\<close> \\<open>Nil\\<close> \\<open>x\\<close> \\<open>ys\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n]\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  [] @ [x] @ ys @ [(\\<pi> \\<guillemotleft> k) n] \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> m = [] @ [x] \\<and>\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l = [x];\n         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                     k\\<^esup>\\<rightarrow> l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l = [x]\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = [(\\<pi>\\<guillemotleft>k) l]\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l = [x]\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n    [(\\<pi> \\<guillemotleft> k) l]", "using last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l = [x]\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n    [(\\<pi> \\<guillemotleft> k) l]", "by (metis last.simps)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l.\n                \\<lbrakk>l = n \\<or>\n                         n cd\\<^bsup>\\<pi> \\<guillemotleft>\n                                     k\\<^esup>\\<rightarrow> l;\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 [(\\<pi> \\<guillemotleft> k) l]\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n     [(\\<pi> \\<guillemotleft> k) n]\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. thesis", "using that cdl"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n  \\<lbrakk>?l1 = n \\<or>\n           n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> ?l1;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> ?l1 =\n   [(\\<pi> \\<guillemotleft> k) ?l1]\\<rbrakk>\n  \\<Longrightarrow> thesis\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence ln: \\<open>l\\<le>n\\<close>"], ["proof (prove)\nusing this:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. l \\<le> n", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  l = n \\<or>\n  is_path (\\<pi> \\<guillemotleft> k) \\<and>\n  l < n \\<and>\n  (\\<pi> \\<guillemotleft> k) n \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{l..n}.\n      (\\<pi> \\<guillemotleft> k) j \\<noteq>\n      ipd ((\\<pi> \\<guillemotleft> k) l))\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n\ngoal (1 subgoal):\n 1. l \\<le> n", "by auto"], ["proof (state)\nthis:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence lcdj: \\<open>k+l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using jk ncdj"], ["proof (prove)\nusing this:\n  l \\<le> n\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by (metis add_le_cancel_left cdi_prefix trans_less_add1)"], ["proof (state)\nthis:\n  k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "obtain l' where lnocd': \\<open>l' = n' \\<or> n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l'\\<close> and csl: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' = n' \\<or>\n                 n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                              k'\\<^esup>\\<rightarrow> l';\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using lnocd"], ["proof (prove)\nusing this:\n  l = n \\<or> n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' = n' \\<or>\n                 n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                              k'\\<^esup>\\<rightarrow> l';\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     l = n\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>l = n\\<close>"], ["proof (state)\nthis:\n  l = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     l = n\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  l = n\n\ngoal (1 subgoal):\n 1. thesis", "using csn that[of \\<open>n'\\<close>]"], ["proof (prove)\nusing this:\n  l = n\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  \\<lbrakk>n' = n' \\<or>\n           n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> n';\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>n cd\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup>\\<rightarrow> l\\<close>"], ["proof (state)\nthis:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l", "obtain l' where \\<open>n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l'\\<close> \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> l = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                              k'\\<^esup>\\<rightarrow> l';\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_path_swap_cd path csn"], ["proof (prove)\nusing this:\n  n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> ?n';\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>?n' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                              k'\\<^esup>\\<rightarrow> l';\n         cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n         cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path_path_shift)"], ["proof (state)\nthis:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l'.\n                \\<lbrakk>l' = n' \\<or>\n                         n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\nk'\\<^esup>\\<rightarrow> l';\n                 cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n cd\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup>\\<rightarrow> l\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  \\<lbrakk>?l'1 = n' \\<or>\n           n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                        k'\\<^esup>\\<rightarrow> ?l'1;\n   cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n   cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> ?l'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have cslsing': \\<open>cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> l' = [(\\<pi>'\\<guillemotleft>k') l']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n    [(\\<pi>' \\<guillemotleft> k') l']", "using cslsing last_cs csl last.simps"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  [(\\<pi> \\<guillemotleft> k) l]\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  last (?x # ?xs) = (if ?xs = [] then ?x else last ?xs)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n    [(\\<pi>' \\<guillemotleft> k') l']", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l' =\n  [(\\<pi>' \\<guillemotleft> k') l']\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ln': \\<open>l'\\<le>n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<le> n'", "using lnocd'"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. l' \\<le> n'", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  is_path (\\<pi>' \\<guillemotleft> k') \\<and>\n  l' < n' \\<and>\n  (\\<pi>' \\<guillemotleft> k') n' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{l'..n'}.\n      (\\<pi>' \\<guillemotleft> k') j \\<noteq>\n      ipd ((\\<pi>' \\<guillemotleft> k') l'))\n\ngoal (1 subgoal):\n 1. l' \\<le> n'", "by auto"], ["proof (state)\nthis:\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence nretkl': \\<open>\\<pi>' (k' + l') \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + l') \\<noteq> local.return", "using term_path_stable[of \\<open>\\<pi>'\\<close> \\<open>k'+l'\\<close> \\<open>k'+n'\\<close>] nretkn' path(2)"], ["proof (prove)\nusing this:\n  l' \\<le> n'\n  \\<lbrakk>is_path \\<pi>'; \\<pi>' (k' + l') = local.return;\n   k' + l' \\<le> k' + n'\\<rbrakk>\n  \\<Longrightarrow> \\<pi>' (k' + n') = local.return\n  \\<pi>' (k' + n') \\<noteq> local.return\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + l') \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (k' + l') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have *: \\<open>n' cd\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup>\\<rightarrow> l' \\<Longrightarrow> k'+n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'+l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                 k'\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n    k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' + l'", "using cd_path_shift[of \\<open>k'\\<close> \\<open>k'+l'\\<close> \\<open>\\<pi>'\\<close> \\<open>k'+n'\\<close>] path(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>k' \\<le> k' + l'; is_path \\<pi>'\\<rbrakk>\n  \\<Longrightarrow> (k' +\n                     n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' + l') =\n                    (k' + n' -\n                     k' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                                  k'\\<^esup>\\<rightarrow> k' + l' - k')\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                 k'\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n    k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' + l'", "by auto"], ["proof (state)\nthis:\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n               k'\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' + l'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have ncdl': \\<open>\\<not> (k'+l') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow> False", "using lnocd'"], ["proof (prove)\nusing this:\n  l' = n' \\<or>\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow> False", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     l' = n'\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> False", "using ncdn'"], ["proof (prove)\nusing this:\n  \\<not> k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     l' = n'\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> False", "using cd_trans ncdn' *"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i;\n   ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?j\\<rbrakk>\n  \\<Longrightarrow> ?k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?i\n  \\<not> k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n               k'\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k' + l'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n     n' cd\\<^bsup>\\<pi>' \\<guillemotleft>\n                  k'\\<^esup>\\<rightarrow> l'\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<not> k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>\\<exists> i'\\<in> {j'..k'+l'}. \\<pi>' i' = ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k' + l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi>' \\<and>\n          j' < k' + l' \\<and>\n          \\<pi>' (k' + l') \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{j'..k' + l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' j')))\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "using path(2) jk' nretkl'"], ["proof (prove)\nusing this:\n  \\<not> (is_path \\<pi>' \\<and>\n          j' < k' + l' \\<and>\n          \\<pi>' (k' + l') \\<noteq> local.return \\<and>\n          (\\<forall>j\\<in>{j'..k' + l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' j')))\n  is_path \\<pi>'\n  j' < k'\n  \\<pi>' (k' + l') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "by auto"], ["proof (state)\nthis:\n  \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>\\<exists> i'\\<in> {k'<..k'+l'}. \\<pi>' i' = ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "using kcdj'"], ["proof (prove)\nusing this:\n  \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<exists>i'\\<in>{j'..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n  is_path \\<pi>' \\<and>\n  j' < k' \\<and>\n  \\<pi>' k' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{j'..k'}. \\<pi>' j \\<noteq> ipd (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "by force"], ["proof (state)\nthis:\n  \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')", "obtain i' where ki': \\<open>k' < i'\\<close> and il': \\<open>i' \\<le> k'+l'\\<close> and ipdi: \\<open>\\<pi>' i' = ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i'\\<in>{k'<..k' + l'}. \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        \\<lbrakk>k' < i'; i' \\<le> k' + l';\n         \\<pi>' i' = ipd (\\<pi>' j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  k' < i'\n  i' \\<le> k' + l'\n  \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>(\\<pi>'\\<guillemotleft>k') (i'-k') = ipd (\\<pi>' j')\\<close> \\<open>i'-k' \\<le> l'\\<close>"], ["proof (prove)\nusing this:\n  k' < i'\n  i' \\<le> k' + l'\n  \\<pi>' i' = ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') (i' - k') = ipd (\\<pi>' j') &&&\n    i' - k' \\<le> l'", "by auto"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') (i' - k') = ipd (\\<pi>' j')\n  i' - k' \\<le> l'\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "hence pd: \\<open>(\\<pi>'\\<guillemotleft>k') l' pd\\<rightarrow> ipd (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') (i' - k') = ipd (\\<pi>' j')\n  i' - k' \\<le> l'\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')", "using cs_single_pd_intermed[OF _ cslsing'] path(2) path_path_shift"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') (i' - k') = ipd (\\<pi>' j')\n  i' - k' \\<le> l'\n  \\<lbrakk>is_path (\\<pi>' \\<guillemotleft> k'); ?k \\<le> l'\\<rbrakk>\n  \\<Longrightarrow> (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow>\n                    (\\<pi>' \\<guillemotleft> k') ?k\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')", "by metis"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>(\\<pi>'\\<guillemotleft>k') l' = \\<pi> (k + l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)", "using csl last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> l =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> l'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)", "by (metis path_shift_def)"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>\\<pi>' j' = \\<pi> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' j' = \\<pi> j", "using csj last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' j' = \\<pi> j", "by metis"], ["proof (state)\nthis:\n  \\<pi>' j' = \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')\n  (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)\n  \\<pi>' j' = \\<pi> j", "have \\<open>\\<pi> (k+l) pd\\<rightarrow> ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi>' \\<guillemotleft> k') l' pd\\<rightarrow> ipd (\\<pi>' j')\n  (\\<pi>' \\<guillemotleft> k') l' = \\<pi> (k + l)\n  \\<pi>' j' = \\<pi> j\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)", "by simp"], ["proof (state)\nthis:\n  \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k+l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)", "using ipd_pd_cd[OF lcdj]"], ["proof (prove)\nusing this:\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)\n\ngoal (1 subgoal):\n 1. ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)", "."], ["proof (state)\nthis:\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)", "have \\<open>\\<pi> (k+l) = ipd (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l) = ipd (\\<pi> j)", "using pd_antisym"], ["proof (prove)\nusing this:\n  \\<pi> (k + l) pd\\<rightarrow> ipd (\\<pi> j)\n  ipd (\\<pi> j) pd\\<rightarrow> \\<pi> (k + l)\n  \\<lbrakk>?x pd\\<rightarrow> ?y; ?y pd\\<rightarrow> ?x\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<pi> (k + l) = ipd (\\<pi> j)", "by auto"], ["proof (state)\nthis:\n  \\<pi> (k + l) = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>j < k; k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n        \\<not> (\\<exists>j'<k'.\n                   k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n                   cs\\<^bsup>\\<pi>\\<^esup> j =\n                   cs\\<^bsup>\\<pi>'\\<^esup> j')\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + l) = ipd (\\<pi> j)\n\ngoal (1 subgoal):\n 1. False", "using lcdj"], ["proof (prove)\nusing this:\n  \\<pi> (k + l) = ipd (\\<pi> j)\n  k + l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. False", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  \\<pi> (k + l) = ipd (\\<pi> j)\n  is_path \\<pi> \\<and>\n  j < k + l \\<and>\n  \\<pi> (k + l) \\<noteq> local.return \\<and>\n  (\\<forall>ja\\<in>{j..k + l}. \\<pi> ja \\<noteq> ipd (\\<pi> j))\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     (\\<exists>j'<k'.\n         k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have cdle: \\<open>\\<exists>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\\<close> (is \\<open>\\<exists> j. ?P j\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "assume \\<open>\\<not> (\\<exists>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "hence allge: \\<open>\\<forall>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n       k \\<le> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have allge': \\<open>\\<forall>j'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow> k' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       k' \\<le> j'", "proof (rule, rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> k' \\<le> j'\\<rbrakk>\n       \\<Longrightarrow> False", "fix j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> k' \\<le> j'\\<rbrakk>\n       \\<Longrightarrow> False", "assume *: \\<open>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close> and \\<open>\\<not> k' \\<le> j'\\<close>"], ["proof (state)\nthis:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> k' \\<le> j'\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> k' \\<le> j'", "obtain j where \\<open>j<k\\<close> \\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\nusing this:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> k' \\<le> j'\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < k;\n         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cdleswap'"], ["proof (prove)\nusing this:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<not> k' \\<le> j'\n  \\<forall>j'<k'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     (\\<exists>j<k.\n         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < k;\n         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis le_neq_implies_less nat_le_linear)"], ["proof (state)\nthis:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n        \\<not> k' \\<le> j'\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. False", "using allge"], ["proof (prove)\nusing this:\n  j < k\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<forall>j.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     k \\<le> j\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using cs_split_shift_nocd[OF assms(1) _ allge] n0"], ["proof (prove)\nusing this:\n  k < k + n \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (k + n - k)\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using cs_split_shift_nocd[OF assms(2) _ allge'] n0'"], ["proof (prove)\nusing this:\n  k' < k' + n' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> (k' + n' - k')\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne assms(4)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "define j where  \\<open>j == GREATEST j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\\<close>"], ["proof (state)\nthis:\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have cdj:\\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and jk: \\<open>j < k\\<close> and jge:\\<open>\\<forall> j'< k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j &&&\n    j < k &&&\n    \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. j < k\n 3. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "have bound: \\<open>\\<forall> y. ?P y \\<longrightarrow> y \\<le> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n       y < k \\<longrightarrow>\n       y \\<le> k", "by auto"], ["proof (state)\nthis:\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n\ngoal (3 subgoals):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. j < k\n 3. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using GreatestI_nat[of \\<open>?P\\<close>] j_def bound cdle"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> k +\n                    n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                         j < k) \\<and>\n                    (GREATEST j.\n                        k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                        j < k)\n                    < k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by blast"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. j < k\n 2. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>j < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < k", "using GreatestI_nat[of \\<open>?P\\<close>] bound j_def cdle"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> k +\n                    n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                         j < k) \\<and>\n                    (GREATEST j.\n                        k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                        j < k)\n                    < k\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. j < k", "by blast"], ["proof (state)\nthis:\n  j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>\\<forall> j'< k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "using Greatest_le_nat[of \\<open>?P\\<close>] bound j_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST j.\n                                 k +\n                                 n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                 j < k)\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "by blast"], ["proof (state)\nthis:\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j < k\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "obtain j' where cdj':\\<open>(k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close> and csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>  and jk': \\<open>j' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j';\n         j' < k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cdleswap cdj jk"], ["proof (prove)\nusing this:\n  \\<forall>j<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     (\\<exists>j'<k'.\n         k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<and>\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j < k\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j';\n         j' < k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j' < k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have jge':\\<open>\\<forall> i'< k'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow> i' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i'<k'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow>\n       i' \\<le> j'", "proof(rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "assume ik': \\<open>i' < k'\\<close> and cdi': \\<open>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (state)\nthis:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "then"], ["proof (chain)\npicking this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'", "obtain i where cdi:\\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> and csi: \\<open> cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<close> and ik: \\<open>i<k\\<close>"], ["proof (prove)\nusing this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n         cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i;\n         i < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cdleswap'"], ["proof (prove)\nusing this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n  \\<forall>j'<k'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     (\\<exists>j<k.\n         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n         cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i;\n         i < k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  i < k\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "have ij: \\<open>i \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j", "using jge cdi ik"], ["proof (prove)\nusing this:\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  i < k\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "show \\<open>i' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using cs_order_le[OF assms(1,2) csi[symmetric] csj _ ij] cd_not_ret[OF cdi]"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return \\<Longrightarrow> i' \\<le> j'\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by simp"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i'<k'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow>\n     i' \\<le> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using  cs_split_shift_cd[OF cdj jk _ jge] n0"], ["proof (prove)\nusing this:\n  k < k + n \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (k + n - k)\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') = cs\\<^bsup>\\<pi>'\\<^esup> j' @ cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>'\\<^esup> j' @\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using  cs_split_shift_cd[OF cdj' jk' _ jge'] n0'"], ["proof (prove)\nusing this:\n  k' < k' + n' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> (k' + n' - k')\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>'\\<^esup> j' @\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) = cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')", "using csj assms(4)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_eq_is_eq_shifted: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k+n) = cs\\<^bsup>\\<pi>'\\<^esup> (k'+n')\\<close> shows \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "assume ne: \\<open>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq> cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have nretkn:\\<open>\\<pi> (k+n) \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (k + n) \\<noteq> local.return", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "assume 1:\\<open>\\<pi> (k+n) = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence 2:\\<open>\\<pi>' (k'+n') = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return", "using assms(4) last_cs"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>k) n = return\\<close> \\<open>(\\<pi>'\\<guillemotleft>k') n' = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return &&&\n    (\\<pi>' \\<guillemotleft> k') n' = local.return", "using 1"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return &&&\n    (\\<pi>' \\<guillemotleft> k') n' = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using cs_return"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi> (k + n) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "hence nretk: \\<open>\\<pi> k \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "using term_path_stable[OF assms(1), of \\<open>k\\<close> \\<open>k +n\\<close>]"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) \\<noteq> local.return\n  \\<lbrakk>\\<pi> k = local.return; k \\<le> k + n\\<rbrakk>\n  \\<Longrightarrow> \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> k \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have nretkn': \\<open>\\<pi>' (k'+n') \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') \\<noteq> local.return", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "assume 1:\\<open>\\<pi>' (k'+n') = return\\<close>"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence 2:\\<open>\\<pi> (k+n) = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return", "using assms(4) last_cs"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') = local.return\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> (k + n) = local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence \\<open>(\\<pi>\\<guillemotleft>k) n = return\\<close> \\<open>(\\<pi>'\\<guillemotleft>k') n' = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return &&&\n    (\\<pi>' \\<guillemotleft> k') n' = local.return", "using 1"], ["proof (prove)\nusing this:\n  \\<pi> (k + n) = local.return\n  \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> k) n = local.return &&&\n    (\\<pi>' \\<guillemotleft> k') n' = local.return", "by auto"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using cs_return"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> k) n = local.return\n  (\\<pi>' \\<guillemotleft> k') n' = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' (k' + n') = local.return \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<pi>' (k' + n') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "hence nretk': \\<open>\\<pi>' k' \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "using term_path_stable[OF assms(2), of \\<open>k'\\<close> \\<open>k' +n'\\<close>]"], ["proof (prove)\nusing this:\n  \\<pi>' (k' + n') \\<noteq> local.return\n  \\<lbrakk>\\<pi>' k' = local.return; k' \\<le> k' + n'\\<rbrakk>\n  \\<Longrightarrow> \\<pi>' (k' + n') = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' k' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have n0:\\<open>n > 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "assume *: \\<open>\\<not> 0 < n\\<close>"], ["proof (state)\nthis:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k'+ n')\\<close>"], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')", "using assms(3,4)"], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "hence n0: \\<open>n = 0\\<close> \\<open>n' = 0\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. n = 0 &&& n' = 0", "using cs_inj[OF assms(2) nretkn', of \\<open>k'\\<close>] *"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<Longrightarrow>\n  k' + n' = k'\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. n = 0 &&& n' = 0", "by auto"], ["proof (state)\nthis:\n  n = 0\n  n' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "have \\<open>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "unfolding n0 cs_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. [(\\<pi> \\<guillemotleft> k) 0] = [(\\<pi>' \\<guillemotleft> k') 0]", "by (auto , metis last_cs assms(3))"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have n0':\\<open>n' > 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "assume *: \\<open>\\<not> 0 < n'\\<close>"], ["proof (state)\nthis:\n  \\<not> 0 < n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k+ n)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> 0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k + n)", "using assms(3,4)"], ["proof (prove)\nusing this:\n  \\<not> 0 < n'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k + n)", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k + n)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "hence n0: \\<open>n = 0\\<close> \\<open>n' = 0\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k + n)\n\ngoal (1 subgoal):\n 1. n = 0 &&& n' = 0", "using cs_inj[OF assms(1) nretkn, of \\<open>k\\<close>] *"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> (k + n)\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> k \\<Longrightarrow>\n  k + n = k\n  \\<not> 0 < n'\n\ngoal (1 subgoal):\n 1. n = 0 &&& n' = 0", "by auto"], ["proof (state)\nthis:\n  n = 0\n  n' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "have \\<open>cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "unfolding n0 cs_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. [(\\<pi> \\<guillemotleft> k) 0] = [(\\<pi>' \\<guillemotleft> k') 0]", "by (auto , metis last_cs assms(3))"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n' \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have cdle: \\<open>\\<exists>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\\<close> (is \\<open>\\<exists> j. ?P j\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "assume \\<open>\\<not> (\\<exists>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "hence allge: \\<open>\\<forall>j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow> k \\<le> j\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n       k \\<le> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have allge': \\<open>\\<forall>j'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow> k' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       k' \\<le> j'", "proof (rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow>\n       k' \\<le> j'", "fix j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow>\n       k' \\<le> j'", "assume *: \\<open>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (state)\nthis:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow>\n       k' \\<le> j'", "obtain j where cdj: \\<open>k+n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_path_swap_cd[OF assms(2,1) assms(4)[symmetric] *]"], ["proof (prove)\nusing this:\n  (\\<And>k'.\n      \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j;\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow>\n       k' \\<le> j'", "hence kj:\\<open>k \\<le> j\\<close>"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. k \\<le> j", "using allge"], ["proof (prove)\nusing this:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  \\<forall>j.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<longrightarrow>\n     k \\<le> j\n\ngoal (1 subgoal):\n 1. k \\<le> j", "by auto"], ["proof (state)\nthis:\n  k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<Longrightarrow>\n       k' \\<le> j'", "thus kj': \\<open>k' \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> j\n\ngoal (1 subgoal):\n 1. k' \\<le> j'", "using cs_order_le[OF assms(1,2,3) csj nretk]"], ["proof (prove)\nusing this:\n  k \\<le> j\n  k \\<le> j \\<Longrightarrow> k' \\<le> j'\n\ngoal (1 subgoal):\n 1. k' \\<le> j'", "by simp"], ["proof (state)\nthis:\n  k' \\<le> j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     k' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using cs_split_shift_nocd[OF assms(1) _ allge] n0"], ["proof (prove)\nusing this:\n  k < k + n \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (k + n - k)\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') = cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using cs_split_shift_nocd[OF assms(2) _ allge'] n0'"], ["proof (prove)\nusing this:\n  k' < k' + n' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> (k' + n' - k')\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<nexists>j.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n       j < k \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne assms(4)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "define j where  \\<open>j == GREATEST j. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\\<close>"], ["proof (state)\nthis:\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have cdj:\\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close> and jk: \\<open>j < k\\<close> and jge:\\<open>\\<forall> j'< k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j &&&\n    j < k &&&\n    \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. j < k\n 3. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "have bound: \\<open>\\<forall> y. ?P y \\<longrightarrow> y \\<le> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n       y < k \\<longrightarrow>\n       y \\<le> k", "by auto"], ["proof (state)\nthis:\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n\ngoal (3 subgoals):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n 2. j < k\n 3. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "using GreatestI_nat[of \\<open>?P\\<close>] bound j_def cdle"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> k +\n                    n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                         j < k) \\<and>\n                    (GREATEST j.\n                        k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                        j < k)\n                    < k\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by blast"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. j < k\n 2. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>j < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < k", "using GreatestI_nat[of \\<open>?P\\<close>] bound j_def cdle"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> k +\n                    n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> (GREATEST j.\n                         k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                         j < k) \\<and>\n                    (GREATEST j.\n                        k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                        j < k)\n                    < k\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n  \\<exists>j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. j < k", "by blast"], ["proof (state)\nthis:\n  j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "show \\<open>\\<forall> j'< k. (k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow> j' \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "using Greatest_le_nat[of \\<open>?P\\<close>] bound j_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> ?k \\<and> ?k < k;\n   \\<And>y.\n      k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n      y < k \\<Longrightarrow>\n      y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST j.\n                                 k +\n                                 n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and>\n                                 j < k)\n  \\<forall>y.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> y \\<and>\n     y < k \\<longrightarrow>\n     y \\<le> k\n  j \\<equiv>\n  GREATEST j. k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j \\<and> j < k\n\ngoal (1 subgoal):\n 1. \\<forall>j'<k.\n       k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n       j' \\<le> j", "by blast"], ["proof (state)\nthis:\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  j < k\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "obtain j' where cdj':\\<open>(k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\\<close> and csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_path_swap_cd assms cdj"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> ?n';\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>?n' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have jge':\\<open>\\<forall> i'< k'. (k'+n') cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow> i' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i'<k'.\n       k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow>\n       i' \\<le> j'", "proof(rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "assume ik': \\<open>i' < k'\\<close> and cdi': \\<open>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (state)\nthis:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "then"], ["proof (chain)\npicking this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'", "obtain i where cdi:\\<open>(k+n) cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close> and csi: \\<open> cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (prove)\nusing this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n         cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cs_path_swap_cd[OF assms(2,1) assms(4)[symmetric]]"], ["proof (prove)\nusing this:\n  i' < k'\n  k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n  \\<lbrakk>k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> ?k;\n   \\<And>k'.\n      \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k';\n       cs\\<^bsup>\\<pi>'\\<^esup> ?k = cs\\<^bsup>\\<pi>\\<^esup> k'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n         cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "have nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by (metis cd_not_ret cdi')"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using cs_order[OF assms(2,1) csi _ nreti' ik'] assms(3)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' =\n  cs\\<^bsup>\\<pi>\\<^esup> ?j' \\<Longrightarrow>\n  i < ?j'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. i < k", "by auto"], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "have ij: \\<open>i \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j", "using jge cdi ik"], ["proof (prove)\nusing this:\n  \\<forall>j'<k.\n     k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j' \\<longrightarrow>\n     j' \\<le> j\n  k + n cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  i < k\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' < k';\n        k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<rbrakk>\n       \\<Longrightarrow> i' \\<le> j'", "show \\<open>i' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using cs_order_le[OF assms(1,2) csi[symmetric] csj _ ij] cd_not_ret[OF cdi]"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return \\<Longrightarrow> i' \\<le> j'\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by simp"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i'<k'.\n     k' + n' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i' \\<longrightarrow>\n     i' \\<le> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have jk': \\<open>j' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < k'", "using cs_order[OF assms(1,2) csj assms(3) cd_not_ret[OF cdj] jk]"], ["proof (prove)\nusing this:\n  j' < k'\n\ngoal (1 subgoal):\n 1. j' < k'", "."], ["proof (state)\nthis:\n  j' < k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "using  cs_split_shift_cd[OF cdj jk _ jge] n0"], ["proof (prove)\nusing this:\n  k < k + n \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> (k + n - k)\n  0 < n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n    cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') = cs\\<^bsup>\\<pi>'\\<^esup> j' @ cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>'\\<^esup> j' @\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using  cs_split_shift_cd[OF cdj' jk' _ jge'] n0'"], ["proof (prove)\nusing this:\n  k' < k' + n' \\<Longrightarrow>\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> (k' + n' - k')\n  0 < n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n    cs\\<^bsup>\\<pi>'\\<^esup> j' @\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "have \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>k\\<^esup> n = cs\\<^bsup>\\<pi>'\\<guillemotleft>k'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "using csj assms(4)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) =\n  cs\\<^bsup>\\<pi>\\<^esup> j @ cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n\n  cs\\<^bsup>\\<pi>'\\<^esup> (k' + n') =\n  cs\\<^bsup>\\<pi>'\\<^esup> j' @\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  cs\\<^bsup>\\<pi>\\<^esup> (k + n) = cs\\<^bsup>\\<pi>'\\<^esup> (k' + n')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n' \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "using ne"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n  cs\\<^bsup>\\<pi> \\<guillemotleft> k\\<^esup> n \\<noteq>\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> k'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma converged_cd_diverge_cs: assumes \\<open>is_path \\<pi>\\<close> and \\<open>is_path \\<pi>'\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> j  = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and \\<open>j<l\\<close> and \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close> and \\<open>l < m\\<close> and \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close>\nobtains k k' where \\<open>j\\<le>k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> and \\<open>\\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>is_path (\\<pi>\\<guillemotleft>j)\\<close> \\<open>is_path (\\<pi>'\\<guillemotleft>j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j) &&&\n    is_path (\\<pi>' \\<guillemotleft> j')", "using assms(1,2) path_path_shift"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_path ?\\<pi> \\<Longrightarrow> is_path (?\\<pi> \\<guillemotleft> ?m)\n\ngoal (1 subgoal):\n 1. is_path (\\<pi> \\<guillemotleft> j) &&&\n    is_path (\\<pi>' \\<guillemotleft> j')", "by auto"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n  is_path (\\<pi>' \\<guillemotleft> j')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  is_path (\\<pi> \\<guillemotleft> j)\n  is_path (\\<pi>' \\<guillemotleft> j')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>(\\<pi>\\<guillemotleft>j) 0 = (\\<pi>'\\<guillemotleft>j') 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0", "using assms(3) last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0", "by (metis path_shift_def add.right_neutral)"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<not>(\\<exists>l'. cs\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup> (l-j) = cs\\<^bsup>\\<pi>'\\<guillemotleft>j'\\<^esup> l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l'.\n       cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n       cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n       cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l' \\<Longrightarrow>\n    False", "assume \\<open>\\<exists>l'. cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) = cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  \\<exists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n       cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'", "obtain l' where csl: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup> (l - j) = cs\\<^bsup>\\<pi>'\\<guillemotleft>j'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n        cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n       cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l' \\<Longrightarrow>\n    False", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')", "using shifted_cs_eq_is_eq[OF assms(1,2,3) csl] assms(4)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + (l - j)) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')\n  j < l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n       cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l' \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')\n\ngoal (1 subgoal):\n 1. False", "using assms(5)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> (j' + l')\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<nexists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>l-j < m-j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l - j < m - j", "using assms"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j < l\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. l - j < m - j", "by auto"], ["proof (state)\nthis:\n  l - j < m - j\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  l - j < m - j\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> j \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "using cs_return assms(1-5) term_path_stable"], ["proof (prove)\nusing this:\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j < l\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "by (metis nat_less_le)"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>j'<m'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. j' < m'", "using cs_order[OF assms(1,2,3,7)] assms"], ["proof (prove)\nusing this:\n  \\<pi> j \\<noteq> local.return\n  \\<lbrakk>\\<pi> j \\<noteq> local.return; j < m\\<rbrakk>\n  \\<Longrightarrow> j' < m'\n  is_path \\<pi>\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  j < l\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. j' < m'", "by auto"], ["proof (state)\nthis:\n  j' < m'\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup> (m-j) = cs\\<^bsup>\\<pi>'\\<guillemotleft>j'\\<^esup> (m'-j')\\<close>"], ["proof (prove)\nusing this:\n  j' < m'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')", "using cs_eq_is_eq_shifted[OF assms(1,2,3),of \\<open>m-j\\<close> \\<open>m'-j'\\<close>] assms(4,6,7)"], ["proof (prove)\nusing this:\n  j' < m'\n  cs\\<^bsup>\\<pi>\\<^esup> (j + (m - j)) =\n  cs\\<^bsup>\\<pi>'\\<^esup> (j' + (m' - j')) \\<Longrightarrow>\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')\n  j < l\n  l < m\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n    cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  is_path (\\<pi>' \\<guillemotleft> j')\n  (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0\n  \\<nexists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n  l - j < m - j\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')", "obtain k k' where csk: \\<open>cs\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup> k = cs\\<^bsup>\\<pi>'\\<guillemotleft>j'\\<^esup> k'\\<close> and lcdk: \\<open>l-j cd\\<^bsup>\\<pi>\\<guillemotleft>j\\<^esup>\\<rightarrow> k\\<close> and suc:\\<open>(\\<pi>\\<guillemotleft>j) (Suc k) \\<noteq> (\\<pi>'\\<guillemotleft>j') (Suc k')\\<close>"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  is_path (\\<pi>' \\<guillemotleft> j')\n  (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0\n  \\<nexists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n  l - j < m - j\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> k =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> k';\n         l - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k;\n         (\\<pi> \\<guillemotleft> j) (Suc k) \\<noteq>\n         (\\<pi>' \\<guillemotleft> j') (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge"], ["proof (prove)\nusing this:\n  is_path (\\<pi> \\<guillemotleft> j)\n  is_path (\\<pi>' \\<guillemotleft> j')\n  (\\<pi> \\<guillemotleft> j) 0 = (\\<pi>' \\<guillemotleft> j') 0\n  \\<nexists>l'.\n     cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (l - j) =\n     cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> l'\n  l - j < m - j\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> (m - j) =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> (m' - j')\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; ?\\<pi> 0 = ?\\<pi>' 0;\n   \\<nexists>l'. cs\\<^bsup>?\\<pi>\\<^esup> ?l = cs\\<^bsup>?\\<pi>'\\<^esup> l';\n   ?l < ?m; cs\\<^bsup>?\\<pi>\\<^esup> ?m = cs\\<^bsup>?\\<pi>'\\<^esup> ?m';\n   \\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>?\\<pi>\\<^esup> k = cs\\<^bsup>?\\<pi>'\\<^esup> k';\n       ?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k;\n       ?\\<pi> (Suc k) \\<noteq> ?\\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> k =\n                 cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> k';\n         l - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k;\n         (\\<pi> \\<guillemotleft> j) (Suc k) \\<noteq>\n         (\\<pi>' \\<guillemotleft> j') (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup> k =\n  cs\\<^bsup>\\<pi>' \\<guillemotleft> j'\\<^esup> k'\n  l - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k\n  (\\<pi> \\<guillemotleft> j) (Suc k) \\<noteq>\n  (\\<pi>' \\<guillemotleft> j') (Suc k')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> (j+k) = cs\\<^bsup>\\<pi>'\\<^esup> (j'+k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')", "using shifted_cs_eq_is_eq[OF assms(1-3) csk]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j+k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k", "using lcdk assms(1,2,4)"], ["proof (prove)\nusing this:\n  l - j cd\\<^bsup>\\<pi> \\<guillemotleft> j\\<^esup>\\<rightarrow> k\n  is_path \\<pi>\n  is_path \\<pi>'\n  j < l\n\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k", "by (metis add.commute add_diff_cancel_right' cd_path_shift le_add1)"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<pi> (Suc (j+k)) \\<noteq> \\<pi>' (Suc (j'+ k'))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))", "using suc"], ["proof (prove)\nusing this:\n  (\\<pi> \\<guillemotleft> j) (Suc k) \\<noteq>\n  (\\<pi>' \\<guillemotleft> j') (Suc k')\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<open>j \\<le> j+k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> j + k", "by auto"], ["proof (state)\nthis:\n  j \\<le> j + k\n\ngoal (1 subgoal):\n 1. (\\<And>k k'.\n        \\<lbrakk>j \\<le> k;\n         cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n         \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k\n  \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\n  j \\<le> j + k", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k\n  \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\n  j \\<le> j + k\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<open>j+k\\<close> \\<open>j'+k'\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k\n  \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\n  j \\<le> j + k\n  \\<lbrakk>j \\<le> j + k;\n   cs\\<^bsup>\\<pi>\\<^esup> (j + k) = cs\\<^bsup>\\<pi>'\\<^esup> (j' + k');\n   l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j + k;\n   \\<pi> (Suc (j + k)) \\<noteq> \\<pi>' (Suc (j' + k'))\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_ipd_conv: assumes csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> and ipd: \\<open>\\<pi> l = ipd (\\<pi> k)\\<close> \\<open>\\<pi>' l' = ipd(\\<pi>' k')\\<close> \n  and nipd: \\<open>\\<forall>n\\<in>{k..<l}. \\<pi> n \\<noteq> ipd (\\<pi> k)\\<close> \\<open>\\<forall>n'\\<in>{k'..<l'}. \\<pi>' n' \\<noteq> ipd (\\<pi>' k')\\<close> and kl: \\<open>k < l\\<close> \\<open>k' < l'\\<close> \nshows \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "using cs_ipd[OF ipd(1) nipd(1) kl(1)] cs_ipd[OF ipd(2) nipd(2) kl(2)] csk ipd"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi> l) (cs\\<^bsup>\\<pi>\\<^esup> k) @\n  [\\<pi> l]\n  cs\\<^bsup>\\<pi>'\\<^esup> l' =\n  filter (\\<lambda>n. ipd n \\<noteq> \\<pi>' l')\n   (cs\\<^bsup>\\<pi>'\\<^esup> k') @\n  [\\<pi>' l']\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  \\<pi> l = ipd (\\<pi> k)\n  \\<pi>' l' = ipd (\\<pi>' k')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "by (metis (no_types) last_cs)"], ["", "lemma cp_eq_cs: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cp\\<close> shows \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'", "apply(induction rule: cp.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k", "apply blast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<rbrakk>\n       \\<Longrightarrow> cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cd_cs_swap: assumes \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close> \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close> shows \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have \\<open>\\<exists> i. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "using assms(1) excd_impl_exicd"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  \\<exists>k. ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k \\<Longrightarrow>\n  \\<exists>k. ?i icd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. \\<exists>i. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> [\\<pi> l]\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i. l icd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> [\\<pi> l]", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> [\\<pi> l]\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' \\<noteq> [\\<pi>' l']\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> [\\<pi> l]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' \\<noteq> [\\<pi>' l']", "using assms last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> [\\<pi> l]\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' \\<noteq> [\\<pi>' l']", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' \\<noteq> [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "hence \\<open>\\<exists> i'. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' \\<noteq> [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. \\<exists>i'. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'", "by (metis cs_cases)"], ["proof (state)\nthis:\n  \\<exists>i'. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "hence path': \\<open>is_path \\<pi>'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i'. l' icd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n\ngoal (1 subgoal):\n 1. is_path \\<pi>'", "unfolding is_icdi_def is_cdi_def"], ["proof (prove)\nusing this:\n  \\<exists>i'.\n     is_path \\<pi>' \\<and>\n     (is_path \\<pi>' \\<and>\n      i' < l' \\<and>\n      \\<pi>' l' \\<noteq> local.return \\<and>\n      (\\<forall>j\\<in>{i'..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' i'))) \\<and>\n     (\\<forall>m\\<in>{i'<..<l'}.\n         \\<not> (is_path \\<pi>' \\<and>\n                 m < l' \\<and>\n                 \\<pi>' l' \\<noteq> local.return \\<and>\n                 (\\<forall>j\\<in>{m..l'}.\n                     \\<pi>' j \\<noteq> ipd (\\<pi>' m))))\n\ngoal (1 subgoal):\n 1. is_path \\<pi>'", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "from cd_in_cs[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> l]", "obtain ys where csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ ys @ [\\<pi> l]\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ ns @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        cs\\<^bsup>\\<pi>\\<^esup> l =\n        cs\\<^bsup>\\<pi>\\<^esup> k @ ys @ [\\<pi> l] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>\\<^esup> k @ ys @ [\\<pi> l]\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "obtain xs where csk: \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = xs@[\\<pi> k]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [\\<pi> k] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id cs_not_nil last_cs)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = xs @ [\\<pi> k]\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have \\<pi>l: \\<open>\\<pi> l = \\<pi>' l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l = \\<pi>' l'", "using assms last_cs"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> l = \\<pi>' l'", "by metis"], ["proof (state)\nthis:\n  \\<pi> l = \\<pi>' l'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have csl': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = xs@[\\<pi> k]@ys@[\\<pi>' l']\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> l' = xs @ [\\<pi> k] @ ys @ [\\<pi>' l']", "by (metis \\<pi>l append_eq_appendI assms(2) csk csl)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = xs @ [\\<pi> k] @ ys @ [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "from cs_split[of \\<open>\\<pi>'\\<close> \\<open>l'\\<close> \\<open>xs\\<close> \\<open>\\<pi> k\\<close> \\<open>ys\\<close>]"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' =\n  xs @ [\\<pi> k] @ ys @ [\\<pi>' l'] \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k] \\<and>\n     l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m", "obtain m where csm: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k]\\<close> and lcdm: \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' =\n  xs @ [\\<pi> k] @ ys @ [\\<pi>' l'] \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k] \\<and>\n     l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k];\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using csl'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' =\n  xs @ [\\<pi> k] @ ys @ [\\<pi>' l'] \\<Longrightarrow>\n  \\<exists>m.\n     cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k] \\<and>\n     l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = xs @ [\\<pi> k] @ ys @ [\\<pi>' l']\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k];\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m = xs @ [\\<pi> k]\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have csm': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> k'", "by (metis assms(3) csk csm)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "have \\<open>\\<pi>' m \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' m \\<noteq> local.return", "using lcdm"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. \\<pi>' m \\<noteq> local.return", "unfolding is_cdi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  m < l' \\<and>\n  \\<pi>' l' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{m..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' m))\n\ngoal (1 subgoal):\n 1. \\<pi>' m \\<noteq> local.return", "using term_path_stable"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  m < l' \\<and>\n  \\<pi>' l' \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{m..l'}. \\<pi>' j \\<noteq> ipd (\\<pi>' m))\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' m \\<noteq> local.return", "by (metis nat_less_le)"], ["proof (state)\nthis:\n  \\<pi>' m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "hence \\<open>m = k'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. m = k'", "using cs_inj path' csm'"], ["proof (prove)\nusing this:\n  \\<pi>' m \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  is_path \\<pi>'\n  cs\\<^bsup>\\<pi>'\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. m = k'", "by auto"], ["proof (state)\nthis:\n  m = k'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  m = k'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "using lcdm"], ["proof (prove)\nusing this:\n  m = k'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> m\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'", "by auto"], ["proof (state)\nthis:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Observations\\<close>"], ["", "lemma kth_obs_not_none: assumes \\<open>is_kth_obs (path \\<sigma>) k i\\<close> obtains a where \\<open>obsp \\<sigma> i = Some a\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        obsp \\<sigma> i = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_kth_obs (path \\<sigma>) k i\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        obsp \\<sigma> i = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding is_kth_obs_def obsp_def"], ["proof (prove)\nusing this:\n  card (obs_ids (path \\<sigma>) \\<inter> {..<i}) = k \\<and>\n  local.att (path \\<sigma> i) \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        (case local.att (path \\<sigma> i) of None \\<Rightarrow> None\n         | Some f \\<Rightarrow> Some (f (\\<sigma>\\<^bsup>i\\<^esup>))) =\n        Some a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma kth_obs_unique: \\<open>is_kth_obs \\<pi> k i \\<Longrightarrow> is_kth_obs \\<pi> k j \\<Longrightarrow> i = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_kth_obs \\<pi> k i; is_kth_obs \\<pi> k j\\<rbrakk>\n    \\<Longrightarrow> i = j", "proof (induction \\<open>i\\<close> \\<open>j\\<close> rule: nat_sym_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a.\n       \\<lbrakk>is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k a\\<rbrakk>\n       \\<Longrightarrow> a = a\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>is_kth_obs \\<pi> k b; is_kth_obs \\<pi> k a\\<rbrakk>\n                \\<Longrightarrow> b = a;\n        is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "case sym"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k a_\n  is_kth_obs \\<pi> k a_\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a.\n       \\<lbrakk>is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k a\\<rbrakk>\n       \\<Longrightarrow> a = a\n 3. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>is_kth_obs \\<pi> k b; is_kth_obs \\<pi> k a\\<rbrakk>\n                \\<Longrightarrow> b = a;\n        is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k a_\n  is_kth_obs \\<pi> k a_\n\ngoal (1 subgoal):\n 1. a_ = a_", "by simp"], ["proof (state)\nthis:\n  a_ = a_\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>is_kth_obs \\<pi> k b; is_kth_obs \\<pi> k a\\<rbrakk>\n                \\<Longrightarrow> b = a;\n        is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>is_kth_obs \\<pi> k b; is_kth_obs \\<pi> k a\\<rbrakk>\n                \\<Longrightarrow> b = a;\n        is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "case eq"], ["proof (state)\nthis:\n  \\<lbrakk>is_kth_obs \\<pi> k b_; is_kth_obs \\<pi> k a_\\<rbrakk>\n  \\<Longrightarrow> b_ = a_\n  is_kth_obs \\<pi> k a_\n  is_kth_obs \\<pi> k b_\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>is_kth_obs \\<pi> k b; is_kth_obs \\<pi> k a\\<rbrakk>\n                \\<Longrightarrow> b = a;\n        is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_kth_obs \\<pi> k b_; is_kth_obs \\<pi> k a_\\<rbrakk>\n  \\<Longrightarrow> b_ = a_\n  is_kth_obs \\<pi> k a_\n  is_kth_obs \\<pi> k b_\n\ngoal (1 subgoal):\n 1. a_ = b_", "by simp"], ["proof (state)\nthis:\n  a_ = b_\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "case (less i j)"], ["proof (state)\nthis:\n  i < j\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \\<open>obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}", "using less(1)"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}", "by auto"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \\<open>i \\<in> obs_ids \\<pi> \\<inter> {..<j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> obs_ids \\<pi> \\<inter> {..<j}", "using less"], ["proof (prove)\nusing this:\n  i < j\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. i \\<in> obs_ids \\<pi> \\<inter> {..<j}", "unfolding is_kth_obs_def obs_ids_def"], ["proof (prove)\nusing this:\n  i < j\n  card ({k. local.att (\\<pi> k) \\<noteq> None} \\<inter> {..<i}) = k \\<and>\n  local.att (\\<pi> i) \\<noteq> None\n  card ({k. local.att (\\<pi> k) \\<noteq> None} \\<inter> {..<j}) = k \\<and>\n  local.att (\\<pi> j) \\<noteq> None\n\ngoal (1 subgoal):\n 1. i \\<in> {k. local.att (\\<pi> k) \\<noteq> None} \\<inter> {..<j}", "by auto"], ["proof (state)\nthis:\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \\<open>i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> obs_ids \\<pi> \\<inter> {..<i}", "by auto"], ["proof (state)\nthis:\n  i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \\<open>card (obs_ids \\<pi> \\<inter> {..<i}) = card (obs_ids \\<pi> \\<inter> {..<j})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) =\n    card (obs_ids \\<pi> \\<inter> {..<j})", "using less.prems"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) =\n    card (obs_ids \\<pi> \\<inter> {..<j})", "unfolding is_kth_obs_def"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<i}) = k \\<and>\n  local.att (\\<pi> i) \\<noteq> None\n  card (obs_ids \\<pi> \\<inter> {..<j}) = k \\<and>\n  local.att (\\<pi> j) \\<noteq> None\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) =\n    card (obs_ids \\<pi> \\<inter> {..<j})", "by auto"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<i}) =\n  card (obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<i}) =\n  card (obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "have \\<open>finite (obs_ids \\<pi> \\<inter> {..<i})\\<close> \\<open>finite (obs_ids \\<pi> \\<inter> {..<j})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (obs_ids \\<pi> \\<inter> {..<i}) &&&\n    finite (obs_ids \\<pi> \\<inter> {..<j})", "by auto"], ["proof (state)\nthis:\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n  finite (obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "ultimately"], ["proof (chain)\npicking this:\n  obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n  i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\n  card (obs_ids \\<pi> \\<inter> {..<i}) =\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n  finite (obs_ids \\<pi> \\<inter> {..<j})", "have \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  obs_ids \\<pi> \\<inter> {..<i} \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n  i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\n  card (obs_ids \\<pi> \\<inter> {..<i}) =\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n  finite (obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. False", "by (metis card_subset_eq)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a < b; is_kth_obs \\<pi> k a; is_kth_obs \\<pi> k b\\<rbrakk>\n       \\<Longrightarrow> a = b", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. i = j", ".."], ["proof (state)\nthis:\n  i = j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_none_no_kth_obs: assumes \\<open>obs \\<sigma> k = None\\<close> shows \\<open>\\<not> (\\<exists> i. is_kth_obs (path \\<sigma>) k i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>i. is_kth_obs (path \\<sigma>) k i", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs (path \\<sigma>) k i \\<Longrightarrow> False", "using assms"], ["proof (prove)\nusing this:\n  obs \\<sigma> k = None\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs (path \\<sigma>) k i \\<Longrightarrow> False", "unfolding obs_def obsp_def"], ["proof (prove)\nusing this:\n  (if Ex (is_kth_obs (path \\<sigma>) k)\n   then case local.att\n              (path \\<sigma> (The (is_kth_obs (path \\<sigma>) k))) of\n        None \\<Rightarrow> None\n        | Some f \\<Rightarrow>\n            Some\n             (f (\\<sigma>\\<^bsup>The (is_kth_obs (path \\<sigma>)\n k)\\<^esup>))\n   else None) =\n  None\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs (path \\<sigma>) k i \\<Longrightarrow> False", "apply (auto split: option.split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>local.att\n                 (path \\<sigma> (The (is_kth_obs (path \\<sigma>) k))) =\n                None;\n        is_kth_obs (path \\<sigma>) k i\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis assms kth_obs_not_none kth_obs_unique obs_def option.distinct(2) the_equality)"], ["", "lemma obs_some_kth_obs : assumes \\<open>obs \\<sigma> k \\<noteq> None\\<close> obtains i where \\<open>is_kth_obs (path \\<sigma>) k i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs (path \\<sigma>) k i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obs_def assms)"], ["", "lemma not_none_is_obs: assumes \\<open>att(\\<pi> i) \\<noteq> None\\<close> shows \\<open>is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i", "unfolding is_kth_obs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) =\n    card (obs_ids \\<pi> \\<inter> {..<i}) \\<and>\n    local.att (\\<pi> i) \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  local.att (\\<pi> i) \\<noteq> None\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) =\n    card (obs_ids \\<pi> \\<inter> {..<i}) \\<and>\n    local.att (\\<pi> i) \\<noteq> None", "by auto"], ["", "lemma in_obs_ids_is_kth_obs: assumes \\<open>i \\<in> obs_ids \\<pi>\\<close> obtains k where \\<open>is_kth_obs \\<pi> k i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        is_kth_obs \\<pi> k i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        is_kth_obs \\<pi> k i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    is_kth_obs \\<pi> ?k4 i", "have \\<open>att (\\<pi> i) \\<noteq> None\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.att (\\<pi> i) \\<noteq> None", "using assms obs_ids_def"], ["proof (prove)\nusing this:\n  i \\<in> obs_ids \\<pi>\n  obs_ids ?\\<pi> = {k. local.att (?\\<pi> k) \\<noteq> None}\n\ngoal (1 subgoal):\n 1. local.att (\\<pi> i) \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  local.att (\\<pi> i) \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        is_kth_obs \\<pi> k i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    is_kth_obs \\<pi> ?k4 i", "thus \\<open>is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i\\<close>"], ["proof (prove)\nusing this:\n  local.att (\\<pi> i) \\<noteq> None\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i", "using not_none_is_obs"], ["proof (prove)\nusing this:\n  local.att (\\<pi> i) \\<noteq> None\n  local.att (?\\<pi> ?i) \\<noteq> None \\<Longrightarrow>\n  is_kth_obs ?\\<pi> (card (obs_ids ?\\<pi> \\<inter> {..<?i})) ?i\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> (card (obs_ids \\<pi> \\<inter> {..<i})) i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kth_obs_stable: assumes \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>k < l\\<close> shows \\<open>\\<exists> i. is_kth_obs \\<pi> k i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "using assms"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l j\n  k < l\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "proof (induction \\<open>l\\<close> arbitrary: \\<open>j\\<close> rule: less_induct )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "case (less l j)"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < l; is_kth_obs \\<pi> ?y1 ?j1; k < ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. is_kth_obs \\<pi> k a\n  is_kth_obs \\<pi> l j\n  k < l\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have cardl: \\<open>card (obs_ids \\<pi> \\<inter> {..<j}) = l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<j}) = l", "using less is_kth_obs_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < l; is_kth_obs \\<pi> ?y1 ?j1; k < ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. is_kth_obs \\<pi> k a\n  is_kth_obs \\<pi> l j\n  k < l\n  is_kth_obs ?\\<pi> ?k ?i =\n  (card (obs_ids ?\\<pi> \\<inter> {..<?i}) = ?k \\<and>\n   local.att (?\\<pi> ?i) \\<noteq> None)\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<j}) = l", "by auto"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "then"], ["proof (chain)\npicking this:\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l", "obtain i where  ex: \\<open>i \\<in> obs_ids \\<pi> \\<inter> {..<j}\\<close> (is \\<open>?P i\\<close>)"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using less(3)"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis card.empty empty_iff less_irrefl subsetI subset_antisym zero_diff zero_less_diff)"], ["proof (state)\nthis:\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have bound: \\<open>\\<forall> i. i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<longrightarrow> i \\<le> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<longrightarrow> i \\<le> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<longrightarrow> i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "let \\<open>?i\\<close> = \\<open>GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have *: \\<open>?i < j\\<close> \\<open>?i \\<in> obs_ids \\<pi>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) < j &&&\n    (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) \\<in> obs_ids \\<pi>", "using GreatestI_nat[of \\<open>?P\\<close> \\<open>i\\<close> \\<open>j\\<close>] ex bound"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<in> obs_ids \\<pi> \\<inter> {..<j};\n   \\<And>y.\n      y \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<Longrightarrow>\n      y \\<le> j\\<rbrakk>\n  \\<Longrightarrow> (GREATEST a. a \\<in> obs_ids \\<pi> \\<inter> {..<j})\n                    \\<in> obs_ids \\<pi> \\<inter> {..<j}\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n  \\<forall>i.\n     i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<longrightarrow> i \\<le> j\n\ngoal (1 subgoal):\n 1. (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) < j &&&\n    (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) \\<in> obs_ids \\<pi>", "by auto"], ["proof (state)\nthis:\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) < j\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) \\<in> obs_ids \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have **: \\<open>\\<forall> i. i \\<in> obs_ids \\<pi> \\<and> i<j \\<longrightarrow> i \\<le> ?i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<in> obs_ids \\<pi> \\<and> i < j \\<longrightarrow>\n       i \\<le> (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})", "using Greatest_le_nat[of \\<open>?P\\<close> _ \\<open>j\\<close>] ex bound"], ["proof (prove)\nusing this:\n  \\<lbrakk>?k \\<in> obs_ids \\<pi> \\<inter> {..<j};\n   \\<And>y.\n      y \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<Longrightarrow>\n      y \\<le> j\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> (GREATEST a.\n                                 a \\<in> obs_ids \\<pi> \\<inter> {..<j})\n  i \\<in> obs_ids \\<pi> \\<inter> {..<j}\n  \\<forall>i.\n     i \\<in> obs_ids \\<pi> \\<inter> {..<j} \\<longrightarrow> i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       i \\<in> obs_ids \\<pi> \\<and> i < j \\<longrightarrow>\n       i \\<le> (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     i \\<in> obs_ids \\<pi> \\<and> i < j \\<longrightarrow>\n     i \\<le> (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have \\<open>(obs_ids \\<pi> \\<inter> {..<?i}) \\<union> {?i} = obs_ids \\<pi> \\<inter> {..<j}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter>\n    {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n    {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n    obs_ids \\<pi> \\<inter> {..<j}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. obs_ids \\<pi> \\<inter>\n    {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n    {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}\n    \\<subseteq> obs_ids \\<pi> \\<inter> {..<j}\n 2. obs_ids \\<pi> \\<inter> {..<j}\n    \\<subseteq> obs_ids \\<pi> \\<inter>\n                {..<GREATEST i.\n                       i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n                {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) \\<in> obs_ids \\<pi>\n 2. (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) < j\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>;\n        x < (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < j\n 4. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>; x < j;\n        x \\<noteq> (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < (GREATEST i.\n                                 i \\<in> obs_ids \\<pi> \\<and> i < j)", "using *[simplified]"], ["proof (prove)\nusing this:\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) < j\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) \\<in> obs_ids \\<pi>\n\ngoal (4 subgoals):\n 1. (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) \\<in> obs_ids \\<pi>\n 2. (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j) < j\n 3. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>;\n        x < (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < j\n 4. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>; x < j;\n        x \\<noteq> (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < (GREATEST i.\n                                 i \\<in> obs_ids \\<pi> \\<and> i < j)", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>; x < j;\n        x \\<noteq> (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < (GREATEST i.\n                                 i \\<in> obs_ids \\<pi> \\<and> i < j)", "using **[simplified]"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     i \\<in> obs_ids \\<pi> \\<and> i < j \\<longrightarrow>\n     i \\<le> (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> obs_ids \\<pi>; x < j;\n        x \\<noteq> (GREATEST i. i \\<in> obs_ids \\<pi> \\<and> i < j)\\<rbrakk>\n       \\<Longrightarrow> x < (GREATEST i.\n                                 i \\<in> obs_ids \\<pi> \\<and> i < j)", "by auto"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter>\n  {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n  {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n  obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "moreover"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter>\n  {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n  {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n  obs_ids \\<pi> \\<inter> {..<j}\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have \\<open>?i \\<notin> (obs_ids \\<pi> \\<inter> {..<?i})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n    \\<notin> obs_ids \\<pi> \\<inter>\n             {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}", "by auto"], ["proof (state)\nthis:\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n  \\<notin> obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "ultimately"], ["proof (chain)\npicking this:\n  obs_ids \\<pi> \\<inter>\n  {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n  {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n  obs_ids \\<pi> \\<inter> {..<j}\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n  \\<notin> obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}", "have \\<open>Suc (card (obs_ids \\<pi> \\<inter> {..<?i})) = l\\<close>"], ["proof (prove)\nusing this:\n  obs_ids \\<pi> \\<inter>\n  {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n  {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n  obs_ids \\<pi> \\<inter> {..<j}\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n  \\<notin> obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}\n\ngoal (1 subgoal):\n 1. Suc (card\n          (obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}})) =\n    l", "using cardl"], ["proof (prove)\nusing this:\n  obs_ids \\<pi> \\<inter>\n  {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} \\<union>\n  {GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}} =\n  obs_ids \\<pi> \\<inter> {..<j}\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n  \\<notin> obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l\n\ngoal (1 subgoal):\n 1. Suc (card\n          (obs_ids \\<pi> \\<inter>\n           {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}})) =\n    l", "by (metis Un_empty_right Un_insert_right card_insert_disjoint finite_Int finite_lessThan)"], ["proof (state)\nthis:\n  Suc (card\n        (obs_ids \\<pi> \\<inter>\n         {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}})) =\n  l\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "hence \\<open>card (obs_ids \\<pi> \\<inter> {..<?i}) = l - 1\\<close>"], ["proof (prove)\nusing this:\n  Suc (card\n        (obs_ids \\<pi> \\<inter>\n         {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}})) =\n  l\n\ngoal (1 subgoal):\n 1. card\n     (obs_ids \\<pi> \\<inter>\n      {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}) =\n    l - 1", "by auto"], ["proof (state)\nthis:\n  card\n   (obs_ids \\<pi> \\<inter>\n    {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}) =\n  l - 1\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "hence iko: \\<open>is_kth_obs \\<pi> (l - 1) ?i\\<close>"], ["proof (prove)\nusing this:\n  card\n   (obs_ids \\<pi> \\<inter>\n    {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}) =\n  l - 1\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (l - 1)\n     (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})", "using *(2)"], ["proof (prove)\nusing this:\n  card\n   (obs_ids \\<pi> \\<inter>\n    {..<GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}}) =\n  l - 1\n  (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j}) \\<in> obs_ids \\<pi>\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (l - 1)\n     (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})", "unfolding is_kth_obs_def obs_ids_def"], ["proof (prove)\nusing this:\n  card\n   ({k. local.att (\\<pi> k) \\<noteq> None} \\<inter>\n    {..<GREATEST i.\n           i \\<in> {k. local.att (\\<pi> k) \\<noteq> None} \\<inter>\n                   {..<j}}) =\n  l - 1\n  (GREATEST i.\n      i \\<in> {k. local.att (\\<pi> k) \\<noteq> None} \\<inter> {..<j})\n  \\<in> {k. local.att (\\<pi> k) \\<noteq> None}\n\ngoal (1 subgoal):\n 1. card\n     ({k. local.att (\\<pi> k) \\<noteq> None} \\<inter>\n      {..<GREATEST i.\n             i \\<in> {k. local.att (\\<pi> k) \\<noteq> None} \\<inter>\n                     {..<j}}) =\n    l - 1 \\<and>\n    local.att\n     (\\<pi>\n       (GREATEST i.\n           i \\<in> {k. local.att (\\<pi> k) \\<noteq> None} \\<inter>\n                   {..<j})) \\<noteq>\n    None", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> (l - 1)\n   (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "have ll: \\<open>l - 1 < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l - 1 < l", "by (metis One_nat_def diff_Suc_less less.prems(2) not_gr0 not_less0)"], ["proof (state)\nthis:\n  l - 1 < l\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "note IV=less(1)[OF ll iko]"], ["proof (state)\nthis:\n  k < l - 1 \\<Longrightarrow> \\<exists>a. is_kth_obs \\<pi> k a\n\ngoal (1 subgoal):\n 1. \\<And>x j.\n       \\<lbrakk>\\<And>y j.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y j; k < y\\<rbrakk>\n                   \\<Longrightarrow> Ex (is_kth_obs \\<pi> k);\n        is_kth_obs \\<pi> x j; k < x\\<rbrakk>\n       \\<Longrightarrow> Ex (is_kth_obs \\<pi> k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "assume \\<open>k < l - 1\\<close>"], ["proof (state)\nthis:\n  k < l - 1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  k < l - 1\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "using IV"], ["proof (prove)\nusing this:\n  k < l - 1\n  k < l - 1 \\<Longrightarrow> \\<exists>a. is_kth_obs \\<pi> k a\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "by simp"], ["proof (state)\nthis:\n  \\<exists>i. is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. \\<not> k < l - 1 \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < l - 1 \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "assume \\<open>\\<not> k < l - 1\\<close>"], ["proof (state)\nthis:\n  \\<not> k < l - 1\n\ngoal (1 subgoal):\n 1. \\<not> k < l - 1 \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "hence \\<open>k = l - 1\\<close>"], ["proof (prove)\nusing this:\n  \\<not> k < l - 1\n\ngoal (1 subgoal):\n 1. k = l - 1", "using less"], ["proof (prove)\nusing this:\n  \\<not> k < l - 1\n  \\<lbrakk>?y1 < l; is_kth_obs \\<pi> ?y1 ?j1; k < ?y1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. is_kth_obs \\<pi> k a\n  is_kth_obs \\<pi> l j\n  k < l\n\ngoal (1 subgoal):\n 1. k = l - 1", "by auto"], ["proof (state)\nthis:\n  k = l - 1\n\ngoal (1 subgoal):\n 1. \\<not> k < l - 1 \\<Longrightarrow> \\<exists>i. is_kth_obs \\<pi> k i", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  k = l - 1\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "using iko"], ["proof (prove)\nusing this:\n  k = l - 1\n  is_kth_obs \\<pi> (l - 1)\n   (GREATEST i. i \\<in> obs_ids \\<pi> \\<inter> {..<j})\n\ngoal (1 subgoal):\n 1. \\<exists>i. is_kth_obs \\<pi> k i", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. is_kth_obs \\<pi> k i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i. is_kth_obs \\<pi> k i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kth_obs_mono: assumes \\<open>is_kth_obs \\<pi> k i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>k < l\\<close> shows \\<open>i < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "assume \\<open>\\<not> i < j\\<close>"], ["proof (state)\nthis:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "hence \\<open>{..<j} \\<subseteq> {..<i}\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < j\n\ngoal (1 subgoal):\n 1. {..<j} \\<subseteq> {..<i}", "by auto"], ["proof (state)\nthis:\n  {..<j} \\<subseteq> {..<i}\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "hence \\<open>obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}\\<close>"], ["proof (prove)\nusing this:\n  {..<j} \\<subseteq> {..<i}\n\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}", "by auto"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "have \\<open>finite (obs_ids \\<pi> \\<inter> {..<i})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (obs_ids \\<pi> \\<inter> {..<i})", "by auto"], ["proof (state)\nthis:\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}\n  finite (obs_ids \\<pi> \\<inter> {..<i})", "have \\<open>card (obs_ids \\<pi> \\<inter> {..<j}) \\<le> card (obs_ids \\<pi> \\<inter> {..<i})\\<close>"], ["proof (prove)\nusing this:\n  obs_ids \\<pi> \\<inter> {..<j} \\<subseteq> obs_ids \\<pi> \\<inter> {..<i}\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<j})\n    \\<le> card (obs_ids \\<pi> \\<inter> {..<i})", "by (metis card_mono)"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  \\<le> card (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. \\<not> i < j \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  \\<le> card (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  \\<le> card (obs_ids \\<pi> \\<inter> {..<i})\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> l j\n  k < l\n\ngoal (1 subgoal):\n 1. False", "unfolding is_kth_obs_def"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<j})\n  \\<le> card (obs_ids \\<pi> \\<inter> {..<i})\n  card (obs_ids \\<pi> \\<inter> {..<i}) = k \\<and>\n  local.att (\\<pi> i) \\<noteq> None\n  card (obs_ids \\<pi> \\<inter> {..<j}) = l \\<and>\n  local.att (\\<pi> j) \\<noteq> None\n  k < l\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kth_obs_le_iff: assumes \\<open>is_kth_obs \\<pi> k i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close>  shows \\<open>k < l \\<longleftrightarrow> i < j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (k < l) = (i < j)", "by (metis assms kth_obs_unique kth_obs_mono not_less_iff_gr_or_eq)"], ["", "lemma ret_obs_all_obs: assumes path: \\<open>is_path \\<pi>\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and ret: \\<open>\\<pi> i = return\\<close> and kl: \\<open>k < l\\<close> obtains j where \\<open>is_kth_obs \\<pi> l j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        is_kth_obs \\<pi> l j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        is_kth_obs \\<pi> l j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show \\<open>thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using kl iki ret"], ["proof (prove)\nusing this:\n  k < l\n  is_kth_obs \\<pi> k i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. thesis", "proof (induction \\<open>l - k\\<close> arbitrary: \\<open>k\\<close> \\<open>i\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (less k i)"], ["proof (state)\nthis:\n  \\<lbrakk>l - ?k1 < l - k; ?k1 < l; is_kth_obs \\<pi> ?k1 ?i1;\n   \\<pi> ?i1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  k < l\n  is_kth_obs \\<pi> k i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "note kl = \\<open>k < l\\<close>"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "note iki = \\<open>is_kth_obs \\<pi> k i\\<close>"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "note ret = \\<open>\\<pi> i = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have card: \\<open>card (obs_ids \\<pi> \\<inter> {..<i}) = k\\<close> and att_ret: \\<open>att return \\<noteq> None\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) = k &&&\n    local.att local.return \\<noteq> None", "using iki ret"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) = k &&&\n    local.att local.return \\<noteq> None", "unfolding is_kth_obs_def"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<i}) = k \\<and>\n  local.att (\\<pi> i) \\<noteq> None\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<i}) = k &&&\n    local.att local.return \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<i}) = k\n  local.att local.return \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have rets: \\<open>\\<pi> (Suc i) = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) = local.return", "using path ret term_path_stable"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  \\<pi> i = local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc i) = local.return\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence attsuc: \\<open>att (\\<pi> (Suc i)) \\<noteq> None\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc i) = local.return\n\ngoal (1 subgoal):\n 1. local.att (\\<pi> (Suc i)) \\<noteq> None", "using att_ret"], ["proof (prove)\nusing this:\n  \\<pi> (Suc i) = local.return\n  local.att local.return \\<noteq> None\n\ngoal (1 subgoal):\n 1. local.att (\\<pi> (Suc i)) \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence *: \\<open>i \\<in> obs_ids \\<pi>\\<close>"], ["proof (prove)\nusing this:\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n\ngoal (1 subgoal):\n 1. i \\<in> obs_ids \\<pi>", "using att_ret ret"], ["proof (prove)\nusing this:\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n  local.att local.return \\<noteq> None\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. i \\<in> obs_ids \\<pi>", "unfolding obs_ids_def"], ["proof (prove)\nusing this:\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n  local.att local.return \\<noteq> None\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. i \\<in> {k. local.att (\\<pi> k) \\<noteq> None}", "by auto"], ["proof (state)\nthis:\n  i \\<in> obs_ids \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>{..< Suc i} = insert i {..<i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<Suc i} = insert i {..<i}", "by auto"], ["proof (state)\nthis:\n  {..<Suc i} = insert i {..<i}\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence a: \\<open>obs_ids \\<pi> \\<inter> {..< Suc i} = insert i (obs_ids \\<pi> \\<inter> {..<i})\\<close>"], ["proof (prove)\nusing this:\n  {..<Suc i} = insert i {..<i}\n\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter> {..<Suc i} =\n    insert i (obs_ids \\<pi> \\<inter> {..<i})", "using *"], ["proof (prove)\nusing this:\n  {..<Suc i} = insert i {..<i}\n  i \\<in> obs_ids \\<pi>\n\ngoal (1 subgoal):\n 1. obs_ids \\<pi> \\<inter> {..<Suc i} =\n    insert i (obs_ids \\<pi> \\<inter> {..<i})", "by auto"], ["proof (state)\nthis:\n  obs_ids \\<pi> \\<inter> {..<Suc i} =\n  insert i (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have b: \\<open>i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> obs_ids \\<pi> \\<inter> {..<i}", "by auto"], ["proof (state)\nthis:\n  i \\<notin> obs_ids \\<pi> \\<inter> {..<i}\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \\<open>finite (obs_ids \\<pi> \\<inter> {..<i})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (obs_ids \\<pi> \\<inter> {..<i})", "by auto"], ["proof (state)\nthis:\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence \\<open>card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k\\<close>"], ["proof (prove)\nusing this:\n  finite (obs_ids \\<pi> \\<inter> {..<i})\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k", "by (metis card card_insert_disjoint a b)"], ["proof (state)\nthis:\n  card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence iksuc: \\<open>is_kth_obs \\<pi> (Suc k) (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (Suc k) (Suc i)", "using attsuc"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n\ngoal (1 subgoal):\n 1. is_kth_obs \\<pi> (Suc k) (Suc i)", "unfolding is_kth_obs_def"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k\n  local.att (\\<pi> (Suc i)) \\<noteq> None\n\ngoal (1 subgoal):\n 1. card (obs_ids \\<pi> \\<inter> {..<Suc i}) = Suc k \\<and>\n    local.att (\\<pi> (Suc i)) \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> (Suc k) (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "have suckl: \\<open>Suc k \\<le> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k \\<le> l", "using kl"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. Suc k \\<le> l", "by auto"], ["proof (state)\nthis:\n  Suc k \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "note less"], ["proof (state)\nthis:\n  \\<lbrakk>l - ?k1 < l - k; ?k1 < l; is_kth_obs \\<pi> ?k1 ?i1;\n   \\<pi> ?i1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  k < l\n  is_kth_obs \\<pi> k i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<And>k i.\n       \\<lbrakk>\\<And>ka i.\n                   \\<lbrakk>l - ka < l - k; ka < l; is_kth_obs \\<pi> ka i;\n                    \\<pi> i = local.return\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>l - ?k1 < l - k; ?k1 < l; is_kth_obs \\<pi> ?k1 ?i1;\n   \\<pi> ?i1 = local.return\\<rbrakk>\n  \\<Longrightarrow> thesis\n  k < l\n  is_kth_obs \\<pi> k i\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases \\<open>Suc k < l\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return; Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume skl: \\<open>Suc k < l\\<close>"], ["proof (state)\nthis:\n  Suc k < l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return; Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "from less(1)[OF _ skl iksuc rets] skl"], ["proof (chain)\npicking this:\n  l - Suc k < l - k \\<Longrightarrow> thesis\n  Suc k < l", "show \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  l - Suc k < l - k \\<Longrightarrow> thesis\n  Suc k < l\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \\<open>\\<not> Suc k < l\\<close>"], ["proof (state)\nthis:\n  \\<not> Suc k < l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \\<open>Suc k = l\\<close>"], ["proof (prove)\nusing this:\n  \\<not> Suc k < l\n\ngoal (1 subgoal):\n 1. Suc k = l", "using suckl"], ["proof (prove)\nusing this:\n  \\<not> Suc k < l\n  Suc k \\<le> l\n\ngoal (1 subgoal):\n 1. Suc k = l", "by auto"], ["proof (state)\nthis:\n  Suc k = l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k i.\n                \\<lbrakk>l - k < l - k; k < l; is_kth_obs \\<pi> k i;\n                 \\<pi> i = local.return\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     k < l; is_kth_obs \\<pi> k i; \\<pi> i = local.return;\n     \\<not> Suc k < l\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  Suc k = l\n\ngoal (1 subgoal):\n 1. thesis", "using iksuc that"], ["proof (prove)\nusing this:\n  Suc k = l\n  is_kth_obs \\<pi> (Suc k) (Suc i)\n  is_kth_obs \\<pi> l ?j1 \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_kth_obs_missing_cs: assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and not_in_\\<pi>': \\<open>\\<not>(\\<exists>i'. is_kth_obs \\<pi>' k i')\\<close>  obtains  l j where \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l j.\n        \\<lbrakk>is_kth_obs \\<pi> l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume \\<open>\\<not> thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence all_in_\\<pi>': \\<open>\\<forall> l j. is_kth_obs \\<pi> l j \\<longrightarrow> (\\<exists> j' . cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\nusing this:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>l j.\n       is_kth_obs \\<pi> l j \\<longrightarrow>\n       (\\<exists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "using that"], ["proof (prove)\nusing this:\n  \\<not> thesis\n  \\<lbrakk>is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>l j.\n       is_kth_obs \\<pi> l j \\<longrightarrow>\n       (\\<exists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "by blast"], ["proof (state)\nthis:\n  \\<forall>l j.\n     is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>l j.\n     is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "obtain i' where csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l j.\n     is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>l j.\n     is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_kth_obs \\<pi> k i\n  \\<nexists>i'. is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence \\<open>att(\\<pi>' i') \\<noteq> None\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. local.att (\\<pi>' i') \\<noteq> None", "using iki"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. local.att (\\<pi>' i') \\<noteq> None", "by (metis is_kth_obs_def last_cs)"], ["proof (state)\nthis:\n  local.att (\\<pi>' i') \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  local.att (\\<pi>' i') \\<noteq> None", "obtain k' where ik': \\<open>is_kth_obs \\<pi>' k' i'\\<close>"], ["proof (prove)\nusing this:\n  local.att (\\<pi>' i') \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        is_kth_obs \\<pi>' k' i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis not_none_is_obs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k' i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "hence kk': \\<open>k' < k\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k' i'\n\ngoal (1 subgoal):\n 1. k' < k", "using not_in_\\<pi>' kth_obs_stable"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k' i'\n  \\<nexists>i'. is_kth_obs \\<pi>' k i'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?l ?j; ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. is_kth_obs ?\\<pi> ?k i\n\ngoal (1 subgoal):\n 1. k' < k", "by (auto, metis not_less_iff_gr_or_eq)"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>l j.\n                \\<lbrakk>is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \\<open>\\<pi> i = return\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<pi> i = local.return \\<Longrightarrow> False\n 2. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False", "assume \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. \\<pi> i = local.return \\<Longrightarrow> False\n 2. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. False", "using kk' ik' csi iki"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  k' < k\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. False", "proof (induction \\<open>k\\<close> arbitrary: \\<open>i\\<close> \\<open>i'\\<close> \\<open>k'\\<close> )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i i' k'.\n       \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < 0;\n        is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> 0 i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "case 0"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n  k' < 0\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> 0 i\n\ngoal (2 subgoals):\n 1. \\<And>i i' k'.\n       \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < 0;\n        is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> 0 i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  k' < 0\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> 0 i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "case (Suc k i i' k')"], ["proof (state)\nthis:\n  \\<lbrakk>\\<pi> ?i1 \\<noteq> local.return; ?k'1 < k;\n   is_kth_obs \\<pi>' ?k'1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   is_kth_obs \\<pi> k ?i1\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<pi> i \\<noteq> local.return\n  k' < Suc k\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> (Suc k) i\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<pi> ?i1 \\<noteq> local.return; ?k'1 < k;\n   is_kth_obs \\<pi>' ?k'1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   is_kth_obs \\<pi> k ?i1\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<pi> i \\<noteq> local.return\n  k' < Suc k\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> (Suc k) i", "obtain j where ikj: \\<open>is_kth_obs \\<pi> k j\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<pi> ?i1 \\<noteq> local.return; ?k'1 < k;\n   is_kth_obs \\<pi>' ?k'1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   is_kth_obs \\<pi> k ?i1\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<pi> i \\<noteq> local.return\n  k' < Suc k\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> (Suc k) i\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        is_kth_obs \\<pi> k j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis kth_obs_stable lessI)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  is_kth_obs \\<pi> k j", "obtain j' where csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        cs\\<^bsup>\\<pi>\\<^esup> j =\n        cs\\<^bsup>\\<pi>'\\<^esup> j' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using all_in_\\<pi>'"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k j\n  \\<forall>l j.\n     is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        cs\\<^bsup>\\<pi>\\<^esup> j =\n        cs\\<^bsup>\\<pi>'\\<^esup> j' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>att(\\<pi>' j') \\<noteq> None\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. local.att (\\<pi>' j') \\<noteq> None", "using ikj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  is_kth_obs \\<pi> k j\n\ngoal (1 subgoal):\n 1. local.att (\\<pi>' j') \\<noteq> None", "by (metis is_kth_obs_def last_cs)"], ["proof (state)\nthis:\n  local.att (\\<pi>' j') \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  local.att (\\<pi>' j') \\<noteq> None", "obtain k2 where ik2: \\<open>is_kth_obs \\<pi>' k2 j'\\<close>"], ["proof (prove)\nusing this:\n  local.att (\\<pi>' j') \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>k2.\n        is_kth_obs \\<pi>' k2 j' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis not_none_is_obs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k2 j'\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "have ji: \\<open>j < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < i", "using kth_obs_mono [OF ikj \\<open>is_kth_obs \\<pi> (Suc k) i\\<close>]"], ["proof (prove)\nusing this:\n  k < Suc k \\<Longrightarrow> j < i\n\ngoal (1 subgoal):\n 1. j < i", "by auto"], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "hence nretj: \\<open>\\<pi> j \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "using Suc(2) term_path_stable less_imp_le path(1)"], ["proof (prove)\nusing this:\n  j < i\n  \\<pi> i \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "have ji': \\<open>j' < i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < i'", "using cs_order[OF path _ _ nretj, of \\<open>j'\\<close> \\<open>i\\<close> \\<open>i'\\<close>] csj \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>  ji"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j';\n   cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'; j < i\\<rbrakk>\n  \\<Longrightarrow> j' < i'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  j < i\n\ngoal (1 subgoal):\n 1. j' < i'", "by auto"], ["proof (state)\nthis:\n  j' < i'\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>k2 \\<noteq> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 \\<noteq> k'", "using ik2 Suc(4) ji' kth_obs_unique[of \\<open>\\<pi>'\\<close> \\<open>k'\\<close> \\<open>i'\\<close> \\<open>j'\\<close>]"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k2 j'\n  is_kth_obs \\<pi>' k' i'\n  j' < i'\n  \\<lbrakk>is_kth_obs \\<pi>' k' i'; is_kth_obs \\<pi>' k' j'\\<rbrakk>\n  \\<Longrightarrow> i' = j'\n\ngoal (1 subgoal):\n 1. k2 \\<noteq> k'", "by (metis less_irrefl)"], ["proof (state)\nthis:\n  k2 \\<noteq> k'\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "hence k2k': \\<open>k2 < k'\\<close>"], ["proof (prove)\nusing this:\n  k2 \\<noteq> k'\n\ngoal (1 subgoal):\n 1. k2 < k'", "using kth_obs_mono[OF \\<open>is_kth_obs \\<pi>' k' i'\\<close> ik2] ji'"], ["proof (prove)\nusing this:\n  k2 \\<noteq> k'\n  k' < k2 \\<Longrightarrow> i' < j'\n  j' < i'\n\ngoal (1 subgoal):\n 1. k2 < k'", "by (metis not_less_iff_gr_or_eq)"], ["proof (state)\nthis:\n  k2 < k'\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "hence k2k: \\<open>k2 < k\\<close>"], ["proof (prove)\nusing this:\n  k2 < k'\n\ngoal (1 subgoal):\n 1. k2 < k", "using Suc"], ["proof (prove)\nusing this:\n  k2 < k'\n  \\<lbrakk>\\<pi> ?i1 \\<noteq> local.return; ?k'1 < k;\n   is_kth_obs \\<pi>' ?k'1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 = cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   is_kth_obs \\<pi> k ?i1\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<pi> i \\<noteq> local.return\n  k' < Suc k\n  is_kth_obs \\<pi>' k' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> (Suc k) i\n\ngoal (1 subgoal):\n 1. k2 < k", "by auto"], ["proof (state)\nthis:\n  k2 < k\n\ngoal (1 subgoal):\n 1. \\<And>k i i' k'.\n       \\<lbrakk>\\<And>i i' k'.\n                   \\<lbrakk>\\<pi> i \\<noteq> local.return; k' < k;\n                    is_kth_obs \\<pi>' k' i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> k i\\<rbrakk>\n                   \\<Longrightarrow> False;\n        \\<pi> i \\<noteq> local.return; k' < Suc k; is_kth_obs \\<pi>' k' i';\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> (Suc k) i\\<rbrakk>\n       \\<Longrightarrow> False", "from Suc.IH[OF nretj k2k ik2 csj ikj]"], ["proof (chain)\npicking this:\n  False", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. False", "."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<pi> i = local.return \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> i = local.return \\<Longrightarrow> False", "assume \\<open>\\<pi> i = return\\<close>"], ["proof (state)\nthis:\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> i = local.return \\<Longrightarrow> False", "hence reti': \\<open>\\<pi>' i' = return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i = local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' i' = local.return", "by (metis csi last_cs)"], ["proof (state)\nthis:\n  \\<pi>' i' = local.return\n\ngoal (1 subgoal):\n 1. \\<pi> i = local.return \\<Longrightarrow> False", "from ret_obs_all_obs[OF path(2) ik' reti' kk', of \\<open>False\\<close>] not_in_\\<pi>'"], ["proof (chain)\npicking this:\n  (\\<And>j. is_kth_obs \\<pi>' k j \\<Longrightarrow> False) \\<Longrightarrow>\n  False\n  \\<nexists>i'. is_kth_obs \\<pi>' k i'", "show \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>j. is_kth_obs \\<pi>' k j \\<Longrightarrow> False) \\<Longrightarrow>\n  False\n  \\<nexists>i'. is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kth_obs_cs_missing_cs:  assumes path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close> and iki: \\<open>is_kth_obs \\<pi> k i\\<close> and iki': \\<open>is_kth_obs \\<pi>' k i'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> \nobtains l j where \\<open>j \\<le> i\\<close> \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close> | l' j' where \\<open>j' \\<le> i'\\<close> \\<open>is_kth_obs \\<pi>' l' j'\\<close> \\<open>\\<not> (\\<exists> j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j l.\n                \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>j' l'.\n        \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n         \\<nexists>j.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j l.\n                \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>j' l'.\n        \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n         \\<nexists>j.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "assume nt: \\<open>\\<not> thesis\\<close>"], ["proof (state)\nthis:\n  \\<not> thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>j l.\n                \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                 \\<nexists>j'.\n                    cs\\<^bsup>\\<pi>\\<^esup> j =\n                    cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<And>j' l'.\n        \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n         \\<nexists>j.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis;\n     \\<not> thesis\\<rbrakk>\n    \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using iki iki' csi that"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>?j1 \\<le> i; is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?j'1 \\<le> i'; is_kth_obs \\<pi>' ?l'1 ?j'1;\n   \\<nexists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. False", "proof (induction \\<open>k\\<close> arbitrary: \\<open>i\\<close> \\<open>i'\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "case (less k i i')"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < k; is_kth_obs \\<pi> ?y1 ?i1; is_kth_obs \\<pi>' ?y1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<And>j l.\n      \\<lbrakk>j \\<le> ?i1; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>j' l'.\n      \\<lbrakk>j' \\<le> ?i'1; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> False\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>?j1 \\<le> i; is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?j'1 \\<le> i'; is_kth_obs \\<pi>' ?l'1 ?j'1;\n   \\<nexists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "hence all_in_\\<pi>': \\<open>\\<forall> l j. j\\<le>i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow> (\\<exists> j' . cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close> \n    and all_in_\\<pi>: \\<open>\\<forall> l' j'. j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow> (\\<exists> j . cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < k; is_kth_obs \\<pi> ?y1 ?i1; is_kth_obs \\<pi>' ?y1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<And>j l.\n      \\<lbrakk>j \\<le> ?i1; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>j' l'.\n      \\<lbrakk>j' \\<le> ?i'1; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> False\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>?j1 \\<le> i; is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?j'1 \\<le> i'; is_kth_obs \\<pi>' ?l'1 ?j'1;\n   \\<nexists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<forall>l j.\n       j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow>\n       (\\<exists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j') &&&\n    \\<forall>l' j'.\n       j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow>\n       (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "by (metis nt) (metis nt less(6))"], ["proof (state)\nthis:\n  \\<forall>l j.\n     j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  \\<forall>l' j'.\n     j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "obtain j j' where csji: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close> and csij: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using all_in_\\<pi> all_in_\\<pi>' less"], ["proof (prove)\nusing this:\n  \\<forall>l' j'.\n     j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  \\<forall>l j.\n     j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  \\<lbrakk>?y1 < k; is_kth_obs \\<pi> ?y1 ?i1; is_kth_obs \\<pi>' ?y1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<And>j l.\n      \\<lbrakk>j \\<le> ?i1; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>j' l'.\n      \\<lbrakk>j' \\<le> ?i'1; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> False\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>?j1 \\<le> i; is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?j'1 \\<le> i'; is_kth_obs \\<pi>' ?l'1 ?j'1;\n   \\<nexists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i';\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'", "obtain l l' where ilj: \\<open>is_kth_obs \\<pi> l j\\<close> and ilj': \\<open>is_kth_obs \\<pi>' l' j'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. (\\<And>l l'.\n        \\<lbrakk>is_kth_obs \\<pi> l j; is_kth_obs \\<pi>' l' j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis is_kth_obs_def last_cs less.prems(1,2))"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> l j\n  is_kth_obs \\<pi>' l' j'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have lnk: \\<open>l \\<noteq> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<noteq> k", "using ilj csji less(2) less(4) kth_obs_unique"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l j\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k i\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?k ?j\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j\n\ngoal (1 subgoal):\n 1. l \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  l \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have lnk': \\<open>l' \\<noteq> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<noteq> k", "using ilj' csij less(3) less(4) kth_obs_unique"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l' j'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?k ?j\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j\n\ngoal (1 subgoal):\n 1. l' \\<noteq> k", "by auto"], ["proof (state)\nthis:\n  l' \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have cseq: \\<open>\\<forall> l j j'. l < k \\<and>  is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "fix t p p'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "assume tk: \\<open>t < k\\<close> and ikp: \\<open>is_kth_obs \\<pi> t p\\<close> and ikp': \\<open>is_kth_obs \\<pi>' t p'\\<close>"], ["proof (state)\nthis:\n  t < k\n  is_kth_obs \\<pi> t p\n  is_kth_obs \\<pi>' t p'\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "hence pi: \\<open>p < i\\<close> and pi': \\<open>p' < i'\\<close>"], ["proof (prove)\nusing this:\n  t < k\n  is_kth_obs \\<pi> t p\n  is_kth_obs \\<pi>' t p'\n\ngoal (1 subgoal):\n 1. p < i &&& p' < i'", "by (metis kth_obs_mono less.prems(1)) (metis kth_obs_mono less.prems(2) tk ikp')"], ["proof (state)\nthis:\n  p < i\n  p' < i'\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "have *: \\<open>\\<And>j l. j \\<le> p \\<Longrightarrow> is_kth_obs \\<pi> l j \\<Longrightarrow> \\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j l.\n       \\<lbrakk>j \\<le> p; is_kth_obs \\<pi> l j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j'.\n                            cs\\<^bsup>\\<pi>\\<^esup> j =\n                            cs\\<^bsup>\\<pi>'\\<^esup> j'", "using pi all_in_\\<pi>'"], ["proof (prove)\nusing this:\n  p < i\n  \\<forall>l j.\n     j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<And>j l.\n       \\<lbrakk>j \\<le> p; is_kth_obs \\<pi> l j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j'.\n                            cs\\<^bsup>\\<pi>\\<^esup> j =\n                            cs\\<^bsup>\\<pi>'\\<^esup> j'", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?j1 \\<le> p; is_kth_obs \\<pi> ?l1 ?j1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j'.\n                       cs\\<^bsup>\\<pi>\\<^esup> ?j1 =\n                       cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "have **: \\<open>\\<And>j' l'. j' \\<le> p' \\<Longrightarrow> is_kth_obs \\<pi>' l' j' \\<Longrightarrow> \\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j' l'.\n       \\<lbrakk>j' \\<le> p'; is_kth_obs \\<pi>' l' j'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j.\n                            cs\\<^bsup>\\<pi>\\<^esup> j =\n                            cs\\<^bsup>\\<pi>'\\<^esup> j'", "using pi' all_in_\\<pi>"], ["proof (prove)\nusing this:\n  p' < i'\n  \\<forall>l' j'.\n     j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<And>j' l'.\n       \\<lbrakk>j' \\<le> p'; is_kth_obs \\<pi>' l' j'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j.\n                            cs\\<^bsup>\\<pi>\\<^esup> j =\n                            cs\\<^bsup>\\<pi>'\\<^esup> j'", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?j'1 \\<le> p'; is_kth_obs \\<pi>' ?l'1 ?j'1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j.\n                       cs\\<^bsup>\\<pi>\\<^esup> j =\n                       cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "have \\<open>cs\\<^bsup>\\<pi>\\<^esup> p = cs\\<^bsup>\\<pi>'\\<^esup> p'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> p = cs\\<^bsup>\\<pi>'\\<^esup> p'", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> p \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> p' \\<Longrightarrow>\n    False", "using less(1)[OF tk ikp ikp'] * **"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> p \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> p';\n   \\<And>j l.\n      \\<lbrakk>j \\<le> p; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>j' l'.\n      \\<lbrakk>j' \\<le> p'; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?j1 \\<le> p; is_kth_obs \\<pi> ?l1 ?j1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j'.\n                       cs\\<^bsup>\\<pi>\\<^esup> ?j1 =\n                       cs\\<^bsup>\\<pi>'\\<^esup> j'\n  \\<lbrakk>?j'1 \\<le> p'; is_kth_obs \\<pi>' ?l'1 ?j'1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j.\n                       cs\\<^bsup>\\<pi>\\<^esup> j =\n                       cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> p \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> p' \\<Longrightarrow>\n    False", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> p = cs\\<^bsup>\\<pi>'\\<^esup> p'\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t3 < k; is_kth_obs \\<pi> ?t3 ?p3;\n   is_kth_obs \\<pi>' ?t3 ?p'3\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> ?p3 =\n                    cs\\<^bsup>\\<pi>'\\<^esup> ?p'3\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?t3 < k; is_kth_obs \\<pi> ?t3 ?p3;\n   is_kth_obs \\<pi>' ?t3 ?p'3\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>\\<pi>\\<^esup> ?p3 =\n                    cs\\<^bsup>\\<pi>'\\<^esup> ?p'3\n\ngoal (1 subgoal):\n 1. \\<forall>l j j'.\n       l < k \\<and>\n       is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n       cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'", "by blast"], ["proof (state)\nthis:\n  \\<forall>l j j'.\n     l < k \\<and>\n     is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n     cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>l j j'.\n     l < k \\<and>\n     is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n     cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have ii'nret: \\<open>\\<pi> i \\<noteq> return \\<or> \\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return \\<or> \\<pi>' i' \\<noteq> local.return", "using less cs_return"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y1 < k; is_kth_obs \\<pi> ?y1 ?i1; is_kth_obs \\<pi>' ?y1 ?i'1;\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   \\<And>j l.\n      \\<lbrakk>j \\<le> ?i1; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis;\n   \\<And>j' l'.\n      \\<lbrakk>j' \\<le> ?i'1; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> thesis\\<rbrakk>\n  \\<Longrightarrow> False\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<lbrakk>?j1 \\<le> i; is_kth_obs \\<pi> ?l1 ?j1;\n   \\<nexists>j'.\n      cs\\<^bsup>\\<pi>\\<^esup> ?j1 = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  \\<lbrakk>?j'1 \\<le> i'; is_kth_obs \\<pi>' ?l'1 ?j'1;\n   \\<nexists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> ?j'1\\<rbrakk>\n  \\<Longrightarrow> thesis\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return \\<or> \\<pi>' i' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return \\<or> \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have a: \\<open>k < l \\<or> k < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < l \\<or> k < l'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (k < l \\<or> k < l') \\<Longrightarrow> False", "assume \\<open>\\<not>(k < l \\<or> k < l')\\<close>"], ["proof (state)\nthis:\n  \\<not> (k < l \\<or> k < l')\n\ngoal (1 subgoal):\n 1. \\<not> (k < l \\<or> k < l') \\<Longrightarrow> False", "hence *: \\<open>l < k\\<close> \\<open>l' < k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (k < l \\<or> k < l')\n\ngoal (1 subgoal):\n 1. l < k &&& l' < k", "using lnk lnk'"], ["proof (prove)\nusing this:\n  \\<not> (k < l \\<or> k < l')\n  l \\<noteq> k\n  l' \\<noteq> k\n\ngoal (1 subgoal):\n 1. l < k &&& l' < k", "by auto"], ["proof (state)\nthis:\n  l < k\n  l' < k\n\ngoal (1 subgoal):\n 1. \\<not> (k < l \\<or> k < l') \\<Longrightarrow> False", "hence ji: \\<open>j < i\\<close> and ji': \\<open>j' < i'\\<close>"], ["proof (prove)\nusing this:\n  l < k\n  l' < k\n\ngoal (1 subgoal):\n 1. j < i &&& j' < i'", "using ilj ilj' less(2,3) kth_obs_mono"], ["proof (prove)\nusing this:\n  l < k\n  l' < k\n  is_kth_obs \\<pi> l j\n  is_kth_obs \\<pi>' l' j'\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?l ?j;\n   ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < ?j\n\ngoal (1 subgoal):\n 1. j < i &&& j' < i'", "by auto"], ["proof (state)\nthis:\n  j < i\n  j' < i'\n\ngoal (1 subgoal):\n 1. \\<not> (k < l \\<or> k < l') \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using ii'nret"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return \\<or> \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False\n 2. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "assume nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False\n 2. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "hence nretj': \\<open>\\<pi>' j' \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' j' \\<noteq> local.return", "using last_cs csij"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<pi>' j' \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' j' \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False\n 2. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using cs_order[OF path(2,1) csij[symmetric] csji[symmetric] nretj' ji'] ji"], ["proof (prove)\nusing this:\n  i < j\n  j < i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "assume nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "hence nretj': \\<open>\\<pi> j \\<noteq> return\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "using last_cs csji"], ["proof (prove)\nusing this:\n  \\<pi>' i' \\<noteq> local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using cs_order[OF path csji csij nretj' ji] ji'"], ["proof (prove)\nusing this:\n  i' < j'\n  j' < i'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k < l \\<or> k < l'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "have \\<open>l < k \\<or> l' < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < k \\<or> l' < k", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (l < k \\<or> l' < k) \\<Longrightarrow> False", "assume \\<open>\\<not> (l< k \\<or> l' < k)\\<close>"], ["proof (state)\nthis:\n  \\<not> (l < k \\<or> l' < k)\n\ngoal (1 subgoal):\n 1. \\<not> (l < k \\<or> l' < k) \\<Longrightarrow> False", "hence \\<open>k < l\\<close> \\<open>k < l'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (l < k \\<or> l' < k)\n\ngoal (1 subgoal):\n 1. k < l &&& k < l'", "using lnk lnk'"], ["proof (prove)\nusing this:\n  \\<not> (l < k \\<or> l' < k)\n  l \\<noteq> k\n  l' \\<noteq> k\n\ngoal (1 subgoal):\n 1. k < l &&& k < l'", "by auto"], ["proof (state)\nthis:\n  k < l\n  k < l'\n\ngoal (1 subgoal):\n 1. \\<not> (l < k \\<or> l' < k) \\<Longrightarrow> False", "hence ji: \\<open>i < j\\<close> and ji': \\<open>i' < j'\\<close>"], ["proof (prove)\nusing this:\n  k < l\n  k < l'\n\ngoal (1 subgoal):\n 1. i < j &&& i' < j'", "using ilj ilj' less(2,3) kth_obs_mono"], ["proof (prove)\nusing this:\n  k < l\n  k < l'\n  is_kth_obs \\<pi> l j\n  is_kth_obs \\<pi>' l' j'\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?l ?j;\n   ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < ?j\n\ngoal (1 subgoal):\n 1. i < j &&& i' < j'", "by auto"], ["proof (state)\nthis:\n  i < j\n  i' < j'\n\ngoal (1 subgoal):\n 1. \\<not> (l < k \\<or> l' < k) \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using ii'nret"], ["proof (prove)\nusing this:\n  \\<pi> i \\<noteq> local.return \\<or> \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False\n 2. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "assume nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. \\<pi> i \\<noteq> local.return \\<Longrightarrow> False\n 2. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using cs_order[OF path csij csji nreti ji]  ji'"], ["proof (prove)\nusing this:\n  j' < i'\n  i' < j'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "assume nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using cs_order[OF path(2,1) csji[symmetric] csij[symmetric] nreti' ji'] ji"], ["proof (prove)\nusing this:\n  j < i\n  i < j\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l < k \\<or> l' < k\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>k < l \\<and> l' < k \\<or> k < l' \\<and> l < k\\<close>"], ["proof (prove)\nusing this:\n  l < k \\<or> l' < k\n\ngoal (1 subgoal):\n 1. k < l \\<and> l' < k \\<or> k < l' \\<and> l < k", "using a"], ["proof (prove)\nusing this:\n  l < k \\<or> l' < k\n  k < l \\<or> k < l'\n\ngoal (1 subgoal):\n 1. k < l \\<and> l' < k \\<or> k < l' \\<and> l < k", "by auto"], ["proof (state)\nthis:\n  k < l \\<and> l' < k \\<or> k < l' \\<and> l < k\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x; is_kth_obs \\<pi> y i;\n                    is_kth_obs \\<pi>' y i';\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    \\<And>j l.\n                       \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n                        \\<nexists>j'.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    \\<And>j' l'.\n                       \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n                        \\<nexists>j.\n                           cs\\<^bsup>\\<pi>\\<^esup> j =\n                           cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n                       \\<Longrightarrow> thesis\\<rbrakk>\n                   \\<Longrightarrow> False;\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i';\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        \\<And>j l.\n           \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n            \\<nexists>j'.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>j' l'.\n           \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n            \\<nexists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  k < l \\<and> l' < k \\<or> k < l' \\<and> l < k\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "assume \\<open>k < l \\<and> l' < k\\<close>"], ["proof (state)\nthis:\n  k < l \\<and> l' < k\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "hence kl: \\<open>k < l\\<close> and lk': \\<open>l' < k\\<close>"], ["proof (prove)\nusing this:\n  k < l \\<and> l' < k\n\ngoal (1 subgoal):\n 1. k < l &&& l' < k", "by auto"], ["proof (state)\nthis:\n  k < l\n  l' < k\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "hence ij: \\<open>i < j\\<close> and ji': \\<open>j' < i'\\<close>"], ["proof (prove)\nusing this:\n  k < l\n  l' < k\n\ngoal (1 subgoal):\n 1. i < j &&& j' < i'", "using less(2,3) ilj ilj' kth_obs_mono"], ["proof (prove)\nusing this:\n  k < l\n  l' < k\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs \\<pi> l j\n  is_kth_obs \\<pi>' l' j'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?l ?j;\n   ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < ?j\n\ngoal (1 subgoal):\n 1. i < j &&& j' < i'", "by auto"], ["proof (state)\nthis:\n  i < j\n  j' < i'\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "have nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by (metis csji ii'nret ij last_cs path(1) term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "obtain h where ilh: \\<open>is_kth_obs \\<pi> l' h\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        is_kth_obs \\<pi> l' h \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ji' all_in_\\<pi> ilj' no_kth_obs_missing_cs path(1) path(2)"], ["proof (prove)\nusing this:\n  j' < i'\n  \\<forall>l' j'.\n     j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<longrightarrow>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  is_kth_obs \\<pi>' l' j'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; is_kth_obs ?\\<pi> ?k ?i;\n   \\<nexists>i'. is_kth_obs ?\\<pi>' ?k i';\n   \\<And>l j.\n      \\<lbrakk>is_kth_obs ?\\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>?\\<pi>\\<^esup> j = cs\\<^bsup>?\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        is_kth_obs \\<pi> l' h \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis kl lk' ilj kth_obs_stable)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> l' h\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l' h\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'", "using cseq lk' ilj'"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l' h\n  \\<forall>l j j'.\n     l < k \\<and>\n     is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n     cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  l' < k\n  is_kth_obs \\<pi>' l' j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h", "using csij"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> h = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "hence hi: \\<open>h = i\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h\n\ngoal (1 subgoal):\n 1. h = i", "using cs_inj nreti path(1)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> h\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  \\<pi> i \\<noteq> local.return\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. h = i", "by metis"], ["proof (state)\nthis:\n  h = i\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "have \\<open>l' = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' = k", "using less(2) ilh"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> l' h\n\ngoal (1 subgoal):\n 1. l' = k", "unfolding hi"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> l' i\n\ngoal (1 subgoal):\n 1. l' = k", "by (metis is_kth_obs_def)"], ["proof (state)\nthis:\n  l' = k\n\ngoal (2 subgoals):\n 1. k < l \\<and> l' < k \\<Longrightarrow> False\n 2. k < l' \\<and> l < k \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  l' = k\n\ngoal (1 subgoal):\n 1. False", "using lk'"], ["proof (prove)\nusing this:\n  l' = k\n  l' < k\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "assume \\<open>k < l' \\<and> l < k\\<close>"], ["proof (state)\nthis:\n  k < l' \\<and> l < k\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "hence kl': \\<open>k < l'\\<close> and lk: \\<open>l < k\\<close>"], ["proof (prove)\nusing this:\n  k < l' \\<and> l < k\n\ngoal (1 subgoal):\n 1. k < l' &&& l < k", "by auto"], ["proof (state)\nthis:\n  k < l'\n  l < k\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "hence ij': \\<open>i' < j'\\<close> and ji: \\<open>j < i\\<close>"], ["proof (prove)\nusing this:\n  k < l'\n  l < k\n\ngoal (1 subgoal):\n 1. i' < j' &&& j < i", "using less(2,3) ilj ilj' kth_obs_mono"], ["proof (prove)\nusing this:\n  k < l'\n  l < k\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs \\<pi> l j\n  is_kth_obs \\<pi>' l' j'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?k ?i; is_kth_obs ?\\<pi> ?l ?j;\n   ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < ?j\n\ngoal (1 subgoal):\n 1. i' < j' &&& j < i", "by auto"], ["proof (state)\nthis:\n  i' < j'\n  j < i\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "have nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by (metis csij ii'nret ij' last_cs path(2) term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "obtain h' where ilh': \\<open>is_kth_obs \\<pi>' l h'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        is_kth_obs \\<pi>' l h' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using all_in_\\<pi>' ilj no_kth_obs_missing_cs path(1) path(2) kl' lk ilj' kth_obs_stable"], ["proof (prove)\nusing this:\n  \\<forall>l j.\n     j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<longrightarrow>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n  is_kth_obs \\<pi> l j\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; is_kth_obs ?\\<pi> ?k ?i;\n   \\<nexists>i'. is_kth_obs ?\\<pi>' ?k i';\n   \\<And>l j.\n      \\<lbrakk>is_kth_obs ?\\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>?\\<pi>\\<^esup> j = cs\\<^bsup>?\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path \\<pi>\n  is_path \\<pi>'\n  k < l'\n  l < k\n  is_kth_obs \\<pi>' l' j'\n  \\<lbrakk>is_kth_obs ?\\<pi> ?l ?j; ?k < ?l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. is_kth_obs ?\\<pi> ?k i\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        is_kth_obs \\<pi>' l h' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' l h'\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l h'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'", "using cseq lk ilj"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l h'\n  \\<forall>l j j'.\n     l < k \\<and>\n     is_kth_obs \\<pi> l j \\<and> is_kth_obs \\<pi>' l j' \\<longrightarrow>\n     cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  l < k\n  is_kth_obs \\<pi> l j\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "hence \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'", "using csji"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> h'\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "hence hi: \\<open>h' = i'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'\n\ngoal (1 subgoal):\n 1. h' = i'", "using cs_inj nreti' path(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>'\\<^esup> h'\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?n \\<noteq> local.return;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  \\<pi>' i' \\<noteq> local.return\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. h' = i'", "by metis"], ["proof (state)\nthis:\n  h' = i'\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "have \\<open>l = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l = k", "using less(3) ilh'"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs \\<pi>' l h'\n\ngoal (1 subgoal):\n 1. l = k", "unfolding hi"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs \\<pi>' l i'\n\ngoal (1 subgoal):\n 1. l = k", "by (metis is_kth_obs_def)"], ["proof (state)\nthis:\n  l = k\n\ngoal (1 subgoal):\n 1. k < l' \\<and> l < k \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  l = k\n\ngoal (1 subgoal):\n 1. False", "using lk"], ["proof (prove)\nusing this:\n  l = k\n  l < k\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Data\\<close>"], ["", "lemma reads_restrict1: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> \\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<restriction> local.reads n =\n    \\<sigma>' \\<restriction> local.reads n \\<Longrightarrow>\n    \\<forall>x\\<in>local.reads n. \\<sigma> x = \\<sigma>' x", "by (metis restrict_def)"], ["", "lemma reads_restrict2: \\<open>\\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x \\<Longrightarrow> \\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>local.reads n. \\<sigma> x = \\<sigma>' x \\<Longrightarrow>\n    \\<sigma> \\<restriction> local.reads n =\n    \\<sigma>' \\<restriction> local.reads n", "unfolding restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>local.reads n. \\<sigma> x = \\<sigma>' x \\<Longrightarrow>\n    (\\<lambda>na.\n        if na \\<in> local.reads n then \\<sigma> na else undefined) =\n    (\\<lambda>na.\n        if na \\<in> local.reads n then \\<sigma>' na else undefined)", "by auto"], ["", "lemma reads_restrict: \\<open>(\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n)) = (\\<forall> x \\<in> reads n. \\<sigma> x = \\<sigma>' x)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<restriction> local.reads n =\n     \\<sigma>' \\<restriction> local.reads n) =\n    (\\<forall>x\\<in>local.reads n. \\<sigma> x = \\<sigma>' x)", "using reads_restrict1 reads_restrict2"], ["proof (prove)\nusing this:\n  ?\\<sigma> \\<restriction> local.reads ?n =\n  ?\\<sigma>' \\<restriction> local.reads ?n \\<Longrightarrow>\n  \\<forall>x\\<in>local.reads ?n. ?\\<sigma> x = ?\\<sigma>' x\n  \\<forall>x\\<in>local.reads ?n.\n     ?\\<sigma> x = ?\\<sigma>' x \\<Longrightarrow>\n  ?\\<sigma> \\<restriction> local.reads ?n =\n  ?\\<sigma>' \\<restriction> local.reads ?n\n\ngoal (1 subgoal):\n 1. (\\<sigma> \\<restriction> local.reads n =\n     \\<sigma>' \\<restriction> local.reads n) =\n    (\\<forall>x\\<in>local.reads n. \\<sigma> x = \\<sigma>' x)", "by metis"], ["", "lemma reads_restr_suc: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> suc n \\<sigma> = suc n \\<sigma>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<restriction> local.reads n =\n    \\<sigma>' \\<restriction> local.reads n \\<Longrightarrow>\n    suc n \\<sigma> = suc n \\<sigma>'", "by (metis reads_restrict uses_suc)"], ["", "lemma reads_restr_sem: \\<open>\\<sigma> \\<restriction> (reads n) = \\<sigma>' \\<restriction> (reads n) \\<Longrightarrow> \\<forall> v \\<in> writes n. sem n \\<sigma> v = sem n \\<sigma>' v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<restriction> local.reads n =\n    \\<sigma>' \\<restriction> local.reads n \\<Longrightarrow>\n    \\<forall>v\\<in>local.writes n. sem n \\<sigma> v = sem n \\<sigma>' v", "by (metis reads_restrict1 uses_writes)"], ["", "lemma reads_obsp: assumes \\<open>path \\<sigma> k = path \\<sigma>' k'\\<close> \\<open>\\<sigma>\\<^bsup>k\\<^esup> \\<restriction> (reads (path \\<sigma> k)) = \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> (reads (path \\<sigma> k))\\<close> shows \\<open>obsp \\<sigma> k = obsp \\<sigma>' k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obsp \\<sigma> k = obsp \\<sigma>' k'", "using assms(2) uses_att"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> local.reads (path \\<sigma> k) =\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)\n  \\<lbrakk>local.att ?n = Some ?f;\n   \\<forall>v\\<in>local.reads ?n. ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> ?f ?\\<sigma> = ?f ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> k = obsp \\<sigma>' k'", "unfolding obsp_def assms(1) reads_restrict"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>local.reads (path \\<sigma>' k').\n     (\\<sigma>\\<^bsup>k\\<^esup>) x = (\\<sigma>'\\<^bsup>k'\\<^esup>) x\n  \\<lbrakk>local.att ?n = Some ?f;\n   \\<forall>v\\<in>local.reads ?n. ?\\<sigma> v = ?\\<sigma>' v\\<rbrakk>\n  \\<Longrightarrow> ?f ?\\<sigma> = ?f ?\\<sigma>'\n\ngoal (1 subgoal):\n 1. (case local.att (path \\<sigma>' k') of None \\<Rightarrow> None\n     | Some f \\<Rightarrow> Some (f (\\<sigma>\\<^bsup>k\\<^esup>))) =\n    (case local.att (path \\<sigma>' k') of None \\<Rightarrow> None\n     | Some f \\<Rightarrow> Some (f (\\<sigma>'\\<^bsup>k'\\<^esup>)))", "apply (cases \\<open>att (path \\<sigma>' k')\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>local.reads (path \\<sigma>' k').\n                (\\<sigma>\\<^bsup>k\\<^esup>) x =\n                (\\<sigma>'\\<^bsup>k'\\<^esup>) x;\n     \\<And>n f \\<sigma> \\<sigma>'.\n        \\<lbrakk>local.att n = Some f;\n         \\<forall>v\\<in>local.reads n. \\<sigma> v = \\<sigma>' v\\<rbrakk>\n        \\<Longrightarrow> f \\<sigma> = f \\<sigma>';\n     local.att (path \\<sigma>' k') = None\\<rbrakk>\n    \\<Longrightarrow> (case local.att (path \\<sigma>' k') of\n                       None \\<Rightarrow> None\n                       | Some f \\<Rightarrow>\n                           Some (f (\\<sigma>\\<^bsup>k\\<^esup>))) =\n                      (case local.att (path \\<sigma>' k') of\n                       None \\<Rightarrow> None\n                       | Some f \\<Rightarrow>\n                           Some (f (\\<sigma>'\\<^bsup>k'\\<^esup>)))\n 2. \\<And>a.\n       \\<lbrakk>\\<forall>x\\<in>local.reads (path \\<sigma>' k').\n                   (\\<sigma>\\<^bsup>k\\<^esup>) x =\n                   (\\<sigma>'\\<^bsup>k'\\<^esup>) x;\n        \\<And>n f \\<sigma> \\<sigma>'.\n           \\<lbrakk>local.att n = Some f;\n            \\<forall>v\\<in>local.reads n. \\<sigma> v = \\<sigma>' v\\<rbrakk>\n           \\<Longrightarrow> f \\<sigma> = f \\<sigma>';\n        local.att (path \\<sigma>' k') = Some a\\<rbrakk>\n       \\<Longrightarrow> (case local.att (path \\<sigma>' k') of\n                          None \\<Rightarrow> None\n                          | Some f \\<Rightarrow>\n                              Some (f (\\<sigma>\\<^bsup>k\\<^esup>))) =\n                         (case local.att (path \\<sigma>' k') of\n                          None \\<Rightarrow> None\n                          | Some f \\<Rightarrow>\n                              Some (f (\\<sigma>'\\<^bsup>k'\\<^esup>)))", "by auto"], ["", "lemma no_writes_unchanged0: assumes \\<open>\\<forall> l<k. v\\<notin> writes(path \\<sigma> l)\\<close> shows \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>l<k. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v", "proof (induction \\<open>k\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>l<0.\n       v \\<notin> local.writes (path \\<sigma> l) \\<Longrightarrow>\n    (\\<sigma>\\<^bsup>0\\<^esup>) v = \\<sigma> v\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "case 0"], ["proof (state)\nthis:\n  \\<forall>l<0. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (2 subgoals):\n 1. \\<forall>l<0.\n       v \\<notin> local.writes (path \\<sigma> l) \\<Longrightarrow>\n    (\\<sigma>\\<^bsup>0\\<^esup>) v = \\<sigma> v\n 2. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l<0. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>0\\<^esup>) v = \\<sigma> v", "by(auto simp add: kth_state_def)"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>0\\<^esup>) v = \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "case (Suc k)"], ["proof (state)\nthis:\n  \\<forall>l<k. v \\<notin> local.writes (path \\<sigma> l) \\<Longrightarrow>\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "hence \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l<k. v \\<notin> local.writes (path \\<sigma> l) \\<Longrightarrow>\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "have \\<open>\\<sigma>\\<^bsup>Suc k\\<^esup>  = snd ( step (path \\<sigma> k,\\<sigma>\\<^bsup>k\\<^esup>))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>Suc k\\<^esup> =\n    snd (local.step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))", "by (metis kth_state_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  snd (local.step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "hence \\<open>\\<sigma>\\<^bsup>Suc k\\<^esup>  = sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  snd (local.step (path \\<sigma> k, \\<sigma>\\<^bsup>k\\<^esup>))\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>Suc k\\<^esup> =\n    sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)", "by (metis step_suc_sem snd_conv)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "moreover"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "have \\<open>v \\<notin> writes (path \\<sigma> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (path \\<sigma> k)", "using Suc.prems"], ["proof (prove)\nusing this:\n  \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (path \\<sigma> k)", "by blast"], ["proof (state)\nthis:\n  v \\<notin> local.writes (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<forall>l<k.\n                   v \\<notin> local.writes\n                               (path \\<sigma> l) \\<Longrightarrow>\n                (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v;\n        \\<forall>l<Suc k. v \\<notin> local.writes (path \\<sigma> l)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> k)", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "using writes"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  \\<sigma>\\<^bsup>Suc k\\<^esup> =\n  sem (path \\<sigma> k) (\\<sigma>\\<^bsup>k\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> k)\n  \\<exists>\\<sigma>.\n     \\<sigma> ?v \\<noteq> sem ?n \\<sigma> ?v \\<Longrightarrow>\n  ?v \\<in> local.writes ?n\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v", "by metis"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>Suc k\\<^esup>) v = \\<sigma> v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma written_read_dd: assumes \\<open>is_path \\<pi>\\<close> \\<open>v \\<in> reads (\\<pi> k) \\<close> \\<open>v \\<in> writes (\\<pi> j)\\<close> \\<open>j<k\\<close> obtains l where \\<open>k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let \\<open>?l\\<close> = \\<open>GREATEST l. l < k \\<and> v \\<in> writes (\\<pi> l)\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \\<open>?l < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k", "by (metis (no_types, lifting) GreatestI_ex_nat assms(3) assms(4) less_or_eq_imp_le)"], ["proof (state)\nthis:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \\<open>v \\<in> writes (\\<pi> ?l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes\n             (\\<pi>\n               (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))", "by (metis (no_types, lifting) GreatestI_nat assms(3) assms(4) less_or_eq_imp_le)"], ["proof (state)\nthis:\n  v \\<in> local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \\<open>v \\<in> reads (\\<pi> k) \\<inter> writes (\\<pi> ?l)\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (\\<pi> k) \\<inter>\n            local.writes\n             (\\<pi>\n               (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))", "using assms(2)"], ["proof (prove)\nusing this:\n  v \\<in> local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n  v \\<in> local.reads (\\<pi> k)\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (\\<pi> k) \\<inter>\n            local.writes\n             (\\<pi>\n               (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "note is_ddi_def"], ["proof (state)\nthis:\n  (?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m) =\n  (is_path ?\\<pi> \\<and>\n   ?m < ?n \\<and>\n   ?v \\<in> local.reads (?\\<pi> ?n) \\<inter> local.writes (?\\<pi> ?m) \\<and>\n   (\\<forall>l\\<in>{?m<..<?n}. ?v \\<notin> local.writes (?\\<pi> l)))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \\<open>\\<forall> l \\<in> {?l<..<k}. v \\<notin> writes (\\<pi> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{GREATEST l.\n                       l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n       v \\<notin> local.writes (\\<pi> l)", "by (auto, metis (lifting, no_types) Greatest_le_nat le_antisym nat_less_le)"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{GREATEST l.\n                     l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n     v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n  \\<forall>l\\<in>{GREATEST l.\n                     l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n     v \\<notin> local.writes (\\<pi> l)", "have \\<open>k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> ?l\\<close>"], ["proof (prove)\nusing this:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n  \\<forall>l\\<in>{GREATEST l.\n                     l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n     v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> (GREATEST l.\n           l < k \\<and> v \\<in> local.writes (\\<pi> l))", "using assms(1)"], ["proof (prove)\nusing this:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n  \\<forall>l\\<in>{GREATEST l.\n                     l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n     v \\<notin> local.writes (\\<pi> l)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> (GREATEST l.\n           l < k \\<and> v \\<in> local.writes (\\<pi> l))", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k\n  v \\<in> local.reads (\\<pi> k) \\<inter>\n          local.writes\n           (\\<pi> (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)))\n  \\<forall>l\\<in>{GREATEST l.\n                     l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n     v \\<notin> local.writes (\\<pi> l)\n  is_path \\<pi>\n\ngoal (1 subgoal):\n 1. is_path \\<pi> \\<and>\n    (GREATEST l. l < k \\<and> v \\<in> local.writes (\\<pi> l)) < k \\<and>\n    v \\<in> local.reads (\\<pi> k) \\<inter>\n            local.writes\n             (\\<pi>\n               (GREATEST l.\n                   l < k \\<and> v \\<in> local.writes (\\<pi> l))) \\<and>\n    (\\<forall>l\\<in>{GREATEST l.\n                        l < k \\<and> v \\<in> local.writes (\\<pi> l)<..<k}.\n        v \\<notin> local.writes (\\<pi> l))", "by blast"], ["proof (state)\nthis:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> (GREATEST l.\n         l < k \\<and> v \\<in> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus \\<open>thesis\\<close>"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> (GREATEST l.\n         l < k \\<and> v \\<in> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> (GREATEST l.\n         l < k \\<and> v \\<in> local.writes (\\<pi> l))\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> ?l1 \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_writes_unchanged: assumes \\<open>k \\<le> l\\<close> \\<open>\\<forall> j \\<in> {k..<l}. v\\<notin> writes(path \\<sigma> j)\\<close> shows \\<open>(\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "using assms"], ["proof (prove)\nusing this:\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "proof (induction \\<open>l - k\\<close> arbitrary: \\<open>l\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>0 = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v\n 2. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "case 0"], ["proof (state)\nthis:\n  0 = l - k\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>0 = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v\n 2. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  0 = l - k\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "by(auto)"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "case (Suc lk l)"], ["proof (state)\nthis:\n  \\<lbrakk>lk = ?l1 - k; k \\<le> ?l1;\n   \\<forall>j\\<in>{k..<?l1}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>?l1\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>k\\<^esup>) v\n  Suc lk = l - k\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "hence kl: \\<open>k < l\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>lk = ?l1 - k; k \\<le> ?l1;\n   \\<forall>j\\<in>{k..<?l1}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>?l1\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>k\\<^esup>) v\n  Suc lk = l - k\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. k < l", "by auto"], ["proof (state)\nthis:\n  k < l\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "then"], ["proof (chain)\npicking this:\n  k < l", "obtain l' where lsuc: \\<open>l = Suc l'\\<close>"], ["proof (prove)\nusing this:\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<And>l'. l = Suc l' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using lessE"], ["proof (prove)\nusing this:\n  k < l\n  \\<lbrakk>?i < ?k; ?k = Suc ?i \\<Longrightarrow> ?P;\n   \\<And>j.\n      \\<lbrakk>?i < j; ?k = Suc j\\<rbrakk> \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>l'. l = Suc l' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  l = Suc l'\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "hence \\<open>lk = l' - k\\<close>"], ["proof (prove)\nusing this:\n  l = Suc l'\n\ngoal (1 subgoal):\n 1. lk = l' - k", "using Suc"], ["proof (prove)\nusing this:\n  l = Suc l'\n  \\<lbrakk>lk = ?l1 - k; k \\<le> ?l1;\n   \\<forall>j\\<in>{k..<?l1}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>?l1\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>k\\<^esup>) v\n  Suc lk = l - k\n  k \\<le> l\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. lk = l' - k", "by auto"], ["proof (state)\nthis:\n  lk = l' - k\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "moreover"], ["proof (state)\nthis:\n  lk = l' - k\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "have \\<open>\\<forall> j \\<in> {k..<l'}. v \\<notin> writes (path \\<sigma> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)", "using Suc(4) lsuc"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n  l = Suc l'\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "ultimately"], ["proof (chain)\npicking this:\n  lk = l' - k\n  \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)", "have \\<open>(\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\\<close>"], ["proof (prove)\nusing this:\n  lk = l' - k\n  \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "using Suc(1)[of \\<open>l'\\<close>] lsuc kl"], ["proof (prove)\nusing this:\n  lk = l' - k\n  \\<forall>j\\<in>{k..<l'}. v \\<notin> local.writes (path \\<sigma> j)\n  \\<lbrakk>lk = l' - k; k \\<le> l';\n   \\<forall>j\\<in>{k..<l'}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>l'\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>k\\<^esup>) v\n  l = Suc l'\n  k < l\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "by fastforce"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "have \\<open>\\<sigma>\\<^bsup>l\\<^esup> = snd ( step (path \\<sigma> l',\\<sigma>\\<^bsup>l'\\<^esup>))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>l\\<^esup> =\n    snd (local.step (path \\<sigma> l', \\<sigma>\\<^bsup>l'\\<^esup>))", "by (metis kth_state_suc lsuc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  snd (local.step (path \\<sigma> l', \\<sigma>\\<^bsup>l'\\<^esup>))\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "hence \\<open>\\<sigma>\\<^bsup>l\\<^esup> = sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  snd (local.step (path \\<sigma> l', \\<sigma>\\<^bsup>l'\\<^esup>))\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>l\\<^esup> =\n    sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)", "by (metis step_suc_sem snd_conv)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "moreover"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "have \\<open>l' < l\\<close> \\<open>k \\<le> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < l &&& k \\<le> l'", "using kl lsuc"], ["proof (prove)\nusing this:\n  k < l\n  l = Suc l'\n\ngoal (1 subgoal):\n 1. l' < l &&& k \\<le> l'", "by auto"], ["proof (state)\nthis:\n  l' < l\n  k \\<le> l'\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "hence \\<open>v \\<notin> writes (path \\<sigma> l')\\<close>"], ["proof (prove)\nusing this:\n  l' < l\n  k \\<le> l'\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (path \\<sigma> l')", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  l' < l\n  k \\<le> l'\n  \\<forall>j\\<in>{k..<l}. v \\<notin> local.writes (path \\<sigma> j)\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (path \\<sigma> l')", "by auto"], ["proof (state)\nthis:\n  v \\<notin> local.writes (path \\<sigma> l')\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>\\<And>l.\n                   \\<lbrakk>x = l - k; k \\<le> l;\n                    \\<forall>j\\<in>{k..<l}.\n                       v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n                   \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                                     (\\<sigma>\\<^bsup>k\\<^esup>) v;\n        Suc x = l - k; k \\<le> l;\n        \\<forall>j\\<in>{k..<l}.\n           v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                         (\\<sigma>\\<^bsup>k\\<^esup>) v", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> l')", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> l')\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "using writes"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>l'\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n  \\<sigma>\\<^bsup>l\\<^esup> =\n  sem (path \\<sigma> l') (\\<sigma>\\<^bsup>l'\\<^esup>)\n  v \\<notin> local.writes (path \\<sigma> l')\n  \\<exists>\\<sigma>.\n     \\<sigma> ?v \\<noteq> sem ?n \\<sigma> ?v \\<Longrightarrow>\n  ?v \\<in> local.writes ?n\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v", "by metis"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>k\\<^esup>) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ddi_value: assumes \\<open>l dd\\<^bsup>(path \\<sigma>),v\\<^esup>\\<rightarrow> k\\<close> shows \\<open>(\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>Suc k\\<^esup> ) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>Suc k\\<^esup>) v", "using assms no_writes_unchanged[of \\<open>Suc k\\<close> \\<open>l\\<close> \\<open>v\\<close> \\<open>\\<sigma>\\<close>]"], ["proof (prove)\nusing this:\n  l dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k\n  \\<lbrakk>Suc k \\<le> l;\n   \\<forall>j\\<in>{Suc k..<l}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>Suc k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>Suc k\\<^esup>) v", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path (path \\<sigma>) \\<and>\n  k < l \\<and>\n  v \\<in> local.reads (path \\<sigma> l) \\<inter>\n          local.writes (path \\<sigma> k) \\<and>\n  (\\<forall>l\\<in>{k<..<l}. v \\<notin> local.writes (path \\<sigma> l))\n  \\<lbrakk>Suc k \\<le> l;\n   \\<forall>j\\<in>{Suc k..<l}.\n      v \\<notin> local.writes (path \\<sigma> j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>\\<^bsup>l\\<^esup>) v =\n                    (\\<sigma>\\<^bsup>Suc k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>l\\<^esup>) v = (\\<sigma>\\<^bsup>Suc k\\<^esup>) v", "by auto"], ["", "lemma written_value: assumes \\<open>path \\<sigma> l = path \\<sigma>' l'\\<close> \\<open>\\<sigma>\\<^bsup>l\\<^esup> \\<restriction> reads (path \\<sigma> l) = \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> reads (path \\<sigma> l)\\<close> \\<open>v \\<in> writes (path \\<sigma> l)\\<close> \nshows \\<open>(\\<sigma>\\<^bsup>Suc l\\<^esup> ) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup> ) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>Suc l\\<^esup>) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v", "by (metis assms reads_restr_sem snd_conv step_suc_sem kth_state_suc)"], ["", "subsection \\<open>Facts about Contradicting Paths\\<close>"], ["", "lemma obsp_contradict: assumes csk: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close> and obs: \\<open>obsp \\<sigma> k \\<noteq> obsp \\<sigma>' k'\\<close> shows \\<open>(\\<sigma>', k') \\<cc> (\\<sigma>, k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "have pk: \\<open>path \\<sigma> k = path \\<sigma>' k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> k = path \\<sigma>' k'", "using assms last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  obsp \\<sigma> k \\<noteq> obsp \\<sigma>' k'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. path \\<sigma> k = path \\<sigma>' k'", "by metis"], ["proof (state)\nthis:\n  path \\<sigma> k = path \\<sigma>' k'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "hence \\<open>\\<sigma>\\<^bsup>k\\<^esup>\\<restriction>(reads (path \\<sigma> k)) \\<noteq> \\<sigma>'\\<^bsup>k'\\<^esup>\\<restriction>(reads (path \\<sigma> k))\\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma> k = path \\<sigma>' k'\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n    local.reads (path \\<sigma> k) \\<noteq>\n    \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)", "using obs reads_obsp[OF pk]"], ["proof (prove)\nusing this:\n  path \\<sigma> k = path \\<sigma>' k'\n  obsp \\<sigma> k \\<noteq> obsp \\<sigma>' k'\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> local.reads (path \\<sigma> k) =\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> k) \\<Longrightarrow>\n  obsp \\<sigma> k = obsp \\<sigma>' k'\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n    local.reads (path \\<sigma> k) \\<noteq>\n    \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)", "by auto"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "thus \\<open>(\\<sigma>',k') \\<cc> (\\<sigma>,k)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "using contradicts.intros(2)[OF csk[symmetric]]"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (path \\<sigma> k)\n  \\<lbrakk>path \\<sigma> = path ?\\<sigma>; path \\<sigma>' = path ?\\<sigma>';\n   ?\\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n   local.reads (path \\<sigma> k) \\<noteq>\n   ?\\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n   local.reads (path \\<sigma> k)\\<rbrakk>\n  \\<Longrightarrow> (?\\<sigma>', k') \\<cc> (?\\<sigma>, k)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma missing_cs_contradicts: assumes notin: \\<open>\\<not>(\\<exists> k'. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k')\\<close> and converge: \\<open>k<n\\<close> \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\\<close> shows \\<open>\\<exists> j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "let \\<open>?\\<pi>\\<close> = \\<open>path \\<sigma>\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "let \\<open>?\\<pi>'\\<close> = \\<open>path \\<sigma>'\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have init: \\<open>?\\<pi> 0 = ?\\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> 0 = path \\<sigma>' 0", "unfolding path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ((local.step ^^ 0) (local.entry, \\<sigma>)) =\n    fst ((local.step ^^ 0) (local.entry, \\<sigma>'))", "by auto"], ["proof (state)\nthis:\n  path \\<sigma> 0 = path \\<sigma>' 0\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have path: \\<open>is_path ?\\<pi>\\<close> \\<open>is_path ?\\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>) &&& is_path (path \\<sigma>')", "using path_is_path"], ["proof (prove)\nusing this:\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>) &&& is_path (path \\<sigma>')", "by auto"], ["proof (state)\nthis:\n  is_path (path \\<sigma>)\n  is_path (path \\<sigma>')\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "obtain j j' where csj: \\<open>cs\\<^bsup>?\\<pi>\\<^esup> j = cs\\<^bsup>?\\<pi>'\\<^esup> j'\\<close> and cd: \\<open>k cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow>j\\<close> and suc: \\<open>?\\<pi> (Suc j) \\<noteq> ?\\<pi>' (Suc j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>path \\<sigma>\\<^esup> j =\n                 cs\\<^bsup>path \\<sigma>'\\<^esup> j';\n         k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> j;\n         path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge[OF path init notin converge]"], ["proof (prove)\nusing this:\n  (\\<And>ka k'.\n      \\<lbrakk>cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n               cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n       k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n       path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>path \\<sigma>\\<^esup> j =\n                 cs\\<^bsup>path \\<sigma>'\\<^esup> j';\n         k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> j;\n         path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> j'\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> j\n  path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc j')\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have less: \\<open>cs\\<^bsup>?\\<pi>\\<^esup> j \\<prec> cs\\<^bsup>?\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> j \\<prec>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k", "using cd cd_is_cs_less"], ["proof (prove)\nusing this:\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> j\n  ?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k \\<prec> cs\\<^bsup>?\\<pi>\\<^esup> ?l\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> j \\<prec>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> j \\<prec>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have nretj: \\<open>?\\<pi> j \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> j \\<noteq> local.return", "by (metis cd is_cdi_def term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  path \\<sigma> j \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have cs: \\<open>?\\<pi> \\<exclamdown> cs\\<^bsup>?\\<pi>'\\<^esup> j' = j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma> \\<exclamdown> cs\\<^bsup>path \\<sigma>'\\<^esup> j') = j", "using csj cs_select_id nretj path_is_path"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> j'\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?k \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi> \\<exclamdown> cs\\<^bsup>?\\<pi>\\<^esup> ?k) = ?k\n  path \\<sigma> j \\<noteq> local.return\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. (path \\<sigma> \\<exclamdown> cs\\<^bsup>path \\<sigma>'\\<^esup> j') = j", "by metis"], ["proof (state)\nthis:\n  (path \\<sigma> \\<exclamdown> cs\\<^bsup>path \\<sigma>'\\<^esup> j') = j\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "have \\<open>(\\<sigma>',j') \\<cc> (\\<sigma>,k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "using contradicts.intros(1)[of \\<open>?\\<pi>'\\<close> \\<open>j'\\<close> \\<open>?\\<pi>\\<close> \\<open>k\\<close> \\<open>\\<sigma>\\<close> \\<open>\\<sigma>'\\<close>,unfolded cs] less suc csj"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>path \\<sigma>'\\<^esup> j' \\<prec>\n           cs\\<^bsup>path \\<sigma>\\<^esup> k;\n   path \\<sigma> = path \\<sigma>; path \\<sigma>' = path \\<sigma>';\n   path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc j')\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>', j') \\<cc> (\\<sigma>, k)\n  cs\\<^bsup>path \\<sigma>\\<^esup> j \\<prec>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k\n  path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc j')\n  cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "by metis"], ["proof (state)\nthis:\n  (\\<sigma>', j') \\<cc> (\\<sigma>, k)\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', j') \\<cc> (\\<sigma>, k)\n\ngoal (1 subgoal):\n 1. \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)", "by blast"], ["proof (state)\nthis:\n  \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, k)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem obs_neq_contradicts_term: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> assumes ret: \\<open>\\<pi> n = return\\<close> \\<open>\\<pi>' n' = return\\<close> and obsne: \\<open>obs \\<sigma> \\<noteq> obs \\<sigma>'\\<close> \nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "using \\<pi> \\<pi>' path_is_path"], ["proof (prove)\nusing this:\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain k1 where neq: \\<open>obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obsne ext[of \\<open>obs \\<sigma>\\<close> \\<open>obs \\<sigma>'\\<close>]"], ["proof (prove)\nusing this:\n  obs \\<sigma> \\<noteq> obs \\<sigma>'\n  (\\<And>x. obs \\<sigma> x = obs \\<sigma>' x) \\<Longrightarrow>\n  obs \\<sigma> = obs \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>k1.\n        obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>(\\<exists>k i i'. is_kth_obs \\<pi> k i \\<and> is_kth_obs \\<pi>' k i' \\<and> obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and> cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \n  \\<or> (\\<exists> k i. is_kth_obs \\<pi> k i \\<and> \\<not> (\\<exists> i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \n  \\<or> (\\<exists> k i'. is_kth_obs \\<pi>' k i' \\<and> \\<not> (\\<exists> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\\<close>"], ["proof (prove)\nusing this:\n  obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "proof(cases rule: option_neq_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 3. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "case (none2 x)"], ["proof (state)\nthis:\n  obs \\<sigma> k1 = Some x\n  obs \\<sigma>' k1 = None\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 3. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "have notin\\<pi>': \\<open>\\<not> (\\<exists> l. is_kth_obs \\<pi>' k1 l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l. is_kth_obs \\<pi>' k1 l", "using none2(2) \\<pi>' obs_none_no_kth_obs"], ["proof (prove)\nusing this:\n  obs \\<sigma>' k1 = None\n  \\<pi>' \\<equiv> path \\<sigma>'\n  obs ?\\<sigma> ?k = None \\<Longrightarrow>\n  \\<nexists>i. is_kth_obs (path ?\\<sigma>) ?k i\n\ngoal (1 subgoal):\n 1. \\<nexists>l. is_kth_obs \\<pi>' k1 l", "by auto"], ["proof (state)\nthis:\n  \\<nexists>l. is_kth_obs \\<pi>' k1 l\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 3. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain i where in\\<pi>: \\<open>is_kth_obs \\<pi> k1 i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k1 i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obs_some_kth_obs[of \\<open>\\<sigma>\\<close> \\<open>k1\\<close>] none2(1) \\<pi>"], ["proof (prove)\nusing this:\n  \\<lbrakk>obs \\<sigma> k1 \\<noteq> None;\n   \\<And>i.\n      is_kth_obs (path \\<sigma>) k1 i \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  obs \\<sigma> k1 = Some x\n  \\<pi> \\<equiv> path \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k1 i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k1 i\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 3. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain l j where \\<open>is_kth_obs \\<pi> l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l j.\n        \\<lbrakk>is_kth_obs \\<pi> l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path in\\<pi> notin\\<pi>'"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_kth_obs \\<pi> k1 i\n  \\<nexists>l. is_kth_obs \\<pi>' k1 l\n\ngoal (1 subgoal):\n 1. (\\<And>l j.\n        \\<lbrakk>is_kth_obs \\<pi> l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis no_kth_obs_missing_cs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = None\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 3. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "case (none1 x)"], ["proof (state)\nthis:\n  obs \\<sigma> k1 = None\n  obs \\<sigma>' k1 = Some x\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "have notin\\<pi>: \\<open>\\<not> (\\<exists> l. is_kth_obs \\<pi> k1 l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l. is_kth_obs \\<pi> k1 l", "using none1(1) \\<pi> obs_none_no_kth_obs"], ["proof (prove)\nusing this:\n  obs \\<sigma> k1 = None\n  \\<pi> \\<equiv> path \\<sigma>\n  obs ?\\<sigma> ?k = None \\<Longrightarrow>\n  \\<nexists>i. is_kth_obs (path ?\\<sigma>) ?k i\n\ngoal (1 subgoal):\n 1. \\<nexists>l. is_kth_obs \\<pi> k1 l", "by auto"], ["proof (state)\nthis:\n  \\<nexists>l. is_kth_obs \\<pi> k1 l\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain i' where in\\<pi>': \\<open>is_kth_obs \\<pi>' k1 i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k1 i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obs_some_kth_obs[of \\<open>\\<sigma>'\\<close> \\<open>k1\\<close>] none1(2) \\<pi>'"], ["proof (prove)\nusing this:\n  \\<lbrakk>obs \\<sigma>' k1 \\<noteq> None;\n   \\<And>i.\n      is_kth_obs (path \\<sigma>') k1 i \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  obs \\<sigma>' k1 = Some x\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k1 i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k1 i'\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain l j where \\<open>is_kth_obs \\<pi>' l j\\<close> \\<open>\\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l j.\n        \\<lbrakk>is_kth_obs \\<pi>' l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using path in\\<pi>' notin\\<pi>"], ["proof (prove)\nusing this:\n  is_path \\<pi>\n  is_path \\<pi>'\n  is_kth_obs \\<pi>' k1 i'\n  \\<nexists>l. is_kth_obs \\<pi> k1 l\n\ngoal (1 subgoal):\n 1. (\\<And>l j.\n        \\<lbrakk>is_kth_obs \\<pi>' l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis no_kth_obs_missing_cs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>obs \\<sigma> k1 = None; obs \\<sigma>' k1 = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "case (some x y)"], ["proof (state)\nthis:\n  obs \\<sigma> k1 = Some x\n  obs \\<sigma>' k1 = Some y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain i where in\\<pi>: \\<open>is_kth_obs \\<pi> k1 i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k1 i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obs_some_kth_obs[of \\<open>\\<sigma>\\<close> \\<open>k1\\<close>] some \\<pi>"], ["proof (prove)\nusing this:\n  \\<lbrakk>obs \\<sigma> k1 \\<noteq> None;\n   \\<And>i.\n      is_kth_obs (path \\<sigma>) k1 i \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  obs \\<sigma> k1 = Some x\n  obs \\<sigma>' k1 = Some y\n  x \\<noteq> y\n  \\<pi> \\<equiv> path \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k1 i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k1 i\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "obtain i' where in\\<pi>': \\<open>is_kth_obs \\<pi>' k1 i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k1 i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obs_some_kth_obs[of \\<open>\\<sigma>'\\<close> \\<open>k1\\<close>] some \\<pi>'"], ["proof (prove)\nusing this:\n  \\<lbrakk>obs \\<sigma>' k1 \\<noteq> None;\n   \\<And>i.\n      is_kth_obs (path \\<sigma>') k1 i \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  obs \\<sigma> k1 = Some x\n  obs \\<sigma>' k1 = Some y\n  x \\<noteq> y\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k1 i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k1 i'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>obs \\<sigma> k1 = Some a; obs \\<sigma>' k1 = Some b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>k i i'.\n                             is_kth_obs \\<pi> k i \\<and>\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             obsp \\<sigma> i \\<noteq>\n                             obsp \\<sigma>' i' \\<and>\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n                         (\\<exists>k i.\n                             is_kth_obs \\<pi> k i \\<and>\n                             (\\<nexists>i'.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n                         (\\<exists>k i'.\n                             is_kth_obs \\<pi>' k i' \\<and>\n                             (\\<nexists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i'))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "assume *: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "have \\<open>obsp \\<sigma> i = obs \\<sigma> k1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obsp \\<sigma> i = obs \\<sigma> k1", "by (metis obs_def \\<pi> in\\<pi> kth_obs_unique the_equality)"], ["proof (state)\nthis:\n  obsp \\<sigma> i = obs \\<sigma> k1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "moreover"], ["proof (state)\nthis:\n  obsp \\<sigma> i = obs \\<sigma> k1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "have \\<open>obsp \\<sigma>' i' = obs \\<sigma>' k1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obsp \\<sigma>' i' = obs \\<sigma>' k1", "by (metis obs_def \\<pi>' in\\<pi>' kth_obs_unique the_equality)"], ["proof (state)\nthis:\n  obsp \\<sigma>' i' = obs \\<sigma>' k1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "ultimately"], ["proof (chain)\npicking this:\n  obsp \\<sigma> i = obs \\<sigma> k1\n  obsp \\<sigma>' i' = obs \\<sigma>' k1", "have \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\\<close>"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i = obs \\<sigma> k1\n  obsp \\<sigma>' i' = obs \\<sigma>' k1\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "using neq"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i = obs \\<sigma> k1\n  obsp \\<sigma>' i' = obs \\<sigma>' k1\n  obs \\<sigma> k1 \\<noteq> obs \\<sigma>' k1\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "by auto"], ["proof (state)\nthis:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "using * in\\<pi> in\\<pi>'"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k1 i\n  is_kth_obs \\<pi>' k1 i'\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "assume *: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "note kth_obs_cs_missing_cs[OF path in\\<pi> in\\<pi>' *]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>l j.\n              \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n               \\<nexists>j'.\n                  cs\\<^bsup>\\<pi>\\<^esup> j =\n                  cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<And>l' j'.\n      \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>l j.\n              \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n               \\<nexists>j'.\n                  cs\\<^bsup>\\<pi>\\<^esup> j =\n                  cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   \\<And>l' j'.\n      \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<exists>k i i'.\n        is_kth_obs \\<pi> k i \\<and>\n        is_kth_obs \\<pi>' k i' \\<and>\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n        cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n    (\\<exists>k i.\n        is_kth_obs \\<pi> k i \\<and>\n        (\\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n    (\\<exists>k i'.\n        is_kth_obs \\<pi>' k i' \\<and>\n        (\\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by metis"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<exists>k i i'.\n      is_kth_obs \\<pi> k i \\<and>\n      is_kth_obs \\<pi>' k i' \\<and>\n      obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n      cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i') \\<or>\n  (\\<exists>k i.\n      is_kth_obs \\<pi> k i \\<and>\n      (\\<nexists>i'.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<or>\n  (\\<exists>k i'.\n      is_kth_obs \\<pi>' k i' \\<and>\n      (\\<nexists>i.\n          cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof (cases rule: three_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "case 1"], ["proof (state)\nthis:\n  \\<exists>k i i'.\n     is_kth_obs \\<pi> k i \\<and>\n     is_kth_obs \\<pi>' k i' \\<and>\n     obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>k i i'.\n     is_kth_obs \\<pi> k i \\<and>\n     is_kth_obs \\<pi>' k i' \\<and>\n     obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'", "obtain k i i' where iki: \\<open>is_kth_obs \\<pi> k i\\<close> \\<open>is_kth_obs \\<pi>' k i'\\<close> and obsne: \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\\<close> and csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k i i'.\n     is_kth_obs \\<pi> k i \\<and>\n     is_kth_obs \\<pi>' k i' \\<and>\n     obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<And>k i i'.\n        \\<lbrakk>is_kth_obs \\<pi> k i; is_kth_obs \\<pi>' k i';\n         obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i';\n         cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "note obsp_contradict[OF csi[unfolded \\<pi> \\<pi>'] obsne]"], ["proof (state)\nthis:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<pi> i \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "using iki"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "unfolding is_kth_obs_def"], ["proof (prove)\nusing this:\n  card (obs_ids \\<pi> \\<inter> {..<i}) = k \\<and>\n  local.att (\\<pi> i) \\<noteq> None\n  card (obs_ids \\<pi>' \\<inter> {..<i'}) = k \\<and>\n  local.att (\\<pi>' i') \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<pi> i \\<in> dom local.att\n\ngoal (3 subgoals):\n 1. \\<exists>k i i'.\n       is_kth_obs \\<pi> k i \\<and>\n       is_kth_obs \\<pi>' k i' \\<and>\n       obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<and>\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 3. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "case 2"], ["proof (state)\nthis:\n  \\<exists>k i.\n     is_kth_obs \\<pi> k i \\<and>\n     (\\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>k i.\n     is_kth_obs \\<pi> k i \\<and>\n     (\\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')", "obtain k i where iki: \\<open>is_kth_obs \\<pi> k i\\<close> and notin\\<pi>': \\<open>\\<not> (\\<exists>i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k i.\n     is_kth_obs \\<pi> k i \\<and>\n     (\\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. (\\<And>k i.\n        \\<lbrakk>is_kth_obs \\<pi> k i;\n         \\<nexists>i'.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k i\n  \\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "let \\<open>?n\\<close> = \\<open>Suc (max n i)\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nn: \\<open>n < ?n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc (max n i)", "by auto"], ["proof (state)\nthis:\n  n < Suc (max n i)\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have iln: \\<open>i < ?n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < Suc (max n i)", "by auto"], ["proof (state)\nthis:\n  i < Suc (max n i)\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have retn: \\<open>\\<pi> ?n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (max n i)) = local.return", "using ret term_path_stable path"], ["proof (prove)\nusing this:\n  \\<pi> n = local.return\n  \\<pi>' n' = local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (max n i)) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> (Suc (max n i)) = local.return\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> ?n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (max n i)) = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'", "using ret(2) cs_return"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (max n i)) = local.return\n  \\<pi>' n' = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'", "obtain i' where \\<open>(\\<sigma>',i') \\<cc> (\\<sigma>,i)\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        (\\<sigma>', i') \\<cc> (\\<sigma>, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using missing_cs_contradicts[OF notin\\<pi>'[unfolded \\<pi> \\<pi>'] iln] \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> Suc (max n i) = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  cs\\<^bsup>path \\<sigma>\\<^esup> Suc (max n i) =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> ?n' \\<Longrightarrow>\n  \\<exists>j'. (\\<sigma>', j') \\<cc> (\\<sigma>, i)\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        (\\<sigma>', i') \\<cc> (\\<sigma>, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<pi> i \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "using iki is_kth_obs_def"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> k i\n  is_kth_obs ?\\<pi> ?k ?i =\n  (card (obs_ids ?\\<pi> \\<inter> {..<?i}) = ?k \\<and>\n   local.att (?\\<pi> ?i) \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<pi> i \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. \\<exists>k i.\n       is_kth_obs \\<pi> k i \\<and>\n       (\\<nexists>i'.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "case 3"], ["proof (state)\nthis:\n  \\<exists>k i'.\n     is_kth_obs \\<pi>' k i' \\<and>\n     (\\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>k i'.\n     is_kth_obs \\<pi>' k i' \\<and>\n     (\\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')", "obtain k i' where iki: \\<open>is_kth_obs \\<pi>' k i'\\<close> and notin\\<pi>': \\<open>\\<not> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k i'.\n     is_kth_obs \\<pi>' k i' \\<and>\n     (\\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. (\\<And>k i'.\n        \\<lbrakk>is_kth_obs \\<pi>' k i';\n         \\<nexists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k i'\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "let \\<open>?n\\<close> = \\<open>Suc (max n' i')\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nn: \\<open>n' < ?n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < Suc (max n' i')", "by auto"], ["proof (state)\nthis:\n  n' < Suc (max n' i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have iln: \\<open>i' < ?n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < Suc (max n' i')", "by auto"], ["proof (state)\nthis:\n  i' < Suc (max n' i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have retn: \\<open>\\<pi>' ?n = return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (max n' i')) = local.return", "using ret term_path_stable path"], ["proof (prove)\nusing this:\n  \\<pi> n = local.return\n  \\<pi>' n' = local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?i = local.return; ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> ?\\<pi> ?j = local.return\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (max n' i')) = local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' (Suc (max n' i')) = local.return\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> ?n\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (max n' i')) = local.return\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')", "using ret(1) cs_return"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (max n' i')) = local.return\n  \\<pi> n = local.return\n  ?\\<pi> ?n = local.return \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?n = [?\\<pi> ?n]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')", "by auto"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')", "obtain i where \\<open>(\\<sigma>,i) \\<cc> (\\<sigma>',i')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<sigma>, i) \\<cc> (\\<sigma>', i') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using missing_cs_contradicts notin\\<pi>' iln \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> Suc (max n' i')\n  \\<lbrakk>\\<nexists>k'.\n              cs\\<^bsup>path ?\\<sigma>\\<^esup> ?k =\n              cs\\<^bsup>path ?\\<sigma>'\\<^esup> k';\n   ?k < ?n;\n   cs\\<^bsup>path ?\\<sigma>\\<^esup> ?n =\n   cs\\<^bsup>path ?\\<sigma>'\\<^esup> ?n'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>j'. (?\\<sigma>', j') \\<cc> (?\\<sigma>, ?k)\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  i' < Suc (max n' i')\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        (\\<sigma>, i) \\<cc> (\\<sigma>', i') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (\\<sigma>, i) \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, i) \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<pi>' i' \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<in> dom local.att", "using iki is_kth_obs_def"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs ?\\<pi> ?k ?i =\n  (card (obs_ids ?\\<pi> \\<inter> {..<?i}) = ?k \\<and>\n   local.att (?\\<pi> ?i) \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k i'.\n       is_kth_obs \\<pi>' k i' \\<and>\n       (\\<nexists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i =\n           cs\\<^bsup>\\<pi>'\\<^esup> i') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, i) \\<cc> (\\<sigma>', i')\n  \\<pi>' i' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, i) \\<cc> (\\<sigma>', i')\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_neq_some_contradicts': fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes obsnecs: \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or> cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>\nand iki: \\<open>is_kth_obs \\<pi> k i\\<close> and iki': \\<open>is_kth_obs \\<pi>' k i'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom att) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom att)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using obsnecs iki iki'"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof (induction \\<open>k\\<close> arbitrary: \\<open>i\\<close> \\<open>i'\\<close> rule: less_induct )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "case (less k i i')"], ["proof (state)\nthis:\n  \\<lbrakk>?y1 < k;\n   obsp \\<sigma> ?i1 \\<noteq> obsp \\<sigma>' ?i'1 \\<or>\n   cs\\<^bsup>\\<pi>\\<^esup> ?i1 \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> ?i'1;\n   is_kth_obs \\<pi> ?y1 ?i1; is_kth_obs \\<pi>' ?y1 ?i'1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k k'.\n                       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                       \\<pi> k \\<in> dom local.att \\<or>\n                       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                       \\<pi>' k' \\<in> dom local.att\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "note iki = \\<open>is_kth_obs \\<pi> k i\\<close>\n  and iki' = \\<open>is_kth_obs \\<pi>' k i'\\<close>"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "have domi: \\<open>\\<pi> i \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<in> dom local.att", "by (metis is_kth_obs_def domIff iki)"], ["proof (state)\nthis:\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "have domi': \\<open>\\<pi>' i' \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<in> dom local.att", "by (metis is_kth_obs_def domIff iki')"], ["proof (state)\nthis:\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "note obsnecs = \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or> cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<And>x i i'.\n       \\<lbrakk>\\<And>y i i'.\n                   \\<lbrakk>y < x;\n                    obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n                    cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n                    cs\\<^bsup>\\<pi>'\\<^esup> i';\n                    is_kth_obs \\<pi> y i; is_kth_obs \\<pi>' y i'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k k'.\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  \\<pi> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and> \\<pi>' k' \\<in> dom local.att;\n        obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n        is_kth_obs \\<pi> x i; is_kth_obs \\<pi>' x i'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k k'.\n                            (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                            \\<pi> k \\<in> dom local.att \\<or>\n                            (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n                            \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence *: \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "using obsnecs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "by auto"], ["proof (state)\nthis:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "note obsp_contradict[OF _ *] csi domi \\<pi> \\<pi>'"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' \\<Longrightarrow>\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> i \\<in> dom local.att\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' \\<Longrightarrow>\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> i \\<in> dom local.att\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume ncsi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have path: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "using \\<pi> \\<pi>' path_is_path"], ["proof (prove)\nusing this:\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> 0 = \\<pi>' 0", "unfolding \\<pi> \\<pi>' path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ((local.step ^^ 0) (local.entry, \\<sigma>)) =\n    fst ((local.step ^^ 0) (local.entry, \\<sigma>'))", "by auto"], ["proof (state)\nthis:\n  \\<pi> 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "note kth_obs_cs_missing_cs[of \\<open>\\<pi>\\<close> \\<open>\\<pi>'\\<close> \\<open>k\\<close> \\<open>i\\<close> \\<open>i'\\<close>] \\<pi> \\<pi>' path_is_path iki iki' ncsi"], ["proof (state)\nthis:\n  \\<lbrakk>is_path \\<pi>; is_path \\<pi>'; is_kth_obs \\<pi> k i;\n   is_kth_obs \\<pi>' k i';\n   cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n   \\<And>l j.\n      \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   \\<And>l' j'.\n      \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_path (path ?\\<sigma>)\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>(\\<exists> l j .j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<and> \\<not> (\\<exists> j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<or> (\\<exists> l' j'. j' \\<le> i' \\<and> is_kth_obs \\<pi>' l' j' \\<and> \\<not> (\\<exists> j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'))\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path \\<pi>; is_path \\<pi>'; is_kth_obs \\<pi> k i;\n   is_kth_obs \\<pi>' k i';\n   cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i';\n   \\<And>l j.\n      \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   \\<And>l' j'.\n      \\<lbrakk>j' \\<le> i'; is_kth_obs \\<pi>' l' j';\n       \\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_path (path ?\\<sigma>)\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi>' k i'\n  cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<exists>l j.\n        j \\<le> i \\<and>\n        is_kth_obs \\<pi> l j \\<and>\n        (\\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<or>\n    (\\<exists>l' j'.\n        j' \\<le> i' \\<and>\n        is_kth_obs \\<pi>' l' j' \\<and>\n        (\\<nexists>j.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'))", "by metis"], ["proof (state)\nthis:\n  (\\<exists>l j.\n      j \\<le> i \\<and>\n      is_kth_obs \\<pi> l j \\<and>\n      (\\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<or>\n  (\\<exists>l' j'.\n      j' \\<le> i' \\<and>\n      is_kth_obs \\<pi>' l' j' \\<and>\n      (\\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'))\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<exists>l j.\n      j \\<le> i \\<and>\n      is_kth_obs \\<pi> l j \\<and>\n      (\\<nexists>j'.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<or>\n  (\\<exists>l' j'.\n      j' \\<le> i' \\<and>\n      is_kth_obs \\<pi>' l' j' \\<and>\n      (\\<nexists>j.\n          cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'))\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>l j.\n       j \\<le> i \\<and>\n       is_kth_obs \\<pi> l j \\<and>\n       (\\<nexists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<exists>l j. j \\<le> i \\<and> is_kth_obs \\<pi> l j \\<and> \\<not> (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (state)\nthis:\n  \\<exists>l j.\n     j \\<le> i \\<and>\n     is_kth_obs \\<pi> l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (2 subgoals):\n 1. \\<exists>l j.\n       j \\<le> i \\<and>\n       is_kth_obs \\<pi> l j \\<and>\n       (\\<nexists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>l j.\n     j \\<le> i \\<and>\n     is_kth_obs \\<pi> l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')", "obtain l j where ji: \\<open>j\\<le>i\\<close> and iobs: \\<open>is_kth_obs \\<pi> l j\\<close> and notin: \\<open>\\<not> (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l j.\n     j \\<le> i \\<and>\n     is_kth_obs \\<pi> l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. (\\<And>j l.\n        \\<lbrakk>j \\<le> i; is_kth_obs \\<pi> l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j \\<le> i\n  is_kth_obs \\<pi> l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n\ngoal (2 subgoals):\n 1. \\<exists>l j.\n       j \\<le> i \\<and>\n       is_kth_obs \\<pi> l j \\<and>\n       (\\<nexists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have dom: \\<open>\\<pi> j \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> j \\<in> dom local.att", "using iobs is_kth_obs_def"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> l j\n  is_kth_obs ?\\<pi> ?k ?i =\n  (card (obs_ids ?\\<pi> \\<inter> {..<?i}) = ?k \\<and>\n   local.att (?\\<pi> ?i) \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<pi> j \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<pi> j \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. \\<exists>l j.\n       j \\<le> i \\<and>\n       is_kth_obs \\<pi> l j \\<and>\n       (\\<nexists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain n n' where nj: \\<open>n < j\\<close> and csn: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and sucn:  \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close> and cdloop: \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<or> (\\<forall> j'> n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>n < j;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n');\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<or>\n         (\\<forall>j'>n'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using missing_cd_or_loop[OF path \\<pi>0 notin]"], ["proof (prove)\nusing this:\n  (\\<And>i i'.\n      \\<lbrakk>i < j;\n       cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n       \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n       (\\<forall>j'>i'.\n           j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>n < j;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n');\n         j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<or>\n         (\\<forall>j'>n'.\n             j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n < j\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<or>\n  (\\<forall>j'>n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n')\n\ngoal (2 subgoals):\n 1. \\<exists>l j.\n       j \\<le> i \\<and>\n       is_kth_obs \\<pi> l j \\<and>\n       (\\<nexists>j'.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using cdloop"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<or>\n  (\\<forall>j'>n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume cdjn: \\<open>j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csnj: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> j\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> j", "using csn"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> j", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> j\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) = \\<pi> (Suc n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) =\n    \\<pi> (Suc n)", "using csn"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) =\n    \\<pi> (Suc n)", "by (metis cdjn cd_not_ret cs_select_id path(1))"], ["proof (state)\nthis:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) =\n  \\<pi> (Suc n)\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>',n') \\<cc> (\\<sigma>,j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', n') \\<cc> (\\<sigma>, j)", "using csnj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', n') \\<cc> (\\<sigma>, j)", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) \\<noteq>\n    \\<pi>' (Suc n')", "using cssel \\<pi> \\<pi>' sucn"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) =\n  \\<pi> (Suc n)\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n')) \\<noteq>\n    \\<pi>' (Suc n')", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', n') \\<cc> (\\<sigma>, j)\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', n') \\<cc> (\\<sigma>, j)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using dom"], ["proof (prove)\nusing this:\n  (\\<sigma>', n') \\<cc> (\\<sigma>, j)\n  \\<pi> j \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume loop: \\<open>\\<forall> j'>n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (state)\nthis:\n  \\<forall>j'>n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume in': \\<open>i' \\<le> n'\\<close>"], ["proof (state)\nthis:\n  i' \\<le> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by( metis le_eq_less_or_eq lessI loop not_le path(2) ret_no_cd term_path_stable)"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<exists> \\<iota>. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>\\<close>"], ["proof (state)\nthis:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>", "obtain \\<iota> where cs\\<iota>: \\<open>cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        cs\\<^bsup>\\<pi>\\<^esup> \\<iota> =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<iota>n: \\<open>\\<iota> \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<le> n", "using cs_order_le[OF path(2,1) cs\\<iota>[symmetric] csn[symmetric] nreti' in']"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<iota> \\<le> n", "."], ["proof (state)\nthis:\n  \\<iota> \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<iota>i: \\<open>\\<iota> < i\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<iota> < i", "using nj ji"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n  n < j\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<iota> < i", "by auto"], ["proof (state)\nthis:\n  \\<iota> < i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have dom\\<iota>: \\<open>\\<pi> \\<iota> \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<iota> \\<in> dom local.att", "using domi' cs\\<iota> last_cs"], ["proof (prove)\nusing this:\n  \\<pi>' i' \\<in> dom local.att\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> \\<iota> \\<in> dom local.att", "by metis"], ["proof (state)\nthis:\n  \\<pi> \\<iota> \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<kappa> where i\\<kappa>\\<iota>: \\<open>is_kth_obs \\<pi> \\<kappa> \\<iota>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>.\n        is_kth_obs \\<pi> \\<kappa> \\<iota> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using dom\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi> \\<iota> \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>.\n        is_kth_obs \\<pi> \\<kappa> \\<iota> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis is_kth_obs_def domIff)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> \\<kappa> \\<iota>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<kappa>k: \\<open>\\<kappa> < k\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> \\<kappa> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<kappa> < k", "using \\<iota>i iki"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> \\<kappa> \\<iota>\n  \\<iota> < i\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. \\<kappa> < k", "by (metis kth_obs_le_iff)"], ["proof (state)\nthis:\n  \\<kappa> < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<iota>' where i\\<kappa>\\<iota>': \\<open>is_kth_obs \\<pi>' \\<kappa> \\<iota>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        is_kth_obs \\<pi>' \\<kappa> \\<iota>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<kappa>k iki'"], ["proof (prove)\nusing this:\n  \\<kappa> < k\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        is_kth_obs \\<pi>' \\<kappa> \\<iota>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis kth_obs_stable)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' \\<kappa> \\<iota>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<iota>' < i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' < i'", "using \\<kappa>k iki' i\\<kappa>\\<iota>'"], ["proof (prove)\nusing this:\n  \\<kappa> < k\n  is_kth_obs \\<pi>' k i'\n  is_kth_obs \\<pi>' \\<kappa> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<iota>' < i'", "by (metis kth_obs_le_iff)"], ["proof (state)\nthis:\n  \\<iota>' < i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cs\\<iota>': \\<open>cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\\<close>"], ["proof (prove)\nusing this:\n  \\<iota>' < i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'", "unfolding cs\\<iota>"], ["proof (prove)\nusing this:\n  \\<iota>' < i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'", "using cs_inj[OF path(2) nreti', of \\<open>\\<iota>'\\<close>]"], ["proof (prove)\nusing this:\n  \\<iota>' < i'\n  cs\\<^bsup>\\<pi>'\\<^esup> i' =\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<Longrightarrow>\n  i' = \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> i' \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using less(1)[OF \\<kappa>k _ i\\<kappa>\\<iota> i\\<kappa>\\<iota>']"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n  obsp \\<sigma> \\<iota> \\<noteq> obsp \\<sigma>' \\<iota>' \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<Longrightarrow>\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>'\\<^esup> i' =\n       cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>'\\<^esup> i' =\n       cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume notin'': \\<open>\\<not>(\\<exists> \\<iota>. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>\\<iota>.\n     cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>'\\<^esup> i' =\n       cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<iota> \\<iota>' where \\<iota>i': \\<open>\\<iota>' < i'\\<close> and cs\\<iota>: \\<open>cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\\<close> and suc\\<iota>: \\<open>\\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>')\\<close> and cdloop': \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<or> (\\<forall> j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>' \\<iota>.\n        \\<lbrakk>\\<iota>' < i';\n         cs\\<^bsup>\\<pi>\\<^esup> \\<iota> =\n         cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>';\n         \\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>');\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n         (\\<forall>j>\\<iota>.\n             j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using missing_cd_or_loop[OF path(2,1) \\<pi>0[symmetric] notin'']"], ["proof (prove)\nusing this:\n  (\\<And>i i'.\n      \\<lbrakk>i < i';\n       cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i';\n       \\<pi>' (Suc i) \\<noteq> \\<pi> (Suc i');\n       i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i \\<or>\n       (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>' \\<iota>.\n        \\<lbrakk>\\<iota>' < i';\n         cs\\<^bsup>\\<pi>\\<^esup> \\<iota> =\n         cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>';\n         \\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>');\n         i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n         (\\<forall>j>\\<iota>.\n             j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<iota>' < i'\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n  \\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>')\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n  (\\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>'\\<^esup> i' =\n       cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using cdloop'"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n  (\\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume cdjn: \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>'\\<close>"], ["proof (state)\nthis:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>'\n\ngoal (2 subgoals):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csnj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>'\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) = \\<pi>' (Suc \\<iota>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) =\n    \\<pi>' (Suc \\<iota>')", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) =\n    \\<pi>' (Suc \\<iota>')", "by (metis cdjn cd_not_ret cs_select_id path(2))"], ["proof (state)\nthis:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) =\n  \\<pi>' (Suc \\<iota>')\n\ngoal (2 subgoals):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>,\\<iota>) \\<cc> (\\<sigma>',i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<iota>) \\<cc> (\\<sigma>', i')", "using csnj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<iota>) \\<cc> (\\<sigma>', i')", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>'\n     (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) \\<noteq>\n    \\<pi> (Suc \\<iota>)", "using cssel \\<pi> \\<pi>' suc\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) =\n  \\<pi>' (Suc \\<iota>')\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>')\n\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>'\n     (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>)) \\<noteq>\n    \\<pi> (Suc \\<iota>)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, \\<iota>) \\<cc> (\\<sigma>', i')\n\ngoal (2 subgoals):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<iota>) \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi'"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<iota>) \\<cc> (\\<sigma>', i')\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume loop': \\<open>\\<forall> j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\\<close>"], ["proof (state)\nthis:\n  \\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<iota>n': \\<open>\\<iota>' < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' < n'", "using in' \\<iota>i'"], ["proof (prove)\nusing this:\n  i' \\<le> n'\n  \\<iota>' < i'\n\ngoal (1 subgoal):\n 1. \\<iota>' < n'", "by auto"], ["proof (state)\nthis:\n  \\<iota>' < n'\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nret\\<iota>': \\<open>\\<pi>' \\<iota>' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' \\<iota>' \\<noteq> local.return", "by (metis cs\\<iota> last_cs le_eq_less_or_eq lessI path(1) path(2) suc\\<iota> term_path_stable)"], ["proof (state)\nthis:\n  \\<pi>' \\<iota>' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<iota> < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> < n", "using cs_order[OF path(2,1) cs\\<iota>[symmetric] csn[symmetric] nret\\<iota>' \\<iota>n']"], ["proof (prove)\nusing this:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<iota> < n", "."], ["proof (state)\nthis:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>\\<iota> < i\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<iota> < i", "using nj ji"], ["proof (prove)\nusing this:\n  \\<iota> < n\n  n < j\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<iota> < i", "by auto"], ["proof (state)\nthis:\n  \\<iota> < i\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cdi\\<iota>: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> < i\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>", "using loop'"], ["proof (prove)\nusing this:\n  \\<iota> < i\n  \\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>", "by auto"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cs\\<iota>i: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) = \\<pi> (Suc \\<iota>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) =\n    \\<pi> (Suc \\<iota>)", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) =\n    \\<pi> (Suc \\<iota>)", "by (metis cdi\\<iota> cd_not_ret cs_select_id path(1))"], ["proof (state)\nthis:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) =\n  \\<pi> (Suc \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>',\\<iota>') \\<cc> (\\<sigma>,i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<iota>') \\<cc> (\\<sigma>, i)", "using cs\\<iota>i"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<iota>') \\<cc> (\\<sigma>, i)", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi>\n     (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) \\<noteq>\n    \\<pi>' (Suc \\<iota>')", "using cssel \\<pi> \\<pi>' suc\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) =\n  \\<pi> (Suc \\<iota>)\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> (Suc \\<iota>) \\<noteq> \\<pi>' (Suc \\<iota>')\n\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi>\n     (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>')) \\<noteq>\n    \\<pi>' (Suc \\<iota>')", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<iota>') \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', \\<iota>') \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi"], ["proof (prove)\nusing this:\n  (\\<sigma>', \\<iota>') \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<not> i' \\<le> n'\\<close>"], ["proof (state)\nthis:\n  \\<not> i' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence ni': \\<open>n'< i'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i' \\<le> n'\n\ngoal (1 subgoal):\n 1. n' < i'", "by simp"], ["proof (state)\nthis:\n  n' < i'\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cdin: \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\nusing this:\n  n' < i'\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "using loop"], ["proof (prove)\nusing this:\n  n' < i'\n  \\<forall>j'>n'. j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "by auto"], ["proof (state)\nthis:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csni: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "using csn"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) = \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) =\n    \\<pi>' (Suc n')", "using csn"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) =\n    \\<pi>' (Suc n')", "by (metis cdin cd_not_ret cs_select_id path(2))"], ["proof (state)\nthis:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) =\n  \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>,n) \\<cc> (\\<sigma>',i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, n) \\<cc> (\\<sigma>', i')", "using csni"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, n) \\<cc> (\\<sigma>', i')", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) \\<noteq>\n    \\<pi> (Suc n)", "using cssel \\<pi> \\<pi>' sucn"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) =\n  \\<pi>' (Suc n')\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n)) \\<noteq>\n    \\<pi> (Suc n)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, n) \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, n) \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi'"], ["proof (prove)\nusing this:\n  (\\<sigma>, n) \\<cc> (\\<sigma>', i')\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next\n      \\<comment> \\<open>Symmetric case as above, indices might be messy.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<exists>l j. j \\<le> i' \\<and> is_kth_obs \\<pi>' l j \\<and> \\<not> (\\<exists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j)\\<close>"], ["proof (state)\nthis:\n  \\<exists>l j.\n     j \\<le> i' \\<and>\n     is_kth_obs \\<pi>' l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j)\n\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>l j.\n     j \\<le> i' \\<and>\n     is_kth_obs \\<pi>' l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j)", "obtain l j where ji': \\<open>j\\<le>i'\\<close> and iobs: \\<open>is_kth_obs \\<pi>' l j\\<close> and notin: \\<open>\\<not> (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> j')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>l j.\n     j \\<le> i' \\<and>\n     is_kth_obs \\<pi>' l j \\<and>\n     (\\<nexists>j'. cs\\<^bsup>\\<pi>\\<^esup> j' = cs\\<^bsup>\\<pi>'\\<^esup> j)\n\ngoal (1 subgoal):\n 1. (\\<And>j l.\n        \\<lbrakk>j \\<le> i'; is_kth_obs \\<pi>' l j;\n         \\<nexists>j'.\n            cs\\<^bsup>\\<pi>'\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> j'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  j \\<le> i'\n  is_kth_obs \\<pi>' l j\n  \\<nexists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> j'\n\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have dom: \\<open>\\<pi>' j \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' j \\<in> dom local.att", "using iobs is_kth_obs_def"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l j\n  is_kth_obs ?\\<pi> ?k ?i =\n  (card (obs_ids ?\\<pi> \\<inter> {..<?i}) = ?k \\<and>\n   local.att (?\\<pi> ?i) \\<noteq> None)\n\ngoal (1 subgoal):\n 1. \\<pi>' j \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<pi>' j \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain n n' where nj: \\<open>n < j\\<close> and csn: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\\<close> and sucn:  \\<open>\\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n')\\<close> and cdloop: \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<or> (\\<forall> j'> n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>n < j;\n         cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n';\n         \\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n');\n         j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<or>\n         (\\<forall>j'>n'.\n             j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using missing_cd_or_loop[OF path(2,1) \\<pi>0[symmetric] ] notin"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<nexists>k'.\n              cs\\<^bsup>\\<pi>'\\<^esup> ?k = cs\\<^bsup>\\<pi>\\<^esup> k';\n   \\<And>i i'.\n      \\<lbrakk>i < ?k;\n       cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i';\n       \\<pi>' (Suc i) \\<noteq> \\<pi> (Suc i');\n       ?k cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i \\<or>\n       (\\<forall>j'>i'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i')\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<nexists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j = cs\\<^bsup>\\<pi>\\<^esup> j'\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>n < j;\n         cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n';\n         \\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n');\n         j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<or>\n         (\\<forall>j'>n'.\n             j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  n < j\n  cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n  \\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n')\n  j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<or>\n  (\\<forall>j'>n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n')\n\ngoal (1 subgoal):\n 1. \\<exists>l' j'.\n       j' \\<le> i' \\<and>\n       is_kth_obs \\<pi>' l' j' \\<and>\n       (\\<nexists>j.\n           cs\\<^bsup>\\<pi>\\<^esup> j =\n           cs\\<^bsup>\\<pi>'\\<^esup> j') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using cdloop"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<or>\n  (\\<forall>j'>n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume cdjn: \\<open>j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n\\<close>"], ["proof (state)\nthis:\n  j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csnj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> j\\<close>"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> j", "using csn"], ["proof (prove)\nusing this:\n  j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n\n  cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> j", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> j\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) = \\<pi>' (Suc n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) =\n    \\<pi>' (Suc n)", "using csn"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) =\n    \\<pi>' (Suc n)", "by (metis cdjn cd_not_ret cs_select_id path(2))"], ["proof (state)\nthis:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) =\n  \\<pi>' (Suc n)\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>,n') \\<cc> (\\<sigma>',j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, n') \\<cc> (\\<sigma>', j)", "using csnj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>, n') \\<cc> (\\<sigma>', j)", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) \\<noteq>\n    \\<pi> (Suc n')", "using cssel \\<pi>' \\<pi> sucn"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) =\n  \\<pi>' (Suc n)\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n')\n\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> n')) \\<noteq>\n    \\<pi> (Suc n')", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, n') \\<cc> (\\<sigma>', j)\n\ngoal (2 subgoals):\n 1. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, n') \\<cc> (\\<sigma>', j)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using dom"], ["proof (prove)\nusing this:\n  (\\<sigma>, n') \\<cc> (\\<sigma>', j)\n  \\<pi>' j \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume loop: \\<open>\\<forall> j'>n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (state)\nthis:\n  \\<forall>j'>n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<forall>j'>n'.\n       j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume in': \\<open>i \\<le> n'\\<close>"], ["proof (state)\nthis:\n  i \\<le> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by (metis le_eq_less_or_eq lessI loop not_le path(1) ret_no_cd term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<exists> \\<iota>. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>\\<close>"], ["proof (state)\nthis:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>", "obtain \\<iota> where cs\\<iota>: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>\\<iota>.\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>.\n        cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> =\n        cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<iota>n: \\<open>\\<iota> \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> \\<le> n", "using cs_order_le[OF path cs\\<iota>[symmetric] csn[symmetric] nreti in']"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<iota> \\<le> n", "."], ["proof (state)\nthis:\n  \\<iota> \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<iota>i': \\<open>\\<iota> < i'\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n\ngoal (1 subgoal):\n 1. \\<iota> < i'", "using nj ji'"], ["proof (prove)\nusing this:\n  \\<iota> \\<le> n\n  n < j\n  j \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<iota> < i'", "by auto"], ["proof (state)\nthis:\n  \\<iota> < i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have dom\\<iota>: \\<open>\\<pi>' \\<iota> \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' \\<iota> \\<in> dom local.att", "using domi cs\\<iota> last_cs"], ["proof (prove)\nusing this:\n  \\<pi> i \\<in> dom local.att\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> i\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' \\<iota> \\<in> dom local.att", "by metis"], ["proof (state)\nthis:\n  \\<pi>' \\<iota> \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<kappa> where i\\<kappa>\\<iota>: \\<open>is_kth_obs \\<pi>' \\<kappa> \\<iota>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>.\n        is_kth_obs \\<pi>' \\<kappa> \\<iota> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using dom\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi>' \\<iota> \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. (\\<And>\\<kappa>.\n        is_kth_obs \\<pi>' \\<kappa> \\<iota> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis is_kth_obs_def domIff)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' \\<kappa> \\<iota>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<kappa>k: \\<open>\\<kappa> < k\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' \\<kappa> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<kappa> < k", "using \\<iota>i' iki'"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' \\<kappa> \\<iota>\n  \\<iota> < i'\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<kappa> < k", "by (metis kth_obs_le_iff)"], ["proof (state)\nthis:\n  \\<kappa> < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<iota>' where i\\<kappa>\\<iota>': \\<open>is_kth_obs \\<pi> \\<kappa> \\<iota>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        is_kth_obs \\<pi> \\<kappa> \\<iota>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<kappa>k iki"], ["proof (prove)\nusing this:\n  \\<kappa> < k\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>'.\n        is_kth_obs \\<pi> \\<kappa> \\<iota>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis kth_obs_stable)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> \\<kappa> \\<iota>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<iota>' < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' < i", "using \\<kappa>k iki i\\<kappa>\\<iota>'"], ["proof (prove)\nusing this:\n  \\<kappa> < k\n  is_kth_obs \\<pi> k i\n  is_kth_obs \\<pi> \\<kappa> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<iota>' < i", "by (metis kth_obs_le_iff)"], ["proof (state)\nthis:\n  \\<iota>' < i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cs\\<iota>': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\\<close>"], ["proof (prove)\nusing this:\n  \\<iota>' < i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<noteq>\n    cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'", "unfolding cs\\<iota>"], ["proof (prove)\nusing this:\n  \\<iota>' < i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'", "using cs_inj[OF path(1) nreti, of \\<open>\\<iota>'\\<close>]"], ["proof (prove)\nusing this:\n  \\<iota>' < i\n  cs\\<^bsup>\\<pi>\\<^esup> i =\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<Longrightarrow>\n  i = \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> i \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using less(1)[OF \\<kappa>k _ i\\<kappa>\\<iota>' i\\<kappa>\\<iota>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<noteq> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n  obsp \\<sigma> \\<iota>' \\<noteq> obsp \\<sigma>' \\<iota> \\<or>\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<noteq>\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<Longrightarrow>\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume notin'': \\<open>\\<not>(\\<exists> \\<iota>. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)\\<close>"], ["proof (state)\nthis:\n  \\<nexists>\\<iota>.\n     cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain \\<iota> \\<iota>' where \\<iota>i: \\<open>\\<iota>' < i\\<close> and cs\\<iota>: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\\<close> and suc\\<iota>: \\<open>\\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>')\\<close> and cdloop': \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<or> (\\<forall> j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>' \\<iota>.\n        \\<lbrakk>\\<iota>' < i;\n         cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> =\n         cs\\<^bsup>\\<pi>\\<^esup> \\<iota>';\n         \\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>');\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n         (\\<forall>j>\\<iota>.\n             j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using missing_cd_or_loop[OF path \\<pi>0 notin'']"], ["proof (prove)\nusing this:\n  (\\<And>i i'.\n      \\<lbrakk>i < i;\n       cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n       \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i');\n       i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i \\<or>\n       (\\<forall>j'>i'.\n           j' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<iota>' \\<iota>.\n        \\<lbrakk>\\<iota>' < i;\n         cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> =\n         cs\\<^bsup>\\<pi>\\<^esup> \\<iota>';\n         \\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>');\n         i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n         (\\<forall>j>\\<iota>.\n             j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<iota>' < i\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n  \\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>')\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n  (\\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<nexists>\\<iota>.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using cdloop'"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<or>\n  (\\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume cdjn: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>'\\<close>"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>'\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csnj: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>'\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) = \\<pi> (Suc \\<iota>')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) =\n    \\<pi> (Suc \\<iota>')", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) =\n    \\<pi> (Suc \\<iota>')", "by (metis cdjn cd_not_ret cs_select_id path(1))"], ["proof (state)\nthis:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) =\n  \\<pi> (Suc \\<iota>')\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>',\\<iota>) \\<cc> (\\<sigma>,i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<iota>) \\<cc> (\\<sigma>, i)", "using csnj"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<iota>) \\<cc> (\\<sigma>, i)", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi>\n     (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) \\<noteq>\n    \\<pi>' (Suc \\<iota>)", "using cssel \\<pi>' \\<pi> suc\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) =\n  \\<pi> (Suc \\<iota>')\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>')\n\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi>\n     (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> \\<iota>)) \\<noteq>\n    \\<pi>' (Suc \\<iota>)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', \\<iota>) \\<cc> (\\<sigma>, i)\n\ngoal (2 subgoals):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> \\<iota>' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', \\<iota>) \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi"], ["proof (prove)\nusing this:\n  (\\<sigma>', \\<iota>) \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume loop': \\<open>\\<forall> j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\\<close>"], ["proof (state)\nthis:\n  \\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<iota>n': \\<open>\\<iota>' < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota>' < n'", "using in' \\<iota>i"], ["proof (prove)\nusing this:\n  i \\<le> n'\n  \\<iota>' < i\n\ngoal (1 subgoal):\n 1. \\<iota>' < n'", "by auto"], ["proof (state)\nthis:\n  \\<iota>' < n'\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have nret\\<iota>': \\<open>\\<pi> \\<iota>' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<iota>' \\<noteq> local.return", "by (metis cs\\<iota> last_cs le_eq_less_or_eq lessI path(1) path(2) suc\\<iota> term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> \\<iota>' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<iota> < n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> < n", "using cs_order[OF path cs\\<iota>[symmetric] csn[symmetric] nret\\<iota>' \\<iota>n']"], ["proof (prove)\nusing this:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<iota> < n", "."], ["proof (state)\nthis:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence \\<open>\\<iota> < i'\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> < n\n\ngoal (1 subgoal):\n 1. \\<iota> < i'", "using nj ji'"], ["proof (prove)\nusing this:\n  \\<iota> < n\n  n < j\n  j \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<iota> < i'", "by auto"], ["proof (state)\nthis:\n  \\<iota> < i'\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cdi\\<iota>: \\<open>i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\\<close>"], ["proof (prove)\nusing this:\n  \\<iota> < i'\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>", "using loop'"], ["proof (prove)\nusing this:\n  \\<iota> < i'\n  \\<forall>j>\\<iota>. j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>", "by auto"], ["proof (state)\nthis:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cs\\<iota>i': \\<open>cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  i' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota>\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) = \\<pi>' (Suc \\<iota>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) =\n    \\<pi>' (Suc \\<iota>)", "using cs\\<iota>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> \\<iota> = cs\\<^bsup>\\<pi>\\<^esup> \\<iota>'\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) =\n    \\<pi>' (Suc \\<iota>)", "by (metis cdi\\<iota> cd_not_ret cs_select_id path(2))"], ["proof (state)\nthis:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) =\n  \\<pi>' (Suc \\<iota>)\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>,\\<iota>') \\<cc> (\\<sigma>',i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<iota>') \\<cc> (\\<sigma>', i')", "using cs\\<iota>i'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> \\<iota>' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<iota>') \\<cc> (\\<sigma>', i')", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>'\n     (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) \\<noteq>\n    \\<pi> (Suc \\<iota>')", "using cssel \\<pi>' \\<pi> suc\\<iota>"], ["proof (prove)\nusing this:\n  \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) =\n  \\<pi>' (Suc \\<iota>)\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' (Suc \\<iota>) \\<noteq> \\<pi> (Suc \\<iota>')\n\ngoal (3 subgoals):\n 1. \\<pi>' = path \\<sigma>'\n 2. \\<pi> = path \\<sigma>\n 3. \\<pi>'\n     (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>\\<^esup> \\<iota>')) \\<noteq>\n    \\<pi> (Suc \\<iota>')", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, \\<iota>') \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<forall>j>\\<iota>.\n       j cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> \\<iota> \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<iota>') \\<cc> (\\<sigma>', i')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi'"], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<iota>') \\<cc> (\\<sigma>', i')\n  \\<pi>' i' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "assume \\<open>\\<not> i \\<le> n'\\<close>"], ["proof (state)\nthis:\n  \\<not> i \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence ni: \\<open>n'< i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> n'\n\ngoal (1 subgoal):\n 1. n' < i", "by simp"], ["proof (state)\nthis:\n  n' < i\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence cdin: \\<open>i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\nusing this:\n  n' < i\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "using loop"], ["proof (prove)\nusing this:\n  n' < i\n  \\<forall>j'>n'. j' cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'", "by auto"], ["proof (state)\nthis:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence csni': \\<open>cs\\<^bsup>\\<pi>'\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "using csn"], ["proof (prove)\nusing this:\n  i cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n'\n  cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i", "by (metis cd_is_cs_less)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have cssel: \\<open>\\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) = \\<pi> (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) =\n    \\<pi> (Suc n')", "using csn"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> n = cs\\<^bsup>\\<pi>\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) =\n    \\<pi> (Suc n')", "by (metis cdin cd_not_ret cs_select_id path(1))"], ["proof (state)\nthis:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) =\n  \\<pi> (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>(\\<sigma>',n) \\<cc> (\\<sigma>,i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', n) \\<cc> (\\<sigma>, i)", "using csni'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> n \\<prec> cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. (\\<sigma>', n) \\<cc> (\\<sigma>, i)", "apply(rule contradicts.intros(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) \\<noteq>\n    \\<pi>' (Suc n)", "using cssel \\<pi>' \\<pi> sucn"], ["proof (prove)\nusing this:\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) =\n  \\<pi> (Suc n')\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' (Suc n) \\<noteq> \\<pi> (Suc n')\n\ngoal (3 subgoals):\n 1. \\<pi> = path \\<sigma>\n 2. \\<pi>' = path \\<sigma>'\n 3. \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> n)) \\<noteq>\n    \\<pi>' (Suc n)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', n) \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> n' \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', n) \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using domi"], ["proof (prove)\nusing this:\n  (\\<sigma>', n) \\<cc> (\\<sigma>, i)\n  \\<pi> i \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem obs_neq_some_contradicts: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes obsne: \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k\\<close> and not_none: \\<open>obs \\<sigma> k \\<noteq> None\\<close> \\<open>obs \\<sigma>' k \\<noteq> None\\<close> \nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom att) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom att)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain i where iki: \\<open>is_kth_obs \\<pi> k i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_none(1)"], ["proof (prove)\nusing this:\n  obs \\<sigma> k \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        is_kth_obs \\<pi> k i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<pi> obs_some_kth_obs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> k i\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain i' where iki': \\<open>is_kth_obs \\<pi>' k i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using not_none(2)"], ["proof (prove)\nusing this:\n  obs \\<sigma>' k \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        is_kth_obs \\<pi>' k i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis \\<pi>' obs_some_kth_obs)"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' k i'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>obsp \\<sigma> i = obs \\<sigma> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obsp \\<sigma> i = obs \\<sigma> k", "by (metis \\<pi> iki kth_obs_unique obs_def the_equality)"], ["proof (state)\nthis:\n  obsp \\<sigma> i = obs \\<sigma> k\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "moreover"], ["proof (state)\nthis:\n  obsp \\<sigma> i = obs \\<sigma> k\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>obsp \\<sigma>' i' = obs \\<sigma>' k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. obsp \\<sigma>' i' = obs \\<sigma>' k", "by (metis \\<pi>' iki' kth_obs_unique obs_def the_equality)"], ["proof (state)\nthis:\n  obsp \\<sigma>' i' = obs \\<sigma>' k\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "ultimately"], ["proof (chain)\npicking this:\n  obsp \\<sigma> i = obs \\<sigma> k\n  obsp \\<sigma>' i' = obs \\<sigma>' k", "have obspne: \\<open>obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\\<close>"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i = obs \\<sigma> k\n  obsp \\<sigma>' i' = obs \\<sigma>' k\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "using obsne"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i = obs \\<sigma> k\n  obsp \\<sigma>' i' = obs \\<sigma>' k\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k\n\ngoal (1 subgoal):\n 1. obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'", "by auto"], ["proof (state)\nthis:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using obs_neq_some_contradicts'[OF _ iki[unfolded \\<pi>] iki'[unfolded \\<pi>']]"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>path \\<sigma>\\<^esup> i \\<noteq>\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' \\<Longrightarrow>\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using obspne \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i' \\<or>\n  cs\\<^bsup>path \\<sigma>\\<^esup> i \\<noteq>\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' \\<Longrightarrow>\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     path \\<sigma>' k' \\<in> dom local.att\n  obsp \\<sigma> i \\<noteq> obsp \\<sigma>' i'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by metis"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem obs_neq_ret_contradicts: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> and obsne: \\<open>obs \\<sigma>' i \\<noteq> obs \\<sigma> i\\<close> and obs:\\<open>obs \\<sigma>' i \\<noteq> None\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "proof (cases \\<open>\\<exists> j k'. is_kth_obs \\<pi>' j k' \\<and> (\\<nexists> k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "case True"], ["proof (state)\nthis:\n  \\<exists>j k'.\n     is_kth_obs \\<pi>' j k' \\<and>\n     (\\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain l k' where jk': \\<open>is_kth_obs \\<pi>' l k'\\<close> and unmatched: \\<open>(\\<nexists> k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l k'.\n        \\<lbrakk>is_kth_obs \\<pi>' l k';\n         \\<nexists>k.\n            cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using True"], ["proof (prove)\nusing this:\n  \\<exists>j k'.\n     is_kth_obs \\<pi>' j k' \\<and>\n     (\\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (1 subgoal):\n 1. (\\<And>l k'.\n        \\<lbrakk>is_kth_obs \\<pi>' l k';\n         \\<nexists>k.\n            cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' l k'\n  \\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<pi>0: \\<open>\\<pi> 0 = \\<pi>' 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> 0 = \\<pi>' 0", "using \\<pi> \\<pi>' path0"], ["proof (prove)\nusing this:\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  path ?\\<sigma> 0 = local.entry\n\ngoal (1 subgoal):\n 1. \\<pi> 0 = \\<pi>' 0", "by auto"], ["proof (state)\nthis:\n  \\<pi> 0 = \\<pi>' 0\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain j j' where csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\\<close> and cd: \\<open>k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow>j'\\<close> and suc: \\<open>\\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j';\n         k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge_return[of \\<open>\\<pi>'\\<close> \\<open>\\<pi>\\<close> \\<open>k'\\<close> \\<open>n\\<close>] ret unmatched path_is_path \\<pi> \\<pi>' \\<pi>0"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_path \\<pi>'; is_path \\<pi>; \\<pi>' 0 = \\<pi> 0;\n   \\<nexists>l'. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> l';\n   \\<pi> n = local.return;\n   \\<And>k k'a.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k'a;\n       k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k'a)\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<pi> n = local.return\n  \\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  is_path (path ?\\<sigma>)\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<pi> 0 = \\<pi>' 0\n\ngoal (1 subgoal):\n 1. (\\<And>j j'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j';\n         k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j';\n         \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence *: \\<open>(\\<sigma>, j) \\<cc> (\\<sigma>' ,k')\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\n\ngoal (1 subgoal):\n 1. (\\<sigma>, j) \\<cc> (\\<sigma>', k')", "using contradicts.intros(1)[of \\<open>\\<pi>\\<close> \\<open>j\\<close> \\<open>\\<pi>'\\<close> \\<open>k'\\<close> \\<open>\\<sigma>'\\<close> \\<open>\\<sigma>\\<close>, unfolded csj] \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\n  \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> j' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> k';\n   \\<pi>' = path \\<sigma>'; \\<pi> = path \\<sigma>;\n   \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<noteq>\n   \\<pi> (Suc j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>, j) \\<cc> (\\<sigma>', k')\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>, j) \\<cc> (\\<sigma>', k')", "using cd_is_cs_less cd_not_ret cs_select_id"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j'\n  k' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> j'\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc j')\n  \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> j' \\<prec> cs\\<^bsup>\\<pi>'\\<^esup> k';\n   \\<pi>' = path \\<sigma>'; \\<pi> = path \\<sigma>;\n   \\<pi>' (Suc (\\<pi>' \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> j')) \\<noteq>\n   \\<pi> (Suc j)\\<rbrakk>\n  \\<Longrightarrow> (\\<sigma>, j) \\<cc> (\\<sigma>', k')\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  ?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  cs\\<^bsup>?\\<pi>\\<^esup> ?k \\<prec> cs\\<^bsup>?\\<pi>\\<^esup> ?l\n  ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  ?\\<pi> ?k \\<noteq> local.return\n  \\<lbrakk>is_path ?\\<pi>; ?\\<pi> ?k \\<noteq> local.return\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi> \\<exclamdown> cs\\<^bsup>?\\<pi>\\<^esup> ?k) = ?k\n\ngoal (1 subgoal):\n 1. (\\<sigma>, j) \\<cc> (\\<sigma>', k')", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, j) \\<cc> (\\<sigma>', k')\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "have \\<open>\\<pi>' k' \\<in> dom(att)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<in> dom local.att", "using jk'"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' l k'\n\ngoal (1 subgoal):\n 1. \\<pi>' k' \\<in> dom local.att", "by (meson domIff is_kth_obs_def)"], ["proof (state)\nthis:\n  \\<pi>' k' \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. \\<exists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att\n 2. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using *"], ["proof (prove)\nusing this:\n  \\<pi>' k' \\<in> dom local.att\n  (\\<sigma>, j) \\<cc> (\\<sigma>', k')\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "case False"], ["proof (state)\nthis:\n  \\<nexists>j k'.\n     is_kth_obs \\<pi>' j k' \\<and>\n     (\\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "hence *: \\<open>\\<And> j k'. is_kth_obs \\<pi>' j k' \\<Longrightarrow> \\<exists> k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>j k'.\n     is_kth_obs \\<pi>' j k' \\<and>\n     (\\<nexists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (1 subgoal):\n 1. \\<And>j k'.\n       is_kth_obs \\<pi>' j k' \\<Longrightarrow>\n       \\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'", "by auto"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' ?j1 ?k'1 \\<Longrightarrow>\n  \\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> ?k'1\n\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain k' where k': \\<open>is_kth_obs \\<pi>' i k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        is_kth_obs \\<pi>' i k' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using obs \\<pi>' obs_some_kth_obs"], ["proof (prove)\nusing this:\n  obs \\<sigma>' i \\<noteq> None\n  \\<pi>' \\<equiv> path \\<sigma>'\n  \\<lbrakk>obs ?\\<sigma> ?k \\<noteq> None;\n   \\<And>i.\n      is_kth_obs (path ?\\<sigma>) ?k i \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>k'.\n        is_kth_obs \\<pi>' i k' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_kth_obs \\<pi>' i k'\n\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "obtain l where \\<open>is_kth_obs \\<pi> i l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        is_kth_obs \\<pi> i l \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using * \\<pi> \\<pi>' k' no_kth_obs_missing_cs path_is_path"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi>' ?j1 ?k'1 \\<Longrightarrow>\n  \\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> ?k'1\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_kth_obs \\<pi>' i k'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>'; is_kth_obs ?\\<pi> ?k ?i;\n   \\<nexists>i'. is_kth_obs ?\\<pi>' ?k i';\n   \\<And>l j.\n      \\<lbrakk>is_kth_obs ?\\<pi> l j;\n       \\<nexists>j'.\n          cs\\<^bsup>?\\<pi>\\<^esup> j = cs\\<^bsup>?\\<pi>'\\<^esup> j'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        is_kth_obs \\<pi> i l \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  is_kth_obs \\<pi> i l\n\ngoal (1 subgoal):\n 1. \\<nexists>j k'.\n       is_kth_obs \\<pi>' j k' \\<and>\n       (\\<nexists>k.\n           cs\\<^bsup>\\<pi>\\<^esup> k =\n           cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n    \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> i l\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using \\<pi> \\<pi>' obs obs_neq_some_contradicts obs_none_no_kth_obs obsne"], ["proof (prove)\nusing this:\n  is_kth_obs \\<pi> i l\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  obs \\<sigma>' i \\<noteq> None\n  \\<lbrakk>obs ?\\<sigma> ?k \\<noteq> obs ?\\<sigma>' ?k;\n   obs ?\\<sigma> ?k \\<noteq> None; obs ?\\<sigma>' ?k \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k k'.\n                       (?\\<sigma>', k') \\<cc> (?\\<sigma>, k) \\<and>\n                       path ?\\<sigma> k \\<in> dom local.att \\<or>\n                       (?\\<sigma>, k) \\<cc> (?\\<sigma>', k') \\<and>\n                       path ?\\<sigma>' k' \\<in> dom local.att\n  obs ?\\<sigma> ?k = None \\<Longrightarrow>\n  \\<nexists>i. is_kth_obs (path ?\\<sigma>) ?k i\n  obs \\<sigma>' i \\<noteq> obs \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by metis"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Facts about Critical Observable Paths\\<close>"], ["", "lemma contradicting_in_cp: assumes leq:\\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close> and cseq: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close> \nand readv: \\<open>v\\<in>reads(path \\<sigma> k)\\<close> and vneq: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close> shows \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cseq readv vneq"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  v \\<in> local.reads (path \\<sigma> k)\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof(induction \\<open>k+k'\\<close> arbitrary: \\<open>k\\<close> \\<open>k'\\<close> \\<open>v\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "fix k k' v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume csk: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume vread: \\<open>v \\<in> reads (path \\<sigma> k)\\<close>"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume vneq: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close>"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume IH: \\<open>\\<And>ka k'a v. ka + k'a < k + k' \\<Longrightarrow> cs\\<^bsup>path \\<sigma>\\<^esup> ka = cs\\<^bsup>path \\<sigma>'\\<^esup> k'a \\<Longrightarrow> v \\<in> reads (path \\<sigma> ka) \\<Longrightarrow> (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'a\\<^esup>) v \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a) \\<in> cp\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?ka1 + ?k'a1 < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> ?ka1 =\n   cs\\<^bsup>path \\<sigma>'\\<^esup> ?k'a1;\n   ?v1 \\<in> local.reads (path \\<sigma> ?ka1);\n   (\\<sigma>\\<^bsup>?ka1\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>?k'a1\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?ka1), \\<sigma>', ?k'a1) \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "define \\<pi> where  \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close>"], ["proof (state)\nthis:\n  \\<pi> \\<equiv> path \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "define \\<pi>' where \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close>"], ["proof (state)\nthis:\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have path: \\<open>\\<pi> = path \\<sigma>\\<close> \\<open>\\<pi>' = path \\<sigma>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> = path \\<sigma> &&& \\<pi>' = path \\<sigma>'", "using \\<pi>_def \\<pi>'_def path_is_path"], ["proof (prove)\nusing this:\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<pi> = path \\<sigma> &&& \\<pi>' = path \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ip: \\<open>is_path \\<pi>\\<close> \\<open>is_path \\<pi>'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "using path path_is_path"], ["proof (prove)\nusing this:\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. is_path \\<pi> &&& is_path \\<pi>'", "by auto"], ["proof (state)\nthis:\n  is_path \\<pi>\n  is_path \\<pi>'\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have \\<pi>0: \\<open>\\<pi>' 0 = \\<pi> 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' 0 = \\<pi> 0", "unfolding path path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ((local.step ^^ 0) (local.entry, \\<sigma>')) =\n    fst ((local.step ^^ 0) (local.entry, \\<sigma>))", "by auto"], ["proof (state)\nthis:\n  \\<pi>' 0 = \\<pi> 0\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have vread': \\<open>v \\<in> reads (path \\<sigma>' k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma>' k')", "using csk vread"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  v \\<in> local.reads (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma>' k')", "by (metis last_cs)"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have cseq: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k", "using csk path"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. \\<And>k k' v.\n       \\<lbrakk>\\<And>ka k'a v.\n                   \\<lbrakk>ka + k'a < k + k';\n                    cs\\<^bsup>path \\<sigma>\\<^esup> ka =\n                    cs\\<^bsup>path \\<sigma>'\\<^esup> k'a;\n                    v \\<in> local.reads (path \\<sigma> ka);\n                    (\\<sigma>\\<^bsup>ka\\<^esup>) v \\<noteq>\n                    (\\<sigma>'\\<^bsup>k'a\\<^esup>) v\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, ka), \\<sigma>', k'a)\n                                     \\<in> cp;\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k';\n        v \\<in> local.reads (path \\<sigma> k);\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>((\\<sigma>, k), \\<sigma>', k') \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume vnw: \\<open>\\<forall> l < k. v\\<notin>writes (\\<pi> l)\\<close>"], ["proof (state)\nthis:\n  \\<forall>l<k. v \\<notin> local.writes (\\<pi> l)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence \\<sigma>v: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l<k. v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v", "by (metis no_writes_unchanged0 path(1))"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume vnw': \\<open>\\<forall> l < k'. v\\<notin>writes (\\<pi>' l)\\<close>"], ["proof (state)\nthis:\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence \\<sigma>v': \\<open>(\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v", "by (metis no_writes_unchanged0 path(2))"], ["proof (state)\nthis:\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "with \\<sigma>v vneq"], ["proof (chain)\npicking this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v", "have \\<open>\\<sigma> v \\<noteq> \\<sigma>' v\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = \\<sigma> v\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v\n\ngoal (1 subgoal):\n 1. \\<sigma> v \\<noteq> \\<sigma>' v", "by auto"], ["proof (state)\nthis:\n  \\<sigma> v \\<noteq> \\<sigma>' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence vhigh: \\<open>v \\<in> hvars\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<noteq> \\<sigma>' v\n\ngoal (1 subgoal):\n 1. v \\<in> local.hvars", "using leq"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<noteq> \\<sigma>' v\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. v \\<in> local.hvars", "unfolding loweq_def restrict_def"], ["proof (prove)\nusing this:\n  \\<sigma> v \\<noteq> \\<sigma>' v\n  (\\<lambda>n. if n \\<in> - local.hvars then \\<sigma> n else undefined) =\n  (\\<lambda>n. if n \\<in> - local.hvars then \\<sigma>' n else undefined)\n\ngoal (1 subgoal):\n 1. v \\<in> local.hvars", "by (auto,metis)"], ["proof (state)\nthis:\n  v \\<in> local.hvars\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.hvars\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cp.intros(1)[OF leq csk vread vneq] vnw vnw' path"], ["proof (prove)\nusing this:\n  v \\<in> local.hvars\n  \\<lbrakk>\\<forall>k<k. v \\<notin> local.writes (path \\<sigma> k);\n   \\<forall>k'<k'. v \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  \\<forall>l<k. v \\<notin> local.writes (\\<pi> l)\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume \\<open>\\<not>(\\<forall> l < k'. v\\<notin>writes (\\<pi>' l))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))", "obtain l' where kddl': \\<open>k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path(2) path_is_path written_read_dd vread'"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n  \\<pi>' = path \\<sigma>'\n  is_path (path ?\\<sigma>)\n  \\<lbrakk>is_path ?\\<pi>; ?v \\<in> local.reads (?\\<pi> ?k);\n   ?v \\<in> local.writes (?\\<pi> ?j); ?j < ?k;\n   \\<And>l.\n      ?k dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  v \\<in> local.reads (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lv': \\<open>v \\<in> writes (\\<pi>' l')\\<close>"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi>' l')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have lk': \\<open>l' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < k'", "by (metis is_ddi_def kddl')"], ["proof (state)\nthis:\n  l' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nret: \\<open>\\<pi>' l' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' l' \\<noteq> local.return", "using lv' writes_return"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n  local.writes local.return = {}\n\ngoal (1 subgoal):\n 1. \\<pi>' l' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' l' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have notin\\<pi>: \\<open>\\<not> (\\<exists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "assume \\<open>\\<exists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (state)\nthis:\n  \\<exists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l", "guess l"], ["proof (prove)\nusing this:\n  \\<exists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "note csl = \\<open>cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "have lk: \\<open>l < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < k", "using lk' cseq ip cs_order[of \\<open>\\<pi>'\\<close> \\<open>\\<pi>\\<close> \\<open>l'\\<close> \\<open>l\\<close> \\<open>k'\\<close> \\<open>k\\<close>] csl nret path"], ["proof (prove)\nusing this:\n  l' < k'\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<lbrakk>is_path \\<pi>'; is_path \\<pi>;\n   cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l;\n   cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n   \\<pi>' l' \\<noteq> local.return; l' < k'\\<rbrakk>\n  \\<Longrightarrow> l < k\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n  \\<pi>' l' \\<noteq> local.return\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. l < k", "by force"], ["proof (state)\nthis:\n  l < k\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "have \\<open>v \\<in> writes (\\<pi> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> l)", "using csl lv' last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n  v \\<in> local.writes (\\<pi>' l')\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> l)", "by metis"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> l \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. False", "using lk vnw"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi> l)\n  l < k\n  \\<forall>l<k. v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>l. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from converged_cd_diverge[OF ip(2,1) \\<pi>0 notin\\<pi> lk' cseq]"], ["proof (chain)\npicking this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain i i' where  csi: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<close> and lcdi: \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\\<close>  and div: \\<open>\\<pi>' (Suc i') \\<noteq> \\<pi> (Suc i)\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i' i.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i;\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i';\n         \\<pi>' (Suc i') \\<noteq> \\<pi> (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n  \\<pi>' (Suc i') \\<noteq> \\<pi> (Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 1: \\<open>\\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 2: \\<open>\\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 3: \\<open>\\<pi>' i' = \\<pi> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' = \\<pi> i", "using csi last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' i' = \\<pi> i", "by metis"], ["proof (state)\nthis:\n  \\<pi>' i' = \\<pi> i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>i\\<^esup> \\<restriction> reads (\\<pi> i) \\<noteq> \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> reads (\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n    \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)", "by (metis 1 2 3 div reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)", "obtain v' where v'read: \\<open>v'\\<in> reads(path \\<sigma> i)\\<close> \\<open>(\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> i);\n         (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding path"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (path \\<sigma> i)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> i);\n         (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> i)\n  (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreti: \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by (metis csi div ip(1) ip(2) last_cs lessI term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ik': \\<open>i' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < k'", "using lcdi lk' is_cdi_def"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> i'\n  l' < k'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. i' < k'", "by auto"], ["proof (state)\nthis:\n  i' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using cs_order[OF ip(2,1) csi cseq nreti ik']"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. i < k", "."], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have cpi: \\<open>((\\<sigma>, i), (\\<sigma>', i')) \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, i), \\<sigma>', i') \\<in> cp", "using IH[of \\<open>i\\<close> \\<open>i'\\<close>] v'read csi ik ik' path"], ["proof (prove)\nusing this:\n  \\<lbrakk>i + i' < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i';\n   ?v1 \\<in> local.reads (path \\<sigma> i);\n   (\\<sigma>\\<^bsup>i\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>i'\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n  v' \\<in> local.reads (path \\<sigma> i)\n  (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  i < k\n  i' < k'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, i), \\<sigma>', i') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence cpi': \\<open>((\\<sigma>', i'), (\\<sigma>, i)) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp", "by blast"], ["proof (state)\nthis:\n  ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nwvi: \\<open>\\<forall>j'\\<in>{LEAST i'. i < i' \\<and> (\\<exists>i. cs\\<^bsup>path \\<sigma>'\\<^esup> i = cs\\<^bsup>path \\<sigma>\\<^esup> i')..<k}. v \\<notin> writes (path \\<sigma> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        i < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>path \\<sigma>'\\<^esup> i =\n                            cs\\<^bsup>path \\<sigma>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (path \\<sigma> j')", "using vnw[unfolded path]"], ["proof (prove)\nusing this:\n  \\<forall>l<k. v \\<notin> local.writes (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        i < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>path \\<sigma>'\\<^esup> i =\n                            cs\\<^bsup>path \\<sigma>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (path \\<sigma> j')", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      i < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>path \\<sigma>'\\<^esup> i =\n                          cs\\<^bsup>path \\<sigma>\\<^esup> i')..<k}.\n     v \\<notin> local.writes (path \\<sigma> j')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from cp.intros(3)[OF cpi' kddl'[unfolded path] lcdi[unfolded path] csk[symmetric] div[unfolded path] vneq[symmetric] nwvi]"], ["proof (chain)\npicking this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume wv: \\<open>\\<not> (\\<forall> l<k. v \\<notin> writes (\\<pi> l))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>l<k. v \\<notin> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l<k. v \\<notin> local.writes (\\<pi> l))", "obtain l where kddl: \\<open>k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k. v \\<notin> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path(1) path_is_path written_read_dd vread"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k. v \\<notin> local.writes (\\<pi> l))\n  \\<pi> = path \\<sigma>\n  is_path (path ?\\<sigma>)\n  \\<lbrakk>is_path ?\\<pi>; ?v \\<in> local.reads (?\\<pi> ?k);\n   ?v \\<in> local.writes (?\\<pi> ?j); ?j < ?k;\n   \\<And>l.\n      ?k dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  v \\<in> local.reads (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lv: \\<open>v \\<in> writes (\\<pi> l)\\<close>"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> l)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  l < k \\<and>\n  v \\<in> local.reads (\\<pi> k) \\<inter> local.writes (\\<pi> l) \\<and>\n  (\\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> l)", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have lk: \\<open>l < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < k", "by (metis is_ddi_def kddl)"], ["proof (state)\nthis:\n  l < k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nret: \\<open>\\<pi> l \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return", "using lv writes_return"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi> l)\n  local.writes local.return = {}\n\ngoal (1 subgoal):\n 1. \\<pi> l \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nwb: \\<open>\\<forall> i \\<in> {Suc l..< k}. v\\<notin>writes(\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{Suc l..<k}. v \\<notin> local.writes (\\<pi> i)", "using kddl"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{Suc l..<k}. v \\<notin> local.writes (\\<pi> i)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  l < k \\<and>\n  v \\<in> local.reads (\\<pi> k) \\<inter> local.writes (\\<pi> l) \\<and>\n  (\\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{Suc l..<k}. v \\<notin> local.writes (\\<pi> i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{Suc l..<k}. v \\<notin> local.writes (\\<pi> i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have \\<sigma>vk: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v = (\\<sigma>\\<^bsup>Suc l\\<^esup> ) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = (\\<sigma>\\<^bsup>Suc l\\<^esup>) v", "using kddl ddi_value path(1)"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n  ?l dd\\<^bsup>path ?\\<sigma>,?v\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  (?\\<sigma>\\<^bsup>?l\\<^esup>) ?v = (?\\<sigma>\\<^bsup>Suc ?k\\<^esup>) ?v\n  \\<pi> = path \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v = (\\<sigma>\\<^bsup>Suc l\\<^esup>) v", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v = (\\<sigma>\\<^bsup>Suc l\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k.\n               v \\<notin> local.writes (\\<pi> l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume vnw': \\<open>\\<forall> l < k'. v\\<notin>writes (\\<pi>' l)\\<close>"], ["proof (state)\nthis:\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence \\<sigma>v': \\<open>(\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v", "by (metis no_writes_unchanged0 path(2))"], ["proof (state)\nthis:\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v = \\<sigma>' v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have notin\\<pi>': \\<open>\\<not> (\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "assume \\<open>\\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'", "guess l'"], ["proof (prove)\nusing this:\n  \\<exists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "note csl = \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "have lk: \\<open>l' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < k'", "using lk cseq ip cs_order[of \\<open>\\<pi>\\<close> \\<open>\\<pi>'\\<close> \\<open>l\\<close> \\<open>l'\\<close> \\<open>k\\<close> \\<open>k'\\<close>] csl nret"], ["proof (prove)\nusing this:\n  l < k\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  is_path \\<pi>\n  is_path \\<pi>'\n  \\<lbrakk>is_path \\<pi>; is_path \\<pi>';\n   cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l';\n   cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n   \\<pi> l \\<noteq> local.return; l < k\\<rbrakk>\n  \\<Longrightarrow> l' < k'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<pi> l \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. l' < k'", "by metis"], ["proof (state)\nthis:\n  l' < k'\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "have \\<open>v \\<in> writes (\\<pi>' l')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "using csl lv last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  v \\<in> local.writes (\\<pi> l)\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "by metis"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi>' l')\n\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n\ngoal (1 subgoal):\n 1. False", "using lk vnw'"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n  l' < k'\n  \\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>l'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from converged_cd_diverge[OF ip(1,2) \\<pi>0[symmetric] notin\\<pi>' lk cseq[symmetric]]"], ["proof (chain)\npicking this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n       \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain i i' where  csi: \\<open>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\\<close> and lcdi: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\\<close>  and div: \\<open>\\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n       \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i' i.\n        \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i;\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i;\n         \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  \\<pi> (Suc i) \\<noteq> \\<pi>' (Suc i')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 1: \\<open>\\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc i) = suc (\\<pi> i) (\\<sigma>\\<^bsup>i\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 2: \\<open>\\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc i') = suc (\\<pi>' i') (\\<sigma>'\\<^bsup>i'\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 3: \\<open>\\<pi>' i' = \\<pi> i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' = \\<pi> i", "using csi last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' i' = \\<pi> i", "by metis"], ["proof (state)\nthis:\n  \\<pi>' i' = \\<pi> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>i\\<^esup> \\<restriction> reads (\\<pi> i) \\<noteq> \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> reads (\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n    \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)", "by (metis 1 2 3 div reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have contri: \\<open>(\\<sigma>',i') \\<cc> (\\<sigma>,i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', i') \\<cc> (\\<sigma>, i)", "using contradicts.intros(2)[OF csi path nreads]"], ["proof (prove)\nusing this:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', i') \\<cc> (\\<sigma>, i)", "."], ["proof (state)\nthis:\n  (\\<sigma>', i') \\<cc> (\\<sigma>, i)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by (metis csi div ip(1) ip(2) last_cs lessI term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using lcdi lk is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> i\n  l < k\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. i < k", "by auto"], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ik': \\<open>i' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < k'", "using cs_order[OF ip(1,2) csi[symmetric] cseq[symmetric] nreti ik]"], ["proof (prove)\nusing this:\n  i' < k'\n\ngoal (1 subgoal):\n 1. i' < k'", "."], ["proof (state)\nthis:\n  i' < k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>i\\<^esup> \\<restriction> reads (\\<pi> i) \\<noteq> \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> reads (\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n    \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)", "by (metis 1 2 3 div reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)", "obtain v' where v'read: \\<open>v'\\<in> reads(path \\<sigma> i)\\<close> \\<open>(\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction> local.reads (\\<pi> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (\\<pi> i)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> i);\n         (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding path"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>i\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> i) \\<noteq>\n  \\<sigma>'\\<^bsup>i'\\<^esup> \\<restriction> local.reads (path \\<sigma> i)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> i);\n         (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> i)\n  (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have cpi: \\<open>((\\<sigma>, i), (\\<sigma>', i')) \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, i), \\<sigma>', i') \\<in> cp", "using IH[of \\<open>i\\<close> \\<open>i'\\<close>] v'read csi ik ik' path"], ["proof (prove)\nusing this:\n  \\<lbrakk>i + i' < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i';\n   ?v1 \\<in> local.reads (path \\<sigma> i);\n   (\\<sigma>\\<^bsup>i\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>i'\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n  v' \\<in> local.reads (path \\<sigma> i)\n  (\\<sigma>\\<^bsup>i\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>i'\\<^esup>) v'\n  cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i\n  i < k\n  i' < k'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, i), \\<sigma>', i') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence cpi': \\<open>((\\<sigma>', i'), (\\<sigma>, i)) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, i), \\<sigma>', i') \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp", "by blast"], ["proof (state)\nthis:\n  ((\\<sigma>', i'), \\<sigma>, i) \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have vnwi: \\<open>\\<forall>j'\\<in>{LEAST i'a. i' < i'a \\<and> (\\<exists>i. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'a)..<k'}. v \\<notin> writes (path \\<sigma>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'a.\n                        i' < i'a \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                            cs\\<^bsup>path \\<sigma>'\\<^esup> i'a)..<k'}.\n       v \\<notin> local.writes (path \\<sigma>' j')", "using vnw'[unfolded path]"], ["proof (prove)\nusing this:\n  \\<forall>l<k'. v \\<notin> local.writes (path \\<sigma>' l)\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'a.\n                        i' < i'a \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                            cs\\<^bsup>path \\<sigma>'\\<^esup> i'a)..<k'}.\n       v \\<notin> local.writes (path \\<sigma>' j')", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'a.\n                      i' < i'a \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                          cs\\<^bsup>path \\<sigma>'\\<^esup> i'a)..<k'}.\n     v \\<notin> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from cp.intros(3)[OF cpi kddl[unfolded path] lcdi[unfolded path] csk div[unfolded path] vneq vnwi]"], ["proof (chain)\npicking this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume \\<open>\\<not> (\\<forall> l<k'. v \\<notin> writes (\\<pi>' l))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))", "obtain l' where kddl': \\<open>k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using path(2) path_is_path written_read_dd vread'"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>l<k'. v \\<notin> local.writes (\\<pi>' l))\n  \\<pi>' = path \\<sigma>'\n  is_path (path ?\\<sigma>)\n  \\<lbrakk>is_path ?\\<pi>; ?v \\<in> local.reads (?\\<pi> ?k);\n   ?v \\<in> local.writes (?\\<pi> ?j); ?j < ?k;\n   \\<And>l.\n      ?k dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> l \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  v \\<in> local.reads (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lv': \\<open>v \\<in> writes (\\<pi>' l')\\<close>"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' l')", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi>' l')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have lk': \\<open>l' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' < k'", "by (metis is_ddi_def kddl')"], ["proof (state)\nthis:\n  l' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nretl': \\<open>\\<pi>' l' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' l' \\<noteq> local.return", "using lv' writes_return"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n  local.writes local.return = {}\n\ngoal (1 subgoal):\n 1. \\<pi>' l' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  \\<pi>' l' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nwb': \\<open>\\<forall> i' \\<in> {Suc l'..< k'}. v\\<notin>writes(\\<pi>' i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i'\\<in>{Suc l'..<k'}. v \\<notin> local.writes (\\<pi>' i')", "using kddl'"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<forall>i'\\<in>{Suc l'..<k'}. v \\<notin> local.writes (\\<pi>' i')", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. \\<forall>i'\\<in>{Suc l'..<k'}. v \\<notin> local.writes (\\<pi>' i')", "by auto"], ["proof (state)\nthis:\n  \\<forall>i'\\<in>{Suc l'..<k'}. v \\<notin> local.writes (\\<pi>' i')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have \\<sigma>vk': \\<open>(\\<sigma>'\\<^bsup>k'\\<^esup>) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup> ) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v", "using kddl' ddi_value path(2)"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n  ?l dd\\<^bsup>path ?\\<sigma>,?v\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  (?\\<sigma>\\<^bsup>?l\\<^esup>) ?v = (?\\<sigma>\\<^bsup>Suc ?k\\<^esup>) ?v\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v = (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>l<k'.\n               v \\<notin> local.writes (\\<pi>' l)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence \\<pi>l: \\<open>\\<pi> l = \\<pi>' l'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<pi> l = \\<pi>' l'", "by (metis last_cs)"], ["proof (state)\nthis:\n  \\<pi> l = \\<pi>' l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have \\<sigma>vls: \\<open>(\\<sigma>\\<^bsup>Suc l\\<^esup> ) v \\<noteq> (\\<sigma>'\\<^bsup>Suc l'\\<^esup> ) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>Suc l\\<^esup>) v \\<noteq>\n    (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v", "by (metis \\<sigma>vk \\<sigma>vk' vneq)"], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>Suc l\\<^esup>) v \\<noteq>\n  (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have r\\<sigma>: \\<open>\\<sigma>\\<^bsup>l\\<^esup> \\<restriction> reads (\\<pi> l) \\<noteq> \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> reads (\\<pi> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>l\\<^esup> \\<restriction> local.reads (\\<pi> l) \\<noteq>\n    \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (\\<pi> l)", "using path \\<pi>l \\<sigma>vls written_value lv"], ["proof (prove)\nusing this:\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<pi> l = \\<pi>' l'\n  (\\<sigma>\\<^bsup>Suc l\\<^esup>) v \\<noteq>\n  (\\<sigma>'\\<^bsup>Suc l'\\<^esup>) v\n  \\<lbrakk>path ?\\<sigma> ?l = path ?\\<sigma>' ?l';\n   ?\\<sigma>\\<^bsup>?l\\<^esup> \\<restriction>\n   local.reads (path ?\\<sigma> ?l) =\n   ?\\<sigma>'\\<^bsup>?l'\\<^esup> \\<restriction>\n   local.reads (path ?\\<sigma> ?l);\n   ?v \\<in> local.writes (path ?\\<sigma> ?l)\\<rbrakk>\n  \\<Longrightarrow> (?\\<sigma>\\<^bsup>Suc ?l\\<^esup>) ?v =\n                    (?\\<sigma>'\\<^bsup>Suc ?l'\\<^esup>) ?v\n  v \\<in> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>l\\<^esup> \\<restriction> local.reads (\\<pi> l) \\<noteq>\n    \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (\\<pi> l)", "by blast"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>l\\<^esup> \\<restriction> local.reads (\\<pi> l) \\<noteq>\n  \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (\\<pi> l)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>l\\<^esup> \\<restriction> local.reads (\\<pi> l) \\<noteq>\n  \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (\\<pi> l)", "obtain v' where v'read: \\<open>v'\\<in> reads(path \\<sigma> l)\\<close> \\<open>(\\<sigma>\\<^bsup>l\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>l'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>l\\<^esup> \\<restriction> local.reads (\\<pi> l) \\<noteq>\n  \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (\\<pi> l)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> l);\n         (\\<sigma>\\<^bsup>l\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>l'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding path"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>l\\<^esup> \\<restriction>\n  local.reads (path \\<sigma> l) \\<noteq>\n  \\<sigma>'\\<^bsup>l'\\<^esup> \\<restriction> local.reads (path \\<sigma> l)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> l);\n         (\\<sigma>\\<^bsup>l\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>l'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> l)\n  (\\<sigma>\\<^bsup>l\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>l'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have cpl: \\<open>((\\<sigma>, l), (\\<sigma>', l')) \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, l), \\<sigma>', l') \\<in> cp", "using IH[of \\<open>l\\<close> \\<open>l'\\<close>] v'read csl lk lk' path"], ["proof (prove)\nusing this:\n  \\<lbrakk>l + l' < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> l = cs\\<^bsup>path \\<sigma>'\\<^esup> l';\n   ?v1 \\<in> local.reads (path \\<sigma> l);\n   (\\<sigma>\\<^bsup>l\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>l'\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, l), \\<sigma>', l') \\<in> cp\n  v' \\<in> local.reads (path \\<sigma> l)\n  (\\<sigma>\\<^bsup>l\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>l'\\<^esup>) v'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  l < k\n  l' < k'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, l), \\<sigma>', l') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, l), \\<sigma>', l') \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>((\\<sigma>, k), (\\<sigma>', k')) \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cp.intros(2)[OF cpl kddl[unfolded path] kddl'[unfolded path] csk vneq]"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "."], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume csl: \\<open>cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq>\n    cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume \\<open>\\<exists> i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (state)\nthis:\n  \\<exists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<exists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'", "obtain i' where csli': \\<open>cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        cs\\<^bsup>\\<pi>\\<^esup> l =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ilne': \\<open>i' \\<noteq> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> l'", "using csl csli'"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. i' \\<noteq> l'", "by auto"], ["proof (state)\nthis:\n  i' \\<noteq> l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ij': \\<open>i' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < k'", "using cs_order[OF ip csli' cseq[symmetric] nret lk]"], ["proof (prove)\nusing this:\n  i' < k'\n\ngoal (1 subgoal):\n 1. i' < k'", "."], ["proof (state)\nthis:\n  i' < k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have iv': \\<open>v \\<in> writes(\\<pi>' i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' i')", "using lv csli' last_cs"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi> l)\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi>' i')", "by metis"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi>' i')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have il': \\<open>i' < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < l'", "using kddl' ilne' ij' iv'"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n  i' \\<noteq> l'\n  i' < k'\n  v \\<in> local.writes (\\<pi>' i')\n\ngoal (1 subgoal):\n 1. i' < l'", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n  i' \\<noteq> l'\n  i' < k'\n  v \\<in> local.writes (\\<pi>' i')\n\ngoal (1 subgoal):\n 1. i' < l'", "by auto"], ["proof (state)\nthis:\n  i' < l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "using csli' nret last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<pi> l \\<noteq> local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have l'notin\\<pi>: \\<open>\\<not>(\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i )\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "assume \\<open>\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i\\<close>"], ["proof (state)\nthis:\n  \\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i", "obtain i where csil: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using cs_order[OF ip(2,1) csil[symmetric] cseq nretl' lk']"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. i < k", "."], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "have li: \\<open>l < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l < i", "using cs_order[OF ip(2,1) csli'[symmetric] csil[symmetric] nreti' il']"], ["proof (prove)\nusing this:\n  l < i\n\ngoal (1 subgoal):\n 1. l < i", "."], ["proof (state)\nthis:\n  l < i\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "have iv: \\<open>v \\<in> writes(\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> i)", "using lv' csil last_cs"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> i)", "by metis"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi> i)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       cs\\<^bsup>\\<pi>'\\<^esup> l' =\n       cs\\<^bsup>\\<pi>\\<^esup> i \\<Longrightarrow>\n    False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using kddl ik li iv is_ddi_def"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n  i < k\n  l < i\n  v \\<in> local.writes (\\<pi> i)\n  (?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m) =\n  (is_path ?\\<pi> \\<and>\n   ?m < ?n \\<and>\n   ?v \\<in> local.reads (?\\<pi> ?n) \\<inter> local.writes (?\\<pi> ?m) \\<and>\n   (\\<forall>l\\<in>{?m<..<?n}. ?v \\<notin> local.writes (?\\<pi> l)))\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>i. cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> i\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "obtain n n' where csn: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>  and sucn: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close> and in': \\<open>i' \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n'); i' \\<le> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge_cs [OF ip(2,1) csli'[symmetric] il' l'notin\\<pi> lk' cseq]"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>i' \\<le> k;\n       cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n'); i' \\<le> n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis \n          \n          \\<comment> \\<open>Can apply the IH to n and n'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  i' \\<le> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 1: \\<open>\\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 2: \\<open>\\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 3: \\<open>\\<pi>' n' = \\<pi> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "using csn last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' = \\<pi> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>n\\<^esup> \\<restriction> reads (\\<pi> n) \\<noteq> \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> reads (\\<pi> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n    \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "by (metis 1 2 3 sucn reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "obtain v' where v'read: \\<open>v'\\<in>reads (path \\<sigma> n)\\<close> \\<open>(\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> n);\n         (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path(1) reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "moreover"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nl': \\<open>n' < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < l'", "using lcdn' is_cdi_def"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n' < l'", "by auto"], ["proof (state)\nthis:\n  n' < l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using nl' lk'"], ["proof (prove)\nusing this:\n  n' < l'\n  l' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "by simp"], ["proof (state)\nthis:\n  n' < k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nretn': \\<open>\\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "by (metis ip(2) nl' nretl' term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi>' n' \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using cs_order[OF ip(2,1) csn[symmetric] cseq nretn' nk']"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n < k", "."], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lenn: \\<open>n+n' < k+k'\\<close>"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "using nk'"], ["proof (prove)\nusing this:\n  n < k\n  n' < k'\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "by auto"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'", "have \\<open>((\\<sigma>, n), (\\<sigma>', n')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "using IH csn path"], ["proof (prove)\nusing this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'\n  \\<lbrakk>?ka1 + ?k'a1 < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> ?ka1 =\n   cs\\<^bsup>path \\<sigma>'\\<^esup> ?k'a1;\n   ?v1 \\<in> local.reads (path \\<sigma> ?ka1);\n   (\\<sigma>\\<^bsup>?ka1\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>?k'a1\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?ka1), \\<sigma>', ?k'a1) \\<in> cp\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence ncp: \\<open>((\\<sigma>', n'), (\\<sigma>, n)) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nles: \\<open>n < (LEAST i'. n < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\\<close> (is \\<open>_ < (LEAST i. ?P i)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < (LEAST i'.\n            n < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))", "using nk cseq LeastI[of \\<open>?P\\<close> \\<open>k\\<close>]"], ["proof (prove)\nusing this:\n  n < k\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  n < k \\<and>\n  (\\<exists>i.\n      cs\\<^bsup>\\<pi>'\\<^esup> i =\n      cs\\<^bsup>\\<pi>\\<^esup> k) \\<Longrightarrow>\n  n < (LEAST x.\n          n < x \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>'\\<^esup> i =\n              cs\\<^bsup>\\<pi>\\<^esup> x)) \\<and>\n  (\\<exists>i.\n      cs\\<^bsup>\\<pi>'\\<^esup> i =\n      cs\\<^bsup>\\<pi>\\<^esup> (LEAST x.\n                                  n < x \\<and>\n                                  (\\<exists>i.\ncs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> x)))\n\ngoal (1 subgoal):\n 1. n < (LEAST i'.\n            n < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))", "by metis"], ["proof (state)\nthis:\n  n < (LEAST i'.\n          n < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "moreover"], ["proof (state)\nthis:\n  n < (LEAST i'.\n          n < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ln: \\<open>l \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> n", "using cs_order_le[OF ip(2,1) csli'[symmetric] csn[symmetric] nreti' in']"], ["proof (prove)\nusing this:\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. l \\<le> n", "."], ["proof (state)\nthis:\n  l \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  n < (LEAST i'.\n          n < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n  l \\<le> n", "have lles: \\<open>Suc l \\<le> (LEAST i'. n < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\\<close>"], ["proof (prove)\nusing this:\n  n < (LEAST i'.\n          n < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n  l \\<le> n\n\ngoal (1 subgoal):\n 1. Suc l\n    \\<le> (LEAST i'.\n              n < i' \\<and>\n              (\\<exists>i.\n                  cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))", "by auto"], ["proof (state)\nthis:\n  Suc l\n  \\<le> (LEAST i'.\n            n < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nwcseq: \\<open>\\<forall>j'\\<in>{LEAST i'. n < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i')..<k}. v \\<notin> writes (\\<pi> j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (\\<pi> j')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "fix j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "assume *: \\<open>j' \\<in> {LEAST i'. n < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i')..<k}\\<close>"], ["proof (state)\nthis:\n  j' \\<in> {LEAST i'.\n               n < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>'\\<^esup> i =\n                   cs\\<^bsup>\\<pi>\\<^esup> i')..<k}\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "hence \\<open>(LEAST i'. n < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i')) \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  j' \\<in> {LEAST i'.\n               n < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>'\\<^esup> i =\n                   cs\\<^bsup>\\<pi>\\<^esup> i')..<k}\n\ngoal (1 subgoal):\n 1. (LEAST i'.\n        n < i' \\<and>\n        (\\<exists>i.\n            cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n    \\<le> j'", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  (LEAST i'.\n      n < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n  \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "hence \\<open>Suc l \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      n < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n  \\<le> j'\n\ngoal (1 subgoal):\n 1. Suc l \\<le> j'", "using lles"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      n < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n  \\<le> j'\n  Suc l\n  \\<le> (LEAST i'.\n            n < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>'\\<^esup> i = cs\\<^bsup>\\<pi>\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. Suc l \\<le> j'", "by auto"], ["proof (state)\nthis:\n  Suc l \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "moreover"], ["proof (state)\nthis:\n  Suc l \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "have \\<open>j' < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < k", "using *"], ["proof (prove)\nusing this:\n  j' \\<in> {LEAST i'.\n               n < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>'\\<^esup> i =\n                   cs\\<^bsup>\\<pi>\\<^esup> i')..<k}\n\ngoal (1 subgoal):\n 1. j' < k", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  j' < k\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "ultimately"], ["proof (chain)\npicking this:\n  Suc l \\<le> j'\n  j' < k", "have \\<open>j'\\<in> {Suc l..<k}\\<close>"], ["proof (prove)\nusing this:\n  Suc l \\<le> j'\n  j' < k\n\ngoal (1 subgoal):\n 1. j' \\<in> {Suc l..<k}", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  j' \\<in> {Suc l..<k}\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>'\\<^esup> i =\n                        cs\\<^bsup>\\<pi>\\<^esup> i')..<k} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi> j')", "thus \\<open>v\\<notin>writes (\\<pi> j')\\<close>"], ["proof (prove)\nusing this:\n  j' \\<in> {Suc l..<k}\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (\\<pi> j')", "using nwb"], ["proof (prove)\nusing this:\n  j' \\<in> {Suc l..<k}\n  \\<forall>i\\<in>{Suc l..<k}. v \\<notin> local.writes (\\<pi> i)\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (\\<pi> j')", "by auto"], ["proof (state)\nthis:\n  v \\<notin> local.writes (\\<pi> j')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i =\n                          cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n     v \\<notin> local.writes (\\<pi> j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from cp.intros(3)[OF ncp,folded path,OF kddl' lcdn' cseq sucn[symmetric] vneq[symmetric] nwcseq]"], ["proof (chain)\npicking this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp", "have \\<open>((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp", "."], ["proof (state)\nthis:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "thus \\<open>((\\<sigma>, k), (\\<sigma>', k')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<nexists>i'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>i'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume lnotin\\<pi>': \\<open>\\<not> (\\<exists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i')\\<close>"], ["proof (state)\nthis:\n  \\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<nexists>i'.\n       cs\\<^bsup>\\<pi>\\<^esup> l =\n       cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume \\<open>\\<exists> i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (state)\nthis:\n  \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'", "obtain i where csli: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ilne: \\<open>i \\<noteq> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> l", "using csl csli"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. i \\<noteq> l", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ij: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using cs_order[OF ip(2,1) csli[symmetric] cseq nretl' lk']"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. i < k", "."], ["proof (state)\nthis:\n  i < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have iv: \\<open>v \\<in> writes(\\<pi> i)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> i)", "using lv' csli last_cs"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (\\<pi>' l')\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (\\<pi> i)", "by metis"], ["proof (state)\nthis:\n  v \\<in> local.writes (\\<pi> i)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have il: \\<open>i < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < l", "using kddl ilne ij iv"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n  i \\<noteq> l\n  i < k\n  v \\<in> local.writes (\\<pi> i)\n\ngoal (1 subgoal):\n 1. i < l", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  l < k \\<and>\n  v \\<in> local.reads (\\<pi> k) \\<inter> local.writes (\\<pi> l) \\<and>\n  (\\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l))\n  i \\<noteq> l\n  i < k\n  v \\<in> local.writes (\\<pi> i)\n\ngoal (1 subgoal):\n 1. i < l", "by auto"], ["proof (state)\nthis:\n  i < l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "using csli nretl' last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n  \\<pi>' l' \\<noteq> local.return\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "obtain n n' where csn: \\<open>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>  and sucn: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close> and ilen: \\<open>i \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n'); i \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using converged_cd_diverge_cs [OF ip csli il lnotin\\<pi>' lk cseq[symmetric]]"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>i \\<le> k;\n       cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n       \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n'); i \\<le> n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis \n          \n            \\<comment> \\<open>Can apply the IH to n and n'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  i \\<le> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 1: \\<open>\\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 2: \\<open>\\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have 3: \\<open>\\<pi>' n' = \\<pi> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "using csn last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' = \\<pi> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>n\\<^esup> \\<restriction> reads (\\<pi> n) \\<noteq> \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> reads (\\<pi> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n    \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "by (metis 1 2 3 sucn reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "obtain v' where v'read: \\<open>v'\\<in>reads (path \\<sigma> n)\\<close> \\<open>(\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> n);\n         (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path(1) reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "moreover"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nl: \\<open>n < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < l", "using lcdn is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n < l", "by auto"], ["proof (state)\nthis:\n  n < l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using nl lk"], ["proof (prove)\nusing this:\n  n < l\n  l < k\n\ngoal (1 subgoal):\n 1. n < k", "by simp"], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by (metis ip(1) nl nret term_path_stable less_imp_le)"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using cs_order[OF ip csn cseq[symmetric] nretn nk]"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "."], ["proof (state)\nthis:\n  n' < k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lenn: \\<open>n+n' < k+k'\\<close>"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "using nk"], ["proof (prove)\nusing this:\n  n' < k'\n  n < k\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "by auto"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'", "have ncp: \\<open>((\\<sigma>, n), (\\<sigma>', n')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "using IH csn path"], ["proof (prove)\nusing this:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  n + n' < k + k'\n  \\<lbrakk>?ka1 + ?k'a1 < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> ?ka1 =\n   cs\\<^bsup>path \\<sigma>'\\<^esup> ?k'a1;\n   ?v1 \\<in> local.reads (path \\<sigma> ?ka1);\n   (\\<sigma>\\<^bsup>?ka1\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>?k'a1\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?ka1), \\<sigma>', ?k'a1) \\<in> cp\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nles': \\<open>n' < (LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\\<close> (is \\<open>_ < (LEAST i. ?P i)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < (LEAST i'.\n             n' < i' \\<and>\n             (\\<exists>i.\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "using nk' cseq LeastI[of \\<open>?P\\<close> \\<open>k'\\<close>]"], ["proof (prove)\nusing this:\n  n' < k'\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  n' < k' \\<and>\n  (\\<exists>i.\n      cs\\<^bsup>\\<pi>\\<^esup> i =\n      cs\\<^bsup>\\<pi>'\\<^esup> k') \\<Longrightarrow>\n  n' < (LEAST x.\n           n' < x \\<and>\n           (\\<exists>i.\n               cs\\<^bsup>\\<pi>\\<^esup> i =\n               cs\\<^bsup>\\<pi>'\\<^esup> x)) \\<and>\n  (\\<exists>i.\n      cs\\<^bsup>\\<pi>\\<^esup> i =\n      cs\\<^bsup>\\<pi>'\\<^esup> (LEAST x.\n                                   n' < x \\<and>\n                                   (\\<exists>i.\n cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> x)))\n\ngoal (1 subgoal):\n 1. n' < (LEAST i'.\n             n' < i' \\<and>\n             (\\<exists>i.\n                 cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by metis"], ["proof (state)\nthis:\n  n' < (LEAST i'.\n           n' < i' \\<and>\n           (\\<exists>i.\n               cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "moreover"], ["proof (state)\nthis:\n  n' < (LEAST i'.\n           n' < i' \\<and>\n           (\\<exists>i.\n               cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ln': \\<open>l' \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<le> n'", "using cs_order_le[OF ip csli csn nreti ilen]"], ["proof (prove)\nusing this:\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. l' \\<le> n'", "."], ["proof (state)\nthis:\n  l' \\<le> n'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  n' < (LEAST i'.\n           n' < i' \\<and>\n           (\\<exists>i.\n               cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n  l' \\<le> n'", "have lles': \\<open>Suc l' \\<le> (LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\\<close>"], ["proof (prove)\nusing this:\n  n' < (LEAST i'.\n           n' < i' \\<and>\n           (\\<exists>i.\n               cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n  l' \\<le> n'\n\ngoal (1 subgoal):\n 1. Suc l'\n    \\<le> (LEAST i'.\n              n' < i' \\<and>\n              (\\<exists>i.\n                  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))", "by auto"], ["proof (state)\nthis:\n  Suc l'\n  \\<le> (LEAST i'.\n            n' < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nwcseq': \\<open>\\<forall>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}. v \\<notin> writes (\\<pi>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "fix j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "assume *: \\<open>j' \\<in> {(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}\\<close>"], ["proof (state)\nthis:\n  j' \\<in> {LEAST i'.\n               n' < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "hence \\<open>(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')) \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  j' \\<in> {LEAST i'.\n               n' < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}\n\ngoal (1 subgoal):\n 1. (LEAST i'.\n        n' < i' \\<and>\n        (\\<exists>i.\n            cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n    \\<le> j'", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  (LEAST i'.\n      n' < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n  \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "hence \\<open>Suc l' \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      n' < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n  \\<le> j'\n\ngoal (1 subgoal):\n 1. Suc l' \\<le> j'", "using lles'"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      n' < i' \\<and>\n      (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n  \\<le> j'\n  Suc l'\n  \\<le> (LEAST i'.\n            n' < i' \\<and>\n            (\\<exists>i.\n                cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))\n\ngoal (1 subgoal):\n 1. Suc l' \\<le> j'", "by auto"], ["proof (state)\nthis:\n  Suc l' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "moreover"], ["proof (state)\nthis:\n  Suc l' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "have \\<open>j' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < k'", "using *"], ["proof (prove)\nusing this:\n  j' \\<in> {LEAST i'.\n               n' < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}\n\ngoal (1 subgoal):\n 1. j' < k'", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  j' < k'\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "ultimately"], ["proof (chain)\npicking this:\n  Suc l' \\<le> j'\n  j' < k'", "have \\<open>j'\\<in> {Suc l'..<k'}\\<close>"], ["proof (prove)\nusing this:\n  Suc l' \\<le> j'\n  j' < k'\n\ngoal (1 subgoal):\n 1. j' \\<in> {Suc l'..<k'}", "by (metis (poly_guards_query) atLeastLessThan_iff)"], ["proof (state)\nthis:\n  j' \\<in> {Suc l'..<k'}\n\ngoal (1 subgoal):\n 1. \\<And>j'.\n       j' \\<in> {LEAST i'.\n                    n' < i' \\<and>\n                    (\\<exists>i.\n                        cs\\<^bsup>\\<pi>\\<^esup> i =\n                        cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'} \\<Longrightarrow>\n       v \\<notin> local.writes (\\<pi>' j')", "thus \\<open>v\\<notin>writes (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  j' \\<in> {Suc l'..<k'}\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (\\<pi>' j')", "using nwb'"], ["proof (prove)\nusing this:\n  j' \\<in> {Suc l'..<k'}\n  \\<forall>i'\\<in>{Suc l'..<k'}. v \\<notin> local.writes (\\<pi>' i')\n\ngoal (1 subgoal):\n 1. v \\<notin> local.writes (\\<pi>' j')", "by auto"], ["proof (state)\nthis:\n  v \\<notin> local.writes (\\<pi>' j')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. \\<not> ?P \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "from cp.intros(3)[OF ncp,folded path, OF kddl lcdn cseq[symmetric] sucn vneq nwcseq']"], ["proof (chain)\npicking this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>((\\<sigma>, k), (\\<sigma>', k')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "."], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume l'notin\\<pi>: \\<open>\\<not> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l')\\<close>"], ["proof (state)\nthis:\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "define m where \\<open>m \\<equiv> 0::nat\\<close>"], ["proof (state)\nthis:\n  m \\<equiv> 0\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "define m' where \\<open>m' \\<equiv> 0::nat\\<close>"], ["proof (state)\nthis:\n  m' \\<equiv> 0\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have csm: \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'", "unfolding m_def m'_def cs_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. [\\<pi> 0] = [\\<pi>' 0]", "by (metis \\<pi>0)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have ml: \\<open>m<l \\<or> m'<l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < l \\<or> m' < l'", "using csm csl"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. m < l \\<or> m' < l'", "unfolding m_def m'_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> 0 = cs\\<^bsup>\\<pi>'\\<^esup> 0\n  cs\\<^bsup>\\<pi>\\<^esup> l \\<noteq> cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. 0 < l \\<or> 0 < l'", "by (metis neq0_conv)"], ["proof (state)\nthis:\n  m < l \\<or> m' < l'\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have \\<open>\\<exists> n n'. cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and> \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and> \n            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and> (\\<forall>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}. v\\<notin>writes (\\<pi>' j'))\n            \\<or> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and> (\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j)))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using csm ml"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  m < l \\<or> m' < l'\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof (induction \\<open>k+k'-(m+m')\\<close> arbitrary: \\<open>m\\<close> \\<open>m'\\<close> rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<And>ma m'a.\n                   \\<lbrakk>k + k' - (ma + m'a) < k + k' - (m + m');\n                    cs\\<^bsup>\\<pi>\\<^esup> ma =\n                    cs\\<^bsup>\\<pi>'\\<^esup> m'a;\n                    ma < l \\<or> m'a < l'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n n'.\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n  (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n   (\\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')) \\<or>\n   l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n   (\\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)));\n        cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        m < l \\<or> m' < l'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n n'.\n                            cs\\<^bsup>\\<pi>\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                            \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                             (\\<forall>j'\n \\<in>{LEAST i'.\n          n' < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>\\<^esup> i =\n              cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                                 v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                             l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                             (\\<forall>j\n \\<in>{LEAST i.\n          n < i \\<and>\n          (\\<exists>i'.\n              cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                                 v \\<notin> local.writes (\\<pi> j)))", "case (less m m')"], ["proof (state)\nthis:\n  \\<lbrakk>k + k' - (?m1 + ?m'1) < k + k' - (m + m');\n   cs\\<^bsup>\\<pi>\\<^esup> ?m1 = cs\\<^bsup>\\<pi>'\\<^esup> ?m'1;\n   ?m1 < l \\<or> ?m'1 < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n  m < l \\<or> m' < l'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<And>ma m'a.\n                   \\<lbrakk>k + k' - (ma + m'a) < k + k' - (m + m');\n                    cs\\<^bsup>\\<pi>\\<^esup> ma =\n                    cs\\<^bsup>\\<pi>'\\<^esup> m'a;\n                    ma < l \\<or> m'a < l'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n n'.\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n  (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n   (\\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')) \\<or>\n   l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n   (\\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)));\n        cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        m < l \\<or> m' < l'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n n'.\n                            cs\\<^bsup>\\<pi>\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                            \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                             (\\<forall>j'\n \\<in>{LEAST i'.\n          n' < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>\\<^esup> i =\n              cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                                 v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                             l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                             (\\<forall>j\n \\<in>{LEAST i.\n          n < i \\<and>\n          (\\<exists>i'.\n              cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                                 v \\<notin> local.writes (\\<pi> j)))", "note csm = \\<open>cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\\<close>"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<And>ma m'a.\n                   \\<lbrakk>k + k' - (ma + m'a) < k + k' - (m + m');\n                    cs\\<^bsup>\\<pi>\\<^esup> ma =\n                    cs\\<^bsup>\\<pi>'\\<^esup> m'a;\n                    ma < l \\<or> m'a < l'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n n'.\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n  (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n   (\\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')) \\<or>\n   l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n   (\\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)));\n        cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        m < l \\<or> m' < l'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n n'.\n                            cs\\<^bsup>\\<pi>\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                            \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                             (\\<forall>j'\n \\<in>{LEAST i'.\n          n' < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>\\<^esup> i =\n              cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                                 v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                             l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                             (\\<forall>j\n \\<in>{LEAST i.\n          n < i \\<and>\n          (\\<exists>i'.\n              cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                                 v \\<notin> local.writes (\\<pi> j)))", "note lm = \\<open>m < l \\<or> m' < l'\\<close>"], ["proof (state)\nthis:\n  m < l \\<or> m' < l'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<And>ma m'a.\n                   \\<lbrakk>k + k' - (ma + m'a) < k + k' - (m + m');\n                    cs\\<^bsup>\\<pi>\\<^esup> ma =\n                    cs\\<^bsup>\\<pi>'\\<^esup> m'a;\n                    ma < l \\<or> m'a < l'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n n'.\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n  (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n   (\\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')) \\<or>\n   l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n   (\\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)));\n        cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        m < l \\<or> m' < l'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n n'.\n                            cs\\<^bsup>\\<pi>\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                            \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                             (\\<forall>j'\n \\<in>{LEAST i'.\n          n' < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>\\<^esup> i =\n              cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                                 v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                             l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                             (\\<forall>j\n \\<in>{LEAST i.\n          n < i \\<and>\n          (\\<exists>i'.\n              cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                                 v \\<notin> local.writes (\\<pi> j)))", "note IH = \\<open>\\<And> n n'. \n                k + k' - (n + n') < k + k' - (m + m') \\<Longrightarrow>\n                cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<Longrightarrow>\n                n < l \\<or> n' < l' \\<Longrightarrow> ?thesis\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>k + k' - (?n + ?n') < k + k' - (m + m');\n   cs\\<^bsup>\\<pi>\\<^esup> ?n = cs\\<^bsup>\\<pi>'\\<^esup> ?n';\n   ?n < l \\<or> ?n' < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<And>ma m'a.\n                   \\<lbrakk>k + k' - (ma + m'a) < k + k' - (m + m');\n                    cs\\<^bsup>\\<pi>\\<^esup> ma =\n                    cs\\<^bsup>\\<pi>'\\<^esup> m'a;\n                    ma < l \\<or> m'a < l'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n n'.\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n  (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n   (\\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')) \\<or>\n   l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n   (\\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)));\n        cs\\<^bsup>\\<pi>\\<^esup> m = cs\\<^bsup>\\<pi>'\\<^esup> m';\n        m < l \\<or> m' < l'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n n'.\n                            cs\\<^bsup>\\<pi>\\<^esup> n =\n                            cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                            \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                            (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                             (\\<forall>j'\n \\<in>{LEAST i'.\n          n' < i' \\<and>\n          (\\<exists>i.\n              cs\\<^bsup>\\<pi>\\<^esup> i =\n              cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                                 v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                             l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                             (\\<forall>j\n \\<in>{LEAST i.\n          n < i \\<and>\n          (\\<exists>i'.\n              cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                                 v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using lm"], ["proof (prove)\nusing this:\n  m < l \\<or> m' < l'\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume ml: \\<open>m < l\\<close>"], ["proof (state)\nthis:\n  m < l\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain n n' where mn: \\<open>m \\<le> n\\<close> and csn: \\<open> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and suc: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>m \\<le> n;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  converged_cd_diverge_cs[OF ip csm ml lnotin\\<pi>' lk cseq[symmetric]]"], ["proof (prove)\nusing this:\n  (\\<And>k k'.\n      \\<lbrakk>m \\<le> k;\n       cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n       \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>m \\<le> n;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  m \\<le> n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nl: \\<open>n < l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < l", "using lcdn is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n < l", "by auto"], ["proof (state)\nthis:\n  n < l\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence nk: \\<open>n<k\\<close>"], ["proof (prove)\nusing this:\n  n < l\n\ngoal (1 subgoal):\n 1. n < k", "using lk"], ["proof (prove)\nusing this:\n  n < l\n  l < k\n\ngoal (1 subgoal):\n 1. n < k", "by auto"], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "using lcdn"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by (metis cd_not_ret)"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk': \\<open>n'<k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using cs_order[OF ip csn cseq[symmetric] nretn nk]"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "."], ["proof (state)\nthis:\n  n' < k'\n\ngoal (2 subgoals):\n 1. m < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<forall>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}. v\\<notin>writes (\\<pi>' j')\\<close>"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using lcdn csn suc"], ["proof (prove)\nusing this:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<not>(\\<forall>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}. v\\<notin>writes (\\<pi>' j'))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                              n' < i' \\<and>\n                              (\\<exists>i.\n                                  cs\\<^bsup>\\<pi>\\<^esup> i =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n             v \\<notin> local.writes (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                              n' < i' \\<and>\n                              (\\<exists>i.\n                                  cs\\<^bsup>\\<pi>\\<^esup> i =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n             v \\<notin> local.writes (\\<pi>' j'))", "obtain j' where jin': \\<open>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}\\<close> and vwrite: \\<open>v\\<in>writes (\\<pi>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                              n' < i' \\<and>\n                              (\\<exists>i.\n                                  cs\\<^bsup>\\<pi>\\<^esup> i =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n             v \\<notin> local.writes (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        \\<lbrakk>j' \\<in> {LEAST i'.\n                              n' < i' \\<and>\n                              (\\<exists>i.\n                                  cs\\<^bsup>\\<pi>\\<^esup> i =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'};\n         v \\<in> local.writes (\\<pi>' j')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j' \\<in> {LEAST i'.\n               n' < i' \\<and>\n               (\\<exists>i.\n                   cs\\<^bsup>\\<pi>\\<^esup> i =\n                   cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}\n  v \\<in> local.writes (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "define i' where \\<open>i' \\<equiv> LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\\<close>"], ["proof (state)\nthis:\n  i' \\<equiv>\n  LEAST i'.\n     n' < i' \\<and>\n     (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have Pk': \\<open>n' < k' \\<and> (\\<exists> k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close> (is \\<open>?P k'\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k' \\<and>\n    (\\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')", "using nk' cseq[symmetric]"], ["proof (prove)\nusing this:\n  n' < k'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. n' < k' \\<and>\n    (\\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')", "by blast"], ["proof (state)\nthis:\n  n' < k' \\<and>\n  (\\<exists>k. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ni': \\<open>n' < i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < i'", "using LeastI[of \\<open>?P\\<close>, OF Pk'] i'_def"], ["proof (prove)\nusing this:\n  n' < (LEAST x.\n           n' < x \\<and>\n           (\\<exists>k.\n               cs\\<^bsup>\\<pi>\\<^esup> k =\n               cs\\<^bsup>\\<pi>'\\<^esup> x)) \\<and>\n  (\\<exists>k.\n      cs\\<^bsup>\\<pi>\\<^esup> k =\n      cs\\<^bsup>\\<pi>'\\<^esup> (LEAST x.\n                                   n' < x \\<and>\n                                   (\\<exists>k.\n cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> x)))\n  i' \\<equiv>\n  LEAST i'.\n     n' < i' \\<and>\n     (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. n' < i'", "by auto"], ["proof (state)\nthis:\n  n' < i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain i where csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using LeastI[of \\<open>?P\\<close>, OF Pk'] i'_def"], ["proof (prove)\nusing this:\n  n' < (LEAST x.\n           n' < x \\<and>\n           (\\<exists>k.\n               cs\\<^bsup>\\<pi>\\<^esup> k =\n               cs\\<^bsup>\\<pi>'\\<^esup> x)) \\<and>\n  (\\<exists>k.\n      cs\\<^bsup>\\<pi>\\<^esup> k =\n      cs\\<^bsup>\\<pi>'\\<^esup> (LEAST x.\n                                   n' < x \\<and>\n                                   (\\<exists>k.\n cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> x)))\n  i' \\<equiv>\n  LEAST i'.\n     n' < i' \\<and>\n     (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ij': \\<open>i'\\<le>j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using jin'[folded i'_def]"], ["proof (prove)\nusing this:\n  j' \\<in> {i'..<k'}\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by auto"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have jk': \\<open>j'<k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' < k'", "using jin'[folded i'_def]"], ["proof (prove)\nusing this:\n  j' \\<in> {i'..<k'}\n\ngoal (1 subgoal):\n 1. j' < k'", "by auto"], ["proof (state)\nthis:\n  j' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have jl': \\<open>j' \\<le> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j' \\<le> l'", "using kddl' jk' vwrite"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n  j' < k'\n  v \\<in> local.writes (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. j' \\<le> l'", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n  j' < k'\n  v \\<in> local.writes (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. j' \\<le> l'", "by auto"], ["proof (state)\nthis:\n  j' \\<le> l'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn': \\<open>\\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "using nretn csn last_cs"], ["proof (prove)\nusing this:\n  \\<pi> n \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have iln: \\<open>n<i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < i", "using cs_order[OF ip(2,1) csn[symmetric] csi[symmetric] nretn' ni']"], ["proof (prove)\nusing this:\n  n < i\n\ngoal (1 subgoal):\n 1. n < i", "."], ["proof (state)\nthis:\n  n < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence mi: \\<open>m < i\\<close>"], ["proof (prove)\nusing this:\n  n < i\n\ngoal (1 subgoal):\n 1. m < i", "using mn"], ["proof (prove)\nusing this:\n  n < i\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. m < i", "by auto"], ["proof (state)\nthis:\n  m < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretm: \\<open>\\<pi> m \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> m \\<noteq> local.return", "by (metis ip(1) mn nretn term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> m \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have mi': \\<open>m'<i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m' < i'", "using cs_order[OF ip csm csi nretm mi]"], ["proof (prove)\nusing this:\n  m' < i'\n\ngoal (1 subgoal):\n 1. m' < i'", "."], ["proof (state)\nthis:\n  m' < i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ik': \\<open>i' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < k'", "using ij' jk'"], ["proof (prove)\nusing this:\n  i' \\<le> j'\n  j' < k'\n\ngoal (1 subgoal):\n 1. i' < k'", "by auto"], ["proof (state)\nthis:\n  i' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nreti': \\<open>\\<pi>' i' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' i' \\<noteq> local.return", "by (metis ij' jl' nretl' ip(2) term_path_stable)"], ["proof (state)\nthis:\n  \\<pi>' i' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using cs_order[OF ip(2,1) csi[symmetric] cseq nreti' ik']"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. i < k", "."], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j'\\<in>{LEAST i'.\n                                n' < i' \\<and>\n                                (\\<exists>i.\n                                    cs\\<^bsup>\\<pi>\\<^esup> i =\n                                    cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n               v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume il:\\<open>i < l\\<close>"], ["proof (state)\nthis:\n  i < l\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have le: \\<open>k + k' - (i +i') < k+k' - (m+m')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + k' - (i + i') < k + k' - (m + m')", "using mi mi' ik ik'"], ["proof (prove)\nusing this:\n  m < i\n  m' < i'\n  i < k\n  i' < k'\n\ngoal (1 subgoal):\n 1. k + k' - (i + i') < k + k' - (m + m')", "by auto"], ["proof (state)\nthis:\n  k + k' - (i + i') < k + k' - (m + m')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using IH[OF le]"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n   i < l \\<or> i' < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using csi il"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n   i < l \\<or> i' < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  i < l\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<not> i < l\\<close>"], ["proof (state)\nthis:\n  \\<not> i < l\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence li: \\<open>l \\<le> i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i < l\n\ngoal (1 subgoal):\n 1. l \\<le> i", "by auto"], ["proof (state)\nthis:\n  l \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have \\<open>i' \\<le> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> l'", "using ij' jl'"], ["proof (prove)\nusing this:\n  i' \\<le> j'\n  j' \\<le> l'\n\ngoal (1 subgoal):\n 1. i' \\<le> l'", "by auto"], ["proof (state)\nthis:\n  i' \\<le> l'\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence il': \\<open>i' < l'\\<close>"], ["proof (prove)\nusing this:\n  i' \\<le> l'\n\ngoal (1 subgoal):\n 1. i' < l'", "using  csi l'notin\\<pi>"], ["proof (prove)\nusing this:\n  i' \\<le> l'\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. i' < l'", "by fastforce"], ["proof (state)\nthis:\n  i' < l'\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain n n' where in': \\<open>i' \\<le> n'\\<close> and csn: \\<open> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close> and suc: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' n.\n        \\<lbrakk>i' \\<le> n';\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  converged_cd_diverge_cs[OF ip(2,1) csi[symmetric] il' _ lk' cseq] l'notin\\<pi>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<nexists>l'a.\n              cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l'a;\n   \\<And>k k'.\n      \\<lbrakk>i' \\<le> k;\n       cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>n' n.\n        \\<lbrakk>i' \\<le> n';\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  i' \\<le> n'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using lcdn' is_cdi_def lk'"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n  l' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "by auto"], ["proof (state)\nthis:\n  n' < k'\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn': \\<open>\\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "by (metis cd_not_ret lcdn')"], ["proof (state)\nthis:\n  \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using cs_order[OF ip(2,1) csn[symmetric] cseq nretn' nk']"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n < k", "."], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "define j where \\<open>j \\<equiv> LEAST j. n < j \\<and> (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> j)\\<close>"], ["proof (state)\nthis:\n  j \\<equiv>\n  LEAST j.\n     n < j \\<and>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> j)\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have Pk: \\<open>n < k \\<and> (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> k)\\<close> (is \\<open>?P k\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k \\<and>\n    (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> k)", "using nk cseq"], ["proof (prove)\nusing this:\n  n < k\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. n < k \\<and>\n    (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> k)", "by blast"], ["proof (state)\nthis:\n  n < k \\<and>\n  (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> k)\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nj: \\<open>n<j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < j", "using LeastI[of \\<open>?P\\<close>, OF Pk] j_def"], ["proof (prove)\nusing this:\n  n < (LEAST x.\n          n < x \\<and>\n          (\\<exists>j'.\n              cs\\<^bsup>\\<pi>'\\<^esup> j' =\n              cs\\<^bsup>\\<pi>\\<^esup> x)) \\<and>\n  (\\<exists>j'.\n      cs\\<^bsup>\\<pi>'\\<^esup> j' =\n      cs\\<^bsup>\\<pi>\\<^esup> (LEAST x.\n                                  n < x \\<and>\n                                  (\\<exists>j'.\ncs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> x)))\n  j \\<equiv>\n  LEAST j.\n     n < j \\<and>\n     (\\<exists>j'. cs\\<^bsup>\\<pi>'\\<^esup> j' = cs\\<^bsup>\\<pi>\\<^esup> j)\n\ngoal (1 subgoal):\n 1. n < j", "by auto"], ["proof (state)\nthis:\n  n < j\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ilen: \\<open>i \\<le> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n", "using cs_order_le[OF ip(2,1) csi[symmetric] csn[symmetric] nreti' in']"], ["proof (prove)\nusing this:\n  i \\<le> n\n\ngoal (1 subgoal):\n 1. i \\<le> n", "."], ["proof (state)\nthis:\n  i \\<le> n\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence lj: \\<open>l<j\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> n\n\ngoal (1 subgoal):\n 1. l < j", "using li nj"], ["proof (prove)\nusing this:\n  i \\<le> n\n  l \\<le> i\n  n < j\n\ngoal (1 subgoal):\n 1. l < j", "by simp"], ["proof (state)\nthis:\n  l < j\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have \\<open>\\<forall>l\\<in>{l<..<k}. v \\<notin> writes (\\<pi> l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)", "using  kddl"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  l < k \\<and>\n  v \\<in> local.reads (\\<pi> k) \\<inter> local.writes (\\<pi> l) \\<and>\n  (\\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l))\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)", "by simp"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence nw: \\<open>\\<forall>l\\<in>{j..<k}. v \\<notin> writes (\\<pi> l)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{j..<k}. v \\<notin> local.writes (\\<pi> l)", "using lj"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l)\n  l < j\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{j..<k}. v \\<notin> local.writes (\\<pi> l)", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{j..<k}. v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<not> i < l \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using csn lcdn' suc nw[unfolded j_def]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  \\<forall>l\\<in>{LEAST j.\n                     n < j \\<and>\n                     (\\<exists>j'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> j' =\n                         cs\\<^bsup>\\<pi>\\<^esup> j)..<k}.\n     v \\<notin> local.writes (\\<pi> l)\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume ml': \\<open>m' < l'\\<close>"], ["proof (state)\nthis:\n  m' < l'\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain n n' where mn': \\<open>m' \\<le> n'\\<close> and csn: \\<open> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close> and suc: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' n.\n        \\<lbrakk>m' \\<le> n';\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  converged_cd_diverge_cs[OF ip(2,1) csm[symmetric] ml' _ lk' cseq] l'notin\\<pi>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<nexists>l'a.\n              cs\\<^bsup>\\<pi>'\\<^esup> l' = cs\\<^bsup>\\<pi>\\<^esup> l'a;\n   \\<And>k k'.\n      \\<lbrakk>m' \\<le> k;\n       cs\\<^bsup>\\<pi>'\\<^esup> k = cs\\<^bsup>\\<pi>\\<^esup> k';\n       l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> k;\n       \\<pi>' (Suc k) \\<noteq> \\<pi> (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<nexists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> l'\n\ngoal (1 subgoal):\n 1. (\\<And>n' n.\n        \\<lbrakk>m' \\<le> n';\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  m' \\<le> n'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nl': \\<open>n' < l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < l'", "using lcdn' is_cdi_def"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n' < l'", "by auto"], ["proof (state)\nthis:\n  n' < l'\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence nk': \\<open>n'<k'\\<close>"], ["proof (prove)\nusing this:\n  n' < l'\n\ngoal (1 subgoal):\n 1. n' < k'", "using lk'"], ["proof (prove)\nusing this:\n  n' < l'\n  l' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "by auto"], ["proof (state)\nthis:\n  n' < k'\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn': \\<open>\\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "using lcdn'"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "by (metis cd_not_ret)"], ["proof (state)\nthis:\n  \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk: \\<open>n<k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using cs_order[OF ip(2,1) csn[symmetric] cseq nretn' nk']"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n < k", "."], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. m' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j)\\<close>"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using lcdn' csn suc"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<not>(\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>j\\<in>{LEAST i.\n                             n < i \\<and>\n                             (\\<exists>i'.\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                 cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n             v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>j\\<in>{LEAST i.\n                             n < i \\<and>\n                             (\\<exists>i'.\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                 cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n             v \\<notin> local.writes (\\<pi> j))", "obtain j where jin: \\<open>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}\\<close> and vwrite: \\<open>v\\<in>writes (\\<pi> j)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>j\\<in>{LEAST i.\n                             n < i \\<and>\n                             (\\<exists>i'.\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                 cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n             v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> {LEAST i.\n                             n < i \\<and>\n                             (\\<exists>i'.\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                 cs\\<^bsup>\\<pi>\\<^esup> i)..<k};\n         v \\<in> local.writes (\\<pi> j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j \\<in> {LEAST i.\n              n < i \\<and>\n              (\\<exists>i'.\n                  cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                  cs\\<^bsup>\\<pi>\\<^esup> i)..<k}\n  v \\<in> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "define i where \\<open>i \\<equiv> LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)\\<close>"], ["proof (state)\nthis:\n  i \\<equiv>\n  LEAST i.\n     n < i \\<and>\n     (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have Pk: \\<open>n < k \\<and> (\\<exists> k'. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k)\\<close> (is \\<open>?P k\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k \\<and>\n    (\\<exists>k'. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k)", "using nk cseq"], ["proof (prove)\nusing this:\n  n < k\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. n < k \\<and>\n    (\\<exists>k'. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k)", "by blast"], ["proof (state)\nthis:\n  n < k \\<and>\n  (\\<exists>k'. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ni: \\<open>n < i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < i", "using LeastI[of \\<open>?P\\<close>, OF Pk] i_def"], ["proof (prove)\nusing this:\n  n < (LEAST x.\n          n < x \\<and>\n          (\\<exists>k'.\n              cs\\<^bsup>\\<pi>'\\<^esup> k' =\n              cs\\<^bsup>\\<pi>\\<^esup> x)) \\<and>\n  (\\<exists>k'.\n      cs\\<^bsup>\\<pi>'\\<^esup> k' =\n      cs\\<^bsup>\\<pi>\\<^esup> (LEAST x.\n                                  n < x \\<and>\n                                  (\\<exists>k'.\ncs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> x)))\n  i \\<equiv>\n  LEAST i.\n     n < i \\<and>\n     (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)\n\ngoal (1 subgoal):\n 1. n < i", "by auto"], ["proof (state)\nthis:\n  n < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain i' where csi: \\<open>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using LeastI[of \\<open>?P\\<close>, OF Pk] i_def"], ["proof (prove)\nusing this:\n  n < (LEAST x.\n          n < x \\<and>\n          (\\<exists>k'.\n              cs\\<^bsup>\\<pi>'\\<^esup> k' =\n              cs\\<^bsup>\\<pi>\\<^esup> x)) \\<and>\n  (\\<exists>k'.\n      cs\\<^bsup>\\<pi>'\\<^esup> k' =\n      cs\\<^bsup>\\<pi>\\<^esup> (LEAST x.\n                                  n < x \\<and>\n                                  (\\<exists>k'.\ncs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> x)))\n  i \\<equiv>\n  LEAST i.\n     n < i \\<and>\n     (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)\n\ngoal (1 subgoal):\n 1. (\\<And>i'.\n        cs\\<^bsup>\\<pi>\\<^esup> i =\n        cs\\<^bsup>\\<pi>'\\<^esup> i' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ij: \\<open>i\\<le>j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j", "using jin[folded i_def]"], ["proof (prove)\nusing this:\n  j \\<in> {i..<k}\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have jk: \\<open>j<k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < k", "using jin[folded i_def]"], ["proof (prove)\nusing this:\n  j \\<in> {i..<k}\n\ngoal (1 subgoal):\n 1. j < k", "by auto"], ["proof (state)\nthis:\n  j < k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have jl: \\<open>j \\<le> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> l", "using kddl jk vwrite"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n  j < k\n  v \\<in> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. j \\<le> l", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi> \\<and>\n  l < k \\<and>\n  v \\<in> local.reads (\\<pi> k) \\<inter> local.writes (\\<pi> l) \\<and>\n  (\\<forall>l\\<in>{l<..<k}. v \\<notin> local.writes (\\<pi> l))\n  j < k\n  v \\<in> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. j \\<le> l", "by auto"], ["proof (state)\nthis:\n  j \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "using nretn' csn last_cs"], ["proof (prove)\nusing this:\n  \\<pi>' n' \\<noteq> local.return\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have iln': \\<open>n'<i'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < i'", "using cs_order[OF ip csn csi nretn ni]"], ["proof (prove)\nusing this:\n  n' < i'\n\ngoal (1 subgoal):\n 1. n' < i'", "."], ["proof (state)\nthis:\n  n' < i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence mi': \\<open>m' < i'\\<close>"], ["proof (prove)\nusing this:\n  n' < i'\n\ngoal (1 subgoal):\n 1. m' < i'", "using mn'"], ["proof (prove)\nusing this:\n  n' < i'\n  m' \\<le> n'\n\ngoal (1 subgoal):\n 1. m' < i'", "by auto"], ["proof (state)\nthis:\n  m' < i'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretm': \\<open>\\<pi>' m' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' m' \\<noteq> local.return", "by (metis ip(2) mn' nretn' term_path_stable)"], ["proof (state)\nthis:\n  \\<pi>' m' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have mi: \\<open>m<i\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < i", "using cs_order[OF ip(2,1) csm[symmetric] csi[symmetric] nretm' mi']"], ["proof (prove)\nusing this:\n  m < i\n\ngoal (1 subgoal):\n 1. m < i", "."], ["proof (state)\nthis:\n  m < i\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ik: \\<open>i < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k", "using ij jk"], ["proof (prove)\nusing this:\n  i \\<le> j\n  j < k\n\ngoal (1 subgoal):\n 1. i < k", "by auto"], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nreti: \\<open>\\<pi> i \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> i \\<noteq> local.return", "by (metis ij ip(1) jl nret term_path_stable)"], ["proof (state)\nthis:\n  \\<pi> i \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have ik': \\<open>i' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < k'", "using cs_order[OF ip csi cseq[symmetric] nreti ik]"], ["proof (prove)\nusing this:\n  i' < k'\n\ngoal (1 subgoal):\n 1. i' < k'", "."], ["proof (state)\nthis:\n  i' < k'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>j\\<in>{LEAST i.\n                               n < i \\<and>\n                               (\\<exists>i'.\n                                   cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                   cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n               v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume il':\\<open>i' < l'\\<close>"], ["proof (state)\nthis:\n  i' < l'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have le: \\<open>k + k' - (i +i') < k+k' - (m+m')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k + k' - (i + i') < k + k' - (m + m')", "using mi mi' ik ik'"], ["proof (prove)\nusing this:\n  m < i\n  m' < i'\n  i < k\n  i' < k'\n\ngoal (1 subgoal):\n 1. k + k' - (i + i') < k + k' - (m + m')", "by auto"], ["proof (state)\nthis:\n  k + k' - (i + i') < k + k' - (m + m')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using IH[OF le]"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n   i < l \\<or> i' < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using csi il'"], ["proof (prove)\nusing this:\n  \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i';\n   i < l \\<or> i' < l'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n n'.\n                       cs\\<^bsup>\\<pi>\\<^esup> n =\n                       cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n                       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n                       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n                        (\\<forall>j'\\<in>{LEAST i'.\n       n' < i' \\<and>\n       (\\<exists>i.\n           cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n                            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n                        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n                        (\\<forall>j\\<in>{LEAST i.\n      n < i \\<and>\n      (\\<exists>i'.\n          cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n                            v \\<notin> local.writes (\\<pi> j)))\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  i' < l'\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "assume \\<open>\\<not> i' < l'\\<close>"], ["proof (state)\nthis:\n  \\<not> i' < l'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence li': \\<open>l' \\<le> i'\\<close>"], ["proof (prove)\nusing this:\n  \\<not> i' < l'\n\ngoal (1 subgoal):\n 1. l' \\<le> i'", "by auto"], ["proof (state)\nthis:\n  l' \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have \\<open>i \\<le> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> l", "using ij jl"], ["proof (prove)\nusing this:\n  i \\<le> j\n  j \\<le> l\n\ngoal (1 subgoal):\n 1. i \\<le> l", "by auto"], ["proof (state)\nthis:\n  i \\<le> l\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence il: \\<open>i < l\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> l\n\ngoal (1 subgoal):\n 1. i < l", "using  csi lnotin\\<pi>'"], ["proof (prove)\nusing this:\n  i \\<le> l\n  cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'\n  \\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. i < l", "by fastforce"], ["proof (state)\nthis:\n  i < l\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "obtain n n' where ilen: \\<open>i \\<le> n\\<close> and csn: \\<open> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and lcdn: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close> and suc: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>i \\<le> n;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using  converged_cd_diverge_cs[OF ip csi il _ lk cseq[symmetric]] lnotin\\<pi>'"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<nexists>l'.\n              cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> l';\n   \\<And>k k'.\n      \\<lbrakk>i \\<le> k;\n       cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k';\n       l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> k;\n       \\<pi> (Suc k) \\<noteq> \\<pi>' (Suc k')\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<nexists>i'. cs\\<^bsup>\\<pi>\\<^esup> l = cs\\<^bsup>\\<pi>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>i \\<le> n;\n         cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n;\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  i \\<le> n\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using lcdn is_cdi_def lk"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n  l < k\n\ngoal (1 subgoal):\n 1. n < k", "by auto"], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by (metis cd_not_ret lcdn)"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using cs_order[OF ip csn cseq[symmetric] nretn nk]"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "."], ["proof (state)\nthis:\n  n' < k'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "define j' where \\<open>j' \\<equiv> LEAST j'. n' < j' \\<and> (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\\<close>"], ["proof (state)\nthis:\n  j' \\<equiv>\n  LEAST j'.\n     n' < j' \\<and>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have Pk': \\<open>n' < k' \\<and> (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k')\\<close> (is \\<open>?P k'\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k' \\<and>\n    (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k')", "using nk' cseq[symmetric]"], ["proof (prove)\nusing this:\n  n' < k'\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. n' < k' \\<and>\n    (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k')", "by blast"], ["proof (state)\nthis:\n  n' < k' \\<and>\n  (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k')\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have nj': \\<open>n'<j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < j'", "using LeastI[of \\<open>?P\\<close>, OF Pk'] j'_def"], ["proof (prove)\nusing this:\n  n' < (LEAST x.\n           n' < x \\<and>\n           (\\<exists>j.\n               cs\\<^bsup>\\<pi>\\<^esup> j =\n               cs\\<^bsup>\\<pi>'\\<^esup> x)) \\<and>\n  (\\<exists>j.\n      cs\\<^bsup>\\<pi>\\<^esup> j =\n      cs\\<^bsup>\\<pi>'\\<^esup> (LEAST x.\n                                   n' < x \\<and>\n                                   (\\<exists>j.\n cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> x)))\n  j' \\<equiv>\n  LEAST j'.\n     n' < j' \\<and>\n     (\\<exists>j. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> j')\n\ngoal (1 subgoal):\n 1. n' < j'", "by auto"], ["proof (state)\nthis:\n  n' < j'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have in': \\<open>i' \\<le> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> n'", "using cs_order_le[OF ip csi csn nreti ilen]"], ["proof (prove)\nusing this:\n  i' \\<le> n'\n\ngoal (1 subgoal):\n 1. i' \\<le> n'", "."], ["proof (state)\nthis:\n  i' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence lj': \\<open>l'<j'\\<close>"], ["proof (prove)\nusing this:\n  i' \\<le> n'\n\ngoal (1 subgoal):\n 1. l' < j'", "using li' nj'"], ["proof (prove)\nusing this:\n  i' \\<le> n'\n  l' \\<le> i'\n  n' < j'\n\ngoal (1 subgoal):\n 1. l' < j'", "by simp"], ["proof (state)\nthis:\n  l' < j'\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "have \\<open>\\<forall>l\\<in>{l'<..<k'}. v \\<notin> writes (\\<pi>' l)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)", "using  kddl'"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path \\<pi>' \\<and>\n  l' < k' \\<and>\n  v \\<in> local.reads (\\<pi>' k') \\<inter> local.writes (\\<pi>' l') \\<and>\n  (\\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l))\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)", "by simp"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "hence nw': \\<open>\\<forall>l\\<in>{j'..<k'}. v \\<notin> writes (\\<pi>' l)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{j'..<k'}. v \\<notin> local.writes (\\<pi>' l)", "using lj'"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>{l'<..<k'}. v \\<notin> local.writes (\\<pi>' l)\n  l' < j'\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>{j'..<k'}. v \\<notin> local.writes (\\<pi>' l)", "by auto"], ["proof (state)\nthis:\n  \\<forall>l\\<in>{j'..<k'}. v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. \\<not> i' < l' \\<Longrightarrow>\n    \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "using csn lcdn suc nw'[unfolded j'_def]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  \\<forall>l\\<in>{LEAST j'.\n                     n' < j' \\<and>\n                     (\\<exists>j.\n                         cs\\<^bsup>\\<pi>\\<^esup> j =\n                         cs\\<^bsup>\\<pi>'\\<^esup> j')..<k'}.\n     v \\<notin> local.writes (\\<pi>' l)\n\ngoal (1 subgoal):\n 1. \\<exists>n n'.\n       cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n       \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n       (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n        (\\<forall>j'\\<in>{LEAST i'.\n                             n' < i' \\<and>\n                             (\\<exists>i.\n                                 cs\\<^bsup>\\<pi>\\<^esup> i =\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n            v \\<notin> local.writes (\\<pi>' j')) \\<or>\n        l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n        (\\<forall>j\\<in>{LEAST i.\n                            n < i \\<and>\n                            (\\<exists>i'.\n                                cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n            v \\<notin> local.writes (\\<pi> j)))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))", "obtain n n' where csn: \\<open> cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\\<close> and suc: \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>\n            and cdor: \n            \\<open>(l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and> (\\<forall>j'\\<in>{(LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i'))..<k'}. v\\<notin>writes (\\<pi>' j'))\n            \\<or> l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and> (\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j)))\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n n'.\n     cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n' \\<and>\n     \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n') \\<and>\n     (l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n      (\\<forall>j'\\<in>{LEAST i'.\n                           n' < i' \\<and>\n                           (\\<exists>i.\n                               cs\\<^bsup>\\<pi>\\<^esup> i =\n                               cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n          v \\<notin> local.writes (\\<pi>' j')) \\<or>\n      l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n      (\\<forall>j\\<in>{LEAST i.\n                          n < i \\<and>\n                          (\\<exists>i'.\n                              cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                              cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n          v \\<notin> local.writes (\\<pi> j)))\n\ngoal (1 subgoal):\n 1. (\\<And>n n'.\n        \\<lbrakk>cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n';\n         \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n');\n         l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n         (\\<forall>j'\\<in>{LEAST i'.\n                              n' < i' \\<and>\n                              (\\<exists>i.\n                                  cs\\<^bsup>\\<pi>\\<^esup> i =\n                                  cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n             v \\<notin> local.writes (\\<pi>' j')) \\<or>\n         l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n         (\\<forall>j\\<in>{LEAST i.\n                             n < i \\<and>\n                             (\\<exists>i'.\n                                 cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                                 cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n             v \\<notin> local.writes (\\<pi> j))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>j'\\<in>{LEAST i'.\n                       n' < i' \\<and>\n                       (\\<exists>i.\n                           cs\\<^bsup>\\<pi>\\<^esup> i =\n                           cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n      v \\<notin> local.writes (\\<pi>' j')) \\<or>\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>j\\<in>{LEAST i.\n                      n < i \\<and>\n                      (\\<exists>i'.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                          cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n      v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<nexists>i.\n       cs\\<^bsup>\\<pi>\\<^esup> i =\n       cs\\<^bsup>\\<pi>'\\<^esup> l' \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using cdor"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>j'\\<in>{LEAST i'.\n                       n' < i' \\<and>\n                       (\\<exists>i.\n                           cs\\<^bsup>\\<pi>\\<^esup> i =\n                           cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n      v \\<notin> local.writes (\\<pi>' j')) \\<or>\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>j\\<in>{LEAST i.\n                      n < i \\<and>\n                      (\\<exists>i'.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                          cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n      v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n    (\\<forall>j'\\<in>{LEAST i'.\n                         n' < i' \\<and>\n                         (\\<exists>i.\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n        v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume *: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and> (\\<forall>j'\\<in>{LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}. v \\<notin> local.writes (\\<pi>' j'))\\<close>"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>j'\\<in>{LEAST i'.\n                       n' < i' \\<and>\n                       (\\<exists>i.\n                           cs\\<^bsup>\\<pi>\\<^esup> i =\n                           cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n      v \\<notin> local.writes (\\<pi>' j'))\n\ngoal (2 subgoals):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n    (\\<forall>j'\\<in>{LEAST i'.\n                         n' < i' \\<and>\n                         (\\<exists>i.\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n        v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lcdn: \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>j'\\<in>{LEAST i'.\n                       n' < i' \\<and>\n                       (\\<exists>i.\n                           cs\\<^bsup>\\<pi>\\<^esup> i =\n                           cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n      v \\<notin> local.writes (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "by blast"], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (2 subgoals):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n    (\\<forall>j'\\<in>{LEAST i'.\n                         n' < i' \\<and>\n                         (\\<exists>i.\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n        v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nowrite: \\<open>\\<forall>j'\\<in>{LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}. v \\<notin> local.writes (\\<pi>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "using *"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n  (\\<forall>j'\\<in>{LEAST i'.\n                       n' < i' \\<and>\n                       (\\<exists>i.\n                           cs\\<^bsup>\\<pi>\\<^esup> i =\n                           cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n      v \\<notin> local.writes (\\<pi>' j'))\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "by blast"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (2 subgoals):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n \\<and>\n    (\\<forall>j'\\<in>{LEAST i'.\n                         n' < i' \\<and>\n                         (\\<exists>i.\n                             cs\\<^bsup>\\<pi>\\<^esup> i =\n                             cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n        v \\<notin> local.writes (\\<pi>' j')) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n 2. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof (rule cp.intros(3)[of \\<open>\\<sigma>\\<close> \\<open>n\\<close> \\<open>\\<sigma>'\\<close> \\<open>n'\\<close>,folded path])"], ["proof (state)\ngoal (7 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. k dd\\<^bsup>\\<pi>,?v\\<^esup>\\<rightarrow> ?l\n 3. ?l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n 4. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n 5. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n 6. (\\<sigma>\\<^bsup>k\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v\n 7. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       ?v \\<notin> local.writes (\\<pi>' j')", "show \\<open>l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "using lcdn"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n", "."], ["proof (state)\nthis:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (6 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. k dd\\<^bsup>\\<pi>,?v\\<^esup>\\<rightarrow> l\n 3. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n 4. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n 5. (\\<sigma>\\<^bsup>k\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v\n 6. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       ?v \\<notin> local.writes (\\<pi>' j')", "show \\<open>k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l", "using kddl"], ["proof (prove)\nusing this:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l", "."], ["proof (state)\nthis:\n  k dd\\<^bsup>\\<pi>,v\\<^esup>\\<rightarrow> l\n\ngoal (5 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n 3. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n 4. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n 5. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "show \\<open>cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'", "using cseq"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> k = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (4 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n 3. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n 4. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "show \\<open>\\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')", "using suc"], ["proof (prove)\nusing this:\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')", "by simp"], ["proof (state)\nthis:\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (3 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n 3. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "show \\<open>\\<forall>j'\\<in>{LEAST i'. n' < i' \\<and> (\\<exists>i. cs\\<^bsup>\\<pi>\\<^esup> i = cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}. v \\<notin> local.writes (\\<pi>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "using nowrite"], ["proof (prove)\nusing this:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{LEAST i'.\n                        n' < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>\\<^esup> i =\n                            cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n       v \\<notin> local.writes (\\<pi>' j')", "."], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{LEAST i'.\n                      n' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>\\<pi>\\<^esup> i =\n                          cs\\<^bsup>\\<pi>'\\<^esup> i')..<k'}.\n     v \\<notin> local.writes (\\<pi>' j')\n\ngoal (2 subgoals):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n 2. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v", "show \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v", "using vneq"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v", "."], ["proof (state)\nthis:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using lcdn lk is_cdi_def"], ["proof (prove)\nusing this:\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n  l < k\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n < k", "by auto"], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have nretn: \\<open>\\<pi> n \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "using cd_not_ret lcdn"], ["proof (prove)\nusing this:\n  ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  ?\\<pi> ?k \\<noteq> local.return\n  l cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> n\n\ngoal (1 subgoal):\n 1. \\<pi> n \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using cs_order[OF ip csn cseq[symmetric] nretn nk]"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n' < k'", "."], ["proof (state)\nthis:\n  n' < k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "hence le: \\<open>n + n' < k + k'\\<close>"], ["proof (prove)\nusing this:\n  n' < k'\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "using nk"], ["proof (prove)\nusing this:\n  n' < k'\n  n < k\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "by auto"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "moreover"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have 1: \\<open>\\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have 2: \\<open>\\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have 3: \\<open>\\<pi>' n' = \\<pi> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "using csn last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' = \\<pi> n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>n\\<^esup> \\<restriction> reads (\\<pi> n) \\<noteq> \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> reads (\\<pi> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n    \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "by (metis 1 2 3 suc reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "obtain v' where v'read: \\<open>v'\\<in>reads (path \\<sigma> n)\\<close> \\<open>(\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> n);\n         (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path(1) reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'", "show \\<open>((\\<sigma>, n), (\\<sigma>', n')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "using IH csn path"], ["proof (prove)\nusing this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  \\<lbrakk>?ka1 + ?k'a1 < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> ?ka1 =\n   cs\\<^bsup>path \\<sigma>'\\<^esup> ?k'a1;\n   ?v1 \\<in> local.reads (path \\<sigma> ?ka1);\n   (\\<sigma>\\<^bsup>?ka1\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>?k'a1\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?ka1), \\<sigma>', ?k'a1) \\<in> cp\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume *: \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and> (\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j))\\<close>"], ["proof (state)\nthis:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>j\\<in>{LEAST i.\n                      n < i \\<and>\n                      (\\<exists>i'.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                          cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n      v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "hence lcdn': \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>j\\<in>{LEAST i.\n                      n < i \\<and>\n                      (\\<exists>i'.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                          cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n      v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "by blast"], ["proof (state)\nthis:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "have nowrite: \\<open>\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)", "using *"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n  (\\<forall>j\\<in>{LEAST i.\n                      n < i \\<and>\n                      (\\<exists>i'.\n                          cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                          cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n      v \\<notin> local.writes (\\<pi> j))\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)", "by blast"], ["proof (state)\nthis:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n' \\<and>\n    (\\<forall>j\\<in>{LEAST i.\n                        n < i \\<and>\n                        (\\<exists>i'.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                            cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n        v \\<notin> local.writes (\\<pi> j)) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "proof (rule cp.intros(4), rule cp.intros(3)[of \\<open>\\<sigma>'\\<close> \\<open>n'\\<close> \\<open>\\<sigma>\\<close> \\<open>n\\<close>,folded path])"], ["proof (state)\ngoal (7 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. k' dd\\<^bsup>\\<pi>',?v2\\<^esup>\\<rightarrow> ?l2\n 3. ?l2 cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n 4. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n 5. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\n 6. (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v2 \\<noteq>\n    (\\<sigma>\\<^bsup>k\\<^esup>) ?v2\n 7. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       ?v2 \\<notin> local.writes (\\<pi> j')", "show \\<open>l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "using lcdn'"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'", "."], ["proof (state)\nthis:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (6 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. k' dd\\<^bsup>\\<pi>',?v2\\<^esup>\\<rightarrow> l'\n 3. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n 4. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\n 5. (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v2 \\<noteq>\n    (\\<sigma>\\<^bsup>k\\<^esup>) ?v2\n 6. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       ?v2 \\<notin> local.writes (\\<pi> j')", "show \\<open>k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'", "using kddl'"], ["proof (prove)\nusing this:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (1 subgoal):\n 1. k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'", "."], ["proof (state)\nthis:\n  k' dd\\<^bsup>\\<pi>',v\\<^esup>\\<rightarrow> l'\n\ngoal (5 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n 3. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\n 4. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v\n 5. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (\\<pi> j')", "show \\<open>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k", "using cseq"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k", "."], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n\ngoal (4 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\n 3. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v\n 4. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (\\<pi> j')", "show \\<open>\\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)", "using suc"], ["proof (prove)\nusing this:\n  \\<pi> (Suc n) \\<noteq> \\<pi>' (Suc n')\n\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)", "by simp"], ["proof (state)\nthis:\n  \\<pi>' (Suc n') \\<noteq> \\<pi> (Suc n)\n\ngoal (3 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v\n 3. \\<forall>j'\\<in>{LEAST i'.\n                        n < i' \\<and>\n                        (\\<exists>i.\n                            cs\\<^bsup>\\<pi>'\\<^esup> i =\n                            cs\\<^bsup>\\<pi>\\<^esup> i')..<k}.\n       v \\<notin> local.writes (\\<pi> j')", "show \\<open>\\<forall>j\\<in>{(LEAST i. n < i \\<and> (\\<exists>i'. cs\\<^bsup>\\<pi>'\\<^esup> i' = cs\\<^bsup>\\<pi>\\<^esup> i))..<k}. v\\<notin>writes (\\<pi> j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)", "using nowrite"], ["proof (prove)\nusing this:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>{LEAST i.\n                       n < i \\<and>\n                       (\\<exists>i'.\n                           cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                           cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n       v \\<notin> local.writes (\\<pi> j)", "."], ["proof (state)\nthis:\n  \\<forall>j\\<in>{LEAST i.\n                     n < i \\<and>\n                     (\\<exists>i'.\n                         cs\\<^bsup>\\<pi>'\\<^esup> i' =\n                         cs\\<^bsup>\\<pi>\\<^esup> i)..<k}.\n     v \\<notin> local.writes (\\<pi> j)\n\ngoal (2 subgoals):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n 2. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v", "show \\<open>(\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v", "using vneq"], ["proof (prove)\nusing this:\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq> (\\<sigma>\\<^bsup>k\\<^esup>) v\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have nk': \\<open>n' < k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' < k'", "using lcdn' lk' is_cdi_def"], ["proof (prove)\nusing this:\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n  l' < k'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. n' < k'", "by auto"], ["proof (state)\nthis:\n  n' < k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have nretn': \\<open>\\<pi>' n' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "using cd_not_ret lcdn'"], ["proof (prove)\nusing this:\n  ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  ?\\<pi> ?k \\<noteq> local.return\n  l' cd\\<^bsup>\\<pi>'\\<^esup>\\<rightarrow> n'\n\ngoal (1 subgoal):\n 1. \\<pi>' n' \\<noteq> local.return", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have nk: \\<open>n < k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "using cs_order[OF ip(2,1) csn[symmetric] cseq nretn' nk']"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n < k", "."], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "hence le: \\<open>n + n' < k + k'\\<close>"], ["proof (prove)\nusing this:\n  n < k\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "using nk'"], ["proof (prove)\nusing this:\n  n < k\n  n' < k'\n\ngoal (1 subgoal):\n 1. n + n' < k + k'", "by auto"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "moreover"], ["proof (state)\nthis:\n  n + n' < k + k'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have 1: \\<open>\\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)", "by (metis step_suc_sem fst_conv path(1) path_suc)"], ["proof (state)\nthis:\n  \\<pi> (Suc n) = suc (\\<pi> n) (\\<sigma>\\<^bsup>n\\<^esup>)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have 2: \\<open>\\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)", "by (metis step_suc_sem fst_conv path(2) path_suc)"], ["proof (state)\nthis:\n  \\<pi>' (Suc n') = suc (\\<pi>' n') (\\<sigma>'\\<^bsup>n'\\<^esup>)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have 3: \\<open>\\<pi>' n' = \\<pi> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "using csn last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. \\<pi>' n' = \\<pi> n", "by metis"], ["proof (state)\nthis:\n  \\<pi>' n' = \\<pi> n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "have nreads: \\<open>\\<sigma>\\<^bsup>n\\<^esup> \\<restriction> reads (\\<pi> n) \\<noteq> \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> reads (\\<pi> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n    \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "by (metis 1 2 3 suc reads_restr_suc)"], ["proof (state)\nthis:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "then"], ["proof (chain)\npicking this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)", "obtain v' where v'read: \\<open>v'\\<in>reads (path \\<sigma> n)\\<close> \\<open>(\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma>\\<^bsup>n\\<^esup> \\<restriction> local.reads (\\<pi> n) \\<noteq>\n  \\<sigma>'\\<^bsup>n'\\<^esup> \\<restriction> local.reads (\\<pi> n)\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>v' \\<in> local.reads (path \\<sigma> n);\n         (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq>\n         (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis path(1) reads_restrict)"], ["proof (state)\nthis:\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "ultimately"], ["proof (chain)\npicking this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'", "have \\<open>((\\<sigma>, n), (\\<sigma>', n')) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "using IH csn path"], ["proof (prove)\nusing this:\n  n + n' < k + k'\n  v' \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) v' \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v'\n  \\<lbrakk>?ka1 + ?k'a1 < k + k';\n   cs\\<^bsup>path \\<sigma>\\<^esup> ?ka1 =\n   cs\\<^bsup>path \\<sigma>'\\<^esup> ?k'a1;\n   ?v1 \\<in> local.reads (path \\<sigma> ?ka1);\n   (\\<sigma>\\<^bsup>?ka1\\<^esup>) ?v1 \\<noteq>\n   (\\<sigma>'\\<^bsup>?k'a1\\<^esup>) ?v1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?ka1), \\<sigma>', ?k'a1) \\<in> cp\n  cs\\<^bsup>\\<pi>\\<^esup> n = cs\\<^bsup>\\<pi>'\\<^esup> n'\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, n), \\<sigma>', n') \\<in> cp", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "thus \\<open>((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "using cp.intros(4)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, n), \\<sigma>', n') \\<in> cp\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  ((?\\<sigma>', ?k'), ?\\<sigma>, ?k) \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>', n'), \\<sigma>, n) \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem contradicting_in_cop: assumes \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close> and \\<open>(\\<sigma>',k') \\<cc> (\\<sigma>,k)\\<close> and \\<open>path \\<sigma> k \\<in> dom att\\<close> \nshows \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cop\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "case (1 \\<pi>' \\<pi>)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n  \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "define j where \\<open>j \\<equiv> \\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (state)\nthis:\n  j \\<equiv> \\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "have csj: \\<open>cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k'", "unfolding j_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown>\n                             cs\\<^bsup>\\<pi>'\\<^esup> k') =\n    cs\\<^bsup>\\<pi>'\\<^esup> k'", "using 1"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n  \\<pi>' (Suc k')\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>\\<pi>\\<^esup> (\\<pi> \\<exclamdown>\n                             cs\\<^bsup>\\<pi>'\\<^esup> k') =\n    cs\\<^bsup>\\<pi>'\\<^esup> k'", "by (metis cs_not_nil cs_select_is_cs(1) path_is_path)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "have suc: \\<open>\\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')", "using 1 j_def"], ["proof (prove)\nusing this:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n  \\<pi>' (Suc k')\n  j \\<equiv> \\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')", "by simp"], ["proof (state)\nthis:\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "have kcdj: \\<open>k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j", "by (metis cs_not_nil cs_select_is_cs(2) 1(1,2) j_def path_is_path)"], ["proof (state)\nthis:\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "obtain v where readv: \\<open>v\\<in>reads(path \\<sigma> j)\\<close> and vneq: \\<open>(\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> local.reads (path \\<sigma> j);\n         (\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using suc csj"], ["proof (prove)\nusing this:\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> local.reads (path \\<sigma> j);\n         (\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding 1"], ["proof (prove)\nusing this:\n  path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc k')\n  cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> local.reads (path \\<sigma> j);\n         (\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis IFC_def.suc_def 1(2) 1(3) last_cs path_suc reads_restr_suc reads_restrict)"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma> j)\n  (\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "have \\<open>((\\<sigma>,j),\\<sigma>',k') \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, j), \\<sigma>', k') \\<in> cp", "apply (rule contradicting_in_cp[OF assms(1)])"], ["proof (prove)\ngoal (3 subgoals):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n 2. ?v \\<in> local.reads (path \\<sigma> j)\n 3. (\\<sigma>\\<^bsup>j\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v", "using readv vneq csj 1"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> j)\n  (\\<sigma>\\<^bsup>j\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n  cs\\<^bsup>\\<pi>\\<^esup> j = cs\\<^bsup>\\<pi>'\\<^esup> k'\n  cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<pi> (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n  \\<pi>' (Suc k')\n\ngoal (3 subgoals):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> j = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n 2. ?v \\<in> local.reads (path \\<sigma> j)\n 3. (\\<sigma>\\<^bsup>j\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, j), \\<sigma>', k') \\<in> cp\n\ngoal (2 subgoals):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec>\n                cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<pi>\n         (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n        \\<pi>' (Suc k')\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n 2. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "thus \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cop\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, j), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "using kcdj suc assms(3) cop.intros(2)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, j), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>\\<pi>\\<^esup>\\<rightarrow> j\n  \\<pi> (Suc j) \\<noteq> \\<pi>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att\n  \\<lbrakk>((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp;\n   ?n cd\\<^bsup>path ?\\<sigma>\\<^esup>\\<rightarrow> ?k;\n   path ?\\<sigma> (Suc ?k) \\<noteq> path ?\\<sigma>' (Suc ?k');\n   path ?\\<sigma> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?n), ?\\<sigma>', ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "unfolding 1"], ["proof (prove)\nusing this:\n  ((\\<sigma>, j), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> j\n  path \\<sigma> (Suc j) \\<noteq> path \\<sigma>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att\n  \\<lbrakk>((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp;\n   ?n cd\\<^bsup>path ?\\<sigma>\\<^esup>\\<rightarrow> ?k;\n   path ?\\<sigma> (Suc ?k) \\<noteq> path ?\\<sigma>' (Suc ?k');\n   path ?\\<sigma> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?n), ?\\<sigma>', ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "case (2 \\<pi>' \\<pi>)"], ["proof (state)\nthis:\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> local.reads (\\<pi> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (\\<pi> k)\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "obtain v where readv: \\<open>v\\<in>reads(path \\<sigma> k)\\<close> and vneq: \\<open>(\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> local.reads (path \\<sigma> k);\n         (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 2(2-4)"], ["proof (prove)\nusing this:\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> local.reads (\\<pi> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (\\<pi> k)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> local.reads (path \\<sigma> k);\n         (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis reads_restrict)"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma> k)\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "have \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "apply (rule contradicting_in_cp[OF assms(1)])"], ["proof (prove)\ngoal (3 subgoals):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n 2. ?v \\<in> local.reads (path \\<sigma> k)\n 3. (\\<sigma>\\<^bsup>k\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v", "using readv vneq 2"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> k)\n  (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v\n  cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k\n  \\<pi> = path \\<sigma>\n  \\<pi>' = path \\<sigma>'\n  \\<sigma>\\<^bsup>k\\<^esup> \\<restriction> local.reads (\\<pi> k) \\<noteq>\n  \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (\\<pi> k)\n\ngoal (3 subgoals):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n 2. ?v \\<in> local.reads (path \\<sigma> k)\n 3. (\\<sigma>\\<^bsup>k\\<^esup>) ?v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) ?v", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<And>\\<pi>' \\<pi>.\n       \\<lbrakk>cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k;\n        \\<pi> = path \\<sigma>; \\<pi>' = path \\<sigma>';\n        \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n        local.reads (\\<pi> k) \\<noteq>\n        \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction>\n        local.reads (\\<pi> k)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "thus \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cop\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "using assms(3) cop.intros(1)"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att\n  \\<lbrakk>((?\\<sigma>, ?n), ?\\<sigma>', ?n') \\<in> cp;\n   path ?\\<sigma> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?n), ?\\<sigma>', ?n') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "unfolding 2"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att\n  \\<lbrakk>((?\\<sigma>, ?n), ?\\<sigma>', ?n') \\<in> cp;\n   path ?\\<sigma> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?n), ?\\<sigma>', ?n') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "by auto"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem cop_correct_term: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> \\<open>\\<pi>' n' = return\\<close> and obsne: \\<open>obs \\<sigma> \\<noteq> obs \\<sigma>'\\<close> and leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "have *: \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "using  obs_neq_contradicts_term ret obsne \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  \\<lbrakk>path ?\\<sigma> ?n = local.return;\n   path ?\\<sigma>' ?n' = local.return;\n   obs ?\\<sigma> \\<noteq> obs ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k k'.\n                       (?\\<sigma>', k') \\<cc> (?\\<sigma>, k) \\<and>\n                       path ?\\<sigma> k \\<in> dom local.att \\<or>\n                       (?\\<sigma>, k) \\<cc> (?\\<sigma>', k') \\<and>\n                       path ?\\<sigma>' k' \\<in> dom local.att\n  \\<pi> n = local.return\n  \\<pi>' n' = local.return\n  obs \\<sigma> \\<noteq> obs \\<sigma>'\n  \\<pi> \\<equiv> path \\<sigma>\n  \\<pi>' \\<equiv> path \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by auto"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "have leq' :\\<open>\\<sigma>' =\\<^sub>L \\<sigma>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "using leq"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "unfolding loweq_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<restriction> (- local.hvars) =\n  \\<sigma>' \\<restriction> (- local.hvars)\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<restriction> (- local.hvars) =\n    \\<sigma> \\<restriction> (- local.hvars)", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' =\\<^sub>L \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "from * contradicting_in_cop[OF leq] contradicting_in_cop[OF leq']"], ["proof (chain)\npicking this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "unfolding \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     path \\<sigma>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "by metis"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n     ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem cop_correct_ret: fixes \\<sigma> \\<sigma>' defines \\<pi>: \\<open>\\<pi> \\<equiv> path \\<sigma>\\<close> and \\<pi>': \\<open>\\<pi>' \\<equiv> path \\<sigma>'\\<close> \nassumes ret: \\<open>\\<pi> n = return\\<close> and obsne: \\<open>obs \\<sigma> i \\<noteq> obs \\<sigma>' i\\<close> and obs: \\<open>obs \\<sigma>' i \\<noteq> None\\<close> and leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "have *: \\<open>\\<exists> k k'. ((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> \\<pi> k \\<in> dom (att)) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> \\<pi>' k' \\<in> dom (att))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n       \\<pi> k \\<in> dom local.att \\<or>\n       (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n       \\<pi>' k' \\<in> dom local.att", "by (metis (no_types, lifting) \\<pi> \\<pi>' obs obs_neq_ret_contradicts obsne ret)"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "have leq' :\\<open>\\<sigma>' =\\<^sub>L \\<sigma>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "using leq"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "unfolding loweq_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<restriction> (- local.hvars) =\n  \\<sigma>' \\<restriction> (- local.hvars)\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<restriction> (- local.hvars) =\n    \\<sigma> \\<restriction> (- local.hvars)", "by auto"], ["proof (state)\nthis:\n  \\<sigma>' =\\<^sub>L \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "from * contradicting_in_cop[OF leq] contradicting_in_cop[OF leq']"], ["proof (chain)\npicking this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     \\<pi> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     \\<pi>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "unfolding \\<pi> \\<pi>'"], ["proof (prove)\nusing this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     path \\<sigma>' k' \\<in> dom local.att\n  \\<lbrakk>(\\<sigma>', ?k') \\<cc> (\\<sigma>, ?k);\n   path \\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, ?k), \\<sigma>', ?k') \\<in> cop\n  \\<lbrakk>(\\<sigma>, ?k') \\<cc> (\\<sigma>', ?k);\n   path \\<sigma>' ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>', ?k), \\<sigma>, ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "by metis"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n     ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem cop_correct_nterm: assumes obsne: \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k\\<close> \\<open>obs \\<sigma> k \\<noteq> None\\<close> \\<open>obs \\<sigma>' k \\<noteq> None\\<close> \nand leq: \\<open>\\<sigma> =\\<^sub>L \\<sigma>'\\<close>\nshows \\<open>\\<exists> k k'. ((\\<sigma>,k),\\<sigma>',k')\\<in> cop \\<or> ((\\<sigma>',k'),\\<sigma>,k)\\<in> cop\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "obtain k k' where \\<open>((\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> path \\<sigma> k \\<in> dom att) \\<or> ((\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> path \\<sigma>' k' \\<in> dom att)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k' k.\n        (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n        path \\<sigma> k \\<in> dom local.att \\<or>\n        (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n        path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obs_neq_some_contradicts[OF obsne]"], ["proof (prove)\nusing this:\n  \\<exists>k k'.\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att \\<or>\n     (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n     path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. (\\<And>k' k.\n        (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n        path \\<sigma> k \\<in> dom local.att \\<or>\n        (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n        path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att \\<or>\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n 2. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "assume *: \\<open>(\\<sigma>', k') \\<cc> (\\<sigma> ,k) \\<and> path \\<sigma> k \\<in> dom att\\<close>"], ["proof (state)\nthis:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n 2. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "hence \\<open>((\\<sigma>,k),\\<sigma>',k') \\<in> cop\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "using leq"], ["proof (prove)\nusing this:\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "by (metis contradicting_in_cop)"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (2 subgoals):\n 1. (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n 2. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "using *"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n     ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal (1 subgoal):\n 1. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "assume *: \\<open>(\\<sigma>, k) \\<cc> (\\<sigma>' ,k') \\<and> path \\<sigma>' k' \\<in> dom att\\<close>"], ["proof (state)\nthis:\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "hence \\<open>((\\<sigma>',k'),\\<sigma>,k) \\<in> cop\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "using leq"], ["proof (prove)\nusing this:\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "by (metis contradicting_in_cop loweq_def)"], ["proof (state)\nthis:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal (1 subgoal):\n 1. (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n    path \\<sigma>' k' \\<in> dom local.att \\<Longrightarrow>\n    \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "using *"], ["proof (prove)\nusing this:\n  ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n  (\\<sigma>, k) \\<cc> (\\<sigma>', k') \\<and>\n  path \\<sigma>' k' \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<exists>k k'.\n       ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n       ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop", "by blast"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n     ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k k'.\n     ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<or>\n     ((\\<sigma>', k'), \\<sigma>, k) \\<in> cop\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Correctness of the Characterisation\\<close>"], ["", "text_raw \\<open>\\label{sec:cor-cp}\\<close>"], ["", "text \\<open>The following is our main correctness result. If there exist no critical observable paths,\nthen the program is secure.\\<close>"], ["", "theorem cop_correct: assumes \\<open>cop = empty\\<close> shows \\<open>secure\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> secure \\<Longrightarrow> False", "assume \\<open>\\<not> secure\\<close>"], ["proof (state)\nthis:\n  \\<not> secure\n\ngoal (1 subgoal):\n 1. \\<not> secure \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> secure", "obtain \\<sigma> \\<sigma>' where leq: \\<open> \\<sigma> =\\<^sub>L \\<sigma>'\\<close> \n    and **: \\<open>\\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<or> (terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> secure\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<sigma>'.\n        \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n         \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<or>\n         terminates \\<sigma> \\<and>\n         \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding secure_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<sigma> \\<sigma>'.\n             \\<sigma> =\\<^sub>L \\<sigma>' \\<longrightarrow>\n             obs \\<sigma> \\<approx> obs \\<sigma>' \\<and>\n             (terminates \\<sigma> \\<longrightarrow>\n              obs \\<sigma>' \\<lesssim> obs \\<sigma>))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<sigma>'.\n        \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n         \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<or>\n         terminates \\<sigma> \\<and>\n         \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<or>\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> secure \\<Longrightarrow> False", "show \\<open>False\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using **"], ["proof (prove)\nusing this:\n  \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<or>\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<Longrightarrow> False\n 2. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "assume \\<open>\\<not> obs \\<sigma> \\<approx> obs \\<sigma>'\\<close>"], ["proof (state)\nthis:\n  \\<not> obs \\<sigma> \\<approx> obs \\<sigma>'\n\ngoal (2 subgoals):\n 1. \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<Longrightarrow> False\n 2. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> obs \\<sigma> \\<approx> obs \\<sigma>'", "obtain k where \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and> obs \\<sigma> k \\<noteq> None \\<and> obs \\<sigma>' k \\<noteq> None\\<close>"], ["proof (prove)\nusing this:\n  \\<not> obs \\<sigma> \\<approx> obs \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n        obs \\<sigma> k \\<noteq> None \\<and>\n        obs \\<sigma>' k \\<noteq> None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding obs_comp_def obs_prefix_def"], ["proof (prove)\nusing this:\n  \\<not> ((\\<forall>i.\n              obs \\<sigma> i \\<noteq> None \\<longrightarrow>\n              obs \\<sigma> i = obs \\<sigma>' i) \\<or>\n          (\\<forall>i.\n              obs \\<sigma>' i \\<noteq> None \\<longrightarrow>\n              obs \\<sigma>' i = obs \\<sigma> i))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n        obs \\<sigma> k \\<noteq> None \\<and>\n        obs \\<sigma>' k \\<noteq> None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis kth_obs_stable linorder_neqE_nat obs_none_no_kth_obs obs_some_kth_obs)"], ["proof (state)\nthis:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma> k \\<noteq> None \\<and> obs \\<sigma>' k \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<not> obs \\<sigma> \\<approx> obs \\<sigma>' \\<Longrightarrow> False\n 2. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma> k \\<noteq> None \\<and> obs \\<sigma>' k \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using cop_correct_nterm leq assms"], ["proof (prove)\nusing this:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma> k \\<noteq> None \\<and> obs \\<sigma>' k \\<noteq> None\n  \\<lbrakk>obs ?\\<sigma> ?k \\<noteq> obs ?\\<sigma>' ?k;\n   obs ?\\<sigma> ?k \\<noteq> None; obs ?\\<sigma>' ?k \\<noteq> None;\n   ?\\<sigma> =\\<^sub>L ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k k'.\n                       ((?\\<sigma>, k), ?\\<sigma>', k') \\<in> cop \\<or>\n                       ((?\\<sigma>', k'), ?\\<sigma>, k) \\<in> cop\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cop = {}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "assume *: \\<open>terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\\<close>"], ["proof (state)\nthis:\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>", "obtain n where ret: \\<open>path \\<sigma> n = return\\<close>"], ["proof (prove)\nusing this:\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path \\<sigma> n = local.return \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding terminates_def"], ["proof (prove)\nusing this:\n  (\\<exists>i. path \\<sigma> i = local.return) \\<and>\n  \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        path \\<sigma> n = local.return \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  path \\<sigma> n = local.return\n\ngoal (1 subgoal):\n 1. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "obtain k where \\<open>obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and> obs \\<sigma>' k \\<noteq> None\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n        obs \\<sigma>' k \\<noteq> None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using *"], ["proof (prove)\nusing this:\n  terminates \\<sigma> \\<and> \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n        obs \\<sigma>' k \\<noteq> None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding obs_prefix_def"], ["proof (prove)\nusing this:\n  terminates \\<sigma> \\<and>\n  \\<not> (\\<forall>i.\n             obs \\<sigma>' i \\<noteq> None \\<longrightarrow>\n             obs \\<sigma>' i = obs \\<sigma> i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n        obs \\<sigma>' k \\<noteq> None \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma>' k \\<noteq> None\n\ngoal (1 subgoal):\n 1. terminates \\<sigma> \\<and>\n    \\<not> obs \\<sigma>' \\<lesssim> obs \\<sigma> \\<Longrightarrow>\n    False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma>' k \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using cop_correct_ret ret leq assms"], ["proof (prove)\nusing this:\n  obs \\<sigma> k \\<noteq> obs \\<sigma>' k \\<and>\n  obs \\<sigma>' k \\<noteq> None\n  \\<lbrakk>path ?\\<sigma> ?n = local.return;\n   obs ?\\<sigma> ?i \\<noteq> obs ?\\<sigma>' ?i;\n   obs ?\\<sigma>' ?i \\<noteq> None; ?\\<sigma> =\\<^sub>L ?\\<sigma>'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k k'.\n                       ((?\\<sigma>, k), ?\\<sigma>', k') \\<in> cop \\<or>\n                       ((?\\<sigma>', k'), ?\\<sigma>, k) \\<in> cop\n  path \\<sigma> n = local.return\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cop = {}\n\ngoal (1 subgoal):\n 1. False", "by (metis empty_iff)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Our characterisation is not only correct, it is also precise in the way that \\<open>cp\\<close> characterises \nexactly the matching indices in executions for low equivalent input states where diverging data is read. \nThis follows easily as the inverse implication to lemma \\<open>contradicting_in_cp\\<close> can be shown by simple induction.\\<close>"], ["", "theorem cp_iff_reads_contradict: \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cp \\<longleftrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and> cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and> (\\<exists> v\\<in>reads(path \\<sigma> k). (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<sigma>, k), \\<sigma>', k') \\<in> cp) =\n    (\\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n     cs\\<^bsup>path \\<sigma>\\<^esup> k =\n     cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n     (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n         (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n         (\\<sigma>'\\<^bsup>k'\\<^esup>) v))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n 2. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "assume \\<open>\\<sigma> =\\<^sub>L \\<sigma>' \\<and> cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and> (\\<exists>v\\<in>reads (path \\<sigma> k). (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<close>"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (2 subgoals):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n 2. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v) \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "thus \\<open>((\\<sigma>, k), \\<sigma>', k') \\<in> cp\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "using contradicting_in_cp"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n  \\<lbrakk>?\\<sigma> =\\<^sub>L ?\\<sigma>';\n   cs\\<^bsup>path ?\\<sigma>\\<^esup> ?k =\n   cs\\<^bsup>path ?\\<sigma>'\\<^esup> ?k';\n   ?v \\<in> local.reads (path ?\\<sigma> ?k);\n   (?\\<sigma>\\<^bsup>?k\\<^esup>) ?v \\<noteq>\n   (?\\<sigma>'\\<^bsup>?k'\\<^esup>) ?v\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp", "by blast"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)", "assume \\<open>((\\<sigma>, k), \\<sigma>', k') \\<in> cp\\<close>"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cp \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)", "thus \\<open>\\<sigma> =\\<^sub>L \\<sigma>' \\<and> cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and> (\\<exists>v\\<in>reads (path \\<sigma> k). (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> k =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n        (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v)", "proof (induction)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "case (1 \\<sigma> \\<sigma>' n n' h)"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  h \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) h\n  \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k)\n  \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "then"], ["proof (chain)\npicking this:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  h \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) h\n  \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k)\n  \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  h \\<in> local.reads (path \\<sigma> n)\n  (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) h\n  \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k)\n  \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> n =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v)", "by blast"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> n =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n      (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "case (2 \\<sigma> k \\<sigma>' k' n v n')"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "have \\<open>v\\<in>reads (path \\<sigma> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "using 2(2)"], ["proof (prove)\nusing this:\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path (path \\<sigma>) \\<and>\n  k < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> k) \\<and>\n  (\\<forall>l\\<in>{k<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma> n)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "then"], ["proof (chain)\npicking this:\n  v \\<in> local.reads (path \\<sigma> n)", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> n)\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> n =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v)", "using 2"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> n)\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> n =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v)", "by auto"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> n =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n      (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "case (3 \\<sigma> k \\<sigma>' k' n v l n')"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n  \\<forall>j'\\<in>{LEAST i'.\n                      k' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                          cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n     v \\<notin> local.writes (path \\<sigma>' j')\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "have \\<open>v\\<in>reads (path \\<sigma> n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "using 3(2)"], ["proof (prove)\nusing this:\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path (path \\<sigma>) \\<and>\n  l < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> l) \\<and>\n  (\\<forall>l\\<in>{l<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma> n)", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma> n)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v);\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         cs\\<^bsup>path \\<sigma>\\<^esup> n =\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n                             (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n                             (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "then"], ["proof (chain)\npicking this:\n  v \\<in> local.reads (path \\<sigma> n)", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> n)\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> n =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v)", "using 3(4,6,8)"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma> n)\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    cs\\<^bsup>path \\<sigma>\\<^esup> n =\n    cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v)", "by auto"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> n =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> n' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> n).\n      (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>n'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "case (4 \\<sigma> k \\<sigma>' k')"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "hence \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'", "by simp"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "hence \\<open>path \\<sigma>' k' = path \\<sigma> k\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. path \\<sigma>' k' = path \\<sigma> k", "by (metis last_cs)"], ["proof (state)\nthis:\n  path \\<sigma>' k' = path \\<sigma> k\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "moreover"], ["proof (state)\nthis:\n  path \\<sigma>' k' = path \\<sigma> k\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "have \\<open>\\<sigma>' =\\<^sub>L \\<sigma>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "using 4(2)"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma>", "unfolding loweq_def"], ["proof (prove)\nusing this:\n  \\<sigma> \\<restriction> (- local.hvars) =\n  \\<sigma>' \\<restriction> (- local.hvars) \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<sigma>' \\<restriction> (- local.hvars) =\n    \\<sigma> \\<restriction> (- local.hvars)", "by simp"], ["proof (state)\nthis:\n  \\<sigma>' =\\<^sub>L \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n        cs\\<^bsup>path \\<sigma>\\<^esup> k =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n        (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n            (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n            (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\\<rbrakk>\n       \\<Longrightarrow> \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n                         cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n                         cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n                         (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n                             (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n                             (\\<sigma>\\<^bsup>k\\<^esup>) v)", "ultimately"], ["proof (chain)\npicking this:\n  path \\<sigma>' k' = path \\<sigma> k\n  \\<sigma>' =\\<^sub>L \\<sigma>", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma>' k' = path \\<sigma> k\n  \\<sigma>' =\\<^sub>L \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n    cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n        (\\<sigma>\\<^bsup>k\\<^esup>) v)", "using 4"], ["proof (prove)\nusing this:\n  path \\<sigma>' k' = path \\<sigma> k\n  \\<sigma>' =\\<^sub>L \\<sigma>\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal (1 subgoal):\n 1. \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n    cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n    cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n    (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n        (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n        (\\<sigma>\\<^bsup>k\\<^esup>) v)", "by metis"], ["proof (state)\nthis:\n  \\<sigma>' =\\<^sub>L \\<sigma> \\<and>\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n  cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma>' k').\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v \\<noteq>\n      (\\<sigma>\\<^bsup>k\\<^esup>) v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  cs\\<^bsup>path \\<sigma>\\<^esup> k =\n  cs\\<^bsup>path \\<sigma>'\\<^esup> k' \\<and>\n  (\\<exists>v\\<in>local.reads (path \\<sigma> k).\n      (\\<sigma>\\<^bsup>k\\<^esup>) v \\<noteq>\n      (\\<sigma>'\\<^bsup>k'\\<^esup>) v)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>In the same way the inverse implication to \\<open>contradicting_in_cop\\<close> follows easily \nsuch that we obtain the following characterisation of \\<open>cop\\<close>.\\<close>"], ["", "theorem cop_iff_contradicting: \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cop \\<longleftrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and> (\\<sigma>',k') \\<cc> (\\<sigma>,k) \\<and> path \\<sigma> k \\<in> dom att\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<sigma>, k), \\<sigma>', k') \\<in> cop) =\n    (\\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n     (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n     path \\<sigma> k \\<in> dom local.att)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att\n 2. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "assume \\<open>\\<sigma> =\\<^sub>L \\<sigma>' \\<and> (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and> path \\<sigma> k \\<in> dom att\\<close>"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att\n 2. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att \\<Longrightarrow>\n    ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "thus \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cop\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "using contradicting_in_cop"], ["proof (prove)\nusing this:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n  \\<lbrakk>?\\<sigma> =\\<^sub>L ?\\<sigma>';\n   (?\\<sigma>', ?k') \\<cc> (?\\<sigma>, ?k);\n   path ?\\<sigma> ?k \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "assume \\<open>((\\<sigma>,k),(\\<sigma>',k')) \\<in> cop\\<close>"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, k), \\<sigma>', k') \\<in> cop \\<Longrightarrow>\n    \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "thus \\<open> \\<sigma> =\\<^sub>L \\<sigma>' \\<and> (\\<sigma>',k') \\<cc> (\\<sigma>,k) \\<and> path \\<sigma> k \\<in> dom att\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "proof (cases rule: cop.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n     path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                      (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                      path \\<sigma> k \\<in> dom local.att\n 2. \\<And>ka.\n       \\<lbrakk>((\\<sigma>, ka), \\<sigma>', k') \\<in> cp;\n        k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n        path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                         path \\<sigma> k \\<in> dom local.att", "case 1"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (2 subgoals):\n 1. \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n     path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n    \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                      (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                      path \\<sigma> k \\<in> dom local.att\n 2. \\<And>ka.\n       \\<lbrakk>((\\<sigma>, ka), \\<sigma>', k') \\<in> cp;\n        k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n        path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                         path \\<sigma> k \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "using cp_iff_reads_contradict contradicts.simps"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  path \\<sigma> k \\<in> dom local.att\n  (((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp) =\n  (?\\<sigma> =\\<^sub>L ?\\<sigma>' \\<and>\n   cs\\<^bsup>path ?\\<sigma>\\<^esup> ?k =\n   cs\\<^bsup>path ?\\<sigma>'\\<^esup> ?k' \\<and>\n   (\\<exists>v\\<in>local.reads (path ?\\<sigma> ?k).\n       (?\\<sigma>\\<^bsup>?k\\<^esup>) v \\<noteq>\n       (?\\<sigma>'\\<^bsup>?k'\\<^esup>) v))\n  (?a1.0 \\<cc> ?a2.0) =\n  ((\\<exists>\\<pi>' k' \\<pi> k \\<sigma> \\<sigma>'.\n       ?a1.0 = (\\<sigma>', k') \\<and>\n       ?a2.0 = (\\<sigma>, k) \\<and>\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k \\<and>\n       \\<pi> = path \\<sigma> \\<and>\n       \\<pi>' = path \\<sigma>' \\<and>\n       \\<pi>\n        (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n       \\<pi>' (Suc k')) \\<or>\n   (\\<exists>\\<pi>' k' \\<pi> k \\<sigma> \\<sigma>'.\n       ?a1.0 = (\\<sigma>', k') \\<and>\n       ?a2.0 = (\\<sigma>, k) \\<and>\n       cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k \\<and>\n       \\<pi> = path \\<sigma> \\<and>\n       \\<pi>' = path \\<sigma>' \\<and>\n       \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n       local.reads (\\<pi> k) \\<noteq>\n       \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (\\<pi> k)))\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "by (metis (full_types) reads_restrict1)"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>((\\<sigma>, ka), \\<sigma>', k') \\<in> cp;\n        k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n        path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                         path \\<sigma> k \\<in> dom local.att", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>((\\<sigma>, ka), \\<sigma>', k') \\<in> cp;\n        k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n        path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                         path \\<sigma> k \\<in> dom local.att", "case (2 k)"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>((\\<sigma>, ka), \\<sigma>', k') \\<in> cp;\n        k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> ka;\n        path \\<sigma> (Suc ka) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> k \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n                         (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n                         path \\<sigma> k \\<in> dom local.att", "then"], ["proof (chain)\npicking this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att", "show \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "using cp_iff_reads_contradict contradicts.simps"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  k cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  path \\<sigma> k \\<in> dom local.att\n  (((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp) =\n  (?\\<sigma> =\\<^sub>L ?\\<sigma>' \\<and>\n   cs\\<^bsup>path ?\\<sigma>\\<^esup> ?k =\n   cs\\<^bsup>path ?\\<sigma>'\\<^esup> ?k' \\<and>\n   (\\<exists>v\\<in>local.reads (path ?\\<sigma> ?k).\n       (?\\<sigma>\\<^bsup>?k\\<^esup>) v \\<noteq>\n       (?\\<sigma>'\\<^bsup>?k'\\<^esup>) v))\n  (?a1.0 \\<cc> ?a2.0) =\n  ((\\<exists>\\<pi>' k' \\<pi> k \\<sigma> \\<sigma>'.\n       ?a1.0 = (\\<sigma>', k') \\<and>\n       ?a2.0 = (\\<sigma>, k) \\<and>\n       cs\\<^bsup>\\<pi>'\\<^esup> k' \\<prec> cs\\<^bsup>\\<pi>\\<^esup> k \\<and>\n       \\<pi> = path \\<sigma> \\<and>\n       \\<pi>' = path \\<sigma>' \\<and>\n       \\<pi>\n        (Suc (\\<pi> \\<exclamdown> cs\\<^bsup>\\<pi>'\\<^esup> k')) \\<noteq>\n       \\<pi>' (Suc k')) \\<or>\n   (\\<exists>\\<pi>' k' \\<pi> k \\<sigma> \\<sigma>'.\n       ?a1.0 = (\\<sigma>', k') \\<and>\n       ?a2.0 = (\\<sigma>, k) \\<and>\n       cs\\<^bsup>\\<pi>'\\<^esup> k' = cs\\<^bsup>\\<pi>\\<^esup> k \\<and>\n       \\<pi> = path \\<sigma> \\<and>\n       \\<pi>' = path \\<sigma>' \\<and>\n       \\<sigma>\\<^bsup>k\\<^esup> \\<restriction>\n       local.reads (\\<pi> k) \\<noteq>\n       \\<sigma>'\\<^bsup>k'\\<^esup> \\<restriction> local.reads (\\<pi> k)))\n\ngoal (1 subgoal):\n 1. \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n    (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n    path \\<sigma> k \\<in> dom local.att", "by (metis cd_is_cs_less cd_not_ret contradicts.intros(1) cs_select_id path_is_path)"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>' \\<and>\n  (\\<sigma>', k') \\<cc> (\\<sigma>, k) \\<and>\n  path \\<sigma> k \\<in> dom local.att\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Correctness of the Single Path Approximation\\<close>"], ["", "text_raw \\<open>\\label{sec:cor-scp}\\<close>"], ["", "theorem cp_in_scp: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cp\\<close> shows \\<open>(path \\<sigma>,k)\\<in>scp \\<and> (path \\<sigma>',k')\\<in>scp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp", "proof(induction \\<open>\\<sigma>\\<close> \\<open>k\\<close> \\<open>\\<sigma>'\\<close> \\<open>k'\\<close> rule:cp.induct[case_names read_high dd dcd sym])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "case (read_high \\<sigma> \\<sigma>' k k' h)"], ["proof (state)\nthis:\n  \\<sigma> =\\<^sub>L \\<sigma>'\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  h \\<in> local.reads (path \\<sigma> k)\n  (\\<sigma>\\<^bsup>k\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) h\n  \\<forall>k<k. h \\<notin> local.writes (path \\<sigma> k)\n  \\<forall>k'<k'. h \\<notin> local.writes (path \\<sigma>' k')\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "have \\<open>\\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h", "using read_high(5)"], ["proof (prove)\nusing this:\n  \\<forall>k<k. h \\<notin> local.writes (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h", "by (simp add: no_writes_unchanged0)"], ["proof (state)\nthis:\n  \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "moreover"], ["proof (state)\nthis:\n  \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "have \\<open>\\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h", "using read_high(6)"], ["proof (prove)\nusing this:\n  \\<forall>k'<k'. h \\<notin> local.writes (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h", "by (simp add: no_writes_unchanged0)"], ["proof (state)\nthis:\n  \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\n  \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h", "have \\<open>\\<sigma> h \\<noteq> \\<sigma>' h\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\n  \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h\n\ngoal (1 subgoal):\n 1. \\<sigma> h \\<noteq> \\<sigma>' h", "using read_high(4)"], ["proof (prove)\nusing this:\n  \\<sigma> h = (\\<sigma>\\<^bsup>k\\<^esup>) h\n  \\<sigma>' h = (\\<sigma>'\\<^bsup>k'\\<^esup>) h\n  (\\<sigma>\\<^bsup>k\\<^esup>) h \\<noteq> (\\<sigma>'\\<^bsup>k'\\<^esup>) h\n\ngoal (1 subgoal):\n 1. \\<sigma> h \\<noteq> \\<sigma>' h", "by simp"], ["proof (state)\nthis:\n  \\<sigma> h \\<noteq> \\<sigma>' h\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "hence *: \\<open>h\\<in>hvars\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> h \\<noteq> \\<sigma>' h\n\ngoal (1 subgoal):\n 1. h \\<in> local.hvars", "using read_high(1)"], ["proof (prove)\nusing this:\n  \\<sigma> h \\<noteq> \\<sigma>' h\n  \\<sigma> =\\<^sub>L \\<sigma>'\n\ngoal (1 subgoal):\n 1. h \\<in> local.hvars", "unfolding loweq_def"], ["proof (prove)\nusing this:\n  \\<sigma> h \\<noteq> \\<sigma>' h\n  \\<sigma> \\<restriction> (- local.hvars) =\n  \\<sigma>' \\<restriction> (- local.hvars)\n\ngoal (1 subgoal):\n 1. h \\<in> local.hvars", "by (metis Compl_iff IFC_def.restrict_def)"], ["proof (state)\nthis:\n  h \\<in> local.hvars\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "have 1: \\<open>(path \\<sigma>,k)\\<in>scp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp", "using scp.intros(1) read_high(3,5) *"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h \\<in> local.hvars; ?h \\<in> local.reads (path ?\\<sigma> ?n);\n   \\<forall>k<?n. ?h \\<notin> local.writes (path ?\\<sigma> k)\\<rbrakk>\n  \\<Longrightarrow> (path ?\\<sigma>, ?n) \\<in> scp\n  h \\<in> local.reads (path \\<sigma> k)\n  \\<forall>k<k. h \\<notin> local.writes (path \\<sigma> k)\n  h \\<in> local.hvars\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp", "by auto"], ["proof (state)\nthis:\n  (path \\<sigma>, k) \\<in> scp\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "have \\<open>path \\<sigma> k = path \\<sigma>' k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> k = path \\<sigma>' k'", "using read_high(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. path \\<sigma> k = path \\<sigma>' k'", "by (metis last_cs)"], ["proof (state)\nthis:\n  path \\<sigma> k = path \\<sigma>' k'\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "hence \\<open>(path \\<sigma>',k')\\<in>scp\\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma> k = path \\<sigma>' k'\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', k') \\<in> scp", "using scp.intros(1) read_high(3,6) *"], ["proof (prove)\nusing this:\n  path \\<sigma> k = path \\<sigma>' k'\n  \\<lbrakk>?h \\<in> local.hvars; ?h \\<in> local.reads (path ?\\<sigma> ?n);\n   \\<forall>k<?n. ?h \\<notin> local.writes (path ?\\<sigma> k)\\<rbrakk>\n  \\<Longrightarrow> (path ?\\<sigma>, ?n) \\<in> scp\n  h \\<in> local.reads (path \\<sigma> k)\n  \\<forall>k'<k'. h \\<notin> local.writes (path \\<sigma>' k')\n  h \\<in> local.hvars\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', k') \\<in> scp", "by auto"], ["proof (state)\nthis:\n  (path \\<sigma>', k') \\<in> scp\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<sigma>' n n' h.\n       \\<lbrakk>\\<sigma> =\\<^sub>L \\<sigma>';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        h \\<in> local.reads (path \\<sigma> n);\n        (\\<sigma>\\<^bsup>n\\<^esup>) h \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) h;\n        \\<forall>k<n. h \\<notin> local.writes (path \\<sigma> k);\n        \\<forall>k'<n'. h \\<notin> local.writes (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 4. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (path \\<sigma>', k') \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp", "using 1"], ["proof (prove)\nusing this:\n  (path \\<sigma>', k') \\<in> scp\n  (path \\<sigma>, k) \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp", "by auto"], ["proof (state)\nthis:\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "case dd"], ["proof (state)\nthis:\n  ((\\<sigma>_, k_), \\<sigma>'_, k'_) \\<in> cp\n  n_ dd\\<^bsup>path \\<sigma>_,v_\\<^esup>\\<rightarrow> k_\n  n'_ dd\\<^bsup>path \\<sigma>'_,v_\\<^esup>\\<rightarrow> k'_\n  cs\\<^bsup>path \\<sigma>_\\<^esup> n_ =\n  cs\\<^bsup>path \\<sigma>'_\\<^esup> n'_\n  (\\<sigma>_\\<^bsup>n_\\<^esup>) v_ \\<noteq>\n  (\\<sigma>'_\\<^bsup>n'_\\<^esup>) v_\n  (path \\<sigma>_, k_) \\<in> scp \\<and> (path \\<sigma>'_, k'_) \\<in> scp\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> k;\n        n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k';\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 3. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "show \\<open>?case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>_, n_) \\<in> scp \\<and> (path \\<sigma>'_, n'_) \\<in> scp", "using scp.intros(3) dd"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  ((\\<sigma>_, k_), \\<sigma>'_, k'_) \\<in> cp\n  n_ dd\\<^bsup>path \\<sigma>_,v_\\<^esup>\\<rightarrow> k_\n  n'_ dd\\<^bsup>path \\<sigma>'_,v_\\<^esup>\\<rightarrow> k'_\n  cs\\<^bsup>path \\<sigma>_\\<^esup> n_ =\n  cs\\<^bsup>path \\<sigma>'_\\<^esup> n'_\n  (\\<sigma>_\\<^bsup>n_\\<^esup>) v_ \\<noteq>\n  (\\<sigma>'_\\<^bsup>n'_\\<^esup>) v_\n  (path \\<sigma>_, k_) \\<in> scp \\<and> (path \\<sigma>'_, k'_) \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>_, n_) \\<in> scp \\<and> (path \\<sigma>'_, n'_) \\<in> scp", "by auto"], ["proof (state)\nthis:\n  (path \\<sigma>_, n_) \\<in> scp \\<and> (path \\<sigma>'_, n'_) \\<in> scp\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "case sym"], ["proof (state)\nthis:\n  ((\\<sigma>_, k_), \\<sigma>'_, k'_) \\<in> cp\n  (path \\<sigma>_, k_) \\<in> scp \\<and> (path \\<sigma>'_, k'_) \\<in> scp\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and>\n        (path \\<sigma>', k') \\<in> scp\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>', k') \\<in> scp \\<and>\n                         (path \\<sigma>, k) \\<in> scp", "thus \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>_, k_), \\<sigma>'_, k'_) \\<in> cp\n  (path \\<sigma>_, k_) \\<in> scp \\<and> (path \\<sigma>'_, k'_) \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>'_, k'_) \\<in> scp \\<and> (path \\<sigma>_, k_) \\<in> scp", "by blast"], ["proof (state)\nthis:\n  (path \\<sigma>'_, k'_) \\<in> scp \\<and> (path \\<sigma>_, k_) \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "case (dcd \\<sigma> k \\<sigma>' k' n v l n')"], ["proof (state)\nthis:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cp\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k')\n  (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq> (\\<sigma>'\\<^bsup>n'\\<^esup>) v\n  \\<forall>j'\\<in>{LEAST i'.\n                      k' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                          cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n     v \\<notin> local.writes (path \\<sigma>' j')\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "note scp.intros(4) is_dcdi_via_def cd_cs_swap cs_ipd"], ["proof (state)\nthis:\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp; (?\\<pi>', ?m') \\<in> scp;\n   ?n dcd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m via ?\\<pi>' ?m'\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  (?n dcd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m via ?\\<pi>' ?m') =\n  (is_path ?\\<pi> \\<and>\n   ?m < ?n \\<and>\n   (\\<exists>l' n'.\n       cs\\<^bsup>?\\<pi>\\<^esup> ?m = cs\\<^bsup>?\\<pi>'\\<^esup> ?m' \\<and>\n       cs\\<^bsup>?\\<pi>\\<^esup> ?n = cs\\<^bsup>?\\<pi>'\\<^esup> n' \\<and>\n       n' dd\\<^bsup>?\\<pi>',?v\\<^esup>\\<rightarrow> l' \\<and>\n       l' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> ?m') \\<and>\n   (\\<forall>l\\<in>{?m..<?n}. ?v \\<notin> local.writes (?\\<pi> l)))\n  \\<lbrakk>?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?l = cs\\<^bsup>?\\<pi>'\\<^esup> ?l';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> ?k'\\<rbrakk>\n  \\<Longrightarrow> ?l' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> ?k'\n  \\<lbrakk>?\\<pi> ?m = ipd (?\\<pi> ?k);\n   \\<forall>n\\<in>{?k..<?m}. ?\\<pi> n \\<noteq> ipd (?\\<pi> ?k);\n   ?k < ?m\\<rbrakk>\n  \\<Longrightarrow> cs\\<^bsup>?\\<pi>\\<^esup> ?m =\n                    filter (\\<lambda>n. ipd n \\<noteq> ?\\<pi> ?m)\n                     (cs\\<^bsup>?\\<pi>\\<^esup> ?k) @\n                    [?\\<pi> ?m]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have 1: \\<open>(path \\<sigma>, n)\\<in>scp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>, n) \\<in> scp", "using dcd.IH dcd.hyps(2) dcd.hyps(3) scp.intros(2) scp.intros(3)"], ["proof (prove)\nusing this:\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, n) \\<in> scp", "by blast"], ["proof (state)\nthis:\n  (path \\<sigma>, n) \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have csk: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'", "using cp_eq_cs[OF dcd(1)]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'", "."], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have kn: \\<open>k<n\\<close> and kl: \\<open>k<l\\<close> and ln: \\<open>l<n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < n &&& k < l &&& l < n", "using dcd(2,3)"], ["proof (prove)\nusing this:\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. k < n &&& k < l &&& l < n", "unfolding is_ddi_def is_cdi_def"], ["proof (prove)\nusing this:\n  is_path (path \\<sigma>) \\<and>\n  l < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> l) \\<and>\n  (\\<forall>l\\<in>{l<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n  is_path (path \\<sigma>) \\<and>\n  k < l \\<and>\n  path \\<sigma> l \\<noteq> local.return \\<and>\n  (\\<forall>j\\<in>{k..l}. path \\<sigma> j \\<noteq> ipd (path \\<sigma> k))\n\ngoal (1 subgoal):\n 1. k < n &&& k < l &&& l < n", "by auto"], ["proof (state)\nthis:\n  k < n\n  k < l\n  l < n\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have nret: \\<open>path \\<sigma> k \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma> k \\<noteq> local.return", "using cd_not_ret dcd.hyps(3)"], ["proof (prove)\nusing this:\n  ?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k \\<Longrightarrow>\n  ?\\<pi> ?k \\<noteq> local.return\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. path \\<sigma> k \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  path \\<sigma> k \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have \\<open>k' < n'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < n'", "using kn csk dcd(4) cs_order nret path_is_path last_cs"], ["proof (prove)\nusing this:\n  k < n\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  \\<lbrakk>is_path ?\\<pi>; is_path ?\\<pi>';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?i = cs\\<^bsup>?\\<pi>'\\<^esup> ?i';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?j = cs\\<^bsup>?\\<pi>'\\<^esup> ?j';\n   ?\\<pi> ?i \\<noteq> local.return; ?i < ?j\\<rbrakk>\n  \\<Longrightarrow> ?i' < ?j'\n  path \\<sigma> k \\<noteq> local.return\n  is_path (path ?\\<sigma>)\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. k' < n'", "by blast"], ["proof (state)\nthis:\n  k' < n'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "have 2: \\<open>(path \\<sigma>', n')\\<in>scp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "assume j'ex: \\<open>\\<exists>j'\\<in>{k'..<n'}. v \\<in> writes (path \\<sigma>' j')\\<close>"], ["proof (state)\nthis:\n  \\<exists>j'\\<in>{k'..<n'}. v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>\\<exists>j'. j'\\<in>{k'..<n'} \\<and> v \\<in> writes (path \\<sigma>' j')\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>j'\\<in>{k'..<n'}. v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. \\<exists>j'.\n       j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j')", "by auto"], ["proof (state)\nthis:\n  \\<exists>j'.\n     j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "note * = GreatestI_ex_nat[OF this]"], ["proof (state)\nthis:\n  (\\<And>y.\n      y \\<in> {k'..<n'} \\<and>\n      v \\<in> local.writes (path \\<sigma>' y) \\<Longrightarrow>\n      y \\<le> ?b) \\<Longrightarrow>\n  (GREATEST j'.\n      j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j'))\n  \\<in> {k'..<n'} \\<and>\n  v \\<in> local.writes\n           (path \\<sigma>'\n             (GREATEST j'.\n                 j' \\<in> {k'..<n'} \\<and>\n                 v \\<in> local.writes (path \\<sigma>' j')))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "define j' where \\<open>j' == GREATEST j'. j'\\<in>{k'..<n'} \\<and> v \\<in> writes (path \\<sigma>' j')\\<close>"], ["proof (state)\nthis:\n  j' \\<equiv>\n  GREATEST j'.\n     j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "note ** = *[of \\<open>j'\\<close>,folded j'_def]"], ["proof (state)\nthis:\n  (\\<And>y.\n      y \\<in> {k'..<n'} \\<and>\n      v \\<in> local.writes (path \\<sigma>' y) \\<Longrightarrow>\n      y \\<le> j') \\<Longrightarrow>\n  j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>k' \\<le> j'\\<close> \\<open>j'<n'\\<close> and j'write: \\<open>v \\<in> writes (path \\<sigma>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (k' \\<le> j' &&& j' < n') &&& v \\<in> local.writes (path \\<sigma>' j')", "using \"*\" atLeastLessThan_iff j'_def nat_less_le"], ["proof (prove)\nusing this:\n  (\\<And>y.\n      y \\<in> {k'..<n'} \\<and>\n      v \\<in> local.writes (path \\<sigma>' y) \\<Longrightarrow>\n      y \\<le> ?b) \\<Longrightarrow>\n  (GREATEST j'.\n      j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j'))\n  \\<in> {k'..<n'} \\<and>\n  v \\<in> local.writes\n           (path \\<sigma>'\n             (GREATEST j'.\n                 j' \\<in> {k'..<n'} \\<and>\n                 v \\<in> local.writes (path \\<sigma>' j')))\n  (?i \\<in> {?l..<?u}) = (?l \\<le> ?i \\<and> ?i < ?u)\n  j' \\<equiv>\n  GREATEST j'.\n     j' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' j')\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n\ngoal (1 subgoal):\n 1. (k' \\<le> j' &&& j' < n') &&& v \\<in> local.writes (path \\<sigma>' j')", "by auto"], ["proof (state)\nthis:\n  k' \\<le> j'\n  j' < n'\n  v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have nowrite: \\<open>\\<forall> i'\\<in>{j'<..<n'}. v \\<notin> writes(path \\<sigma>' i')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i'\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' i')", "proof (rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {j'<..<n'};\n        \\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<rbrakk>\n       \\<Longrightarrow> False", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {j'<..<n'};\n        \\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<rbrakk>\n       \\<Longrightarrow> False", "assume \\<open>i' \\<in> {j'<..<n'}\\<close> \\<open>\\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<close>"], ["proof (state)\nthis:\n  i' \\<in> {j'<..<n'}\n  \\<not> v \\<notin> local.writes (path \\<sigma>' i')\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {j'<..<n'};\n        \\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')\\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> {j'<..<n'}\n  \\<not> v \\<notin> local.writes (path \\<sigma>' i')\n\ngoal (1 subgoal):\n 1. i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')", "using \\<open>k' \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> {j'<..<n'}\n  \\<not> v \\<notin> local.writes (path \\<sigma>' i')\n  k' \\<le> j'\n\ngoal (1 subgoal):\n 1. i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')", "by auto"], ["proof (state)\nthis:\n  i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {j'<..<n'};\n        \\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<rbrakk>\n       \\<Longrightarrow> False", "hence \\<open>i' \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using Greatest_le_nat"], ["proof (prove)\nusing this:\n  i' \\<in> {k'..<n'} \\<and> v \\<in> local.writes (path \\<sigma>' i')\n  \\<lbrakk>?P ?k; \\<And>y. ?P y \\<Longrightarrow> y \\<le> ?b\\<rbrakk>\n  \\<Longrightarrow> ?k \\<le> Greatest ?P\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by (metis (no_types, lifting) atLeastLessThan_iff j'_def nat_less_le)"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {j'<..<n'};\n        \\<not> v \\<notin> local.writes (path \\<sigma>' i')\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>i' \\<in> {j'<..<n'}\\<close>"], ["proof (prove)\nusing this:\n  i' \\<le> j'\n  i' \\<in> {j'<..<n'}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i'\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' i')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>path \\<sigma>' n' = path \\<sigma> n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma>' n' = path \\<sigma> n", "using dcd(4) last_cs"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  last (cs\\<^bsup>?\\<pi>\\<^esup> ?i) = ?\\<pi> ?i\n\ngoal (1 subgoal):\n 1. path \\<sigma>' n' = path \\<sigma> n", "by metis"], ["proof (state)\nthis:\n  path \\<sigma>' n' = path \\<sigma> n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>v\\<in>reads(path \\<sigma>' n')\\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma>' n' = path \\<sigma> n\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma>' n')", "using dcd(2)"], ["proof (prove)\nusing this:\n  path \\<sigma>' n' = path \\<sigma> n\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma>' n')", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  path \\<sigma>' n' = path \\<sigma> n\n  is_path (path \\<sigma>) \\<and>\n  l < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> l) \\<and>\n  (\\<forall>l\\<in>{l<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.reads (path \\<sigma>' n')", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.reads (path \\<sigma>' n')\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence nddj': \\<open>n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma>' n')\n\ngoal (1 subgoal):\n 1. n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'", "using dcd(2)"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma>' n')\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n\ngoal (1 subgoal):\n 1. n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma>' n')\n  is_path (path \\<sigma>) \\<and>\n  l < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> l) \\<and>\n  (\\<forall>l\\<in>{l<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>') \\<and>\n    j' < n' \\<and>\n    v \\<in> local.reads (path \\<sigma>' n') \\<inter>\n            local.writes (path \\<sigma>' j') \\<and>\n    (\\<forall>l\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' l))", "using nowrite \\<open>j'<n'\\<close> j'write"], ["proof (prove)\nusing this:\n  v \\<in> local.reads (path \\<sigma>' n')\n  is_path (path \\<sigma>) \\<and>\n  l < n \\<and>\n  v \\<in> local.reads (path \\<sigma> n) \\<inter>\n          local.writes (path \\<sigma> l) \\<and>\n  (\\<forall>l\\<in>{l<..<n}. v \\<notin> local.writes (path \\<sigma> l))\n  \\<forall>i'\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' i')\n  j' < n'\n  v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>') \\<and>\n    j' < n' \\<and>\n    v \\<in> local.reads (path \\<sigma>' n') \\<inter>\n            local.writes (path \\<sigma>' j') \\<and>\n    (\\<forall>l\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' l))", "by auto"], ["proof (state)\nthis:\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "assume \\<open>j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (state)\nthis:\n  j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "thus \\<open>(path \\<sigma>',n') \\<in> scp\\<close>"], ["proof (prove)\nusing this:\n  j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "using scp.intros(2) scp.intros(3) dcd.IH nddj'"], ["proof (prove)\nusing this:\n  j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "by fast"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<not> j' cd\\<^bsup>path\n                         \\<sigma>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j' cd\\<^bsup>path\n                         \\<sigma>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "assume jcdk': \\<open>\\<not> j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (state)\nthis:\n  \\<not> j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<not> j' cd\\<^bsup>path\n                         \\<sigma>'\\<^esup>\\<rightarrow> k' \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "assume \\<open>j' = k'\\<close>"], ["proof (state)\nthis:\n  j' = k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp\n 2. \\<not> ?P \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  j' = k'\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "using scp.intros(3) dcd.IH nddj'"], ["proof (prove)\nusing this:\n  j' = k'\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n dd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "by fastforce"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "assume \\<open>j' \\<noteq> k'\\<close>"], ["proof (state)\nthis:\n  j' \\<noteq> k'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>k' < j'\\<close>"], ["proof (prove)\nusing this:\n  j' \\<noteq> k'\n\ngoal (1 subgoal):\n 1. k' < j'", "using \\<open>k' \\<le> j'\\<close>"], ["proof (prove)\nusing this:\n  j' \\<noteq> k'\n  k' \\<le> j'\n\ngoal (1 subgoal):\n 1. k' < j'", "by auto"], ["proof (state)\nthis:\n  k' < j'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>path \\<sigma>' j' \\<noteq> return\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. path \\<sigma>' j' \\<noteq> local.return", "using j'write writes_return"], ["proof (prove)\nusing this:\n  v \\<in> local.writes (path \\<sigma>' j')\n  local.writes local.return = {}\n\ngoal (1 subgoal):\n 1. path \\<sigma>' j' \\<noteq> local.return", "by auto"], ["proof (state)\nthis:\n  path \\<sigma>' j' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence ipdex':\\<open>\\<exists>j. j \\<in>{k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k') \\<close>"], ["proof (prove)\nusing this:\n  path \\<sigma>' j' \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')", "using path_is_path \\<open>k' < j'\\<close> jcdk' is_cdi_def"], ["proof (prove)\nusing this:\n  path \\<sigma>' j' \\<noteq> local.return\n  is_path (path ?\\<sigma>)\n  k' < j'\n  \\<not> j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n  (?i cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k) =\n  (is_path ?\\<pi> \\<and>\n   ?k < ?i \\<and>\n   ?\\<pi> ?i \\<noteq> local.return \\<and>\n   (\\<forall>j\\<in>{?k..?i}. ?\\<pi> j \\<noteq> ipd (?\\<pi> ?k)))\n\ngoal (1 subgoal):\n 1. \\<exists>j.\n       j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')", "by blast"], ["proof (state)\nthis:\n  \\<exists>j.\n     j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "define i' where \\<open>i' == LEAST j. j\\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')\\<close>"], ["proof (state)\nthis:\n  i' \\<equiv>\n  LEAST j.\n     j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have iipd': \\<open>i'\\<in> {k'..j'}\\<close> \\<open>path \\<sigma>' i' = ipd (path \\<sigma>' k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<in> {k'..j'} &&& path \\<sigma>' i' = ipd (path \\<sigma>' k')", "unfolding i'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST j.\n        j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k'))\n    \\<in> {k'..j'} &&&\n    path \\<sigma>'\n     (LEAST j.\n         j \\<in> {k'..j'} \\<and>\n         path \\<sigma>' j = ipd (path \\<sigma>' k')) =\n    ipd (path \\<sigma>' k')", "using LeastI_ex[OF ipdex']"], ["proof (prove)\nusing this:\n  (LEAST j.\n      j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k'))\n  \\<in> {k'..j'} \\<and>\n  path \\<sigma>'\n   (LEAST j.\n       j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')) =\n  ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. (LEAST j.\n        j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k'))\n    \\<in> {k'..j'} &&&\n    path \\<sigma>'\n     (LEAST j.\n         j \\<in> {k'..j'} \\<and>\n         path \\<sigma>' j = ipd (path \\<sigma>' k')) =\n    ipd (path \\<sigma>' k')", "by simp_all"], ["proof (state)\nthis:\n  i' \\<in> {k'..j'}\n  path \\<sigma>' i' = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have *:\\<open>\\<forall> i \\<in> {k'..<i'}. path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{k'..<i'}.\n       path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')", "proof (rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {k'..<i'};\n        \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {k'..<i'};\n        \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> False", "assume  *: \\<open>i \\<in> {k'..<i'}\\<close> \\<open>\\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<close>"], ["proof (state)\nthis:\n  i \\<in> {k'..<i'}\n  \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {k'..<i'};\n        \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> False", "hence **: \\<open>i \\<in>{k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')\\<close> (is \\<open>?P i\\<close>)"], ["proof (prove)\nusing this:\n  i \\<in> {k'..<i'}\n  \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. i \\<in> {k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')", "using iipd'(1)"], ["proof (prove)\nusing this:\n  i \\<in> {k'..<i'}\n  \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\n  i' \\<in> {k'..j'}\n\ngoal (1 subgoal):\n 1. i \\<in> {k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')", "by auto"], ["proof (state)\nthis:\n  i \\<in> {k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i \\<in> {k'..<i'};\n        \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. False", "using Least_le[of \\<open>?P\\<close> \\<open>i\\<close>] i'_def *"], ["proof (prove)\nusing this:\n  i \\<in> {k'..j'} \\<and> path \\<sigma>' i = ipd (path \\<sigma>' k')\n  i \\<in> {k'..j'} \\<and>\n  path \\<sigma>' i = ipd (path \\<sigma>' k') \\<Longrightarrow>\n  (LEAST x.\n      x \\<in> {k'..j'} \\<and> path \\<sigma>' x = ipd (path \\<sigma>' k'))\n  \\<le> i\n  i' \\<equiv>\n  LEAST j.\n     j \\<in> {k'..j'} \\<and> path \\<sigma>' j = ipd (path \\<sigma>' k')\n  i \\<in> {k'..<i'}\n  \\<not> path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{k'..<i'}.\n     path \\<sigma>' i \\<noteq> ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>i' \\<noteq> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> k'", "using iipd'(2)"], ["proof (prove)\nusing this:\n  path \\<sigma>' i' = ipd (path \\<sigma>' k')\n\ngoal (1 subgoal):\n 1. i' \\<noteq> k'", "by (metis csk last_cs nret path_in_nodes ipd_not_self)"], ["proof (state)\nthis:\n  i' \\<noteq> k'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>k'<i'\\<close>"], ["proof (prove)\nusing this:\n  i' \\<noteq> k'\n\ngoal (1 subgoal):\n 1. k' < i'", "using iipd'(1)"], ["proof (prove)\nusing this:\n  i' \\<noteq> k'\n  i' \\<in> {k'..j'}\n\ngoal (1 subgoal):\n 1. k' < i'", "by simp"], ["proof (state)\nthis:\n  k' < i'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence csi': \\<open>cs\\<^bsup>path \\<sigma>'\\<^esup> i' = [n\\<leftarrow>cs\\<^bsup>path \\<sigma>'\\<^esup> k' . ipd n \\<noteq> path \\<sigma>' i'] @ [path \\<sigma>' i']\\<close>"], ["proof (prove)\nusing this:\n  k' < i'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n    filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma>' i')\n     (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n    [path \\<sigma>' i']", "using cs_ipd[OF iipd'(2) *]"], ["proof (prove)\nusing this:\n  k' < i'\n  k' < i' \\<Longrightarrow>\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma>' i')\n   (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n  [path \\<sigma>' i']\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n    filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma>' i')\n     (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n    [path \\<sigma>' i']", "by fast"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma>' i')\n   (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n  [path \\<sigma>' i']\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have ncdk': \\<open>\\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'", "using \\<open>j' < n'\\<close> \\<open>k' < j'\\<close> cdi_prefix jcdk' less_imp_le_nat"], ["proof (prove)\nusing this:\n  j' < n'\n  k' < j'\n  \\<lbrakk>?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m; ?m < ?n';\n   ?n' \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> ?n' cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\n  \\<not> j' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'", "by blast"], ["proof (state)\nthis:\n  \\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence ncdk: \\<open>\\<not> n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n\ngoal (1 subgoal):\n 1. \\<not> n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k", "using cd_cs_swap csk dcd(4)"], ["proof (prove)\nusing this:\n  \\<not> n' cd\\<^bsup>path \\<sigma>'\\<^esup>\\<rightarrow> k'\n  \\<lbrakk>?l cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?k;\n   cs\\<^bsup>?\\<pi>\\<^esup> ?l = cs\\<^bsup>?\\<pi>'\\<^esup> ?l';\n   cs\\<^bsup>?\\<pi>\\<^esup> ?k = cs\\<^bsup>?\\<pi>'\\<^esup> ?k'\\<rbrakk>\n  \\<Longrightarrow> ?l' cd\\<^bsup>?\\<pi>'\\<^esup>\\<rightarrow> ?k'\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n\ngoal (1 subgoal):\n 1. \\<not> n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k", "by blast"], ["proof (state)\nthis:\n  \\<not> n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have ipdex: \\<open>\\<exists>i. i\\<in>{k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\\<close> (is \\<open>\\<exists>i. ?P i\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "assume *:\\<open>path \\<sigma> n = return\\<close>"], ["proof (state)\nthis:\n  path \\<sigma> n = local.return\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "from path_ret_ipd[of \\<open>path \\<sigma>\\<close> \\<open>k\\<close> \\<open>n\\<close>,OF path_is_path nret *]"], ["proof (chain)\npicking this:\n  (\\<And>l.\n      \\<lbrakk>k < l; l \\<le> n;\n       path \\<sigma> l = ipd (path \\<sigma> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain i where \\<open>?P i\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>l.\n      \\<lbrakk>k < l; l \\<le> n;\n       path \\<sigma> l = ipd (path \\<sigma> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i \\<in> {k..n} \\<and>\n        path \\<sigma> i = ipd (path \\<sigma> k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. path \\<sigma> n \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. path \\<sigma> n \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "assume *:\\<open>path \\<sigma> n \\<noteq> return\\<close>"], ["proof (state)\nthis:\n  path \\<sigma> n \\<noteq> local.return\n\ngoal (1 subgoal):\n 1. path \\<sigma> n \\<noteq> local.return \\<Longrightarrow>\n    \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "show \\<open>?thesis\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "using not_cd_impl_ipd [of \\<open>path \\<sigma>\\<close> \\<open>k\\<close> \\<open>n\\<close>, OF path_is_path \\<open>k<n\\<close> ncdk *]"], ["proof (prove)\nusing this:\n  (\\<And>j.\n      \\<lbrakk>j \\<in> {k..n};\n       path \\<sigma> j = ipd (path \\<sigma> k)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i. i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "define i where  \\<open>i == LEAST j. j\\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k)\\<close>"], ["proof (state)\nthis:\n  i \\<equiv>\n  LEAST j. j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have iipd: \\<open>i\\<in> {k..n}\\<close> \\<open>path \\<sigma> i = ipd (path \\<sigma> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> {k..n} &&& path \\<sigma> i = ipd (path \\<sigma> k)", "unfolding i_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST j. j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k))\n    \\<in> {k..n} &&&\n    path \\<sigma>\n     (LEAST j.\n         j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k)) =\n    ipd (path \\<sigma> k)", "using LeastI_ex[OF ipdex]"], ["proof (prove)\nusing this:\n  (LEAST i. i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k))\n  \\<in> {k..n} \\<and>\n  path \\<sigma>\n   (LEAST i.\n       i \\<in> {k..n} \\<and> path \\<sigma> i = ipd (path \\<sigma> k)) =\n  ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. (LEAST j. j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k))\n    \\<in> {k..n} &&&\n    path \\<sigma>\n     (LEAST j.\n         j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k)) =\n    ipd (path \\<sigma> k)", "by simp_all"], ["proof (state)\nthis:\n  i \\<in> {k..n}\n  path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have **:\\<open>\\<forall> i' \\<in> {k..<i}. path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i'\\<in>{k..<i}. path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)", "proof (rule, rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {k..<i};\n        \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<rbrakk>\n       \\<Longrightarrow> False", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {k..<i};\n        \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<rbrakk>\n       \\<Longrightarrow> False", "assume  *: \\<open>i' \\<in> {k..<i}\\<close> \\<open>\\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<close>"], ["proof (state)\nthis:\n  i' \\<in> {k..<i}\n  \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {k..<i};\n        \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<rbrakk>\n       \\<Longrightarrow> False", "hence **: \\<open>i' \\<in>{k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)\\<close> (is \\<open>?P i'\\<close>)"], ["proof (prove)\nusing this:\n  i' \\<in> {k..<i}\n  \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. i' \\<in> {k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)", "using iipd(1)"], ["proof (prove)\nusing this:\n  i' \\<in> {k..<i}\n  \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\n  i \\<in> {k..n}\n\ngoal (1 subgoal):\n 1. i' \\<in> {k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)", "by auto"], ["proof (state)\nthis:\n  i' \\<in> {k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i' \\<in> {k..<i};\n        \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\\<rbrakk>\n       \\<Longrightarrow> False", "thus \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> {k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. False", "using Least_le[of \\<open>?P\\<close> \\<open>i'\\<close>] i_def *"], ["proof (prove)\nusing this:\n  i' \\<in> {k..n} \\<and> path \\<sigma> i' = ipd (path \\<sigma> k)\n  i' \\<in> {k..n} \\<and>\n  path \\<sigma> i' = ipd (path \\<sigma> k) \\<Longrightarrow>\n  (LEAST x. x \\<in> {k..n} \\<and> path \\<sigma> x = ipd (path \\<sigma> k))\n  \\<le> i'\n  i \\<equiv>\n  LEAST j. j \\<in> {k..n} \\<and> path \\<sigma> j = ipd (path \\<sigma> k)\n  i' \\<in> {k..<i}\n  \\<not> path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i'\\<in>{k..<i}. path \\<sigma> i' \\<noteq> ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>i \\<noteq> k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> k", "using iipd(2)"], ["proof (prove)\nusing this:\n  path \\<sigma> i = ipd (path \\<sigma> k)\n\ngoal (1 subgoal):\n 1. i \\<noteq> k", "by (metis nret path_in_nodes ipd_not_self)"], ["proof (state)\nthis:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>k<i\\<close>"], ["proof (prove)\nusing this:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. k < i", "using iipd(1)"], ["proof (prove)\nusing this:\n  i \\<noteq> k\n  i \\<in> {k..n}\n\ngoal (1 subgoal):\n 1. k < i", "by simp"], ["proof (state)\nthis:\n  k < i\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> i = [n\\<leftarrow>cs\\<^bsup>path \\<sigma>\\<^esup> k . ipd n \\<noteq> path \\<sigma> i] @ [path \\<sigma> i]\\<close>"], ["proof (prove)\nusing this:\n  k < i\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> i =\n    filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n     (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n    [path \\<sigma> i]", "using cs_ipd[OF iipd(2) **]"], ["proof (prove)\nusing this:\n  k < i\n  k < i \\<Longrightarrow>\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n   (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n  [path \\<sigma> i]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> i =\n    filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n     (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n    [path \\<sigma> i]", "by fast"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n   (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n  [path \\<sigma> i]\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence csi: \\<open>cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'\\<close>"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n   (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n  [path \\<sigma> i]\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'", "using csi' csk"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma> i)\n   (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n  [path \\<sigma> i]\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n  filter (\\<lambda>n. ipd n \\<noteq> path \\<sigma>' i')\n   (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n  [path \\<sigma>' i']\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'", "unfolding iipd'(2) iipd(2)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i =\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (path \\<sigma> k))\n   (cs\\<^bsup>path \\<sigma>\\<^esup> k) @\n  [ipd (path \\<sigma> k)]\n  cs\\<^bsup>path \\<sigma>'\\<^esup> i' =\n  filter (\\<lambda>n. ipd n \\<noteq> ipd (path \\<sigma>' k'))\n   (cs\\<^bsup>path \\<sigma>'\\<^esup> k') @\n  [ipd (path \\<sigma>' k')]\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n\ngoal (1 subgoal):\n 1. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'", "by (metis last_cs)"], ["proof (state)\nthis:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence \\<open>(LEAST i'. k' < i' \\<and> (\\<exists>i. cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i')) \\<le> i'\\<close> (is \\<open>(LEAST x. ?P x) \\<le> _\\<close>)"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'\n\ngoal (1 subgoal):\n 1. (LEAST i'.\n        k' < i' \\<and>\n        (\\<exists>i.\n            cs\\<^bsup>path \\<sigma>\\<^esup> i =\n            cs\\<^bsup>path \\<sigma>'\\<^esup> i'))\n    \\<le> i'", "using \\<open>k' < i'\\<close> Least_le[of \\<open>?P\\<close> \\<open>i'\\<close>]"], ["proof (prove)\nusing this:\n  cs\\<^bsup>path \\<sigma>\\<^esup> i = cs\\<^bsup>path \\<sigma>'\\<^esup> i'\n  k' < i'\n  k' < i' \\<and>\n  (\\<exists>i.\n      cs\\<^bsup>path \\<sigma>\\<^esup> i =\n      cs\\<^bsup>path \\<sigma>'\\<^esup> i') \\<Longrightarrow>\n  (LEAST x.\n      k' < x \\<and>\n      (\\<exists>i.\n          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n          cs\\<^bsup>path \\<sigma>'\\<^esup> x))\n  \\<le> i'\n\ngoal (1 subgoal):\n 1. (LEAST i'.\n        k' < i' \\<and>\n        (\\<exists>i.\n            cs\\<^bsup>path \\<sigma>\\<^esup> i =\n            cs\\<^bsup>path \\<sigma>'\\<^esup> i'))\n    \\<le> i'", "by blast"], ["proof (state)\nthis:\n  (LEAST i'.\n      k' < i' \\<and>\n      (\\<exists>i.\n          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n          cs\\<^bsup>path \\<sigma>'\\<^esup> i'))\n  \\<le> i'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "hence nw: \\<open>\\<forall>j'\\<in>{i'..<n'}. v \\<notin> writes (path \\<sigma>' j')\\<close>"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      k' < i' \\<and>\n      (\\<exists>i.\n          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n          cs\\<^bsup>path \\<sigma>'\\<^esup> i'))\n  \\<le> i'\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')", "using dcd(7) allB_atLeastLessThan_lower"], ["proof (prove)\nusing this:\n  (LEAST i'.\n      k' < i' \\<and>\n      (\\<exists>i.\n          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n          cs\\<^bsup>path \\<sigma>'\\<^esup> i'))\n  \\<le> i'\n  \\<forall>j'\\<in>{LEAST i'.\n                      k' < i' \\<and>\n                      (\\<exists>i.\n                          cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                          cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n     v \\<notin> local.writes (path \\<sigma>' j')\n  \\<lbrakk>?i \\<le> ?j; \\<forall>x\\<in>{?i..<?n}. ?P x\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>{?j..<?n}. ?P x\n\ngoal (1 subgoal):\n 1. \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')", "by blast"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "moreover"], ["proof (state)\nthis:\n  \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>v \\<in> writes (path \\<sigma>' j')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.writes (path \\<sigma>' j')", "using nddj'"], ["proof (prove)\nusing this:\n  n' dd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> j'\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (path \\<sigma>' j')", "unfolding is_ddi_def"], ["proof (prove)\nusing this:\n  is_path (path \\<sigma>') \\<and>\n  j' < n' \\<and>\n  v \\<in> local.reads (path \\<sigma>' n') \\<inter>\n          local.writes (path \\<sigma>' j') \\<and>\n  (\\<forall>l\\<in>{j'<..<n'}. v \\<notin> local.writes (path \\<sigma>' l))\n\ngoal (1 subgoal):\n 1. v \\<in> local.writes (path \\<sigma>' j')", "by auto"], ["proof (state)\nthis:\n  v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "moreover"], ["proof (state)\nthis:\n  v \\<in> local.writes (path \\<sigma>' j')\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "have \\<open>i' \\<le> j'\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<le> j'", "using iipd'(1)"], ["proof (prove)\nusing this:\n  i' \\<in> {k'..j'}\n\ngoal (1 subgoal):\n 1. i' \\<le> j'", "by auto"], ["proof (state)\nthis:\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')\n  v \\<in> local.writes (path \\<sigma>' j')\n  i' \\<le> j'", "have \\<open>False\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')\n  v \\<in> local.writes (path \\<sigma>' j')\n  i' \\<le> j'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>j' < n'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j'\\<in>{i'..<n'}. v \\<notin> local.writes (path \\<sigma>' j')\n  v \\<in> local.writes (path \\<sigma>' j')\n  i' \\<le> j'\n  j' < n'\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. j' \\<noteq> k' \\<Longrightarrow> (path \\<sigma>', n') \\<in> scp", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", ".."], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n               v \\<in> local.writes (path \\<sigma>' j')) \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n               v \\<in> local.writes (path \\<sigma>' j')) \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "assume \\<open>\\<not> (\\<exists>j'\\<in>{k'..<n'}. v \\<in> writes (path \\<sigma>' j'))\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n             v \\<in> local.writes (path \\<sigma>' j'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n               v \\<in> local.writes (path \\<sigma>' j')) \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "hence \\<open>n' dcd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k' via (path \\<sigma>) k\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n             v \\<in> local.writes (path \\<sigma>' j'))\n\ngoal (1 subgoal):\n 1. n' dcd\\<^bsup>path\n                   \\<sigma>',v\\<^esup>\\<rightarrow> k' via path \\<sigma> k", "unfolding is_dcdi_via_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n             v \\<in> local.writes (path \\<sigma>' j'))\n\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>') \\<and>\n    k' < n' \\<and>\n    (\\<exists>l' n'a.\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n        cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n' =\n        cs\\<^bsup>path \\<sigma>\\<^esup> n'a \\<and>\n        n'a dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l' \\<and>\n        l' cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k) \\<and>\n    (\\<forall>l\\<in>{k'..<n'}. v \\<notin> local.writes (path \\<sigma>' l))", "using dcd(2-4) csk \\<open>k'<n'\\<close> path_is_path"], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n             v \\<in> local.writes (path \\<sigma>' j'))\n  n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l\n  l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k\n  cs\\<^bsup>path \\<sigma>\\<^esup> n = cs\\<^bsup>path \\<sigma>'\\<^esup> n'\n  cs\\<^bsup>path \\<sigma>\\<^esup> k = cs\\<^bsup>path \\<sigma>'\\<^esup> k'\n  k' < n'\n  is_path (path ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. is_path (path \\<sigma>') \\<and>\n    k' < n' \\<and>\n    (\\<exists>l' n'a.\n        cs\\<^bsup>path \\<sigma>'\\<^esup> k' =\n        cs\\<^bsup>path \\<sigma>\\<^esup> k \\<and>\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n' =\n        cs\\<^bsup>path \\<sigma>\\<^esup> n'a \\<and>\n        n'a dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l' \\<and>\n        l' cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k) \\<and>\n    (\\<forall>l\\<in>{k'..<n'}. v \\<notin> local.writes (path \\<sigma>' l))", "by metis"], ["proof (state)\nthis:\n  n' dcd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k' via path \\<sigma> k\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>j'\\<in>{k'..<n'}.\n               v \\<in> local.writes (path \\<sigma>' j')) \\<Longrightarrow>\n    (path \\<sigma>', n') \\<in> scp", "thus \\<open>?thesis\\<close>"], ["proof (prove)\nusing this:\n  n' dcd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k' via path \\<sigma> k\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "using dcd.IH scp.intros(4)"], ["proof (prove)\nusing this:\n  n' dcd\\<^bsup>path \\<sigma>',v\\<^esup>\\<rightarrow> k' via path \\<sigma> k\n  (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp; (?\\<pi>', ?m') \\<in> scp;\n   ?n dcd\\<^bsup>?\\<pi>,?v\\<^esup>\\<rightarrow> ?m via ?\\<pi>' ?m'\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>', n') \\<in> scp", "by blast"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (path \\<sigma>', n') \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n v l n'.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        (path \\<sigma>, k) \\<in> scp \\<and> (path \\<sigma>', k') \\<in> scp;\n        n dd\\<^bsup>path \\<sigma>,v\\<^esup>\\<rightarrow> l;\n        l cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        cs\\<^bsup>path \\<sigma>\\<^esup> n =\n        cs\\<^bsup>path \\<sigma>'\\<^esup> n';\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        (\\<sigma>\\<^bsup>n\\<^esup>) v \\<noteq>\n        (\\<sigma>'\\<^bsup>n'\\<^esup>) v;\n        \\<forall>j'\\<in>{LEAST i'.\n                            k' < i' \\<and>\n                            (\\<exists>i.\n                                cs\\<^bsup>path \\<sigma>\\<^esup> i =\n                                cs\\<^bsup>path \\<sigma>'\\<^esup> i')..<n'}.\n           v \\<notin> local.writes (path \\<sigma>' j')\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scp \\<and>\n                         (path \\<sigma>', n') \\<in> scp", "with 1"], ["proof (chain)\npicking this:\n  (path \\<sigma>, n) \\<in> scp\n  (path \\<sigma>', n') \\<in> scp", "show \\<open>?case\\<close>"], ["proof (prove)\nusing this:\n  (path \\<sigma>, n) \\<in> scp\n  (path \\<sigma>', n') \\<in> scp\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, n) \\<in> scp \\<and> (path \\<sigma>', n') \\<in> scp", ".."], ["proof (state)\nthis:\n  (path \\<sigma>, n) \\<in> scp \\<and> (path \\<sigma>', n') \\<in> scp\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem cop_in_scop: assumes \\<open>((\\<sigma>,k),(\\<sigma>',k'))\\<in>cop\\<close> shows \\<open>(path \\<sigma>,k)\\<in>scop \\<and> (path \\<sigma>',k')\\<in>scp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scop \\<and> (path \\<sigma>', k') \\<in> scp", "using assms"], ["proof (prove)\nusing this:\n  ((\\<sigma>, k), \\<sigma>', k') \\<in> cop\n\ngoal (1 subgoal):\n 1. (path \\<sigma>, k) \\<in> scop \\<and> (path \\<sigma>', k') \\<in> scp", "apply (induct rule: cop.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> n \\<sigma>' n'.\n       \\<lbrakk>((\\<sigma>, n), \\<sigma>', n') \\<in> cp;\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', n') \\<in> scp\n 2. \\<And>\\<sigma> k \\<sigma>' k' n.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', k') \\<in> scp", "apply (simp add: cp_in_scp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> n \\<sigma>' n'.\n       \\<lbrakk>((\\<sigma>, n), \\<sigma>', n') \\<in> cp;\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop\n 2. \\<And>\\<sigma> k \\<sigma>' k' n.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', k') \\<in> scp", "using cp_in_scp scop.intros scp.intros(2)"], ["proof (prove)\nusing this:\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  (path ?\\<sigma>, ?k) \\<in> scp \\<and> (path ?\\<sigma>', ?k') \\<in> scp\n  \\<lbrakk>(?\\<pi>, ?n) \\<in> scp; ?\\<pi> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scop\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> n \\<sigma>' n'.\n       \\<lbrakk>((\\<sigma>, n), \\<sigma>', n') \\<in> cp;\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop\n 2. \\<And>\\<sigma> k \\<sigma>' k' n.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', k') \\<in> scp", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', k') \\<in> scp", "using cp_in_scp scop.intros scp.intros(2)"], ["proof (prove)\nusing this:\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cp \\<Longrightarrow>\n  (path ?\\<sigma>, ?k) \\<in> scp \\<and> (path ?\\<sigma>', ?k') \\<in> scp\n  \\<lbrakk>(?\\<pi>, ?n) \\<in> scp; ?\\<pi> ?n \\<in> dom local.att\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scop\n  \\<lbrakk>(?\\<pi>, ?m) \\<in> scp;\n   ?n cd\\<^bsup>?\\<pi>\\<^esup>\\<rightarrow> ?m\\<rbrakk>\n  \\<Longrightarrow> (?\\<pi>, ?n) \\<in> scp\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> k \\<sigma>' k' n.\n       \\<lbrakk>((\\<sigma>, k), \\<sigma>', k') \\<in> cp;\n        n cd\\<^bsup>path \\<sigma>\\<^esup>\\<rightarrow> k;\n        path \\<sigma> (Suc k) \\<noteq> path \\<sigma>' (Suc k');\n        path \\<sigma> n \\<in> dom local.att\\<rbrakk>\n       \\<Longrightarrow> (path \\<sigma>, n) \\<in> scop \\<and>\n                         (path \\<sigma>', k') \\<in> scp", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The main correctness result for out single execution approximation follows directly.\\<close>"], ["", "theorem scop_correct: assumes \\<open>scop = empty\\<close> shows \\<open>secure\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. secure", "using cop_correct assms cop_in_scop"], ["proof (prove)\nusing this:\n  cop = {} \\<Longrightarrow> secure\n  scop = {}\n  ((?\\<sigma>, ?k), ?\\<sigma>', ?k') \\<in> cop \\<Longrightarrow>\n  (path ?\\<sigma>, ?k) \\<in> scop \\<and> (path ?\\<sigma>', ?k') \\<in> scp\n\ngoal (1 subgoal):\n 1. secure", "by fast"], ["", "end"], ["", "end"]]}