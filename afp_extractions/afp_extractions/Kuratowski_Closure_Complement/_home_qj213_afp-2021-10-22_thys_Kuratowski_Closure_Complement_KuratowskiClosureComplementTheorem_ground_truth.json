{"file_name": "/home/qj213/afp-2021-10-22/thys/Kuratowski_Closure_Complement/KuratowskiClosureComplementTheorem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Kuratowski_Closure_Complement", "problem_names": ["lemma boundary_empty:\n  shows \"boundary {} = {}\"", "lemma interior_union_boundary:\n  shows \"interior (X \\<union> Y) = interior X \\<union> interior Y\n           \\<longleftrightarrow> boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\" (is \"(?lhs1 = ?lhs2) \\<longleftrightarrow> ?rhs\")", "lemma interior_union_closed_intervals:\n  fixes a :: \"'a::ordered_euclidean_space\"\n  assumes \"b < c\"\n  shows \"interior ({a..b} \\<union> {c..d}) = interior {a..b} \\<union> interior {c..d}\"", "lemma Rat_real_limpt:\n  fixes x :: real\n  shows \"x islimpt \\<rat>\"", "lemma Rat_closure:\n  shows \"closure \\<rat> = (UNIV :: real set)\"", "lemma Rat_interval_closure:\n  fixes x :: real\n  assumes \"x < y\"\n  shows \"closure ({x<..<y} \\<inter> \\<rat>) = {x..y}\"", "lemma Rat_not_open:\n  fixes T :: \"real set\"\n  assumes \"open T\"\n  assumes \"T \\<noteq> {}\"\n  shows \"\\<not>T \\<subseteq> \\<rat>\"", "lemma Irrat_dense_in_real:\n  fixes x :: real\n  assumes \"x < y\"\n  shows \"\\<exists>r\\<in>-\\<rat>. x < r \\<and> r < y\"", "lemma closed_interval_Int_compl:\n  fixes x :: real\n  assumes \"x < y\"\n  assumes \"y < z\"\n  shows \"- {x..y} \\<inter> - {y..z} = - {x..z}\"", "lemma C_C:\n  shows \"C \\<circ> C = id\"", "lemma K_K:\n  shows \"K \\<circ> K = K\"", "lemma I_I:\n  shows \"I \\<circ> I = I\"", "lemma I_K:\n  shows \"I = C \\<circ> K \\<circ> C\"", "lemma K_I:\n  shows \"K = C \\<circ> I \\<circ> C\"", "lemma K_I_K_I:\n  shows \"K \\<circ> I \\<circ> K \\<circ> I = K \\<circ> I\"", "lemma I_K_I_K:\n  shows \"I \\<circ> K \\<circ> I \\<circ> K = I \\<circ> K\"", "lemma K_mono:\n  assumes \"x \\<subseteq> y\"\n  shows \"K x \\<subseteq> K y\"", "lemma KCKCKCK_KCK:\n  shows \"K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K = K \\<circ> C \\<circ> K\" (is \"?lhs = ?rhs\")", "lemma CK_id[intro!]:\n  \"CK id\"", "lemma CK_nf_set:\n  shows \"{f . CK_nf f} = {id, C, K, C \\<circ> K, K \\<circ> C, C \\<circ> K \\<circ> C, K \\<circ> C \\<circ> K, C \\<circ> K \\<circ> C \\<circ> K, K \\<circ> C \\<circ> K \\<circ> C, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C, K \\<circ> C \\<circ> K \\<circ> C \\<circ> K, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K, K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C}\"", "theorem CK_nf:\n  \"CK f \\<longleftrightarrow> CK_nf f\"", "theorem CK_card:\n  shows \"card {f. CK f} \\<le> 14\"", "lemma RRR_closure:\n  shows \"closure RRR = {0..2} \\<union> {3} \\<union> {5..7}\"", "lemma RRR_interior:\n  \"interior RRR = {0<..<1} \\<union> {1<..<2}\" (is \"?lhs = ?rhs\")", "lemma RRR_interior_closure[simplified]:\n  shows \"interior ({0::real..2} \\<union> {3} \\<union> {5..7}) = {0<..<2} \\<union> {5<..<7}\" (is \"?lhs = ?rhs\")", "lemma RRR_test:\n  assumes \"f RRR = g RRR\"\n  shows \"test f = test g\"", "lemma nf_RRR:\n  shows\n    \"test id = [False, False, True, False, True]\"\n    \"test C = [True, True, False, True, False]\"\n    \"test K = [True, True, True, False, True]\"\n    \"test (K \\<circ> C) = [True, True, True, True, True]\"\n    \"test (C \\<circ> K) = [False, False, False, True, False]\"\n    \"test (C \\<circ> K \\<circ> C) = [False, False, False, False, False]\"\n    \"test (K \\<circ> C \\<circ> K) = [False, True, True, True, False]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K) = [True, False, False, False, True]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C) = [True, True, False, False, False]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [False, False, True, True, True]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) = [True, True, False, False, True]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) = [False, False, True, True, False]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [False, True, True, True, True]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [True, False, False, False, False]\"", "theorem CK_nf_real_card:\n  shows \"card ((\\<lambda> f. f RRR) ` {f . CK_nf f}) = 14\"", "theorem CK_real_card:\n  shows \"card {f::real set \\<Rightarrow> real set. CK f} = 14\" (is \"?lhs = ?rhs\")", "lemma IK_nf_set:\n  \"{f . IK_nf f} = {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I, K \\<circ> I \\<circ> K}\"", "theorem IK_nf:\n  \"IK f \\<longleftrightarrow> IK_nf f\"", "theorem IK_card:\n  shows \"card {f. IK f} \\<le> 7\"", "theorem IK_nf_real_card:\n  shows \"card ((\\<lambda> f. f RRR) ` {f . IK_nf f}) = 7\"", "theorem IK_real_card:\n  shows \"card {f::real set \\<Rightarrow> real set. IK f} = 7\" (is \"?lhs = ?rhs\")", "lemma CK_nf_pos_set:\n  shows \"{f . CK_nf_pos f} = {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I, K \\<circ> I \\<circ> K}\"", "lemma CK_nf_pos_neg_disjoint:\n  assumes \"CK_nf_pos f\"\n  assumes \"CK_nf_neg g\"\n  shows \"f \\<noteq> g\"", "lemma CK_nf_pos_neg_CK_nf:\n  \"CK_nf f \\<longleftrightarrow> CK_nf_pos f \\<or> CK_nf_neg f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemmas K_I_K_subseteq_K = closure_mono[OF interior_subset, of \"closure X\", simplified] for X", "lemma CK_nf_pos_lattice:\n  shows\n    \"I \\<le> (id :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"id \\<le> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<le> I \\<circ> K \\<circ> (I :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<le> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<le> K \\<circ> (I :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<le> K \\<circ> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<le> K \\<circ> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<le> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"", "lemma discrete_eqs:\n  assumes \"discrete (X :: 'a::topological_space set)\"\n  shows\n    \"I  = (id::'a set \\<Rightarrow> 'a set)\"\n    \"K  = (id::'a set \\<Rightarrow> 'a set)\"", "lemma discrete_card:\n  assumes \"discrete (X :: 'a::topological_space set)\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 1\"", "lemma discrete_discrete_topology:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"\\<And>Y::'a set. open Y\"\n  shows \"discrete X\"", "lemma discrete_part:\n  assumes \"discrete X\"\n  shows \"part X\"", "lemma part_eqs:\n  assumes \"part (X :: 'a::topological_space set)\"\n  shows\n    \"K \\<circ> I = (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K = (K :: 'a set \\<Rightarrow> 'a set)\"", "lemma part_not_discrete_card:\n  assumes \"part (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 3\"", "lemma part_witness_UNIV:\n  shows \"UNIV = set [a, b, c]\"", "lemmas part_witness_pow = subset_subseqs[OF subset_trans[OF subset_UNIV Set.equalityD1[OF part_witness_UNIV]]]", "lemmas part_witness_Compl = Compl_eq_Diff_UNIV[where 'a=part_witness, unfolded part_witness_UNIV, simplified]", "lemma part_witness_ball:\n  \"(\\<forall>s\\<in>S. s \\<in> {{}, {a}, {b, c}, {a, b, c}}) \\<longleftrightarrow> S \\<subseteq> set [{}, {a}, {b, c}, {a, b, c}]\"", "lemmas part_witness_subsets_pow = subset_subseqs[OF iffD1[OF part_witness_ball]]", "lemma part_witness_interior_simps:\n  shows\n    \"interior {a} = {a}\"\n    \"interior {b} = {}\"\n    \"interior {c} = {}\"\n    \"interior {a, b} = {a}\"\n    \"interior {a, c} = {a}\"\n    \"interior {b, c} = {b, c}\"\n    \"interior {a, b, c} = {a, b, c}\"", "lemma part_witness_part:\n  fixes X :: \"part_witness set\"\n  shows \"part X\"", "lemma part_witness_not_discrete:\n  fixes X :: \"part_witness set\"\n  shows \"\\<not>discrete X\"", "lemma part_witness_card:\n  shows \"card {f. CK_nf_pos (f::part_witness set \\<Rightarrow> part_witness set)} = 3\"", "lemma discrete_ed_ou:\n  assumes \"discrete X\"\n  shows \"ed_ou X\"", "lemma ed_ou_eqs:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<circ> K \\<circ> I = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"", "lemma ed_ou_neqs:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows\n    \"I \\<noteq> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"", "lemma ed_ou_not_discrete_card:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 4\"", "lemma ed_ou_witness_UNIV:\n  shows \"UNIV = set [a, b, c, d, e]\"", "lemmas ed_ou_witness_pow = subset_subseqs[OF subset_trans[OF subset_UNIV Set.equalityD1[OF ed_ou_witness_UNIV]]]", "lemmas ed_ou_witness_Compl = Compl_eq_Diff_UNIV[where 'a=ed_ou_witness, unfolded ed_ou_witness_UNIV, simplified]", "lemma ed_ou_witness_inter:\n  fixes S :: \"ed_ou_witness set\"\n  assumes \"open S\"\n  assumes \"open T\"\n  shows \"open (S \\<inter> T)\"", "lemma ed_ou_witness_union:\n  fixes X :: \"ed_ou_witness set set\"\n  assumes \"\\<forall>x\\<in>X. open x\"\n  shows \"open (\\<Union>X)\"", "lemma ed_ou_witness_interior_simps:\n  shows\n    \"interior {a} = {a}\"\n    \"interior {b} = {b}\"\n    \"interior {c} = {}\"\n    \"interior {d} = {}\"\n    \"interior {e} = {e}\"\n    \"interior {a, b} = {a, b}\"\n    \"interior {a, c} = {a, c}\"\n    \"interior {a, d} = {a}\"\n    \"interior {a, e} = {a, e}\"\n    \"interior {b, c} = {b}\"\n    \"interior {b, d} = {b, d}\"\n    \"interior {b, e} = {b, e}\"\n    \"interior {c, d} = {}\"\n    \"interior {c, e} = {e}\"\n    \"interior {d, e} = {e}\"\n    \"interior {a, b, c} = {a, b, c}\"\n    \"interior {a, b, d} = {a, b, d}\"\n    \"interior {a, b, e} = {a, b, e}\"\n    \"interior {a, c, d} = {a, c}\"\n    \"interior {a, c, e} = {a, c, e}\"\n    \"interior {a, d, e} = {a, e}\"\n    \"interior {b, c, d} = {b, d}\"\n    \"interior {b, c, e} = {b, e}\"\n    \"interior {b, d, e} = {b, d, e}\"\n    \"interior {c, d, e} = {e}\"\n    \"interior {a, b, c, d} = {a, b, c, d}\"\n    \"interior {a, b, c, e} = {a, b, c, e}\"\n    \"interior {a, b, d, e} = {a, b, d, e}\"\n    \"interior {a, b, c, d, e} = {a, b, c, d, e}\"\n    \"interior {a, c, d, e} = {a, c, e}\"\n    \"interior {b, c, d, e} = {b, d, e}\"", "lemma ed_ou_witness_not_discrete:\n  fixes X :: \"ed_ou_witness set\"\n  shows \"\\<not>discrete X\"", "lemma ed_ou_witness_ed_ou:\n  fixes X :: \"ed_ou_witness set\"\n  shows \"ed_ou X\"", "lemma ed_ou_witness_card:\n  shows \"card {f. CK_nf_pos (f::ed_ou_witness set \\<Rightarrow> ed_ou_witness set)} = 4\"", "lemma ed_ou_part_extremally_disconnected:\n  assumes \"ed_ou X\"\n  assumes \"part X\"\n  shows \"extremally_disconnected X\"", "lemma extremally_disconnected_eqs:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"extremally_disconnected X\"\n  shows\n    \"I \\<circ> K \\<circ> I = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"", "lemma extremally_disconnected_not_part_not_ed_ou_card:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"extremally_disconnected X\"\n  assumes \"\\<not>part X\"\n  assumes \"\\<not>ed_ou X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 5\"", "lemma cofinite_closure_finite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"finite X\"\n  shows \"closure X = X\"", "lemma cofinite_closure_infinite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"infinite X\"\n  shows \"closure X = UNIV\"", "lemma cofinite_interior_finite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"finite X\"\n  assumes \"infinite (UNIV::'a cofinite set)\"\n  shows \"interior X = {}\"", "lemma cofinite_interior_infinite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"infinite X\"\n  assumes \"infinite (-X)\"\n  shows \"interior X = {}\"", "lemma evens_infinite:\n  shows \"infinite evens\"", "lemma cofinite_nat_infinite:\n  shows \"infinite (UNIV::nat cofinite set)\"", "lemma evens_Compl_infinite:\n  shows \"infinite (- evens)\"", "lemma evens_closure:\n  shows \"closure evens = UNIV\"", "lemma evens_interior:\n  shows \"interior evens = {}\"", "lemma cofinite_not_part:\n  fixes X :: \"nat cofinite set\"\n  shows \"\\<not>part X\"", "lemma cofinite_not_ed_ou:\n  fixes X :: \"nat cofinite set\"\n  shows \"\\<not>ed_ou X\"", "lemma cofinite_extremally_disconnected_aux:\n  fixes X :: \"nat cofinite set\"\n  shows \"closure (interior (closure X)) \\<subseteq> interior (closure X)\"", "lemma cofinite_extremally_disconnected:\n  fixes X :: \"nat cofinite set\"\n  shows \"extremally_disconnected X\"", "lemma cofinite_card:\n  shows \"card {f. CK_nf_pos (f::nat cofinite set \\<Rightarrow> nat cofinite set)} = 5\"", "lemma ed_ou_open_unresolvable:\n  assumes \"ed_ou X\"\n  shows \"open_unresolvable X\"", "lemma open_unresolvable_eqs:\n  assumes \"open_unresolvable (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<circ> K \\<circ> I = I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"", "lemma not_ed_ou_neqs:\n  assumes \"\\<not>ed_ou (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<noteq> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"", "lemma open_unresolvable_not_ed_ou_card:\n  assumes \"open_unresolvable (X :: 'a::topological_space set)\"\n  assumes \"\\<not>ed_ou X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 5\"", "lemma ou_witness_UNIV:\n  shows \"UNIV = set [a, b, c]\"", "lemma ou_witness_closure_simps:\n  shows\n    \"closure {a} = {a}\"\n    \"closure {b} = {a, b}\"\n    \"closure {c} = {a, c}\"\n    \"closure {a, b} = {a, b}\"\n    \"closure {a, c} = {a, c}\"\n    \"closure {a, b, c} = {a, b, c}\"\n    \"closure {b, c} = {a, b, c}\"", "lemma ou_witness_open_unresolvable:\n  fixes X :: \"ou_witness set\"\n  shows \"open_unresolvable X\"", "lemma ou_witness_not_ed_ou:\n  fixes X :: \"ou_witness set\"\n  shows \"\\<not>ed_ou X\"", "lemma ou_witness_card:\n  shows \"card {f. CK_nf_pos (f::ou_witness set \\<Rightarrow> ou_witness set)} = 5\"", "lemma part_closed_open:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"I \\<circ> K \\<circ> I = (I::'a set \\<Rightarrow> 'a set)\"\n  assumes \"closed X\"\n  shows \"open X\"", "lemma part_I_K_I:\n  assumes \"I \\<circ> K \\<circ> I = (I::'a::topological_space set \\<Rightarrow> 'a set)\"\n  shows \"I \\<circ> K = (K::'a set \\<Rightarrow> 'a set)\"", "lemma part_K_I_I:\n  assumes \"I \\<circ> K \\<circ> I = (I::'a::topological_space set \\<Rightarrow> 'a set)\"\n  shows \"K \\<circ> I = (I::'a set \\<Rightarrow> 'a set)\"", "lemma kuratowski_neqs:\n  assumes \"kuratowski (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<noteq> I \\<circ> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<noteq> K \\<circ> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<noteq> K \\<circ> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<noteq> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"", "lemma kuratowski_card:\n  assumes \"kuratowski (X :: 'a::topological_space set)\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 7\"", "lemma kuratowski_reals:\n  shows \"kuratowski (\\<real> :: real set)\"", "theorem chagrov:\n  fixes X :: \"'a::topological_space set\"\n  obtains \"discrete X\"\n        | \"\\<not>discrete X \\<and> part X\"\n        | \"\\<not>discrete X \\<and> ed_ou X\"\n        | \"\\<not>ed_ou X \\<and> open_unresolvable X\"\n        | \"\\<not>ed_ou X \\<and> \\<not>part X \\<and> extremally_disconnected X\"\n        | \"kuratowski X\""], "translations": [["", "lemma boundary_empty:\n  shows \"boundary {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundary {} = {}", "unfolding boundary_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure {} - interior {} = {}", "by simp"], ["", "definition\n  exterior :: \"'a::topological_space set \\<Rightarrow> 'a set\"\nwhere\n  \"exterior X = - (interior X \\<union> boundary X)\""], ["", "lemma interior_union_boundary:\n  shows \"interior (X \\<union> Y) = interior X \\<union> interior Y\n           \\<longleftrightarrow> boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\" (is \"(?lhs1 = ?lhs2) \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (interior (X \\<union> Y) = interior X \\<union> interior Y) =\n    (boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y))", "proof(rule iffI[OF _ subset_antisym[OF subsetI]])"], ["proof (state)\ngoal (3 subgoals):\n 1. interior (X \\<union> Y) =\n    interior X \\<union> interior Y \\<Longrightarrow>\n    boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n 2. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 3. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "assume \"?lhs1 = ?lhs2\""], ["proof (state)\nthis:\n  interior (X \\<union> Y) = interior X \\<union> interior Y\n\ngoal (3 subgoals):\n 1. interior (X \\<union> Y) =\n    interior X \\<union> interior Y \\<Longrightarrow>\n    boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n 2. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 3. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "then"], ["proof (chain)\npicking this:\n  interior (X \\<union> Y) = interior X \\<union> interior Y", "show ?rhs"], ["proof (prove)\nusing this:\n  interior (X \\<union> Y) = interior X \\<union> interior Y\n\ngoal (1 subgoal):\n 1. boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)", "by (force simp: boundary_def)"], ["proof (state)\nthis:\n  boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 2. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 2. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 2. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "assume ?rhs and \"x \\<in> ?lhs1\""], ["proof (state)\nthis:\n  boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n  x \\<in> interior (X \\<union> Y)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 2. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "have \"x \\<in> ?lhs2\" if \"x \\<notin> interior X\" \"x \\<notin> interior Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "proof(cases \"x \\<in> boundary X \\<inter> boundary Y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "case True"], ["proof (state)\nthis:\n  x \\<in> boundary X \\<inter> boundary Y\n\ngoal (2 subgoals):\n 1. x \\<in> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "with \\<open>?rhs\\<close> \\<open>x \\<in> ?lhs1\\<close>"], ["proof (chain)\npicking this:\n  boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n  x \\<in> interior (X \\<union> Y)\n  x \\<in> boundary X \\<inter> boundary Y", "show ?thesis"], ["proof (prove)\nusing this:\n  boundary X \\<inter> boundary Y \\<subseteq> boundary (X \\<union> Y)\n  x \\<in> interior (X \\<union> Y)\n  x \\<in> boundary X \\<inter> boundary Y\n\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "by (simp add: boundary_def subset_iff)"], ["proof (state)\nthis:\n  x \\<in> interior X \\<union> interior Y\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "case False"], ["proof (state)\nthis:\n  x \\<notin> boundary X \\<inter> boundary Y\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "then"], ["proof (chain)\npicking this:\n  x \\<notin> boundary X \\<inter> boundary Y", "consider (X) \"x \\<notin> boundary X\" | (Y) \"x \\<notin> boundary Y\""], ["proof (prove)\nusing this:\n  x \\<notin> boundary X \\<inter> boundary Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> boundary X \\<Longrightarrow> thesis;\n     x \\<notin> boundary Y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<notin> boundary X \\<Longrightarrow> ?thesis;\n   x \\<notin> boundary Y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary X \\<inter> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>x \\<notin> boundary X \\<Longrightarrow> ?thesis;\n   x \\<notin> boundary Y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<notin> boundary X \\<Longrightarrow> ?thesis;\n   x \\<notin> boundary Y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "case X"], ["proof (state)\nthis:\n  x \\<notin> boundary X\n\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from X \\<open>x \\<notin> interior X\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> boundary X\n  x \\<notin> interior X", "have \"x \\<in> exterior X\""], ["proof (prove)\nusing this:\n  x \\<notin> boundary X\n  x \\<notin> interior X\n\ngoal (1 subgoal):\n 1. x \\<in> exterior X", "by (simp add: exterior_def)"], ["proof (state)\nthis:\n  x \\<in> exterior X\n\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>x \\<notin> boundary X\\<close> \\<open>x \\<in> exterior X\\<close> \\<open>x \\<notin> interior X\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> boundary X\n  x \\<in> exterior X\n  x \\<notin> interior X", "obtain U where \"open U\" \"U \\<subseteq> - X\" \"x \\<in> U\""], ["proof (prove)\nusing this:\n  x \\<notin> boundary X\n  x \\<in> exterior X\n  x \\<notin> interior X\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>open U; U \\<subseteq> - X; x \\<in> U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ComplI DiffI boundary_def closure_interior interior_subset open_interior)"], ["proof (state)\nthis:\n  open U\n  U \\<subseteq> - X\n  x \\<in> U\n\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>x \\<in> interior (X \\<union> Y)\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> interior (X \\<union> Y)", "obtain U' where \"open U'\" \"U' \\<subseteq> X \\<union> Y\" \"x \\<in> U'\""], ["proof (prove)\nusing this:\n  x \\<in> interior (X \\<union> Y)\n\ngoal (1 subgoal):\n 1. (\\<And>U'.\n        \\<lbrakk>open U'; U' \\<subseteq> X \\<union> Y; x \\<in> U'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson interiorE)"], ["proof (state)\nthis:\n  open U'\n  U' \\<subseteq> X \\<union> Y\n  x \\<in> U'\n\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>U \\<subseteq> - X\\<close> \\<open>U' \\<subseteq> X \\<union> Y\\<close>"], ["proof (chain)\npicking this:\n  U \\<subseteq> - X\n  U' \\<subseteq> X \\<union> Y", "have \"U \\<inter> U' \\<subseteq> Y\""], ["proof (prove)\nusing this:\n  U \\<subseteq> - X\n  U' \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. U \\<inter> U' \\<subseteq> Y", "by blast"], ["proof (state)\nthis:\n  U \\<inter> U' \\<subseteq> Y\n\ngoal (2 subgoals):\n 1. x \\<notin> boundary X \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y\n 2. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "with \\<open>x \\<notin> interior Y\\<close> \\<open>open U'\\<close> \\<open>open U\\<close> \\<open>x \\<in> U'\\<close> \\<open>x \\<in> U\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> interior Y\n  open U'\n  open U\n  x \\<in> U'\n  x \\<in> U\n  U \\<inter> U' \\<subseteq> Y", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> interior Y\n  open U'\n  open U\n  x \\<in> U'\n  x \\<in> U\n  U \\<inter> U' \\<subseteq> Y\n\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "by (meson IntI interiorI open_Int)"], ["proof (state)\nthis:\n  x \\<in> interior X \\<union> interior Y\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "case Y"], ["proof (state)\nthis:\n  x \\<notin> boundary Y\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from Y \\<open>x \\<notin> interior Y\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> boundary Y\n  x \\<notin> interior Y", "have \"x \\<in> exterior Y\""], ["proof (prove)\nusing this:\n  x \\<notin> boundary Y\n  x \\<notin> interior Y\n\ngoal (1 subgoal):\n 1. x \\<in> exterior Y", "by (simp add: exterior_def)"], ["proof (state)\nthis:\n  x \\<in> exterior Y\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>x \\<notin> boundary Y\\<close> \\<open>x \\<in> exterior Y\\<close> \\<open>x \\<notin> interior Y\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> boundary Y\n  x \\<in> exterior Y\n  x \\<notin> interior Y", "obtain U where \"open U\" \"U \\<subseteq> - Y\" \"x \\<in> U\""], ["proof (prove)\nusing this:\n  x \\<notin> boundary Y\n  x \\<in> exterior Y\n  x \\<notin> interior Y\n\ngoal (1 subgoal):\n 1. (\\<And>U.\n        \\<lbrakk>open U; U \\<subseteq> - Y; x \\<in> U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ComplI DiffI boundary_def closure_interior interior_subset open_interior)"], ["proof (state)\nthis:\n  open U\n  U \\<subseteq> - Y\n  x \\<in> U\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>x \\<in> interior (X \\<union> Y)\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> interior (X \\<union> Y)", "obtain U' where \"open U'\" \"U' \\<subseteq> X \\<union> Y\" \"x \\<in> U'\""], ["proof (prove)\nusing this:\n  x \\<in> interior (X \\<union> Y)\n\ngoal (1 subgoal):\n 1. (\\<And>U'.\n        \\<lbrakk>open U'; U' \\<subseteq> X \\<union> Y; x \\<in> U'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson interiorE)"], ["proof (state)\nthis:\n  open U'\n  U' \\<subseteq> X \\<union> Y\n  x \\<in> U'\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "from \\<open>U \\<subseteq> -Y\\<close> \\<open>U' \\<subseteq> X \\<union> Y\\<close>"], ["proof (chain)\npicking this:\n  U \\<subseteq> - Y\n  U' \\<subseteq> X \\<union> Y", "have \"U \\<inter> U' \\<subseteq> X\""], ["proof (prove)\nusing this:\n  U \\<subseteq> - Y\n  U' \\<subseteq> X \\<union> Y\n\ngoal (1 subgoal):\n 1. U \\<inter> U' \\<subseteq> X", "by blast"], ["proof (state)\nthis:\n  U \\<inter> U' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. x \\<notin> boundary Y \\<Longrightarrow>\n    x \\<in> interior X \\<union> interior Y", "with \\<open>x \\<notin> interior X\\<close> \\<open>open U'\\<close> \\<open>open U\\<close> \\<open>x \\<in> U'\\<close> \\<open>x \\<in> U\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> interior X\n  open U'\n  open U\n  x \\<in> U'\n  x \\<in> U\n  U \\<inter> U' \\<subseteq> X", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> interior X\n  open U'\n  open U\n  x \\<in> U'\n  x \\<in> U\n  U \\<inter> U' \\<subseteq> X\n\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "by (meson IntI interiorI open_Int)"], ["proof (state)\nthis:\n  x \\<in> interior X \\<union> interior Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> interior X \\<union> interior Y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<notin> interior X; x \\<notin> interior Y\\<rbrakk>\n  \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>boundary X \\<inter> boundary Y\n                \\<subseteq> boundary (X \\<union> Y);\n        x \\<in> interior (X \\<union> Y)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n 2. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "with \\<open>x \\<in> ?lhs1\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> interior (X \\<union> Y)\n  \\<lbrakk>x \\<notin> interior X; x \\<notin> interior Y\\<rbrakk>\n  \\<Longrightarrow> x \\<in> interior X \\<union> interior Y", "show \"x \\<in> ?lhs2\""], ["proof (prove)\nusing this:\n  x \\<in> interior (X \\<union> Y)\n  \\<lbrakk>x \\<notin> interior X; x \\<notin> interior Y\\<rbrakk>\n  \\<Longrightarrow> x \\<in> interior X \\<union> interior Y\n\ngoal (1 subgoal):\n 1. x \\<in> interior X \\<union> interior Y", "by blast"], ["proof (state)\nthis:\n  x \\<in> interior X \\<union> interior Y\n\ngoal (1 subgoal):\n 1. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. boundary X \\<inter> boundary Y\n    \\<subseteq> boundary (X \\<union> Y) \\<Longrightarrow>\n    interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "show \"?lhs2 \\<subseteq> ?lhs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)", "by (simp add: interior_mono)"], ["proof (state)\nthis:\n  interior X \\<union> interior Y \\<subseteq> interior (X \\<union> Y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma interior_union_closed_intervals:\n  fixes a :: \"'a::ordered_euclidean_space\"\n  assumes \"b < c\"\n  shows \"interior ({a..b} \\<union> {c..d}) = interior {a..b} \\<union> interior {c..d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior ({a..b} \\<union> {c..d}) =\n    interior {a..b} \\<union> interior {c..d}", "using assms"], ["proof (prove)\nusing this:\n  b < c\n\ngoal (1 subgoal):\n 1. interior ({a..b} \\<union> {c..d}) =\n    interior {a..b} \\<union> interior {c..d}", "by (subst interior_union_boundary; auto simp: boundary_def)"], ["", "section\\<open> Additional facts about the rationals and reals \\label{sec:rat-real} \\<close>"], ["", "lemma Rat_real_limpt:\n  fixes x :: real\n  shows \"x islimpt \\<rat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x islimpt \\<rat>", "proof(rule islimptI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>x \\<in> T; open T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<rat>.\n                            y \\<in> T \\<and> y \\<noteq> x", "fix T"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>x \\<in> T; open T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<rat>.\n                            y \\<in> T \\<and> y \\<noteq> x", "assume \"x \\<in> T\" \"open T\""], ["proof (state)\nthis:\n  x \\<in> T\n  open T\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>x \\<in> T; open T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<rat>.\n                            y \\<in> T \\<and> y \\<noteq> x", "then"], ["proof (chain)\npicking this:\n  x \\<in> T\n  open T", "obtain e where \"0 < e\" and ball: \"\\<bar>x' - x\\<bar> < e \\<longrightarrow> x' \\<in> T\" for x'"], ["proof (prove)\nusing this:\n  x \\<in> T\n  open T\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>0 < e;\n         \\<And>x'.\n            \\<bar>x' - x\\<bar> < e \\<longrightarrow> x' \\<in> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: open_real)"], ["proof (state)\nthis:\n  0 < e\n  \\<bar>?x' - x\\<bar> < e \\<longrightarrow> ?x' \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>x \\<in> T; open T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<rat>.\n                            y \\<in> T \\<and> y \\<noteq> x", "from \\<open>0 < e\\<close>"], ["proof (chain)\npicking this:\n  0 < e", "obtain q where \"x < real_of_rat q \\<and> real_of_rat q < x + e\""], ["proof (prove)\nusing this:\n  0 < e\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        x < real_of_rat q \\<and> real_of_rat q < x + e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using of_rat_dense"], ["proof (prove)\nusing this:\n  0 < e\n  ?x < ?y \\<Longrightarrow>\n  \\<exists>q. ?x < real_of_rat q \\<and> real_of_rat q < ?y\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        x < real_of_rat q \\<and> real_of_rat q < x + e \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x < real_of_rat q \\<and> real_of_rat q < x + e\n\ngoal (1 subgoal):\n 1. \\<And>T.\n       \\<lbrakk>x \\<in> T; open T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>\\<rat>.\n                            y \\<in> T \\<and> y \\<noteq> x", "with ball"], ["proof (chain)\npicking this:\n  \\<bar>?x' - x\\<bar> < e \\<longrightarrow> ?x' \\<in> T\n  x < real_of_rat q \\<and> real_of_rat q < x + e", "show \"\\<exists>y\\<in>\\<rat>. y \\<in> T \\<and> y \\<noteq> x\""], ["proof (prove)\nusing this:\n  \\<bar>?x' - x\\<bar> < e \\<longrightarrow> ?x' \\<in> T\n  x < real_of_rat q \\<and> real_of_rat q < x + e\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>\\<rat>. y \\<in> T \\<and> y \\<noteq> x", "by force"], ["proof (state)\nthis:\n  \\<exists>y\\<in>\\<rat>. y \\<in> T \\<and> y \\<noteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Rat_closure:\n  shows \"closure \\<rat> = (UNIV :: real set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure \\<rat> = UNIV", "unfolding closure_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rat> \\<union> {x. x islimpt \\<rat>} = UNIV", "using Rat_real_limpt"], ["proof (prove)\nusing this:\n  ?x islimpt \\<rat>\n\ngoal (1 subgoal):\n 1. \\<rat> \\<union> {x. x islimpt \\<rat>} = UNIV", "by blast"], ["", "lemma Rat_interval_closure:\n  fixes x :: real\n  assumes \"x < y\"\n  shows \"closure ({x<..<y} \\<inter> \\<rat>) = {x..y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure ({x<..<y} \\<inter> \\<rat>) = {x..y}", "using assms"], ["proof (prove)\nusing this:\n  x < y\n\ngoal (1 subgoal):\n 1. closure ({x<..<y} \\<inter> \\<rat>) = {x..y}", "by (metis (no_types, lifting) Rat_closure closure_closure closure_greaterThanLessThan closure_mono inf_le1 inf_top.right_neutral open_Int_closure_subset open_real_greaterThanLessThan subset_antisym)"], ["", "lemma Rat_not_open:\n  fixes T :: \"real set\"\n  assumes \"open T\"\n  assumes \"T \\<noteq> {}\"\n  shows \"\\<not>T \\<subseteq> \\<rat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> T \\<subseteq> \\<rat>", "using assms"], ["proof (prove)\nusing this:\n  open T\n  T \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<not> T \\<subseteq> \\<rat>", "by (simp add: countable_rat open_minus_countable subset_eq)"], ["", "lemma Irrat_dense_in_real:\n  fixes x :: real\n  assumes \"x < y\"\n  shows \"\\<exists>r\\<in>-\\<rat>. x < r \\<and> r < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>- \\<rat>. x < r \\<and> r < y", "using assms Rat_not_open[where T=\"{x<..<y}\"]"], ["proof (prove)\nusing this:\n  x < y\n  \\<lbrakk>open {x<..<y}; {x<..<y} \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<not> {x<..<y} \\<subseteq> \\<rat>\n\ngoal (1 subgoal):\n 1. \\<exists>r\\<in>- \\<rat>. x < r \\<and> r < y", "by force"], ["", "lemma closed_interval_Int_compl:\n  fixes x :: real\n  assumes \"x < y\"\n  assumes \"y < z\"\n  shows \"- {x..y} \\<inter> - {y..z} = - {x..z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - {x..y} \\<inter> - {y..z} = - {x..z}", "using assms"], ["proof (prove)\nusing this:\n  x < y\n  y < z\n\ngoal (1 subgoal):\n 1. - {x..y} \\<inter> - {y..z} = - {x..z}", "by auto"], ["", "section\\<open> Kuratowski's result \\label{sec:kuratowski} \\<close>"], ["", "text\\<open>\n\nWe prove that at most 14 distinct operators can be generated by compositions of @{const \"closure\"} and complement. For convenience, we give these operators short names and try to avoid pointwise reasoning. We treat the @{const \"interior\"} operator at the same time.\n\n\\<close>"], ["", "declare o_apply[simp del]"], ["", "definition C :: \"'a::topological_space set \\<Rightarrow> 'a set\" where \"C X = - X\""], ["", "definition K :: \"'a::topological_space set \\<Rightarrow> 'a set\" where \"K X = closure X\""], ["", "definition I :: \"'a::topological_space set \\<Rightarrow> 'a set\" where \"I X = interior X\""], ["", "lemma C_C:\n  shows \"C \\<circ> C = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<circ> C = id", "by (simp add: fun_eq_iff C_def o_apply)"], ["", "lemma K_K:\n  shows \"K \\<circ> K = K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> K = K", "by (simp add: fun_eq_iff K_def o_apply)"], ["", "lemma I_I:\n  shows \"I \\<circ> I = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> I = I", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<circ> interior = interior", "by (simp add: o_def)"], ["", "lemma I_K:\n  shows \"I = C \\<circ> K \\<circ> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I = C \\<circ> K \\<circ> C", "unfolding C_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior = uminus \\<circ> closure \\<circ> uminus", "by (simp add: o_def interior_closure)"], ["", "lemma K_I:\n  shows \"K = C \\<circ> I \\<circ> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K = C \\<circ> I \\<circ> C", "unfolding C_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure = uminus \\<circ> interior \\<circ> uminus", "by (simp add: o_def interior_closure)"], ["", "lemma K_I_K_I:\n  shows \"K \\<circ> I \\<circ> K \\<circ> I = K \\<circ> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> I \\<circ> K \\<circ> I = K \\<circ> I", "unfolding C_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure \\<circ> interior \\<circ> closure \\<circ> interior =\n    closure \\<circ> interior", "by (clarsimp simp: fun_eq_iff o_apply closure_minimal closure_mono closure_subset interior_maximal interior_subset subset_antisym)"], ["", "lemma I_K_I_K:\n  shows \"I \\<circ> K \\<circ> I \\<circ> K = I \\<circ> K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I \\<circ> K = I \\<circ> K", "unfolding C_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<circ> closure \\<circ> interior \\<circ> closure =\n    interior \\<circ> closure", "by (simp add: fun_eq_iff o_apply)\n   (metis (no_types) closure_closure closure_mono closure_subset interior_maximal interior_mono interior_subset open_interior subset_antisym)"], ["", "lemma K_mono:\n  assumes \"x \\<subseteq> y\"\n  shows \"K x \\<subseteq> K y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K x \\<subseteq> K y", "using assms"], ["proof (prove)\nusing this:\n  x \\<subseteq> y\n\ngoal (1 subgoal):\n 1. K x \\<subseteq> K y", "unfolding K_def"], ["proof (prove)\nusing this:\n  x \\<subseteq> y\n\ngoal (1 subgoal):\n 1. closure x \\<subseteq> closure y", "by (simp add: closure_mono)"], ["", "text\\<open>\n\nThe following lemma embodies the crucial observation about compositions of @{const \"C\"} and @{const \"K\"}:\n\n\\<close>"], ["", "lemma KCKCKCK_KCK:\n  shows \"K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K = K \\<circ> C \\<circ> K\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K =\n    K \\<circ> C \\<circ> K", "proof(rule ext[OF equalityI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K) x\n 2. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K) x\n 2. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "have \"(C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> ?rhs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n    \\<subseteq> (K \\<circ> C \\<circ> K) x", "by (simp add: C_def K_def closure_def o_apply)"], ["proof (state)\nthis:\n  (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n  \\<subseteq> (K \\<circ> C \\<circ> K) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K) x\n 2. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n  \\<subseteq> (K \\<circ> C \\<circ> K) x", "have \"(K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)) x \\<subseteq> (K \\<circ> ?rhs) x\""], ["proof (prove)\nusing this:\n  (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n  \\<subseteq> (K \\<circ> C \\<circ> K) x\n\ngoal (1 subgoal):\n 1. (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)) x\n    \\<subseteq> (K \\<circ> (K \\<circ> C \\<circ> K)) x", "by (simp add: K_mono o_apply)"], ["proof (state)\nthis:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> (K \\<circ> C \\<circ> K)) x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K) x\n 2. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> (K \\<circ> C \\<circ> K)) x", "show \"?lhs x \\<subseteq> ?rhs x\""], ["proof (prove)\nusing this:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> (K \\<circ> C \\<circ> K)) x\n\ngoal (1 subgoal):\n 1. (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n    \\<subseteq> (K \\<circ> C \\<circ> K) x", "by (simp add: K_K o_assoc)"], ["proof (state)\nthis:\n  (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) x\n  \\<subseteq> (K \\<circ> C \\<circ> K) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "fix x :: \"'a::topological_space set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "have \"(C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> K x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> K x", "by (simp add: C_def K_def closure_def o_apply)"], ["proof (state)\nthis:\n  (C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> K x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> K x", "have \"(K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)) x \\<subseteq> (K \\<circ> K) x\""], ["proof (prove)\nusing this:\n  (C \\<circ> K \\<circ> C \\<circ> K) x \\<subseteq> K x\n\ngoal (1 subgoal):\n 1. (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)) x\n    \\<subseteq> (K \\<circ> K) x", "by (simp add: K_mono o_apply)"], ["proof (state)\nthis:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> K) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> K) x", "have \"(C \\<circ> (K \\<circ> K)) x \\<subseteq> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))) x\""], ["proof (prove)\nusing this:\n  (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)) x\n  \\<subseteq> (K \\<circ> K) x\n\ngoal (1 subgoal):\n 1. (C \\<circ> (K \\<circ> K)) x\n    \\<subseteq> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))) x", "by (simp add: C_def o_apply)"], ["proof (state)\nthis:\n  (C \\<circ> (K \\<circ> K)) x\n  \\<subseteq> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (C \\<circ> (K \\<circ> K)) x\n  \\<subseteq> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))) x", "have \"(K \\<circ> (C \\<circ> (K \\<circ> K))) x \\<subseteq> (K \\<circ> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K)))) x\""], ["proof (prove)\nusing this:\n  (C \\<circ> (K \\<circ> K)) x\n  \\<subseteq> (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))) x\n\ngoal (1 subgoal):\n 1. (K \\<circ> (C \\<circ> (K \\<circ> K))) x\n    \\<subseteq> (K \\<circ>\n                 (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))))\n                 x", "by (simp add: K_mono o_apply)"], ["proof (state)\nthis:\n  (K \\<circ> (C \\<circ> (K \\<circ> K))) x\n  \\<subseteq> (K \\<circ>\n               (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))))\n               x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (K \\<circ> C \\<circ> K) x\n       \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ>\n                    C \\<circ>\n                    K)\n                    x", "then"], ["proof (chain)\npicking this:\n  (K \\<circ> (C \\<circ> (K \\<circ> K))) x\n  \\<subseteq> (K \\<circ>\n               (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))))\n               x", "show \"?rhs x \\<subseteq> ?lhs x\""], ["proof (prove)\nusing this:\n  (K \\<circ> (C \\<circ> (K \\<circ> K))) x\n  \\<subseteq> (K \\<circ>\n               (C \\<circ> (K \\<circ> (C \\<circ> K \\<circ> C \\<circ> K))))\n               x\n\ngoal (1 subgoal):\n 1. (K \\<circ> C \\<circ> K) x\n    \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ>\n                 K)\n                 x", "by (simp add: K_K o_assoc)"], ["proof (state)\nthis:\n  (K \\<circ> C \\<circ> K) x\n  \\<subseteq> (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ>\n               K)\n               x\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n\nThe inductive set \\<open>CK\\<close> captures all operators that can be generated by compositions of @{const \"C\"} and @{const \"K\"}. We shallowly embed the operators; that is, we identify operators up to extensional equality.\n\n\\<close>"], ["", "inductive CK :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\" where\n  \"CK C\"\n| \"CK K\"\n| \"\\<lbrakk> CK f; CK g \\<rbrakk> \\<Longrightarrow> CK (f \\<circ> g)\""], ["", "declare CK.intros[intro!]"], ["", "lemma CK_id[intro!]:\n  \"CK id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CK id", "by (metis CK.intros(1) CK.intros(3) C_C)"], ["", "text\\<open>\n\nThe inductive set \\<open>CK_nf\\<close> captures the normal forms for the 14 distinct operators.\n\n\\<close>"], ["", "inductive CK_nf :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\" where\n  \"CK_nf id\"\n| \"CK_nf C\"\n| \"CK_nf K\"\n| \"CK_nf (C \\<circ> K)\"\n| \"CK_nf (K \\<circ> C)\"\n| \"CK_nf (C \\<circ> K \\<circ> C)\"\n| \"CK_nf (K \\<circ> C \\<circ> K)\"\n| \"CK_nf (C \\<circ> K \\<circ> C \\<circ> K)\"\n| \"CK_nf (K \\<circ> C \\<circ> K \\<circ> C)\"\n| \"CK_nf (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C)\"\n| \"CK_nf (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)\"\n| \"CK_nf (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K)\"\n| \"CK_nf (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C)\"\n| \"CK_nf (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C)\""], ["", "declare CK_nf.intros[intro!]"], ["", "lemma CK_nf_set:\n  shows \"{f . CK_nf f} = {id, C, K, C \\<circ> K, K \\<circ> C, C \\<circ> K \\<circ> C, K \\<circ> C \\<circ> K, C \\<circ> K \\<circ> C \\<circ> K, K \\<circ> C \\<circ> K \\<circ> C, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C, K \\<circ> C \\<circ> K \\<circ> C \\<circ> K, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K, K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C, C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. CK_nf f} =\n    {id, C, K, C \\<circ> K, K \\<circ> C, C \\<circ> K \\<circ> C,\n     K \\<circ> C \\<circ> K, C \\<circ> K \\<circ> C \\<circ> K,\n     K \\<circ> C \\<circ> K \\<circ> C,\n     C \\<circ> K \\<circ> C \\<circ> K \\<circ> C,\n     K \\<circ> C \\<circ> K \\<circ> C \\<circ> K,\n     C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K,\n     K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C,\n     C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C}", "by (auto simp: CK_nf.simps)"], ["", "text\\<open>\n\nThat each operator generated by compositions of @{const \"C\"} and\n@{const \"K\"} is extensionally equivalent to one of the normal forms\ncaptured by \\<open>CK_nf\\<close> is demonstrated by means of an\ninduction over the construction of \\<open>CK_nf\\<close> and an appeal\nto the facts proved above.\n\n\\<close>"], ["", "theorem CK_nf:\n  \"CK f \\<longleftrightarrow> CK_nf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CK f = CK_nf f", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. CK f \\<Longrightarrow> CK_nf f\n 2. CK_nf f \\<Longrightarrow> CK f", "assume \"CK f\""], ["proof (state)\nthis:\n  CK f\n\ngoal (2 subgoals):\n 1. CK f \\<Longrightarrow> CK_nf f\n 2. CK_nf f \\<Longrightarrow> CK f", "then"], ["proof (chain)\npicking this:\n  CK f", "show \"CK_nf f\""], ["proof (prove)\nusing this:\n  CK f\n\ngoal (1 subgoal):\n 1. CK_nf f", "by induct\n       (elim CK_nf.cases; clarsimp simp: id_def[symmetric] C_C K_K KCKCKCK_KCK o_assoc; simp add: o_assoc[symmetric]; clarsimp simp: C_C K_K KCKCKCK_KCK o_assoc\n      | blast)+"], ["proof (state)\nthis:\n  CK_nf f\n\ngoal (1 subgoal):\n 1. CK_nf f \\<Longrightarrow> CK f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CK_nf f \\<Longrightarrow> CK f", "assume \"CK_nf f\""], ["proof (state)\nthis:\n  CK_nf f\n\ngoal (1 subgoal):\n 1. CK_nf f \\<Longrightarrow> CK f", "then"], ["proof (chain)\npicking this:\n  CK_nf f", "show \"CK f\""], ["proof (prove)\nusing this:\n  CK_nf f\n\ngoal (1 subgoal):\n 1. CK f", "by induct (auto simp: id_def[symmetric])"], ["proof (state)\nthis:\n  CK f\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem CK_card:\n  shows \"card {f. CK f} \\<le> 14\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK f} \\<le> 14", "by (auto simp: CK_nf CK_nf_set card.insert_remove intro!: le_trans[OF card_Diff1_le])"], ["", "text\\<open>\n\nWe show, using the following subset of \\<open>\\<real>\\<close> (an\nexample taken from @{cite \"Rusin:2001\"}) as a witness, that there\nexist topological spaces on which all 14 operators are distinct.\n\n\\<close>"], ["", "definition\n  RRR :: \"real set\"\nwhere\n  \"RRR = {0<..<1} \\<union> {1<..<2} \\<union> {3} \\<union> ({5<..<7} \\<inter> \\<rat>)\""], ["", "text\\<open>\n\nThe following facts allow the required proofs to proceed by @{method simp}:\n\n\\<close>"], ["", "lemma RRR_closure:\n  shows \"closure RRR = {0..2} \\<union> {3} \\<union> {5..7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure RRR = {0..2} \\<union> {3} \\<union> {5..7}", "unfolding RRR_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure\n     ({0<..<1} \\<union> {1<..<2} \\<union> {3} \\<union>\n      {5<..<7} \\<inter> \\<rat>) =\n    {0..2} \\<union> {3} \\<union> {5..7}", "by (force simp: closure_insert Rat_interval_closure)"], ["", "lemma RRR_interior:\n  \"interior RRR = {0<..<1} \\<union> {1<..<2}\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior RRR = {0<..<1} \\<union> {1<..<2}", "proof(rule equalityI[OF subsetI subsetI])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "assume \"x \\<in> ?lhs\""], ["proof (state)\nthis:\n  x \\<in> interior RRR\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "then"], ["proof (chain)\npicking this:\n  x \\<in> interior RRR", "obtain T where \"open T\" and \"x \\<in> T\" and \"T \\<subseteq> RRR\""], ["proof (prove)\nusing this:\n  x \\<in> interior RRR\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>open T; x \\<in> T; T \\<subseteq> RRR\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim: interiorE)"], ["proof (state)\nthis:\n  open T\n  x \\<in> T\n  T \\<subseteq> RRR\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "then"], ["proof (chain)\npicking this:\n  open T\n  x \\<in> T\n  T \\<subseteq> RRR", "obtain e where \"0 < e\" and \"ball x e \\<subseteq> T\""], ["proof (prove)\nusing this:\n  open T\n  x \\<in> T\n  T \\<subseteq> RRR\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>0 < e; ball x e \\<subseteq> T\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (blast elim!: openE)"], ["proof (state)\nthis:\n  0 < e\n  ball x e \\<subseteq> T\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "from \\<open>x \\<in> T\\<close> \\<open>0 < e\\<close> \\<open>ball x e \\<subseteq> T\\<close> \\<open>T \\<subseteq> RRR\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> T\n  0 < e\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR", "have False if \"x = 3\""], ["proof (prove)\nusing this:\n  x \\<in> T\n  0 < e\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR\n\ngoal (1 subgoal):\n 1. False", "using that"], ["proof (prove)\nusing this:\n  x \\<in> T\n  0 < e\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR\n  x = 3\n\ngoal (1 subgoal):\n 1. False", "unfolding RRR_def ball_def"], ["proof (prove)\nusing this:\n  x \\<in> T\n  0 < e\n  {y. dist x y < e} \\<subseteq> T\n  T \\<subseteq> {0<..<1} \\<union> {1<..<2} \\<union> {3} \\<union>\n                {5<..<7} \\<inter> \\<rat>\n  x = 3\n\ngoal (1 subgoal):\n 1. False", "by (auto dest!: subsetD[where c=\"min (3 + e/2) 4\"] simp: dist_real_def)"], ["proof (state)\nthis:\n  x = 3 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "moreover"], ["proof (state)\nthis:\n  x = 3 \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "from Irrat_dense_in_real[where x=\"x\" and y=\"x + e/2\"] \\<open>0 < e\\<close>"], ["proof (chain)\npicking this:\n  x < x + e / 2 \\<Longrightarrow>\n  \\<exists>r\\<in>- \\<rat>. x < r \\<and> r < x + e / 2\n  0 < e", "obtain r where \"r\\<in>- \\<rat> \\<and> x < r \\<and> r < x + e / 2\""], ["proof (prove)\nusing this:\n  x < x + e / 2 \\<Longrightarrow>\n  \\<exists>r\\<in>- \\<rat>. x < r \\<and> r < x + e / 2\n  0 < e\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "with \\<open>x \\<in> T\\<close>  \\<open>ball x e \\<subseteq> T\\<close> \\<open>T \\<subseteq> RRR\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> T\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR\n  r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2", "have False if \"x \\<in> {5<..<7} \\<inter> \\<rat>\""], ["proof (prove)\nusing this:\n  x \\<in> T\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR\n  r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2\n\ngoal (1 subgoal):\n 1. False", "using that"], ["proof (prove)\nusing this:\n  x \\<in> T\n  ball x e \\<subseteq> T\n  T \\<subseteq> RRR\n  r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2\n  x \\<in> {5<..<7} \\<inter> \\<rat>\n\ngoal (1 subgoal):\n 1. False", "unfolding RRR_def ball_def"], ["proof (prove)\nusing this:\n  x \\<in> T\n  {y. dist x y < e} \\<subseteq> T\n  T \\<subseteq> {0<..<1} \\<union> {1<..<2} \\<union> {3} \\<union>\n                {5<..<7} \\<inter> \\<rat>\n  r \\<in> - \\<rat> \\<and> x < r \\<and> r < x + e / 2\n  x \\<in> {5<..<7} \\<inter> \\<rat>\n\ngoal (1 subgoal):\n 1. False", "by (force simp: dist_real_def dest: subsetD[where c=r])"], ["proof (state)\nthis:\n  x \\<in> {5<..<7} \\<inter> \\<rat> \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "moreover"], ["proof (state)\nthis:\n  x \\<in> {5<..<7} \\<inter> \\<rat> \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "note \\<open>x \\<in> interior RRR\\<close>"], ["proof (state)\nthis:\n  x \\<in> interior RRR\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> interior RRR \\<Longrightarrow>\n       x \\<in> {0<..<1} \\<union> {1<..<2}\n 2. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "ultimately"], ["proof (chain)\npicking this:\n  x = 3 \\<Longrightarrow> False\n  x \\<in> {5<..<7} \\<inter> \\<rat> \\<Longrightarrow> False\n  x \\<in> interior RRR", "show \"x \\<in> ?rhs\""], ["proof (prove)\nusing this:\n  x = 3 \\<Longrightarrow> False\n  x \\<in> {5<..<7} \\<inter> \\<rat> \\<Longrightarrow> False\n  x \\<in> interior RRR\n\ngoal (1 subgoal):\n 1. x \\<in> {0<..<1} \\<union> {1<..<2}", "unfolding RRR_def"], ["proof (prove)\nusing this:\n  x = 3 \\<Longrightarrow> False\n  x \\<in> {5<..<7} \\<inter> \\<rat> \\<Longrightarrow> False\n  x \\<in> interior\n           ({0<..<1} \\<union> {1<..<2} \\<union> {3} \\<union>\n            {5<..<7} \\<inter> \\<rat>)\n\ngoal (1 subgoal):\n 1. x \\<in> {0<..<1} \\<union> {1<..<2}", "by (auto dest: subsetD[OF interior_subset])"], ["proof (state)\nthis:\n  x \\<in> {0<..<1} \\<union> {1<..<2}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "assume \"x \\<in> ?rhs\""], ["proof (state)\nthis:\n  x \\<in> {0<..<1} \\<union> {1<..<2}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0<..<1} \\<union> {1<..<2} \\<Longrightarrow>\n       x \\<in> interior RRR", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0<..<1} \\<union> {1<..<2}", "show \"x \\<in> ?lhs\""], ["proof (prove)\nusing this:\n  x \\<in> {0<..<1} \\<union> {1<..<2}\n\ngoal (1 subgoal):\n 1. x \\<in> interior RRR", "unfolding RRR_def interior_def"], ["proof (prove)\nusing this:\n  x \\<in> {0<..<1} \\<union> {1<..<2}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union>\n             {T. open T \\<and>\n                 T \\<subseteq> {0<..<1} \\<union> {1<..<2} \\<union>\n                               {3} \\<union>\n                               {5<..<7} \\<inter> \\<rat>}", "by (auto intro: open_real_greaterThanLessThan)"], ["proof (state)\nthis:\n  x \\<in> interior RRR\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma RRR_interior_closure[simplified]:\n  shows \"interior ({0::real..2} \\<union> {3} \\<union> {5..7}) = {0<..<2} \\<union> {5<..<7}\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "have \"?lhs = interior ({0..2} \\<union> {5..7})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    interior ({0..2} \\<union> {5..7})", "by (metis (no_types, lifting) Un_assoc Un_commute closed_Un closed_eucl_atLeastAtMost interior_closed_Un_empty_interior interior_singleton)"], ["proof (state)\nthis:\n  interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n  interior ({0..2} \\<union> {5..7})\n\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "also"], ["proof (state)\nthis:\n  interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n  interior ({0..2} \\<union> {5..7})\n\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "have \"... = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {5..7}) = {0<..<2} \\<union> {5<..<7}", "by (simp add: interior_union_closed_intervals)"], ["proof (state)\nthis:\n  interior ({0..2} \\<union> {5..7}) = {0<..<2} \\<union> {5<..<7}\n\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "finally"], ["proof (chain)\npicking this:\n  interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n  {0<..<2} \\<union> {5<..<7}", "show ?thesis"], ["proof (prove)\nusing this:\n  interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n  {0<..<2} \\<union> {5<..<7}\n\ngoal (1 subgoal):\n 1. interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n    {0<..<2} \\<union> {5<..<7}", "."], ["proof (state)\nthis:\n  interior ({0..2} \\<union> {3} \\<union> {5..7}) =\n  {0<..<2} \\<union> {5<..<7}\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n\nThe operators can be distinguished by testing which of the points in\n\\<open>{1,2,3,4,6}\\<close> belong to their results.\n\n\\<close>"], ["", "definition\n  test :: \"(real set \\<Rightarrow> real set) \\<Rightarrow> bool list\"\nwhere\n  \"test f \\<equiv> map (\\<lambda>x. x \\<in> f RRR) [1,2,3,4,6]\""], ["", "lemma RRR_test:\n  assumes \"f RRR = g RRR\"\n  shows \"test f = test g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test f = test g", "unfolding test_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x. x \\<in> f RRR) [1, 2, 3, 4, 6] =\n    map (\\<lambda>x. x \\<in> g RRR) [1, 2, 3, 4, 6]", "using assms"], ["proof (prove)\nusing this:\n  f RRR = g RRR\n\ngoal (1 subgoal):\n 1. map (\\<lambda>x. x \\<in> f RRR) [1, 2, 3, 4, 6] =\n    map (\\<lambda>x. x \\<in> g RRR) [1, 2, 3, 4, 6]", "by simp"], ["", "lemma nf_RRR:\n  shows\n    \"test id = [False, False, True, False, True]\"\n    \"test C = [True, True, False, True, False]\"\n    \"test K = [True, True, True, False, True]\"\n    \"test (K \\<circ> C) = [True, True, True, True, True]\"\n    \"test (C \\<circ> K) = [False, False, False, True, False]\"\n    \"test (C \\<circ> K \\<circ> C) = [False, False, False, False, False]\"\n    \"test (K \\<circ> C \\<circ> K) = [False, True, True, True, False]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K) = [True, False, False, False, True]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C) = [True, True, False, False, False]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [False, False, True, True, True]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) = [True, True, False, False, True]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) = [False, False, True, True, False]\"\n    \"test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [False, True, True, True, True]\"\n    \"test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) = [True, False, False, False, False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((test id = [False, False, True, False, True] &&&\n      test C = [True, True, False, True, False] &&&\n      test K = [True, True, True, False, True]) &&&\n     (test (K \\<circ> C) = [True, True, True, True, True] &&&\n      test (C \\<circ> K) = [False, False, False, True, False]) &&&\n     test (C \\<circ> K \\<circ> C) = [False, False, False, False, False] &&&\n     test (K \\<circ> C \\<circ> K) = [False, True, True, True, False]) &&&\n    (test (C \\<circ> K \\<circ> C \\<circ> K) =\n     [True, False, False, False, True] &&&\n     test (K \\<circ> C \\<circ> K \\<circ> C) =\n     [True, True, False, False, False] &&&\n     test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) =\n     [False, False, True, True, True]) &&&\n    (test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) =\n     [True, True, False, False, True] &&&\n     test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K) =\n     [False, False, True, True, False]) &&&\n    test (K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) =\n    [False, True, True, True, True] &&&\n    test (C \\<circ> K \\<circ> C \\<circ> K \\<circ> C \\<circ> K \\<circ> C) =\n    [True, False, False, False, False]", "unfolding test_def C_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((map (\\<lambda>x. x \\<in> id RRR) [1, 2, 3, 4, 6] =\n      [False, False, True, False, True] &&&\n      map (\\<lambda>x. x \\<in> - RRR) [1, 2, 3, 4, 6] =\n      [True, True, False, True, False] &&&\n      map (\\<lambda>x. x \\<in> closure RRR) [1, 2, 3, 4, 6] =\n      [True, True, True, False, True]) &&&\n     (map (\\<lambda>x. x \\<in> (closure \\<circ> uminus) RRR)\n       [1, 2, 3, 4, 6] =\n      [True, True, True, True, True] &&&\n      map (\\<lambda>x. x \\<in> (uminus \\<circ> closure) RRR)\n       [1, 2, 3, 4, 6] =\n      [False, False, False, True, False]) &&&\n     map (\\<lambda>x. x \\<in> (uminus \\<circ> closure \\<circ> uminus) RRR)\n      [1, 2, 3, 4, 6] =\n     [False, False, False, False, False] &&&\n     map (\\<lambda>x. x \\<in> (closure \\<circ> uminus \\<circ> closure) RRR)\n      [1, 2, 3, 4, 6] =\n     [False, True, True, True, False]) &&&\n    (map (\\<lambda>x.\n             x \\<in> (uminus \\<circ> closure \\<circ> uminus \\<circ> closure)\n                      RRR)\n      [1, 2, 3, 4, 6] =\n     [True, False, False, False, True] &&&\n     map (\\<lambda>x.\n             x \\<in> (closure \\<circ> uminus \\<circ> closure \\<circ> uminus)\n                      RRR)\n      [1, 2, 3, 4, 6] =\n     [True, True, False, False, False] &&&\n     map (\\<lambda>x.\n             x \\<in> (uminus \\<circ> closure \\<circ> uminus \\<circ>\n                      closure \\<circ>\n                      uminus)\n                      RRR)\n      [1, 2, 3, 4, 6] =\n     [False, False, True, True, True]) &&&\n    (map (\\<lambda>x.\n             x \\<in> (closure \\<circ> uminus \\<circ> closure \\<circ>\n                      uminus \\<circ>\n                      closure)\n                      RRR)\n      [1, 2, 3, 4, 6] =\n     [True, True, False, False, True] &&&\n     map (\\<lambda>x.\n             x \\<in> (uminus \\<circ> closure \\<circ> uminus \\<circ>\n                      closure \\<circ>\n                      uminus \\<circ>\n                      closure)\n                      RRR)\n      [1, 2, 3, 4, 6] =\n     [False, False, True, True, False]) &&&\n    map (\\<lambda>x.\n            x \\<in> (closure \\<circ> uminus \\<circ> closure \\<circ>\n                     uminus \\<circ>\n                     closure \\<circ>\n                     uminus)\n                     RRR)\n     [1, 2, 3, 4, 6] =\n    [False, True, True, True, True] &&&\n    map (\\<lambda>x.\n            x \\<in> (uminus \\<circ> closure \\<circ> uminus \\<circ>\n                     closure \\<circ>\n                     uminus \\<circ>\n                     closure \\<circ>\n                     uminus)\n                     RRR)\n     [1, 2, 3, 4, 6] =\n    [True, False, False, False, False]", "by (simp_all add: RRR_closure RRR_interior RRR_interior_closure closure_complement closed_interval_Int_compl o_apply)\n   (simp_all add: RRR_def)"], ["", "theorem CK_nf_real_card:\n  shows \"card ((\\<lambda> f. f RRR) ` {f . CK_nf f}) = 14\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>f. f RRR) ` {f. CK_nf f}) = 14", "by (simp add: CK_nf_set) ((subst card_insert_disjoint; auto dest!: RRR_test simp: nf_RRR id_def[symmetric])[1])+"], ["", "theorem CK_real_card:\n  shows \"card {f::real set \\<Rightarrow> real set. CK f} = 14\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK f} = 14", "proof(rule antisym[OF CK_card])"], ["proof (state)\ngoal (1 subgoal):\n 1. 14 \\<le> card {f. CK f}", "show \"?rhs \\<le> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 14 \\<le> card {f. CK f}", "unfolding CK_nf"], ["proof (prove)\ngoal (1 subgoal):\n 1. 14 \\<le> card {f. CK_nf f}", "by (rule le_trans[OF eq_imp_le[OF CK_nf_real_card[symmetric]] card_image_le])\n       (simp add: CK_nf_set)"], ["proof (state)\nthis:\n  14 \\<le> card {f. CK f}\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open> A corollary of Kuratowski's result \\label{sec:kuratowski-corollary} \\<close>"], ["", "text\\<open>\n\nWe show that it is a corollary of @{thm [source] CK_real_card} that at\nmost 7 distinct operators on a topological space can be generated by\ncompositions of closure and interior. In the case of\n\\<open>\\<real>\\<close>, exactly 7 distinct operators can be so\ngenerated.\n\n\\<close>"], ["", "inductive IK :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\" where\n  \"IK id\"\n| \"IK I\"\n| \"IK K\"\n| \"\\<lbrakk> IK f; IK g \\<rbrakk> \\<Longrightarrow> IK (f \\<circ> g)\""], ["", "inductive IK_nf :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\" where\n  \"IK_nf id\"\n| \"IK_nf I\"\n| \"IK_nf K\"\n| \"IK_nf (I \\<circ> K)\"\n| \"IK_nf (K \\<circ> I)\"\n| \"IK_nf (I \\<circ> K \\<circ> I)\"\n| \"IK_nf (K \\<circ> I \\<circ> K)\""], ["", "declare IK.intros[intro!]"], ["", "declare IK_nf.intros[intro!]"], ["", "lemma IK_nf_set:\n  \"{f . IK_nf f} = {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I, K \\<circ> I \\<circ> K}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. IK_nf f} =\n    {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I,\n     K \\<circ> I \\<circ> K}", "by (auto simp: IK_nf.simps)"], ["", "theorem IK_nf:\n  \"IK f \\<longleftrightarrow> IK_nf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IK f = IK_nf f", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. IK f \\<Longrightarrow> IK_nf f\n 2. IK_nf f \\<Longrightarrow> IK f", "assume \"IK f\""], ["proof (state)\nthis:\n  IK f\n\ngoal (2 subgoals):\n 1. IK f \\<Longrightarrow> IK_nf f\n 2. IK_nf f \\<Longrightarrow> IK f", "then"], ["proof (chain)\npicking this:\n  IK f", "show \"IK_nf f\""], ["proof (prove)\nusing this:\n  IK f\n\ngoal (1 subgoal):\n 1. IK_nf f", "by induct\n       (elim IK_nf.cases; clarsimp simp: id_def[symmetric] o_assoc; simp add: I_I K_K o_assoc[symmetric]; clarsimp simp: K_I_K_I I_K_I_K o_assoc\n      | blast)+"], ["proof (state)\nthis:\n  IK_nf f\n\ngoal (1 subgoal):\n 1. IK_nf f \\<Longrightarrow> IK f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. IK_nf f \\<Longrightarrow> IK f", "assume \"IK_nf f\""], ["proof (state)\nthis:\n  IK_nf f\n\ngoal (1 subgoal):\n 1. IK_nf f \\<Longrightarrow> IK f", "then"], ["proof (chain)\npicking this:\n  IK_nf f", "show \"IK f\""], ["proof (prove)\nusing this:\n  IK_nf f\n\ngoal (1 subgoal):\n 1. IK f", "by induct blast+"], ["proof (state)\nthis:\n  IK f\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem IK_card:\n  shows \"card {f. IK f} \\<le> 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. IK f} \\<le> 7", "by (auto simp: IK_nf IK_nf_set card.insert_remove intro!: le_trans[OF card_Diff1_le])"], ["", "theorem IK_nf_real_card:\n  shows \"card ((\\<lambda> f. f RRR) ` {f . IK_nf f}) = 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>f. f RRR) ` {f. IK_nf f}) = 7", "by (simp add: IK_nf_set) ((subst card_insert_disjoint; auto dest!: RRR_test simp: nf_RRR I_K id_def[symmetric] o_assoc)[1])+"], ["", "theorem IK_real_card:\n  shows \"card {f::real set \\<Rightarrow> real set. IK f} = 7\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. IK f} = 7", "proof(rule antisym[OF IK_card])"], ["proof (state)\ngoal (1 subgoal):\n 1. 7 \\<le> card {f. IK f}", "show \"?rhs \\<le> ?lhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 7 \\<le> card {f. IK f}", "unfolding IK_nf"], ["proof (prove)\ngoal (1 subgoal):\n 1. 7 \\<le> card {f. IK_nf f}", "by (rule le_trans[OF eq_refl[OF IK_nf_real_card[symmetric]] card_image_le])\n       (simp add: IK_nf_set)"], ["proof (state)\nthis:\n  7 \\<le> card {f. IK f}\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open> Chagrov's result \\label{sec:chagrov} \\<close>"], ["", "text\\<open>\n\nChagrov's theorem, which is discussed in Section 2.1 of @{cite\n\"GardnerJackson:2008\"}, states that the number of distinct operators\non a topological space that can be generated by compositions of\nclosure and complement is one of 2, 6, 8, 10 or 14.\n\nWe begin by observing that the set of normal forms @{const \"CK_nf\"}\ncan be split into two disjoint sets, @{term \"CK_nf_pos\"} and @{term\n\"CK_nf_neg\"}, which we define in terms of interior and closure.\n\n\\<close>"], ["", "inductive CK_nf_pos :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\" where\n  \"CK_nf_pos id\"\n| \"CK_nf_pos I\"\n| \"CK_nf_pos K\"\n| \"CK_nf_pos (I \\<circ> K)\"\n| \"CK_nf_pos (K \\<circ> I)\"\n| \"CK_nf_pos (I \\<circ> K \\<circ> I)\"\n| \"CK_nf_pos (K \\<circ> I \\<circ> K)\""], ["", "declare CK_nf_pos.intros[intro!]"], ["", "lemma CK_nf_pos_set:\n  shows \"{f . CK_nf_pos f} = {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I, K \\<circ> I \\<circ> K}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. CK_nf_pos f} =\n    {id, I, K, I \\<circ> K, K \\<circ> I, I \\<circ> K \\<circ> I,\n     K \\<circ> I \\<circ> K}", "by (auto simp: CK_nf_pos.simps)"], ["", "definition\n  CK_nf_neg :: \"('a::topological_space set \\<Rightarrow> 'a set) \\<Rightarrow> bool\"\nwhere\n  \"CK_nf_neg f \\<longleftrightarrow> (\\<exists>g. CK_nf_pos g \\<and> f = C \\<circ> g)\""], ["", "lemma CK_nf_pos_neg_disjoint:\n  assumes \"CK_nf_pos f\"\n  assumes \"CK_nf_neg g\"\n  shows \"f \\<noteq> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> g", "using assms"], ["proof (prove)\nusing this:\n  CK_nf_pos f\n  CK_nf_neg g\n\ngoal (1 subgoal):\n 1. f \\<noteq> g", "unfolding CK_nf_neg_def"], ["proof (prove)\nusing this:\n  CK_nf_pos f\n  \\<exists>ga. CK_nf_pos ga \\<and> g = C \\<circ> ga\n\ngoal (1 subgoal):\n 1. f \\<noteq> g", "by (clarsimp simp: CK_nf_pos.simps; elim disjE; metis comp_def C_def I_def K_def Compl_iff closure_UNIV interior_UNIV id_apply)"], ["", "lemma CK_nf_pos_neg_CK_nf:\n  \"CK_nf f \\<longleftrightarrow> CK_nf_pos f \\<or> CK_nf_neg f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. CK_nf f = (CK_nf_pos f \\<or> CK_nf_neg f)", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. CK_nf f \\<Longrightarrow> CK_nf_pos f \\<or> CK_nf_neg f\n 2. CK_nf_pos f \\<or> CK_nf_neg f \\<Longrightarrow> CK_nf f", "assume ?lhs"], ["proof (state)\nthis:\n  CK_nf f\n\ngoal (2 subgoals):\n 1. CK_nf f \\<Longrightarrow> CK_nf_pos f \\<or> CK_nf_neg f\n 2. CK_nf_pos f \\<or> CK_nf_neg f \\<Longrightarrow> CK_nf f", "then"], ["proof (chain)\npicking this:\n  CK_nf f", "show ?rhs"], ["proof (prove)\nusing this:\n  CK_nf f\n\ngoal (1 subgoal):\n 1. CK_nf_pos f \\<or> CK_nf_neg f", "unfolding CK_nf_neg_def"], ["proof (prove)\nusing this:\n  CK_nf f\n\ngoal (1 subgoal):\n 1. CK_nf_pos f \\<or> (\\<exists>g. CK_nf_pos g \\<and> f = C \\<circ> g)", "by (rule CK_nf.cases; metis (no_types, lifting) CK_nf_pos.simps C_C I_K K_I comp_id o_assoc)"], ["proof (state)\nthis:\n  CK_nf_pos f \\<or> CK_nf_neg f\n\ngoal (1 subgoal):\n 1. CK_nf_pos f \\<or> CK_nf_neg f \\<Longrightarrow> CK_nf f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CK_nf_pos f \\<or> CK_nf_neg f \\<Longrightarrow> CK_nf f", "assume ?rhs"], ["proof (state)\nthis:\n  CK_nf_pos f \\<or> CK_nf_neg f\n\ngoal (1 subgoal):\n 1. CK_nf_pos f \\<or> CK_nf_neg f \\<Longrightarrow> CK_nf f", "then"], ["proof (chain)\npicking this:\n  CK_nf_pos f \\<or> CK_nf_neg f", "show ?lhs"], ["proof (prove)\nusing this:\n  CK_nf_pos f \\<or> CK_nf_neg f\n\ngoal (1 subgoal):\n 1. CK_nf f", "unfolding CK_nf_neg_def"], ["proof (prove)\nusing this:\n  CK_nf_pos f \\<or> (\\<exists>g. CK_nf_pos g \\<and> f = C \\<circ> g)\n\ngoal (1 subgoal):\n 1. CK_nf f", "by (auto elim!: CK_nf_pos.cases simp: I_K C_C o_assoc)"], ["proof (state)\nthis:\n  CK_nf f\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\n\nWe now focus on @{const \"CK_nf_pos\"}. In particular, we show that its\ncardinality for any given topological space is one of 1, 3, 4, 5 or 7.\n\nThe proof consists of exhibiting normal forms for the operators\nsupported by each of six classes of topological spaces. These are\nsublattices of the following lattice of @{const CK_nf_pos} operators:\n\n\\<close>"], ["", "lemmas K_I_K_subseteq_K = closure_mono[OF interior_subset, of \"closure X\", simplified] for X"], ["", "lemma CK_nf_pos_lattice:\n  shows\n    \"I \\<le> (id :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"id \\<le> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<le> I \\<circ> K \\<circ> (I :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<le> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<le> K \\<circ> (I :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<le> K \\<circ> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<le> K \\<circ> I \\<circ> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<le> (K :: 'a::topological_space set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<le> id &&& id \\<le> K) &&&\n     I \\<le> I \\<circ> K \\<circ> I &&&\n     I \\<circ> K \\<circ> I \\<le> I \\<circ> K) &&&\n    (I \\<circ> K \\<circ> I \\<le> K \\<circ> I &&&\n     I \\<circ> K \\<le> K \\<circ> I \\<circ> K) &&&\n    K \\<circ> I \\<le> K \\<circ> I \\<circ> K &&&\n    K \\<circ> I \\<circ> K \\<le> K", "unfolding I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((interior \\<le> id &&& id \\<le> closure) &&&\n     interior \\<le> interior \\<circ> closure \\<circ> interior &&&\n     interior \\<circ> closure \\<circ> interior\n     \\<le> interior \\<circ> closure) &&&\n    (interior \\<circ> closure \\<circ> interior\n     \\<le> closure \\<circ> interior &&&\n     interior \\<circ> closure\n     \\<le> closure \\<circ> interior \\<circ> closure) &&&\n    closure \\<circ> interior\n    \\<le> closure \\<circ> interior \\<circ> closure &&&\n    closure \\<circ> interior \\<circ> closure \\<le> closure", "by (simp_all add: interior_subset closure_subset interior_maximal closure_mono o_apply interior_mono K_I_K_subseteq_K le_funI)"], ["", "text\\<open>\n\nWe define the six classes of topological spaces in question, and show\nthat they are related by inclusion in the following way (as shown in\nFigure 2.3 of @{cite \"GardnerJackson:2008\"}):\n\n\\begin{center}\n \\begin{tikzpicture}[scale=.7]\n  \\node (d) at (30:5cm) {Open unresolvable spaces};\n  \\node (one) at (90:5cm) {Kuratowski spaces};\n  \\node (b) at (150:5cm) {Extremally disconnected spaces};\n  \\node (a) at (210:5cm) {Partition spaces};\n  \\node (zero) at (270:5cm) {Discrete spaces};\n  \\node (c) at (330:5cm) {\\hspace{1cm}Extremally disconnected and open unresolvable spaces};\n  \\draw (zero) -- (a) -- (b) -- (one) -- (d) -- (c) -- (zero);\n  \\draw (c) -- (b);\n \\end{tikzpicture}\n\\end{center}\n\n\\<close>"], ["", "subsection\\<open> Discrete spaces \\<close>"], ["", "definition\n  \"discrete (X :: 'a::topological_space set) \\<longleftrightarrow> I = (id::'a set \\<Rightarrow> 'a set)\""], ["", "lemma discrete_eqs:\n  assumes \"discrete (X :: 'a::topological_space set)\"\n  shows\n    \"I  = (id::'a set \\<Rightarrow> 'a set)\"\n    \"K  = (id::'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I = id &&& K = id", "using assms"], ["proof (prove)\nusing this:\n  discrete X\n\ngoal (1 subgoal):\n 1. I = id &&& K = id", "unfolding discrete_def"], ["proof (prove)\nusing this:\n  I = id\n\ngoal (1 subgoal):\n 1. I = id &&& K = id", "by (auto simp: C_C K_I)"], ["", "lemma discrete_card:\n  assumes \"discrete (X :: 'a::topological_space set)\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 1", "using discrete_eqs[OF assms] CK_nf_pos_lattice[where 'a='a]"], ["proof (prove)\nusing this:\n  I = id\n  K = id\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 1", "by (simp add: CK_nf_pos_set)"], ["", "lemma discrete_discrete_topology:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"\\<And>Y::'a set. open Y\"\n  shows \"discrete X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete X", "using assms"], ["proof (prove)\nusing this:\n  open ?Y\n\ngoal (1 subgoal):\n 1. discrete X", "unfolding discrete_def I_def interior_def islimpt_def"], ["proof (prove)\nusing this:\n  open ?Y\n\ngoal (1 subgoal):\n 1. (\\<lambda>X. \\<Union> {T. open T \\<and> T \\<subseteq> X}) = id", "by (auto simp: fun_eq_iff)"], ["", "subsection\\<open> Partition spaces \\<close>"], ["", "definition\n  \"part (X :: 'a::topological_space set) \\<longleftrightarrow> K \\<circ> I = (I :: 'a set \\<Rightarrow> 'a set)\""], ["", "lemma discrete_part:\n  assumes \"discrete X\"\n  shows \"part X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part X", "using assms"], ["proof (prove)\nusing this:\n  discrete X\n\ngoal (1 subgoal):\n 1. part X", "unfolding discrete_def part_def"], ["proof (prove)\nusing this:\n  I = id\n\ngoal (1 subgoal):\n 1. K \\<circ> I = I", "by (simp add: C_C K_I)"], ["", "lemma part_eqs:\n  assumes \"part (X :: 'a::topological_space set)\"\n  shows\n    \"K \\<circ> I = (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K = (K :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> I = I &&& I \\<circ> K = K", "using assms"], ["proof (prove)\nusing this:\n  part X\n\ngoal (1 subgoal):\n 1. K \\<circ> I = I &&& I \\<circ> K = K", "unfolding part_def"], ["proof (prove)\nusing this:\n  K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. K \\<circ> I = I &&& I \\<circ> K = K", "by (assumption, metis (no_types, hide_lams) I_I K_I o_assoc)"], ["", "lemma part_not_discrete_card:\n  assumes \"part (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 3", "using part_eqs[OF \\<open>part X\\<close>] \\<open>\\<not>discrete X\\<close> CK_nf_pos_lattice[where 'a='a]"], ["proof (prove)\nusing this:\n  K \\<circ> I = I\n  I \\<circ> K = K\n  \\<not> discrete X\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 3", "unfolding discrete_def"], ["proof (prove)\nusing this:\n  K \\<circ> I = I\n  I \\<circ> K = K\n  I \\<noteq> id\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 3", "by (simp add: CK_nf_pos_set card_insert_if C_C I_K K_K o_assoc; metis comp_id)"], ["", "text\\<open>\n\nA partition space is a topological space whose basis consists of the empty set and the equivalence classes of points of the space induced by some equivalence relation @{term \"R\"} on the underlying set of the space. Equivalently, a partition space is one in which every open set is closed. Thus, for example, the class of partition spaces includes every topological space whose open sets form a boolean algebra.\n\n\\<close>"], ["", "datatype part_witness = a | b | c"], ["", "lemma part_witness_UNIV:\n  shows \"UNIV = set [a, b, c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = set [a, b, c]", "using part_witness.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = a \\<Longrightarrow> ?P; ?y = b \\<Longrightarrow> ?P;\n   ?y = c \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. UNIV = set [a, b, c]", "by auto"], ["", "lemmas part_witness_pow = subset_subseqs[OF subset_trans[OF subset_UNIV Set.equalityD1[OF part_witness_UNIV]]]"], ["", "lemmas part_witness_Compl = Compl_eq_Diff_UNIV[where 'a=part_witness, unfolded part_witness_UNIV, simplified]"], ["", "instantiation part_witness :: topological_space\nbegin"], ["", "definition \"open_part_witness X \\<longleftrightarrow> X \\<in> {{}, {a}, {b, c}, {a, b, c}}\""], ["", "lemma part_witness_ball:\n  \"(\\<forall>s\\<in>S. s \\<in> {{}, {a}, {b, c}, {a, b, c}}) \\<longleftrightarrow> S \\<subseteq> set [{}, {a}, {b, c}, {a, b, c}]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s\\<in>S. s \\<in> {{}, {a}, {b, c}, {a, b, c}}) =\n    (S \\<subseteq> set [{}, {a}, {b, c}, {a, b, c}])", "by simp blast"], ["", "lemmas part_witness_subsets_pow = subset_subseqs[OF iffD1[OF part_witness_ball]]"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(part_witness, topological_space_class)", "proof standard"], ["proof (state)\ngoal (3 subgoals):\n 1. open UNIV\n 2. \\<And>S T.\n       \\<lbrakk>open S; open T\\<rbrakk>\n       \\<Longrightarrow> open (S \\<inter> T)\n 3. \\<And>K. \\<forall>S\\<in>K. open S \\<Longrightarrow> open (\\<Union> K)", "fix K :: \"part_witness set set\""], ["proof (state)\ngoal (3 subgoals):\n 1. open UNIV\n 2. \\<And>S T.\n       \\<lbrakk>open S; open T\\<rbrakk>\n       \\<Longrightarrow> open (S \\<inter> T)\n 3. \\<And>K. \\<forall>S\\<in>K. open S \\<Longrightarrow> open (\\<Union> K)", "assume \"\\<forall>S\\<in>K. open S\""], ["proof (state)\nthis:\n  \\<forall>S\\<in>K. open S\n\ngoal (3 subgoals):\n 1. open UNIV\n 2. \\<And>S T.\n       \\<lbrakk>open S; open T\\<rbrakk>\n       \\<Longrightarrow> open (S \\<inter> T)\n 3. \\<And>K. \\<forall>S\\<in>K. open S \\<Longrightarrow> open (\\<Union> K)", "then"], ["proof (chain)\npicking this:\n  \\<forall>S\\<in>K. open S", "show \"open (\\<Union>K)\""], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>K. open S\n\ngoal (1 subgoal):\n 1. open (\\<Union> K)", "unfolding open_part_witness_def"], ["proof (prove)\nusing this:\n  \\<forall>S\\<in>K. S \\<in> {{}, {a}, {b, c}, {a, b, c}}\n\ngoal (1 subgoal):\n 1. \\<Union> K \\<in> {{}, {a}, {b, c}, {a, b, c}}", "by - (drule part_witness_subsets_pow; clarsimp; elim disjE; simp add: insert_commute)"], ["proof (state)\nthis:\n  open (\\<Union> K)\n\ngoal (2 subgoals):\n 1. open UNIV\n 2. \\<And>S T.\n       \\<lbrakk>open S; open T\\<rbrakk>\n       \\<Longrightarrow> open (S \\<inter> T)", "qed (auto simp: open_part_witness_def part_witness_UNIV)"], ["", "end"], ["", "lemma part_witness_interior_simps:\n  shows\n    \"interior {a} = {a}\"\n    \"interior {b} = {}\"\n    \"interior {c} = {}\"\n    \"interior {a, b} = {a}\"\n    \"interior {a, c} = {a}\"\n    \"interior {b, c} = {b, c}\"\n    \"interior {a, b, c} = {a, b, c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (interior {a} = {a} &&& interior {b} = {} &&& interior {c} = {}) &&&\n    (interior {a, b} = {a} &&& interior {a, c} = {a}) &&&\n    interior {b, c} = {b, c} &&& interior {a, b, c} = {a, b, c}", "unfolding interior_def open_part_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {a}} =\n     {a} &&&\n     \\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {b}} =\n     {} &&&\n     \\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {c}} =\n     {}) &&&\n    (\\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {a, b}} =\n     {a} &&&\n     \\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {a, c}} =\n     {a}) &&&\n    \\<Union> {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {b, c}} =\n    {b, c} &&&\n    \\<Union>\n     {T \\<in> {{}, {a}, {b, c}, {a, b, c}}. T \\<subseteq> {a, b, c}} =\n    {a, b, c}", "by auto"], ["", "lemma part_witness_part:\n  fixes X :: \"part_witness set\"\n  shows \"part X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. part X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. part X", "have \"closure (interior Y) = interior Y\" for Y :: \"part_witness set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure (interior Y) = interior Y", "using part_witness_pow[where X=Y]"], ["proof (prove)\nusing this:\n  Y \\<in> set ` set (subseqs [a, b, c])\n\ngoal (1 subgoal):\n 1. closure (interior Y) = interior Y", "by (auto simp: closure_interior part_witness_interior_simps part_witness_Compl insert_Diff_if)"], ["proof (state)\nthis:\n  closure (interior ?Y) = interior ?Y\n\ngoal (1 subgoal):\n 1. part X", "then"], ["proof (chain)\npicking this:\n  closure (interior ?Y) = interior ?Y", "show ?thesis"], ["proof (prove)\nusing this:\n  closure (interior ?Y) = interior ?Y\n\ngoal (1 subgoal):\n 1. part X", "unfolding part_def I_def K_def"], ["proof (prove)\nusing this:\n  closure (interior ?Y) = interior ?Y\n\ngoal (1 subgoal):\n 1. closure \\<circ> interior = interior", "by (simp add: o_def)"], ["proof (state)\nthis:\n  part X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma part_witness_not_discrete:\n  fixes X :: \"part_witness set\"\n  shows \"\\<not>discrete X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> discrete X", "unfolding discrete_def I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<noteq> id", "by (clarsimp simp: o_apply fun_eq_iff exI[where x=\"{b}\"] part_witness_interior_simps)"], ["", "lemma part_witness_card:\n  shows \"card {f. CK_nf_pos (f::part_witness set \\<Rightarrow> part_witness set)} = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 3", "by (rule part_not_discrete_card[OF part_witness_part part_witness_not_discrete])"], ["", "subsection\\<open> Extremally disconnected and open unresolvable spaces \\<close>"], ["", "definition\n  \"ed_ou (X :: 'a::topological_space set) \\<longleftrightarrow> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\""], ["", "lemma discrete_ed_ou:\n  assumes \"discrete X\"\n  shows \"ed_ou X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ed_ou X", "using assms"], ["proof (prove)\nusing this:\n  discrete X\n\ngoal (1 subgoal):\n 1. ed_ou X", "unfolding discrete_def ed_ou_def"], ["proof (prove)\nusing this:\n  I = id\n\ngoal (1 subgoal):\n 1. I \\<circ> K = K \\<circ> I", "by simp"], ["", "lemma ed_ou_eqs:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<circ> K \\<circ> I = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I &&& I \\<circ> K = K \\<circ> I", "using assms"], ["proof (prove)\nusing this:\n  ed_ou X\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I &&& I \\<circ> K = K \\<circ> I", "unfolding ed_ou_def"], ["proof (prove)\nusing this:\n  I \\<circ> K = K \\<circ> I\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I &&& I \\<circ> K = K \\<circ> I", "by (metis I_I K_K o_assoc)+"], ["", "lemma ed_ou_neqs:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows\n    \"I \\<noteq> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I \\<noteq> K &&& I \\<noteq> K \\<circ> I) &&&\n    K \\<noteq> K \\<circ> I &&& I \\<noteq> id &&& K \\<noteq> id", "using assms CK_nf_pos_lattice[where 'a='a]"], ["proof (prove)\nusing this:\n  ed_ou X\n  \\<not> discrete X\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n\ngoal (1 subgoal):\n 1. (I \\<noteq> K &&& I \\<noteq> K \\<circ> I) &&&\n    K \\<noteq> K \\<circ> I &&& I \\<noteq> id &&& K \\<noteq> id", "unfolding ed_ou_def discrete_def"], ["proof (prove)\nusing this:\n  I \\<circ> K = K \\<circ> I\n  I \\<noteq> id\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n\ngoal (1 subgoal):\n 1. (I \\<noteq> K &&& I \\<noteq> K \\<circ> I) &&&\n    K \\<noteq> K \\<circ> I &&& I \\<noteq> id &&& K \\<noteq> id", "by (metis (no_types, lifting) C_C I_K K_I comp_id o_assoc antisym)+"], ["", "lemma ed_ou_not_discrete_card:\n  assumes \"ed_ou (X :: 'a::topological_space set)\"\n  assumes \"\\<not>discrete X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 4", "using ed_ou_eqs[OF \\<open>ed_ou X\\<close>] ed_ou_neqs[OF assms]"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = K \\<circ> I\n  K \\<circ> I \\<circ> K = K \\<circ> I\n  I \\<circ> K = K \\<circ> I\n  I \\<noteq> K\n  I \\<noteq> K \\<circ> I\n  K \\<noteq> K \\<circ> I\n  I \\<noteq> id\n  K \\<noteq> id\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 4", "by (subst CK_nf_pos_set) (subst card_insert_disjoint; (auto)[1])+"], ["", "text\\<open>\n\nWe consider an example extremally disconnected and open unresolvable topological space.\n\n\\<close>"], ["", "datatype ed_ou_witness = a | b | c | d | e"], ["", "lemma ed_ou_witness_UNIV:\n  shows \"UNIV = set [a, b, c, d, e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = set [ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e]", "using ed_ou_witness.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = ed_ou_witness.a \\<Longrightarrow> ?P;\n   ?y = ed_ou_witness.b \\<Longrightarrow> ?P;\n   ?y = ed_ou_witness.c \\<Longrightarrow> ?P; ?y = d \\<Longrightarrow> ?P;\n   ?y = e \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. UNIV = set [ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e]", "by auto"], ["", "lemmas ed_ou_witness_pow = subset_subseqs[OF subset_trans[OF subset_UNIV Set.equalityD1[OF ed_ou_witness_UNIV]]]"], ["", "lemmas ed_ou_witness_Compl = Compl_eq_Diff_UNIV[where 'a=ed_ou_witness, unfolded ed_ou_witness_UNIV, simplified]"], ["", "instance ed_ou_witness :: finite"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ed_ou_witness, finite_class)", "by standard (simp add: ed_ou_witness_UNIV)"], ["", "instantiation ed_ou_witness :: topological_space\nbegin"], ["", "inductive open_ed_ou_witness :: \"ed_ou_witness set \\<Rightarrow> bool\" where\n  \"open_ed_ou_witness {}\"\n| \"open_ed_ou_witness {a}\"\n| \"open_ed_ou_witness {b}\"\n| \"open_ed_ou_witness {e}\"\n| \"open_ed_ou_witness {a, c}\"\n| \"open_ed_ou_witness {b, d}\"\n| \"open_ed_ou_witness {a, c, e}\"\n\n| \"open_ed_ou_witness {a, b}\"\n| \"open_ed_ou_witness {a, e}\"\n| \"open_ed_ou_witness {b, e}\"\n| \"open_ed_ou_witness {a, b, c}\"\n| \"open_ed_ou_witness {a, b, d}\"\n| \"open_ed_ou_witness {a, b, e}\"\n| \"open_ed_ou_witness {b, d, e}\"\n| \"open_ed_ou_witness {a, b, c, d}\"\n| \"open_ed_ou_witness {a, b, c, e}\"\n| \"open_ed_ou_witness {a, b, d, e}\"\n| \"open_ed_ou_witness {a, b, c, d, e}\""], ["", "declare open_ed_ou_witness.intros[intro!]"], ["", "lemma ed_ou_witness_inter:\n  fixes S :: \"ed_ou_witness set\"\n  assumes \"open S\"\n  assumes \"open T\"\n  shows \"open (S \\<inter> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (S \\<inter> T)", "using assms"], ["proof (prove)\nusing this:\n  open S\n  open T\n\ngoal (1 subgoal):\n 1. open (S \\<inter> T)", "by (auto elim!: open_ed_ou_witness.cases)"], ["", "lemma ed_ou_witness_union:\n  fixes X :: \"ed_ou_witness set set\"\n  assumes \"\\<forall>x\\<in>X. open x\"\n  shows \"open (\\<Union>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open (\\<Union> X)", "using finite[of X] assms"], ["proof (prove)\nusing this:\n  finite X\n  \\<forall>x\\<in>X. open x\n\ngoal (1 subgoal):\n 1. open (\\<Union> X)", "by (induct, force)\n   (clarsimp; elim open_ed_ou_witness.cases; simp add: open_ed_ou_witness.simps subset_insertI2 insert_commute; metis Union_empty_conv)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ed_ou_witness, topological_space_class)", "by standard (auto simp: ed_ou_witness_UNIV intro: ed_ou_witness_inter ed_ou_witness_union)"], ["", "end"], ["", "lemma ed_ou_witness_interior_simps:\n  shows\n    \"interior {a} = {a}\"\n    \"interior {b} = {b}\"\n    \"interior {c} = {}\"\n    \"interior {d} = {}\"\n    \"interior {e} = {e}\"\n    \"interior {a, b} = {a, b}\"\n    \"interior {a, c} = {a, c}\"\n    \"interior {a, d} = {a}\"\n    \"interior {a, e} = {a, e}\"\n    \"interior {b, c} = {b}\"\n    \"interior {b, d} = {b, d}\"\n    \"interior {b, e} = {b, e}\"\n    \"interior {c, d} = {}\"\n    \"interior {c, e} = {e}\"\n    \"interior {d, e} = {e}\"\n    \"interior {a, b, c} = {a, b, c}\"\n    \"interior {a, b, d} = {a, b, d}\"\n    \"interior {a, b, e} = {a, b, e}\"\n    \"interior {a, c, d} = {a, c}\"\n    \"interior {a, c, e} = {a, c, e}\"\n    \"interior {a, d, e} = {a, e}\"\n    \"interior {b, c, d} = {b, d}\"\n    \"interior {b, c, e} = {b, e}\"\n    \"interior {b, d, e} = {b, d, e}\"\n    \"interior {c, d, e} = {e}\"\n    \"interior {a, b, c, d} = {a, b, c, d}\"\n    \"interior {a, b, c, e} = {a, b, c, e}\"\n    \"interior {a, b, d, e} = {a, b, d, e}\"\n    \"interior {a, b, c, d, e} = {a, b, c, d, e}\"\n    \"interior {a, c, d, e} = {a, c, e}\"\n    \"interior {b, c, d, e} = {b, d, e}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((interior {ed_ou_witness.a} = {ed_ou_witness.a} &&&\n       interior {ed_ou_witness.b} = {ed_ou_witness.b} &&&\n       interior {ed_ou_witness.c} = {}) &&&\n      (interior {d} = {} &&& interior {e} = {e}) &&&\n      interior {ed_ou_witness.a, ed_ou_witness.b} =\n      {ed_ou_witness.a, ed_ou_witness.b} &&&\n      interior {ed_ou_witness.a, ed_ou_witness.c} =\n      {ed_ou_witness.a, ed_ou_witness.c}) &&&\n     ((interior {ed_ou_witness.a, d} = {ed_ou_witness.a} &&&\n       interior {ed_ou_witness.a, e} = {ed_ou_witness.a, e}) &&&\n      interior {ed_ou_witness.b, ed_ou_witness.c} = {ed_ou_witness.b} &&&\n      interior {ed_ou_witness.b, d} = {ed_ou_witness.b, d}) &&&\n     (interior {ed_ou_witness.b, e} = {ed_ou_witness.b, e} &&&\n      interior {ed_ou_witness.c, d} = {}) &&&\n     interior {ed_ou_witness.c, e} = {e} &&& interior {d, e} = {e}) &&&\n    (((interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c} =\n       {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c} &&&\n       interior {ed_ou_witness.a, ed_ou_witness.b, d} =\n       {ed_ou_witness.a, ed_ou_witness.b, d}) &&&\n      interior {ed_ou_witness.a, ed_ou_witness.b, e} =\n      {ed_ou_witness.a, ed_ou_witness.b, e} &&&\n      interior {ed_ou_witness.a, ed_ou_witness.c, d} =\n      {ed_ou_witness.a, ed_ou_witness.c}) &&&\n     (interior {ed_ou_witness.a, ed_ou_witness.c, e} =\n      {ed_ou_witness.a, ed_ou_witness.c, e} &&&\n      interior {ed_ou_witness.a, d, e} = {ed_ou_witness.a, e}) &&&\n     interior {ed_ou_witness.b, ed_ou_witness.c, d} =\n     {ed_ou_witness.b, d} &&&\n     interior {ed_ou_witness.b, ed_ou_witness.c, e} =\n     {ed_ou_witness.b, e}) &&&\n    ((interior {ed_ou_witness.b, d, e} = {ed_ou_witness.b, d, e} &&&\n      interior {ed_ou_witness.c, d, e} = {e}) &&&\n     interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d} &&&\n     interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, e} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, e}) &&&\n    (interior {ed_ou_witness.a, ed_ou_witness.b, d, e} =\n     {ed_ou_witness.a, ed_ou_witness.b, d, e} &&&\n     interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e}) &&&\n    interior {ed_ou_witness.a, ed_ou_witness.c, d, e} =\n    {ed_ou_witness.a, ed_ou_witness.c, e} &&&\n    interior {ed_ou_witness.b, ed_ou_witness.c, d, e} =\n    {ed_ou_witness.b, d, e}", "unfolding interior_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a}} =\n       {ed_ou_witness.a} &&&\n       \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.b}} =\n       {ed_ou_witness.b} &&&\n       \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.c}} = {}) &&&\n      (\\<Union> {T. open T \\<and> T \\<subseteq> {d}} = {} &&&\n       \\<Union> {T. open T \\<and> T \\<subseteq> {e}} = {e}) &&&\n      \\<Union>\n       {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b}} =\n      {ed_ou_witness.a, ed_ou_witness.b} &&&\n      \\<Union>\n       {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.c}} =\n      {ed_ou_witness.a, ed_ou_witness.c}) &&&\n     ((\\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a, d}} =\n       {ed_ou_witness.a} &&&\n       \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a, e}} =\n       {ed_ou_witness.a, e}) &&&\n      \\<Union>\n       {T. open T \\<and> T \\<subseteq> {ed_ou_witness.b, ed_ou_witness.c}} =\n      {ed_ou_witness.b} &&&\n      \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.b, d}} =\n      {ed_ou_witness.b, d}) &&&\n     (\\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.b, e}} =\n      {ed_ou_witness.b, e} &&&\n      \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.c, d}} =\n      {}) &&&\n     \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.c, e}} =\n     {e} &&&\n     \\<Union> {T. open T \\<and> T \\<subseteq> {d, e}} = {e}) &&&\n    (((\\<Union>\n        {T. open T \\<and>\n            T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b,\n                           ed_ou_witness.c}} =\n       {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c} &&&\n       \\<Union>\n        {T. open T \\<and>\n            T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, d}} =\n       {ed_ou_witness.a, ed_ou_witness.b, d}) &&&\n      \\<Union>\n       {T. open T \\<and>\n           T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, e}} =\n      {ed_ou_witness.a, ed_ou_witness.b, e} &&&\n      \\<Union>\n       {T. open T \\<and>\n           T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.c, d}} =\n      {ed_ou_witness.a, ed_ou_witness.c}) &&&\n     (\\<Union>\n       {T. open T \\<and>\n           T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.c, e}} =\n      {ed_ou_witness.a, ed_ou_witness.c, e} &&&\n      \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.a, d, e}} =\n      {ed_ou_witness.a, e}) &&&\n     \\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.b, ed_ou_witness.c, d}} =\n     {ed_ou_witness.b, d} &&&\n     \\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.b, ed_ou_witness.c, e}} =\n     {ed_ou_witness.b, e}) &&&\n    ((\\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.b, d, e}} =\n      {ed_ou_witness.b, d, e} &&&\n      \\<Union> {T. open T \\<and> T \\<subseteq> {ed_ou_witness.c, d, e}} =\n      {e}) &&&\n     \\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c,\n                         d}} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d} &&&\n     \\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c,\n                         e}} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, e}) &&&\n    (\\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, d, e}} =\n     {ed_ou_witness.a, ed_ou_witness.b, d, e} &&&\n     \\<Union>\n      {T. open T \\<and>\n          T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c,\n                         d, e}} =\n     {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e}) &&&\n    \\<Union>\n     {T. open T \\<and>\n         T \\<subseteq> {ed_ou_witness.a, ed_ou_witness.c, d, e}} =\n    {ed_ou_witness.a, ed_ou_witness.c, e} &&&\n    \\<Union>\n     {T. open T \\<and>\n         T \\<subseteq> {ed_ou_witness.b, ed_ou_witness.c, d, e}} =\n    {ed_ou_witness.b, d, e}", "by safe (clarsimp simp: open_ed_ou_witness.simps; blast)+"], ["", "lemma ed_ou_witness_not_discrete:\n  fixes X :: \"ed_ou_witness set\"\n  shows \"\\<not>discrete X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> discrete X", "unfolding discrete_def I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<noteq> id", "using ed_ou_witness_interior_simps"], ["proof (prove)\nusing this:\n  interior {ed_ou_witness.a} = {ed_ou_witness.a}\n  interior {ed_ou_witness.b} = {ed_ou_witness.b}\n  interior {ed_ou_witness.c} = {}\n  interior {d} = {}\n  interior {e} = {e}\n  interior {ed_ou_witness.a, ed_ou_witness.b} =\n  {ed_ou_witness.a, ed_ou_witness.b}\n  interior {ed_ou_witness.a, ed_ou_witness.c} =\n  {ed_ou_witness.a, ed_ou_witness.c}\n  interior {ed_ou_witness.a, d} = {ed_ou_witness.a}\n  interior {ed_ou_witness.a, e} = {ed_ou_witness.a, e}\n  interior {ed_ou_witness.b, ed_ou_witness.c} = {ed_ou_witness.b}\n  interior {ed_ou_witness.b, d} = {ed_ou_witness.b, d}\n  interior {ed_ou_witness.b, e} = {ed_ou_witness.b, e}\n  interior {ed_ou_witness.c, d} = {}\n  interior {ed_ou_witness.c, e} = {e}\n  interior {d, e} = {e}\n  interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c} =\n  {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c}\n  interior {ed_ou_witness.a, ed_ou_witness.b, d} =\n  {ed_ou_witness.a, ed_ou_witness.b, d}\n  interior {ed_ou_witness.a, ed_ou_witness.b, e} =\n  {ed_ou_witness.a, ed_ou_witness.b, e}\n  interior {ed_ou_witness.a, ed_ou_witness.c, d} =\n  {ed_ou_witness.a, ed_ou_witness.c}\n  interior {ed_ou_witness.a, ed_ou_witness.c, e} =\n  {ed_ou_witness.a, ed_ou_witness.c, e}\n  interior {ed_ou_witness.a, d, e} = {ed_ou_witness.a, e}\n  interior {ed_ou_witness.b, ed_ou_witness.c, d} = {ed_ou_witness.b, d}\n  interior {ed_ou_witness.b, ed_ou_witness.c, e} = {ed_ou_witness.b, e}\n  interior {ed_ou_witness.b, d, e} = {ed_ou_witness.b, d, e}\n  interior {ed_ou_witness.c, d, e} = {e}\n  interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d} =\n  {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d}\n  interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, e} =\n  {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, e}\n  interior {ed_ou_witness.a, ed_ou_witness.b, d, e} =\n  {ed_ou_witness.a, ed_ou_witness.b, d, e}\n  interior {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e} =\n  {ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e}\n  interior {ed_ou_witness.a, ed_ou_witness.c, d, e} =\n  {ed_ou_witness.a, ed_ou_witness.c, e}\n  interior {ed_ou_witness.b, ed_ou_witness.c, d, e} =\n  {ed_ou_witness.b, d, e}\n\ngoal (1 subgoal):\n 1. interior \\<noteq> id", "by (force simp: fun_eq_iff)"], ["", "lemma ed_ou_witness_ed_ou:\n  fixes X :: \"ed_ou_witness set\"\n  shows \"ed_ou X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ed_ou X", "unfolding ed_ou_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<circ> closure = closure \\<circ> interior", "proof(clarsimp simp: o_apply fun_eq_iff)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. interior (closure x) = closure (interior x)", "fix x :: \"ed_ou_witness set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. interior (closure x) = closure (interior x)", "from ed_ou_witness_pow[of x]"], ["proof (chain)\npicking this:\n  x \\<in> set `\n          set (subseqs\n                [ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e])", "show \"interior (closure x) = closure (interior x)\""], ["proof (prove)\nusing this:\n  x \\<in> set `\n          set (subseqs\n                [ed_ou_witness.a, ed_ou_witness.b, ed_ou_witness.c, d, e])\n\ngoal (1 subgoal):\n 1. interior (closure x) = closure (interior x)", "by - (simp; elim disjE; simp add: closure_interior ed_ou_witness_interior_simps ed_ou_witness_Compl insert_Diff_if)"], ["proof (state)\nthis:\n  interior (closure x) = closure (interior x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ed_ou_witness_card:\n  shows \"card {f. CK_nf_pos (f::ed_ou_witness set \\<Rightarrow> ed_ou_witness set)} = 4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 4", "by (rule ed_ou_not_discrete_card[OF ed_ou_witness_ed_ou ed_ou_witness_not_discrete])"], ["", "subsection\\<open> Extremally disconnected spaces \\<close>"], ["", "definition\n  \"extremally_disconnected (X :: 'a::topological_space set) \\<longleftrightarrow> K \\<circ> I \\<circ> K = I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\""], ["", "lemma ed_ou_part_extremally_disconnected:\n  assumes \"ed_ou X\"\n  assumes \"part X\"\n  shows \"extremally_disconnected X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extremally_disconnected X", "using assms"], ["proof (prove)\nusing this:\n  ed_ou X\n  part X\n\ngoal (1 subgoal):\n 1. extremally_disconnected X", "unfolding extremally_disconnected_def ed_ou_def part_def"], ["proof (prove)\nusing this:\n  I \\<circ> K = K \\<circ> I\n  K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. K \\<circ> I \\<circ> K = I \\<circ> K", "by simp"], ["", "lemma extremally_disconnected_eqs:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"extremally_disconnected X\"\n  shows\n    \"I \\<circ> K \\<circ> I = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = I \\<circ> K", "using assms"], ["proof (prove)\nusing this:\n  extremally_disconnected X\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = I \\<circ> K", "unfolding extremally_disconnected_def"], ["proof (prove)\nusing this:\n  K \\<circ> I \\<circ> K = I \\<circ> K\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = K \\<circ> I &&&\n    K \\<circ> I \\<circ> K = I \\<circ> K", "by (metis K_I_K_I)+"], ["", "lemma extremally_disconnected_not_part_not_ed_ou_card:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"extremally_disconnected X\"\n  assumes \"\\<not>part X\"\n  assumes \"\\<not>ed_ou X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "using extremally_disconnected_eqs[OF \\<open>extremally_disconnected X\\<close>] CK_nf_pos_lattice[where 'a='a] assms(2,3)"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = K \\<circ> I\n  K \\<circ> I \\<circ> K = I \\<circ> K\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n  \\<not> part X\n  \\<not> ed_ou X\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "unfolding part_def ed_ou_def"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = K \\<circ> I\n  K \\<circ> I \\<circ> K = I \\<circ> K\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n  K \\<circ> I \\<noteq> I\n  I \\<circ> K \\<noteq> K \\<circ> I\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "by (simp add: CK_nf_pos_set C_C I_K K_K o_assoc card_insert_if; metis (no_types) C_C K_I id_comp o_assoc)"], ["", "text\\<open>\n\nAny topological space having an infinite underlying set and whose topology consists of the empty set and every cofinite subset of the underlying set is extremally disconnected. We consider an example such space having a countably infinite underlying set.\n\n\\<close>"], ["", "datatype 'a cofinite = cofinite 'a"], ["", "instantiation cofinite :: (type) topological_space\nbegin"], ["", "definition \"open_cofinite = (\\<lambda>X::'a cofinite set. finite (-X) \\<or> X = {})\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a cofinite, topological_space_class)", "by standard (auto simp: open_cofinite_def uminus_Sup)"], ["", "end"], ["", "lemma cofinite_closure_finite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"finite X\"\n  shows \"closure X = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure X = X", "using assms"], ["proof (prove)\nusing this:\n  finite X\n\ngoal (1 subgoal):\n 1. closure X = X", "by (simp add: closed_open open_cofinite_def)"], ["", "lemma cofinite_closure_infinite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"infinite X\"\n  shows \"closure X = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure X = UNIV", "using assms"], ["proof (prove)\nusing this:\n  infinite X\n\ngoal (1 subgoal):\n 1. closure X = UNIV", "by (metis Compl_empty_eq closure_subset double_compl finite_subset interior_complement open_cofinite_def open_interior)"], ["", "lemma cofinite_interior_finite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"finite X\"\n  assumes \"infinite (UNIV::'a cofinite set)\"\n  shows \"interior X = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior X = {}", "using assms cofinite_closure_infinite[where X=\"-X\"]"], ["proof (prove)\nusing this:\n  finite X\n  infinite UNIV\n  infinite (- X) \\<Longrightarrow> closure (- X) = UNIV\n\ngoal (1 subgoal):\n 1. interior X = {}", "by (simp add: interior_closure)"], ["", "lemma cofinite_interior_infinite:\n  fixes X :: \"'a cofinite set\"\n  assumes \"infinite X\"\n  assumes \"infinite (-X)\"\n  shows \"interior X = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior X = {}", "using assms cofinite_closure_infinite[where X=\"-X\"]"], ["proof (prove)\nusing this:\n  infinite X\n  infinite (- X)\n  infinite (- X) \\<Longrightarrow> closure (- X) = UNIV\n\ngoal (1 subgoal):\n 1. interior X = {}", "by (simp add: interior_closure)"], ["", "abbreviation \"evens :: nat cofinite set \\<equiv> {cofinite n | n. \\<exists>i. n=2*i}\""], ["", "lemma evens_infinite:\n  shows \"infinite evens\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite evens", "proof(rule iffD2[OF infinite_iff_countable_subset], rule exI, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj ?f3\n 2. range ?f3 \\<subseteq> evens", "let ?f = \"\\<lambda>n::nat. cofinite (2*n)\""], ["proof (state)\ngoal (2 subgoals):\n 1. inj ?f3\n 2. range ?f3 \\<subseteq> evens", "show \"inj ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>n. cofinite.cofinite (2 * n))", "by (auto intro: inj_onI)"], ["proof (state)\nthis:\n  inj (\\<lambda>n. cofinite.cofinite (2 * n))\n\ngoal (1 subgoal):\n 1. range (\\<lambda>n. cofinite.cofinite (2 * n)) \\<subseteq> evens", "show \"range ?f \\<subseteq> evens\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>n. cofinite.cofinite (2 * n)) \\<subseteq> evens", "by auto"], ["proof (state)\nthis:\n  range (\\<lambda>n. cofinite.cofinite (2 * n)) \\<subseteq> evens\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cofinite_nat_infinite:\n  shows \"infinite (UNIV::nat cofinite set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "using evens_infinite finite_Diff2"], ["proof (prove)\nusing this:\n  infinite evens\n  finite ?B \\<Longrightarrow> finite (?A - ?B) = finite ?A\n\ngoal (1 subgoal):\n 1. infinite UNIV", "by fastforce"], ["", "lemma evens_Compl_infinite:\n  shows \"infinite (- evens)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (- evens)", "proof(rule iffD2[OF infinite_iff_countable_subset], rule exI, rule conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj ?f3\n 2. range ?f3 \\<subseteq> - evens", "let ?f = \"\\<lambda>n::nat. cofinite (2*n+1)\""], ["proof (state)\ngoal (2 subgoals):\n 1. inj ?f3\n 2. range ?f3 \\<subseteq> - evens", "show \"inj ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>n. cofinite.cofinite (2 * n + 1))", "by (auto intro: inj_onI)"], ["proof (state)\nthis:\n  inj (\\<lambda>n. cofinite.cofinite (2 * n + 1))\n\ngoal (1 subgoal):\n 1. range (\\<lambda>n. cofinite.cofinite (2 * n + 1)) \\<subseteq> - evens", "show \"range ?f \\<subseteq> -evens\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<lambda>n. cofinite.cofinite (2 * n + 1)) \\<subseteq> - evens", "by clarsimp presburger"], ["proof (state)\nthis:\n  range (\\<lambda>n. cofinite.cofinite (2 * n + 1)) \\<subseteq> - evens\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evens_closure:\n  shows \"closure evens = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure evens = UNIV", "using evens_infinite"], ["proof (prove)\nusing this:\n  infinite evens\n\ngoal (1 subgoal):\n 1. closure evens = UNIV", "by (rule cofinite_closure_infinite)"], ["", "lemma evens_interior:\n  shows \"interior evens = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. interior evens = {}", "using evens_infinite evens_Compl_infinite"], ["proof (prove)\nusing this:\n  infinite evens\n  infinite (- evens)\n\ngoal (1 subgoal):\n 1. interior evens = {}", "by (rule cofinite_interior_infinite)"], ["", "lemma cofinite_not_part:\n  fixes X :: \"nat cofinite set\"\n  shows \"\\<not>part X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> part X", "unfolding part_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure \\<circ> interior \\<noteq> interior", "using cofinite_nat_infinite"], ["proof (prove)\nusing this:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. closure \\<circ> interior \\<noteq> interior", "by (clarsimp simp: fun_eq_iff o_apply)\n   (metis (no_types) cofinite_closure_finite cofinite_interior_finite double_compl finite.emptyI finite.insertI insert_not_empty interior_closure)"], ["", "lemma cofinite_not_ed_ou:\n  fixes X :: \"nat cofinite set\"\n  shows \"\\<not>ed_ou X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ed_ou X", "unfolding ed_ou_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<circ> closure \\<noteq> closure \\<circ> interior", "by (clarsimp simp: fun_eq_iff o_apply evens_closure evens_interior exI[where x=\"evens\"])"], ["", "lemma cofinite_extremally_disconnected_aux:\n  fixes X :: \"nat cofinite set\"\n  shows \"closure (interior (closure X)) \\<subseteq> interior (closure X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closure (interior (closure X)) \\<subseteq> interior (closure X)", "by (metis subsetI closure_closure closure_complement closure_def closure_empty finite_Un interior_eq open_cofinite_def open_interior)"], ["", "lemma cofinite_extremally_disconnected:\n  fixes X :: \"nat cofinite set\"\n  shows \"extremally_disconnected X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extremally_disconnected X", "unfolding extremally_disconnected_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure \\<circ> interior \\<circ> closure = interior \\<circ> closure", "by (auto simp: fun_eq_iff o_apply dest: subsetD[OF closure_subset] subsetD[OF interior_subset] subsetD[OF cofinite_extremally_disconnected_aux])"], ["", "lemma cofinite_card:\n  shows \"card {f. CK_nf_pos (f::nat cofinite set \\<Rightarrow> nat cofinite set)} = 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "by (rule extremally_disconnected_not_part_not_ed_ou_card[OF cofinite_extremally_disconnected cofinite_not_part cofinite_not_ed_ou])"], ["", "subsection\\<open> Open unresolvable spaces \\<close>"], ["", "definition\n  \"open_unresolvable (X :: 'a::topological_space set) \\<longleftrightarrow> K \\<circ> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\""], ["", "lemma ed_ou_open_unresolvable:\n  assumes \"ed_ou X\"\n  shows \"open_unresolvable X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open_unresolvable X", "using assms"], ["proof (prove)\nusing this:\n  ed_ou X\n\ngoal (1 subgoal):\n 1. open_unresolvable X", "unfolding open_unresolvable_def"], ["proof (prove)\nusing this:\n  ed_ou X\n\ngoal (1 subgoal):\n 1. K \\<circ> I \\<circ> K = K \\<circ> I", "by (simp add: ed_ou_eqs)"], ["", "lemma open_unresolvable_eqs:\n  assumes \"open_unresolvable (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<circ> K \\<circ> I = I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K = K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = I \\<circ> K &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I", "using assms"], ["proof (prove)\nusing this:\n  open_unresolvable X\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = I \\<circ> K &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I", "unfolding open_unresolvable_def"], ["proof (prove)\nusing this:\n  K \\<circ> I \\<circ> K = K \\<circ> I\n\ngoal (1 subgoal):\n 1. I \\<circ> K \\<circ> I = I \\<circ> K &&&\n    K \\<circ> I \\<circ> K = K \\<circ> I", "by - (metis I_K_I_K o_assoc; simp)"], ["", "lemma not_ed_ou_neqs:\n  assumes \"\\<not>ed_ou (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<noteq> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> I \\<circ> K &&& K \\<noteq> K \\<circ> I", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ed_ou X\n\ngoal (1 subgoal):\n 1. I \\<noteq> I \\<circ> K &&& K \\<noteq> K \\<circ> I", "unfolding ed_ou_def"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<noteq> K \\<circ> I\n\ngoal (1 subgoal):\n 1. I \\<noteq> I \\<circ> K &&& K \\<noteq> K \\<circ> I", "by (simp_all add: fun_eq_iff I_K K_def C_def o_apply)\n   (metis (no_types, hide_lams) closure_eq_empty disjoint_eq_subset_Compl double_complement interior_Int interior_complement set_eq_subset)+"], ["", "lemma open_unresolvable_not_ed_ou_card:\n  assumes \"open_unresolvable (X :: 'a::topological_space set)\"\n  assumes \"\\<not>ed_ou X\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "using open_unresolvable_eqs[OF \\<open>open_unresolvable X\\<close>] not_ed_ou_neqs[OF \\<open>\\<not>ed_ou X\\<close>] \\<open>\\<not>ed_ou X\\<close>"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = I \\<circ> K\n  K \\<circ> I \\<circ> K = K \\<circ> I\n  I \\<noteq> I \\<circ> K\n  K \\<noteq> K \\<circ> I\n  \\<not> ed_ou X\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "unfolding ed_ou_def"], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = I \\<circ> K\n  K \\<circ> I \\<circ> K = K \\<circ> I\n  I \\<noteq> I \\<circ> K\n  K \\<noteq> K \\<circ> I\n  I \\<circ> K \\<noteq> K \\<circ> I\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "by (auto simp: CK_nf_pos_set card_insert_if)"], ["", "text\\<open>\n\nWe show that the class of open unresolvable spaces is non-empty by exhibiting an example of such a space.\n\n\\<close>"], ["", "datatype ou_witness = a | b | c"], ["", "lemma ou_witness_UNIV:\n  shows \"UNIV = set [a, b, c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = set [ou_witness.a, ou_witness.b, ou_witness.c]", "using ou_witness.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = ou_witness.a \\<Longrightarrow> ?P;\n   ?y = ou_witness.b \\<Longrightarrow> ?P;\n   ?y = ou_witness.c \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. UNIV = set [ou_witness.a, ou_witness.b, ou_witness.c]", "by auto"], ["", "instantiation ou_witness :: topological_space\nbegin"], ["", "definition \"open_ou_witness X \\<longleftrightarrow> a \\<notin> X \\<or> X = UNIV\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ou_witness, topological_space_class)", "by standard (auto simp: open_ou_witness_def)"], ["", "end"], ["", "lemma ou_witness_closure_simps:\n  shows\n    \"closure {a} = {a}\"\n    \"closure {b} = {a, b}\"\n    \"closure {c} = {a, c}\"\n    \"closure {a, b} = {a, b}\"\n    \"closure {a, c} = {a, c}\"\n    \"closure {a, b, c} = {a, b, c}\"\n    \"closure {b, c} = {a, b, c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (closure {ou_witness.a} = {ou_witness.a} &&&\n     closure {ou_witness.b} = {ou_witness.a, ou_witness.b} &&&\n     closure {ou_witness.c} = {ou_witness.a, ou_witness.c}) &&&\n    (closure {ou_witness.a, ou_witness.b} = {ou_witness.a, ou_witness.b} &&&\n     closure {ou_witness.a, ou_witness.c} =\n     {ou_witness.a, ou_witness.c}) &&&\n    closure {ou_witness.a, ou_witness.b, ou_witness.c} =\n    {ou_witness.a, ou_witness.b, ou_witness.c} &&&\n    closure {ou_witness.b, ou_witness.c} =\n    {ou_witness.a, ou_witness.b, ou_witness.c}", "unfolding closure_def islimpt_def open_ou_witness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({ou_witness.a} \\<union>\n     {x. \\<forall>T.\n            x \\<in> T \\<longrightarrow>\n            ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n            (\\<exists>y\\<in>{ou_witness.a}.\n                y \\<in> T \\<and> y \\<noteq> x)} =\n     {ou_witness.a} &&&\n     {ou_witness.b} \\<union>\n     {x. \\<forall>T.\n            x \\<in> T \\<longrightarrow>\n            ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n            (\\<exists>y\\<in>{ou_witness.b}.\n                y \\<in> T \\<and> y \\<noteq> x)} =\n     {ou_witness.a, ou_witness.b} &&&\n     {ou_witness.c} \\<union>\n     {x. \\<forall>T.\n            x \\<in> T \\<longrightarrow>\n            ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n            (\\<exists>y\\<in>{ou_witness.c}.\n                y \\<in> T \\<and> y \\<noteq> x)} =\n     {ou_witness.a, ou_witness.c}) &&&\n    ({ou_witness.a, ou_witness.b} \\<union>\n     {x. \\<forall>T.\n            x \\<in> T \\<longrightarrow>\n            ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n            (\\<exists>y\\<in>{ou_witness.a, ou_witness.b}.\n                y \\<in> T \\<and> y \\<noteq> x)} =\n     {ou_witness.a, ou_witness.b} &&&\n     {ou_witness.a, ou_witness.c} \\<union>\n     {x. \\<forall>T.\n            x \\<in> T \\<longrightarrow>\n            ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n            (\\<exists>y\\<in>{ou_witness.a, ou_witness.c}.\n                y \\<in> T \\<and> y \\<noteq> x)} =\n     {ou_witness.a, ou_witness.c}) &&&\n    {ou_witness.a, ou_witness.b, ou_witness.c} \\<union>\n    {x. \\<forall>T.\n           x \\<in> T \\<longrightarrow>\n           ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n           (\\<exists>y\\<in>{ou_witness.a, ou_witness.b, ou_witness.c}.\n               y \\<in> T \\<and> y \\<noteq> x)} =\n    {ou_witness.a, ou_witness.b, ou_witness.c} &&&\n    {ou_witness.b, ou_witness.c} \\<union>\n    {x. \\<forall>T.\n           x \\<in> T \\<longrightarrow>\n           ou_witness.a \\<notin> T \\<or> T = UNIV \\<longrightarrow>\n           (\\<exists>y\\<in>{ou_witness.b, ou_witness.c}.\n               y \\<in> T \\<and> y \\<noteq> x)} =\n    {ou_witness.a, ou_witness.b, ou_witness.c}", "by force+"], ["", "lemma ou_witness_open_unresolvable:\n  fixes X :: \"ou_witness set\"\n  shows \"open_unresolvable X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open_unresolvable X", "unfolding open_unresolvable_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. closure \\<circ> interior \\<circ> closure = closure \\<circ> interior", "by (clarsimp simp: o_apply fun_eq_iff)\n   (metis (no_types, lifting) Compl_iff K_I_K_subseteq_K closure_complement closure_interior closure_mono closure_subset interior_eq interior_maximal open_ou_witness_def subset_antisym)"], ["", "lemma ou_witness_not_ed_ou:\n  fixes X :: \"ou_witness set\"\n  shows \"\\<not>ed_ou X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ed_ou X", "unfolding ed_ou_def I_def K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. interior \\<circ> closure \\<noteq> closure \\<circ> interior", "by (clarsimp simp: o_apply fun_eq_iff)\n   (metis UNIV_I insert_iff interior_eq open_ou_witness_def singletonD\n          ou_witness.distinct(4,5) ou_witness.simps(2) ou_witness_closure_simps(2))"], ["", "lemma ou_witness_card:\n  shows \"card {f. CK_nf_pos (f::ou_witness set \\<Rightarrow> ou_witness set)} = 5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 5", "by (rule open_unresolvable_not_ed_ou_card[OF ou_witness_open_unresolvable ou_witness_not_ed_ou])"], ["", "subsection\\<open> Kuratowski spaces \\<close>"], ["", "definition\n  \"kuratowski (X :: 'a::topological_space set) \\<longleftrightarrow>\n    \\<not>extremally_disconnected X \\<and> \\<not>open_unresolvable X\""], ["", "text\\<open>\n\nA Kuratowski space distinguishes all 7 positive operators.\n\n\\<close>"], ["", "lemma part_closed_open:\n  fixes X :: \"'a::topological_space set\"\n  assumes \"I \\<circ> K \\<circ> I = (I::'a set \\<Rightarrow> 'a set)\"\n  assumes \"closed X\"\n  shows \"open X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open X", "proof(rule Topological_Spaces.openI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "let ?S = \"I (-{x})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "let ?G = \"-K ?S\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "have \"x \\<in> ?G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "from \\<open>I \\<circ> K \\<circ> I = I\\<close>"], ["proof (chain)\npicking this:\n  I \\<circ> K \\<circ> I = I", "have \"I (K (I ?S)) = ?S\" \"I ?S = ?S\""], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. I (K (I (I (- {x})))) = I (- {x}) &&& I (I (- {x})) = I (- {x})", "unfolding I_def K_def"], ["proof (prove)\nusing this:\n  interior \\<circ> closure \\<circ> interior = interior\n\ngoal (1 subgoal):\n 1. interior (closure (interior (interior (- {x})))) = interior (- {x}) &&&\n    interior (interior (- {x})) = interior (- {x})", "by (simp_all add: o_def fun_eq_iff)"], ["proof (state)\nthis:\n  I (K (I (I (- {x})))) = I (- {x})\n  I (I (- {x})) = I (- {x})\n\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "then"], ["proof (chain)\npicking this:\n  I (K (I (I (- {x})))) = I (- {x})\n  I (I (- {x})) = I (- {x})", "have \"K (I ?S) \\<noteq> UNIV\""], ["proof (prove)\nusing this:\n  I (K (I (I (- {x})))) = I (- {x})\n  I (I (- {x})) = I (- {x})\n\ngoal (1 subgoal):\n 1. K (I (I (- {x}))) \\<noteq> UNIV", "unfolding I_def K_def"], ["proof (prove)\nusing this:\n  interior (closure (interior (interior (- {x})))) = interior (- {x})\n  interior (interior (- {x})) = interior (- {x})\n\ngoal (1 subgoal):\n 1. closure (interior (interior (- {x}))) \\<noteq> UNIV", "using interior_subset"], ["proof (prove)\nusing this:\n  interior (closure (interior (interior (- {x})))) = interior (- {x})\n  interior (interior (- {x})) = interior (- {x})\n  interior ?S \\<subseteq> ?S\n\ngoal (1 subgoal):\n 1. closure (interior (interior (- {x}))) \\<noteq> UNIV", "by fastforce"], ["proof (state)\nthis:\n  K (I (I (- {x}))) \\<noteq> UNIV\n\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "moreover"], ["proof (state)\nthis:\n  K (I (I (- {x}))) \\<noteq> UNIV\n\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "have \"G \\<subseteq> ?S \\<or> x \\<in> G\" if \"open G\" for G"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<subseteq> I (- {x}) \\<or> x \\<in> G", "using that"], ["proof (prove)\nusing this:\n  open G\n\ngoal (1 subgoal):\n 1. G \\<subseteq> I (- {x}) \\<or> x \\<in> G", "unfolding I_def"], ["proof (prove)\nusing this:\n  open G\n\ngoal (1 subgoal):\n 1. G \\<subseteq> interior (- {x}) \\<or> x \\<in> G", "by (meson interior_maximal subset_Compl_singleton)"], ["proof (state)\nthis:\n  open ?G \\<Longrightarrow> ?G \\<subseteq> I (- {x}) \\<or> x \\<in> ?G\n\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "ultimately"], ["proof (chain)\npicking this:\n  K (I (I (- {x}))) \\<noteq> UNIV\n  open ?G \\<Longrightarrow> ?G \\<subseteq> I (- {x}) \\<or> x \\<in> ?G", "show ?thesis"], ["proof (prove)\nusing this:\n  K (I (I (- {x}))) \\<noteq> UNIV\n  open ?G \\<Longrightarrow> ?G \\<subseteq> I (- {x}) \\<or> x \\<in> ?G\n\ngoal (1 subgoal):\n 1. x \\<in> - K (I (- {x}))", "unfolding I_def K_def"], ["proof (prove)\nusing this:\n  closure (interior (interior (- {x}))) \\<noteq> UNIV\n  open ?G \\<Longrightarrow> ?G \\<subseteq> interior (- {x}) \\<or> x \\<in> ?G\n\ngoal (1 subgoal):\n 1. x \\<in> - closure (interior (- {x}))", "by clarsimp (metis (no_types, lifting) ComplD Compl_empty_eq closure_interior closure_subset ex_in_conv open_interior subset_eq)"], ["proof (state)\nthis:\n  x \\<in> - K (I (- {x}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> - K (I (- {x}))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "moreover"], ["proof (state)\nthis:\n  x \\<in> - K (I (- {x}))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "from \\<open>I \\<circ> K \\<circ> I = I\\<close>"], ["proof (chain)\npicking this:\n  I \\<circ> K \\<circ> I = I", "have \"open ?G\""], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. open (- K (I (- {x})))", "unfolding I_def K_def"], ["proof (prove)\nusing this:\n  interior \\<circ> closure \\<circ> interior = interior\n\ngoal (1 subgoal):\n 1. open (- closure (interior (- {x})))", "by (auto simp: fun_eq_iff o_apply)"], ["proof (state)\nthis:\n  open (- K (I (- {x})))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "moreover"], ["proof (state)\nthis:\n  open (- K (I (- {x})))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "have \"?G \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "have \"?G \\<subseteq> K ?G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> K (- K (I (- {x})))", "unfolding K_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - closure (I (- {x})) \\<subseteq> closure (- closure (I (- {x})))", "using closure_subset"], ["proof (prove)\nusing this:\n  ?S \\<subseteq> closure ?S\n\ngoal (1 subgoal):\n 1. - closure (I (- {x})) \\<subseteq> closure (- closure (I (- {x})))", "by fastforce"], ["proof (state)\nthis:\n  - K (I (- {x})) \\<subseteq> K (- K (I (- {x})))\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "also"], ["proof (state)\nthis:\n  - K (I (- {x})) \\<subseteq> K (- K (I (- {x})))\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "from \\<open>I \\<circ> K \\<circ> I = I\\<close>"], ["proof (chain)\npicking this:\n  I \\<circ> K \\<circ> I = I", "have \"... = K {x}\""], ["proof (prove)\nusing this:\n  I \\<circ> K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. K (- K (I (- {x}))) = K {x}", "unfolding I_def K_def"], ["proof (prove)\nusing this:\n  interior \\<circ> closure \\<circ> interior = interior\n\ngoal (1 subgoal):\n 1. closure (- closure (interior (- {x}))) = closure {x}", "by (metis closure_interior comp_def double_complement)"], ["proof (state)\nthis:\n  K (- K (I (- {x}))) = K {x}\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "also"], ["proof (state)\nthis:\n  K (- K (I (- {x}))) = K {x}\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "from \\<open>closed X\\<close> \\<open>x \\<in> X\\<close>"], ["proof (chain)\npicking this:\n  closed X\n  x \\<in> X", "have \"... \\<subseteq> X\""], ["proof (prove)\nusing this:\n  closed X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. K {x} \\<subseteq> X", "unfolding K_def"], ["proof (prove)\nusing this:\n  closed X\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. closure {x} \\<subseteq> X", "by clarsimp (meson closure_minimal contra_subsetD empty_subsetI insert_subset)"], ["proof (state)\nthis:\n  K {x} \\<subseteq> X\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "finally"], ["proof (chain)\npicking this:\n  - K (I (- {x})) \\<subseteq> X", "show ?thesis"], ["proof (prove)\nusing this:\n  - K (I (- {x})) \\<subseteq> X\n\ngoal (1 subgoal):\n 1. - K (I (- {x})) \\<subseteq> X", "."], ["proof (state)\nthis:\n  - K (I (- {x})) \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  - K (I (- {x})) \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> - K (I (- {x}))\n  open (- K (I (- {x})))\n  - K (I (- {x})) \\<subseteq> X", "show \"\\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X\""], ["proof (prove)\nusing this:\n  x \\<in> - K (I (- {x}))\n  open (- K (I (- {x})))\n  - K (I (- {x})) \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X", "by blast"], ["proof (state)\nthis:\n  \\<exists>T. open T \\<and> x \\<in> T \\<and> T \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma part_I_K_I:\n  assumes \"I \\<circ> K \\<circ> I = (I::'a::topological_space set \\<Rightarrow> 'a set)\"\n  shows \"I \\<circ> K = (K::'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<circ> K = K", "using interior_open[OF part_closed_open[OF assms closed_closure]]"], ["proof (prove)\nusing this:\n  interior (closure ?S2) = closure ?S2\n\ngoal (1 subgoal):\n 1. I \\<circ> K = K", "unfolding I_def K_def o_def"], ["proof (prove)\nusing this:\n  interior (closure ?S2) = closure ?S2\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. interior (closure x)) = closure", "by simp"], ["", "lemma part_K_I_I:\n  assumes \"I \\<circ> K \\<circ> I = (I::'a::topological_space set \\<Rightarrow> 'a set)\"\n  shows \"K \\<circ> I = (I::'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> I = I", "using part_I_K_I[OF assms] assms"], ["proof (prove)\nusing this:\n  I \\<circ> K = K\n  I \\<circ> K \\<circ> I = I\n\ngoal (1 subgoal):\n 1. K \\<circ> I = I", "by simp"], ["", "lemma kuratowski_neqs:\n  assumes \"kuratowski (X :: 'a::topological_space set)\"\n  shows\n    \"I \\<noteq> I \\<circ> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<noteq> K \\<circ> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<noteq> K \\<circ> I \\<circ> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<noteq> (K :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<noteq> K \\<circ> (I :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"I \\<circ> K \\<circ> I \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\"\n    \"K \\<circ> I \\<circ> K \\<noteq> (id :: 'a set \\<Rightarrow> 'a set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((I \\<noteq> I \\<circ> K \\<circ> I &&&\n      I \\<circ> K \\<circ> I \\<noteq> K \\<circ> I) &&&\n     I \\<circ> K \\<circ> I \\<noteq> I \\<circ> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I \\<circ> K &&&\n     K \\<circ> I \\<noteq> K \\<circ> I \\<circ> K) &&&\n    (K \\<circ> I \\<circ> K \\<noteq> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I &&& I \\<noteq> id) &&&\n    K \\<noteq> id &&&\n    I \\<circ> K \\<circ> I \\<noteq> id &&& K \\<circ> I \\<circ> K \\<noteq> id", "using assms"], ["proof (prove)\nusing this:\n  kuratowski X\n\ngoal (1 subgoal):\n 1. ((I \\<noteq> I \\<circ> K \\<circ> I &&&\n      I \\<circ> K \\<circ> I \\<noteq> K \\<circ> I) &&&\n     I \\<circ> K \\<circ> I \\<noteq> I \\<circ> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I \\<circ> K &&&\n     K \\<circ> I \\<noteq> K \\<circ> I \\<circ> K) &&&\n    (K \\<circ> I \\<circ> K \\<noteq> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I &&& I \\<noteq> id) &&&\n    K \\<noteq> id &&&\n    I \\<circ> K \\<circ> I \\<noteq> id &&& K \\<circ> I \\<circ> K \\<noteq> id", "unfolding kuratowski_def extremally_disconnected_def open_unresolvable_def"], ["proof (prove)\nusing this:\n  K \\<circ> I \\<circ> K \\<noteq> I \\<circ> K \\<and>\n  K \\<circ> I \\<circ> K \\<noteq> K \\<circ> I\n\ngoal (1 subgoal):\n 1. ((I \\<noteq> I \\<circ> K \\<circ> I &&&\n      I \\<circ> K \\<circ> I \\<noteq> K \\<circ> I) &&&\n     I \\<circ> K \\<circ> I \\<noteq> I \\<circ> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I \\<circ> K &&&\n     K \\<circ> I \\<noteq> K \\<circ> I \\<circ> K) &&&\n    (K \\<circ> I \\<circ> K \\<noteq> K &&&\n     I \\<circ> K \\<noteq> K \\<circ> I &&& I \\<noteq> id) &&&\n    K \\<noteq> id &&&\n    I \\<circ> K \\<circ> I \\<noteq> id &&& K \\<circ> I \\<circ> K \\<noteq> id", "by (metis (no_types, lifting) I_K K_K I_K_I_K K_I_K_I part_I_K_I part_K_I_I o_assoc comp_id)+"], ["", "lemma kuratowski_card:\n  assumes \"kuratowski (X :: 'a::topological_space set)\"\n  shows \"card {f. CK_nf_pos (f::'a set \\<Rightarrow> 'a set)} = 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 7", "using CK_nf_pos_lattice[where 'a='a] kuratowski_neqs[OF assms] assms"], ["proof (prove)\nusing this:\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n  I \\<noteq> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<noteq> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<noteq> I \\<circ> K\n  I \\<circ> K \\<noteq> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<noteq> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<noteq> K\n  I \\<circ> K \\<noteq> K \\<circ> I\n  I \\<noteq> id\n  K \\<noteq> id\n  I \\<circ> K \\<circ> I \\<noteq> id\n  K \\<circ> I \\<circ> K \\<noteq> id\n  kuratowski X\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 7", "unfolding kuratowski_def extremally_disconnected_def open_unresolvable_def"], ["proof (prove)\nusing this:\n  I \\<le> id\n  id \\<le> K\n  I \\<le> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<le> I \\<circ> K\n  I \\<circ> K \\<circ> I \\<le> K \\<circ> I\n  I \\<circ> K \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<le> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<le> K\n  I \\<noteq> I \\<circ> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<noteq> K \\<circ> I\n  I \\<circ> K \\<circ> I \\<noteq> I \\<circ> K\n  I \\<circ> K \\<noteq> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<noteq> K \\<circ> I \\<circ> K\n  K \\<circ> I \\<circ> K \\<noteq> K\n  I \\<circ> K \\<noteq> K \\<circ> I\n  I \\<noteq> id\n  K \\<noteq> id\n  I \\<circ> K \\<circ> I \\<noteq> id\n  K \\<circ> I \\<circ> K \\<noteq> id\n  K \\<circ> I \\<circ> K \\<noteq> I \\<circ> K \\<and>\n  K \\<circ> I \\<circ> K \\<noteq> K \\<circ> I\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} = 7", "by (subst CK_nf_pos_set) (subst card_insert_disjoint; (auto)[1])+"], ["", "text\\<open>\n\n\\<open>\\<real>\\<close> is a Kuratowski space.\n\n\\<close>"], ["", "lemma kuratowski_reals:\n  shows \"kuratowski (\\<real> :: real set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kuratowski \\<real>", "unfolding kuratowski_def extremally_disconnected_def open_unresolvable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<circ> I \\<circ> K \\<noteq> I \\<circ> K \\<and>\n    K \\<circ> I \\<circ> K \\<noteq> K \\<circ> I", "by (rule conjI)\n   (metis (no_types, lifting) I_K list.inject nf_RRR(11) nf_RRR(8) o_assoc,\n    metis (no_types, lifting) I_K fun.map_comp list.inject nf_RRR(11) nf_RRR(9))"], ["", "subsection\\<open> Chagrov's theorem \\<close>"], ["", "theorem chagrov:\n  fixes X :: \"'a::topological_space set\"\n  obtains \"discrete X\"\n        | \"\\<not>discrete X \\<and> part X\"\n        | \"\\<not>discrete X \\<and> ed_ou X\"\n        | \"\\<not>ed_ou X \\<and> open_unresolvable X\"\n        | \"\\<not>ed_ou X \\<and> \\<not>part X \\<and> extremally_disconnected X\"\n        | \"kuratowski X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>discrete X \\<Longrightarrow> thesis;\n     \\<not> discrete X \\<and> part X \\<Longrightarrow> thesis;\n     \\<not> discrete X \\<and> ed_ou X \\<Longrightarrow> thesis;\n     \\<not> ed_ou X \\<and> open_unresolvable X \\<Longrightarrow> thesis;\n     \\<not> ed_ou X \\<and>\n     \\<not> part X \\<and> extremally_disconnected X \\<Longrightarrow>\n     thesis;\n     kuratowski X \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "unfolding kuratowski_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>discrete X \\<Longrightarrow> thesis;\n     \\<not> discrete X \\<and> part X \\<Longrightarrow> thesis;\n     \\<not> discrete X \\<and> ed_ou X \\<Longrightarrow> thesis;\n     \\<not> ed_ou X \\<and> open_unresolvable X \\<Longrightarrow> thesis;\n     \\<not> ed_ou X \\<and>\n     \\<not> part X \\<and> extremally_disconnected X \\<Longrightarrow>\n     thesis;\n     \\<not> extremally_disconnected X \\<and>\n     \\<not> open_unresolvable X \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["", "corollary chagrov_card:\n  shows \"card {f. CK_nf_pos (f::'a::topological_space set \\<Rightarrow> 'a set)} \\<in> {1,3,4,5,7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} \\<in> {1, 3, 4, 5, 7}", "using discrete_card part_not_discrete_card ed_ou_not_discrete_card open_unresolvable_not_ed_ou_card\n      extremally_disconnected_not_part_not_ed_ou_card kuratowski_card"], ["proof (prove)\nusing this:\n  discrete ?X \\<Longrightarrow> card {f. CK_nf_pos f} = 1\n  \\<lbrakk>part ?X; \\<not> discrete ?X\\<rbrakk>\n  \\<Longrightarrow> card {f. CK_nf_pos f} = 3\n  \\<lbrakk>ed_ou ?X; \\<not> discrete ?X\\<rbrakk>\n  \\<Longrightarrow> card {f. CK_nf_pos f} = 4\n  \\<lbrakk>open_unresolvable ?X; \\<not> ed_ou ?X\\<rbrakk>\n  \\<Longrightarrow> card {f. CK_nf_pos f} = 5\n  \\<lbrakk>extremally_disconnected ?X; \\<not> part ?X;\n   \\<not> ed_ou ?X\\<rbrakk>\n  \\<Longrightarrow> card {f. CK_nf_pos f} = 5\n  kuratowski ?X \\<Longrightarrow> card {f. CK_nf_pos f} = 7\n\ngoal (1 subgoal):\n 1. card {f. CK_nf_pos f} \\<in> {1, 3, 4, 5, 7}", "by (cases rule: chagrov) blast+"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}