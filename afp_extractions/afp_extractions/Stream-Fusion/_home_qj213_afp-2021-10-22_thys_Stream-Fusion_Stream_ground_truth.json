{"file_name": "/home/qj213/afp-2021-10-22/thys/Stream-Fusion/Stream.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Stream-Fusion", "problem_names": ["lemma unfold_eq_fix: \"unfold\\<cdot>h = fix\\<cdot>(unfoldF\\<cdot>h)\"", "lemma unfold_ind:\n    fixes P :: \"('s \\<rightarrow> 'a LList) \\<Rightarrow> bool\"\n    assumes \"adm P\" and \"P \\<bottom>\" and \"\\<And>u. P u \\<Longrightarrow> P (unfoldF\\<cdot>h\\<cdot>u)\"\n    shows \"P (unfold\\<cdot>h)\"", "lemma unfold2_strict [simp]: \"unfold2\\<cdot>u\\<cdot>\\<bottom> = \\<bottom>\"", "lemma unfold: \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfold\\<cdot>h\\<cdot>s = unfold2\\<cdot>(unfold\\<cdot>h)\\<cdot>(h\\<cdot>s)\"", "lemma unfoldF: \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfoldF\\<cdot>h\\<cdot>u\\<cdot>s = unfold2\\<cdot>u\\<cdot>(h\\<cdot>s)\"", "lemma unstream_strict [simp]: \"unstream\\<cdot>\\<bottom> = \\<bottom>\"", "lemma streamStep_strict [simp]: \"streamStep\\<cdot>(up\\<cdot>\\<bottom>) = \\<bottom>\"", "lemma stream_defined [simp]: \"stream\\<cdot>xs \\<noteq> \\<bottom>\"", "lemma unstream_stream [simp]:\n  fixes xs :: \"'a LList\"\n  shows \"unstream\\<cdot>(stream\\<cdot>xs) = xs\"", "lemma unstream_cong:\n  \"a \\<approx> b \\<Longrightarrow> unstream\\<cdot>a = unstream\\<cdot>b\"", "lemma stream_cong:\n  \"xs = ys \\<Longrightarrow> stream\\<cdot>xs \\<approx> stream\\<cdot>ys\"", "lemma stream_unstream_cong:\n  \"a \\<approx> b \\<Longrightarrow> stream\\<cdot>(unstream\\<cdot>a) \\<approx> b\""], "translations": [["", "lemma unfold_eq_fix: \"unfold\\<cdot>h = fix\\<cdot>(unfoldF\\<cdot>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unfold\\<cdot>h = fix\\<cdot>(unfoldF\\<cdot>h)", "proof (rule below_antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. unfold\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h)\n 2. fix\\<cdot>(unfoldF\\<cdot>h) \\<sqsubseteq> unfold\\<cdot>h", "show \"unfold\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unfold\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h)", "apply (rule unfold.induct, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h) \\<Longrightarrow>\n       (\\<Lambda> h v.\n           Fixrec.run\\<cdot>\n           (match_bottom\\<cdot>v\\<cdot>(Fixrec.succeed\\<cdot>\\<bottom>) +++\n            Fixrec.succeed\\<cdot>\n            (case h\\<cdot>v of Done \\<Rightarrow> LNil\n             | Skip\\<cdot>s' \\<Rightarrow> x\\<cdot>h\\<cdot>s'\n             | Yield\\<cdot>xa\\<cdot>s' \\<Rightarrow>\n                 LCons\\<cdot>xa\\<cdot>(x\\<cdot>h\\<cdot>s'))))\\<cdot>\n       h \\<sqsubseteq>\n       fix\\<cdot>(unfoldF\\<cdot>h)", "apply (subst fix_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h) \\<Longrightarrow>\n       (\\<Lambda> h v.\n           Fixrec.run\\<cdot>\n           (match_bottom\\<cdot>v\\<cdot>(Fixrec.succeed\\<cdot>\\<bottom>) +++\n            Fixrec.succeed\\<cdot>\n            (Step_case\\<cdot>LNil\\<cdot>\n             (Abs_cfun (Rep_cfun (x\\<cdot>h)))\\<cdot>\n             (\\<Lambda> xa s'.\n                 LCons\\<cdot>xa\\<cdot>(x\\<cdot>h\\<cdot>s'))\\<cdot>\n             (h\\<cdot>v))))\\<cdot>\n       h \\<sqsubseteq>\n       unfoldF\\<cdot>h\\<cdot>(fix\\<cdot>(unfoldF\\<cdot>h))", "apply (rule cfun_belowI, rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       x\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h) \\<Longrightarrow>\n       (\\<Lambda> h v.\n           Fixrec.run\\<cdot>\n           (match_bottom\\<cdot>v\\<cdot>(Fixrec.succeed\\<cdot>\\<bottom>) +++\n            Fixrec.succeed\\<cdot>\n            (Step_case\\<cdot>LNil\\<cdot>\n             (Abs_cfun (Rep_cfun (x\\<cdot>h)))\\<cdot>\n             (\\<Lambda> xa s'.\n                 LCons\\<cdot>xa\\<cdot>(x\\<cdot>h\\<cdot>s'))\\<cdot>\n             (h\\<cdot>v))))\\<cdot>\n       h\\<cdot>\n       s \\<sqsubseteq>\n       unfoldF\\<cdot>h\\<cdot>(fix\\<cdot>(unfoldF\\<cdot>h))\\<cdot>s", "apply (case_tac \"s = \\<bottom>\", simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>x\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h);\n        s \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Step_case\\<cdot>LNil\\<cdot>\n                         (Abs_cfun (Rep_cfun (x\\<cdot>h)))\\<cdot>\n                         (\\<Lambda> xa s'.\n                             LCons\\<cdot>xa\\<cdot>\n                             (x\\<cdot>h\\<cdot>s'))\\<cdot>\n                         (h\\<cdot>s) \\<sqsubseteq>\n                         (case h\\<cdot>s of Done \\<Rightarrow> LNil\n                          | Skip\\<cdot>s' \\<Rightarrow>\n                              fix\\<cdot>(unfoldF\\<cdot>h)\\<cdot>s'\n                          | Yield\\<cdot>x\\<cdot>s' \\<Rightarrow>\n                              LCons\\<cdot>x\\<cdot>\n                              (fix\\<cdot>(unfoldF\\<cdot>h)\\<cdot>s'))", "apply (intro monofun_cfun monofun_LAM below_refl, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  unfold\\<cdot>h \\<sqsubseteq> fix\\<cdot>(unfoldF\\<cdot>h)\n\ngoal (1 subgoal):\n 1. fix\\<cdot>(unfoldF\\<cdot>h) \\<sqsubseteq> unfold\\<cdot>h", "show \"fix\\<cdot>(unfoldF\\<cdot>h) \\<sqsubseteq> unfold\\<cdot>h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fix\\<cdot>(unfoldF\\<cdot>h) \\<sqsubseteq> unfold\\<cdot>h", "apply (rule fix_ind, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<sqsubseteq> unfold\\<cdot>h \\<Longrightarrow>\n       unfoldF\\<cdot>h\\<cdot>x \\<sqsubseteq> unfold\\<cdot>h", "apply (subst unfold.unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<sqsubseteq> unfold\\<cdot>h \\<Longrightarrow>\n       unfoldF\\<cdot>h\\<cdot>x \\<sqsubseteq>\n       (\\<Lambda> h v.\n           Fixrec.run\\<cdot>\n           (match_bottom\\<cdot>v\\<cdot>(Fixrec.succeed\\<cdot>\\<bottom>) +++\n            Fixrec.succeed\\<cdot>\n            (Step_case\\<cdot>LNil\\<cdot>\n             (Abs_cfun (Rep_cfun (unfold\\<cdot>h)))\\<cdot>\n             (\\<Lambda> x s'.\n                 LCons\\<cdot>x\\<cdot>(unfold\\<cdot>h\\<cdot>s'))\\<cdot>\n             (h\\<cdot>v))))\\<cdot>\n       h", "apply (rule cfun_belowI, rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       x \\<sqsubseteq> unfold\\<cdot>h \\<Longrightarrow>\n       unfoldF\\<cdot>h\\<cdot>x\\<cdot>s \\<sqsubseteq>\n       (\\<Lambda> h v.\n           Fixrec.run\\<cdot>\n           (match_bottom\\<cdot>v\\<cdot>(Fixrec.succeed\\<cdot>\\<bottom>) +++\n            Fixrec.succeed\\<cdot>\n            (Step_case\\<cdot>LNil\\<cdot>\n             (Abs_cfun (Rep_cfun (unfold\\<cdot>h)))\\<cdot>\n             (\\<Lambda> x s'.\n                 LCons\\<cdot>x\\<cdot>(unfold\\<cdot>h\\<cdot>s'))\\<cdot>\n             (h\\<cdot>v))))\\<cdot>\n       h\\<cdot>\n       s", "apply (case_tac \"s = \\<bottom>\", simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>x \\<sqsubseteq> unfold\\<cdot>h;\n        s \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (case h\\<cdot>s of Done \\<Rightarrow> LNil\n                          | Skip\\<cdot>s' \\<Rightarrow> x\\<cdot>s'\n                          | Yield\\<cdot>xa\\<cdot>s' \\<Rightarrow>\n                              LCons\\<cdot>xa\\<cdot>\n                              (x\\<cdot>s')) \\<sqsubseteq>\n                         Step_case\\<cdot>LNil\\<cdot>\n                         (Abs_cfun (Rep_cfun (unfold\\<cdot>h)))\\<cdot>\n                         (\\<Lambda> x s'.\n                             LCons\\<cdot>x\\<cdot>\n                             (unfold\\<cdot>h\\<cdot>s'))\\<cdot>\n                         (h\\<cdot>s)", "apply (intro monofun_cfun monofun_LAM below_refl, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fix\\<cdot>(unfoldF\\<cdot>h) \\<sqsubseteq> unfold\\<cdot>h\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unfold_ind:\n    fixes P :: \"('s \\<rightarrow> 'a LList) \\<Rightarrow> bool\"\n    assumes \"adm P\" and \"P \\<bottom>\" and \"\\<And>u. P u \\<Longrightarrow> P (unfoldF\\<cdot>h\\<cdot>u)\"\n    shows \"P (unfold\\<cdot>h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (unfold\\<cdot>h)", "unfolding unfold_eq_fix"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (fix\\<cdot>(unfoldF\\<cdot>h))", "by (rule fix_ind [of P, OF assms])"], ["", "fixrec\n  unfold2 :: \"('s \\<rightarrow> 'a LList) \\<rightarrow> ('a, 's) Step \\<rightarrow> 'a LList\"\nwhere\n  \"unfold2\\<cdot>u\\<cdot>Done = LNil\"\n| \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfold2\\<cdot>u\\<cdot>(Skip\\<cdot>s) = u\\<cdot>s\"\n| \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfold2\\<cdot>u\\<cdot>(Yield\\<cdot>x\\<cdot>s) = LCons\\<cdot>x\\<cdot>(u\\<cdot>s)\""], ["", "lemma unfold2_strict [simp]: \"unfold2\\<cdot>u\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unfold2\\<cdot>u\\<cdot>\\<bottom> = \\<bottom>", "by fixrec_simp"], ["", "lemma unfold: \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfold\\<cdot>h\\<cdot>s = unfold2\\<cdot>(unfold\\<cdot>h)\\<cdot>(h\\<cdot>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<noteq> \\<bottom> \\<Longrightarrow>\n    unfold\\<cdot>h\\<cdot>s =\n    unfold2\\<cdot>(unfold\\<cdot>h)\\<cdot>(h\\<cdot>s)", "by (case_tac \"h\\<cdot>s\", simp_all)"], ["", "lemma unfoldF: \"s \\<noteq> \\<bottom> \\<Longrightarrow> unfoldF\\<cdot>h\\<cdot>u\\<cdot>s = unfold2\\<cdot>u\\<cdot>(h\\<cdot>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<noteq> \\<bottom> \\<Longrightarrow>\n    unfoldF\\<cdot>h\\<cdot>u\\<cdot>s = unfold2\\<cdot>u\\<cdot>(h\\<cdot>s)", "by (case_tac \"h\\<cdot>s\", simp_all)"], ["", "declare unfold.simps(2) [simp del]"], ["", "declare unfoldF.simps(2) [simp del]"], ["", "declare unfoldF [simp]"], ["", "fixrec\n  unstream :: \"('a, 's) Stream \\<rightarrow> 'a LList\"\nwhere\n  \"s \\<noteq> \\<bottom> \\<Longrightarrow> unstream\\<cdot>(Stream\\<cdot>h\\<cdot>s) = unfold\\<cdot>h\\<cdot>s\""], ["", "lemma unstream_strict [simp]: \"unstream\\<cdot>\\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unstream\\<cdot>\\<bottom> = \\<bottom>", "by fixrec_simp"], ["", "subsection \\<open>Converting from lists to streams\\<close>"], ["", "fixrec\n  streamStep :: \"('a LList)\\<^sub>\\<bottom> \\<rightarrow> ('a, ('a LList)\\<^sub>\\<bottom>) Step\"\nwhere\n  \"streamStep\\<cdot>(up\\<cdot>LNil) = Done\"\n| \"streamStep\\<cdot>(up\\<cdot>(LCons\\<cdot>x\\<cdot>xs)) = Yield\\<cdot>x\\<cdot>(up\\<cdot>xs)\""], ["", "lemma streamStep_strict [simp]: \"streamStep\\<cdot>(up\\<cdot>\\<bottom>) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. streamStep\\<cdot>(up\\<cdot>\\<bottom>) = \\<bottom>", "by fixrec_simp"], ["", "fixrec\n  stream :: \"'a LList \\<rightarrow> ('a, ('a LList)\\<^sub>\\<bottom>) Stream\"\nwhere\n  \"stream\\<cdot>xs = Stream\\<cdot>streamStep\\<cdot>(up\\<cdot>xs)\""], ["", "lemma stream_defined [simp]: \"stream\\<cdot>xs \\<noteq> \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream\\<cdot>xs \\<noteq> \\<bottom>", "by simp"], ["", "lemma unstream_stream [simp]:\n  fixes xs :: \"'a LList\"\n  shows \"unstream\\<cdot>(stream\\<cdot>xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unstream\\<cdot>(stream\\<cdot>xs) = xs", "by (induct xs, simp_all add: unfold)"], ["", "declare stream.simps [simp del]"], ["", "subsection \\<open>Bisimilarity relation on streams\\<close>"], ["", "definition\n  bisimilar :: \"('a, 's) Stream \\<Rightarrow> ('a, 't) Stream \\<Rightarrow> bool\" (infix \"\\<approx>\" 50)\nwhere\n  \"a \\<approx> b \\<longleftrightarrow> unstream\\<cdot>a = unstream\\<cdot>b \\<and> a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom>\""], ["", "lemma unstream_cong:\n  \"a \\<approx> b \\<Longrightarrow> unstream\\<cdot>a = unstream\\<cdot>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx> b \\<Longrightarrow> unstream\\<cdot>a = unstream\\<cdot>b", "unfolding bisimilar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. unstream\\<cdot>a = unstream\\<cdot>b \\<and>\n    a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom> \\<Longrightarrow>\n    unstream\\<cdot>a = unstream\\<cdot>b", "by simp"], ["", "lemma stream_cong:\n  \"xs = ys \\<Longrightarrow> stream\\<cdot>xs \\<approx> stream\\<cdot>ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys \\<Longrightarrow> stream\\<cdot>xs \\<approx> stream\\<cdot>ys", "unfolding bisimilar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys \\<Longrightarrow>\n    unstream\\<cdot>(stream\\<cdot>xs) =\n    unstream\\<cdot>(stream\\<cdot>ys) \\<and>\n    stream\\<cdot>xs \\<noteq> \\<bottom> \\<and>\n    stream\\<cdot>ys \\<noteq> \\<bottom>", "by simp"], ["", "lemma stream_unstream_cong:\n  \"a \\<approx> b \\<Longrightarrow> stream\\<cdot>(unstream\\<cdot>a) \\<approx> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx> b \\<Longrightarrow>\n    stream\\<cdot>(unstream\\<cdot>a) \\<approx> b", "unfolding bisimilar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. unstream\\<cdot>a = unstream\\<cdot>b \\<and>\n    a \\<noteq> \\<bottom> \\<and> b \\<noteq> \\<bottom> \\<Longrightarrow>\n    unstream\\<cdot>(stream\\<cdot>(unstream\\<cdot>a)) =\n    unstream\\<cdot>b \\<and>\n    stream\\<cdot>(unstream\\<cdot>a) \\<noteq> \\<bottom> \\<and>\n    b \\<noteq> \\<bottom>", "by simp"], ["", "end"]]}