{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Ruleset_Update.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma free_return_not_match: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m Return], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<not> matches \\<gamma> m p\"", "lemma update_Gamma_nomatch: \n  assumes \"\\<not> matches \\<gamma> m p\"\n  shows \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma update_Gamma_log_empty:\n  assumes \"a = Log \\<or> a = Empty\"\n  shows \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow>\n         \\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma map_update_chain_if: \"(\\<lambda>b. if b = chain then Some rs else \\<Gamma> b) = \\<Gamma>(chain \\<mapsto> rs)\"", "lemma no_recursive_calls_helper:\n  assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\"\n  and     \"matches \\<gamma> m p\"\n  and     \"\\<Gamma> chain = Some [Rule m (Call chain)]\"\n  shows   False", "lemma no_recursive_calls:\n  \"\\<Gamma>(chain \\<mapsto> [Rule m (Call chain)]),\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> False\"", "lemma no_recursive_calls2:\n  assumes \"\\<Gamma>(chain \\<mapsto> (Rule m (Call chain)) # rs''),\\<gamma>,p\\<turnstile> \\<langle>(Rule m (Call chain)) # rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"matches \\<gamma> m p\"\n  shows   False", "lemma update_Gamma_nochange1: \n  assumes \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\"\n  shows   \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\"", "lemma update_gamme_remove_Undecidedpart:\n  assumes \"\\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"\\<Gamma>(chain \\<mapsto> rs1@rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  shows   \"\\<Gamma>(chain \\<mapsto>rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"", "lemma update_Gamma_nocall:\n  assumes \"\\<not> (\\<exists>chain. a = Call chain)\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t\"", "lemma update_Gamma_call:\n  assumes \"\\<Gamma> chain = Some rs\" and \"\\<Gamma>' chain = Some rs'\"\n  assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\" and \"\\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t\"", "lemma update_Gamma_remove_call_undecided:\n  assumes \"\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"matches \\<gamma> m p\"\n  shows \"\\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"", "lemma all_return_subchain:\n  assumes a1: \"\\<Gamma> chain = Some rs\"\n  and     a2: \"matches \\<gamma> m p\"\n  and     a3: \"\\<forall>r\\<in>set rs. get_action r = Return\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\"", "lemma get_action_case_simp: \"get_action (case r of Rule m' x \\<Rightarrow> Rule (MatchAnd m m') x) = get_action r\"", "lemma updategamma_insert_new: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> chain \\<notin> dom \\<Gamma> \\<Longrightarrow> \\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], "translations": [["", "lemma free_return_not_match: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m Return], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<not> matches \\<gamma> m p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         Return], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<not> matches \\<gamma> m p", "using no_free_return"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>[Rule ?m\n                   Return], Undecided\\<rangle> \\<Rightarrow> ?t;\n   matches ?\\<gamma> ?m ?p\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         Return], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<not> matches \\<gamma> m p", "by fast"], ["", "subsection\\<open>Background Ruleset Updating\\<close>"], ["", "lemma update_Gamma_nomatch: \n  assumes \"\\<not> matches \\<gamma> m p\"\n  shows \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n 2. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "assume ?l"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n 2. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "thus ?r"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof (induction rs' s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_return m a chain' rs\\<^sub>1 m' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m p\n  a = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"rs\\<^sub>1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule_tac rs\\<^sub>1=\"list\" and m'=\"m'\" and rs\\<^sub>2=\"rs\\<^sub>2\" in call_return)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m p\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (if chain = chain then Some rs\n                          else \\<Gamma> chain) =\n                         Some (list @ [Rule m' Return] @ rs\\<^sub>2)\n 3. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 4. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (if chain = chain then Some rs\n                          else \\<Gamma> chain) =\n                         Some (list @ [Rule m' Return] @ rs\\<^sub>2)\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 3. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n               list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = Rule m a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(erule seqE_cons[where \\<Gamma>=\"(\\<lambda>a. if a = chain then Some rs else \\<Gamma> a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = Rule m a # list;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                 a], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(frule iptables_bigstep_to_undecided[where \\<Gamma>=\"(\\<lambda>a. if a = chain then Some rs else \\<Gamma> a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = Rule m a # list;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                 a], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided;\n        ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: call_return)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result m' a' chain' rs' t')"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "proof (cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. chain' = chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n 2. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. chain' = chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n 2. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain", "have \"Rule m a # rs = rs'\" \"(\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain\n\ngoal (1 subgoal):\n 1. Rule m a # rs = rs' &&& (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs", "by simp+"], ["proof (state)\nthis:\n  Rule m a # rs = rs'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs\n\ngoal (2 subgoals):\n 1. chain' = chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n 2. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "with assms Call_result"], ["proof (chain)\npicking this:\n  \\<not> matches \\<gamma> m p\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  Rule m a # rs = rs'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m p\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  Rule m a # rs = rs'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "by (metis call_result nomatchD seqE_cons)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "case False"], ["proof (state)\nthis:\n  chain' \\<noteq> chain\n\ngoal (1 subgoal):\n 1. chain' \\<noteq> chain \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' \\<noteq> chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' \\<noteq> chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "by (metis call_result fun_upd_apply)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'", "show ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t'", "by fast"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'", "qed (auto intro: iptables_bigstep.intros)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "assume ?r"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "thus ?l"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof (induction rs' s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_return m' a' chain' rs\\<^sub>1)"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n  \\<not> matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "by (auto intro: seq_cons nomatch intro!: call_return[where rs\\<^sub>1 = \"Rule m a # rs\\<^sub>1\"])"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'_ Return] @ rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: call_return)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result m' a' chain' rs')"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t_", "proof (cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t_\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t_", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t_\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t_", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  chain' = chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  chain' = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t_", "using assms"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_\n  chain' = chain\n  \\<not> matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t_", "by (auto intro: seq_cons nomatch intro!: call_result)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t_;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t_", "qed (auto intro: call_result)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'", "qed (auto intro: iptables_bigstep.intros)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma update_Gamma_log_empty:\n  assumes \"a = Log \\<or> a = Empty\"\n  shows \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow>\n         \\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n 2. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "assume ?l"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n 2. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "thus ?r"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof (induction rs' s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_return m' a' chain' rs\\<^sub>1 m'' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "(*it seems that Isabelle has problems to apply @{thm fun_upd_apply} at the semantics if it appears in the goal without @{text \\<lambda>}*)"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "note [simp] = fun_upd_apply[abs_def]"], ["proof (state)\nthis:\n  fun_upd \\<equiv> \\<lambda>f x y z. if z = x then y else f z\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "from Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "have \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\" (is ?Call_return_case)"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof(cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain", "show ?Call_return_case\n            \\<comment> \\<open>@{term rs\\<^sub>1} cannot be empty\\<close>"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof(cases \"rs\\<^sub>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "case Nil"], ["proof (state)\nthis:\n  rs\\<^sub>1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return(3) \\<open>chain' = chain\\<close> assms"], ["proof (chain)\npicking this:\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  chain' = chain\n  a = Log \\<or> a = Empty\n  rs\\<^sub>1 = []", "have \"False\""], ["proof (prove)\nusing this:\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  chain' = chain\n  a = Log \\<or> a = Empty\n  rs\\<^sub>1 = []\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?Call_return_case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "case (Cons r\\<^sub>1 rs\\<^sub>1s)"], ["proof (state)\nthis:\n  rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "from Cons Call_return"], ["proof (chain)\npicking this:\n  rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "have \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>r\\<^sub>1 # rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>r\\<^sub>1 #\n  rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>r\\<^sub>1 #\nrs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with seqE_cons[where \\<Gamma>=\"\\<Gamma>(chain \\<mapsto> rs)\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n           rs),?\\<gamma>,?p\\<turnstile> \\<langle>?r #\n           ?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   \\<And>ti.\n      \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n               rs),?\\<gamma>,?p\\<turnstile> \\<langle>[?r], ?s\\<rangle> \\<Rightarrow> ti;\n       \\<Gamma>(chain \\<mapsto>\n       rs),?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ti\\<rangle> \\<Rightarrow> ?t\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>r\\<^sub>1 #\nrs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided", "obtain ti where \n              \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[r\\<^sub>1], Undecided\\<rangle> \\<Rightarrow> ti\" and \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, ti\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n           rs),?\\<gamma>,?p\\<turnstile> \\<langle>?r #\n           ?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   \\<And>ti.\n      \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n               rs),?\\<gamma>,?p\\<turnstile> \\<langle>[?r], ?s\\<rangle> \\<Rightarrow> ti;\n       \\<Gamma>(chain \\<mapsto>\n       rs),?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ti\\<rangle> \\<Rightarrow> ?t\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>r\\<^sub>1 #\nrs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. (\\<And>ti.\n        \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n                 rs),\\<gamma>,p\\<turnstile> \\<langle>[r\\<^sub>1], Undecided\\<rangle> \\<Rightarrow> ti;\n         \\<Gamma>(chain \\<mapsto>\n         rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[r\\<^sub>1], Undecided\\<rangle> \\<Rightarrow> ti\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, ti\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with iptables_bigstep_to_undecided[where \\<Gamma>=\"\\<Gamma>(chain \\<mapsto> rs)\"]"], ["proof (chain)\npicking this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  ?s = Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[r\\<^sub>1], Undecided\\<rangle> \\<Rightarrow> ti\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, ti\\<rangle> \\<Rightarrow> Undecided", "have \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  ?s = Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[r\\<^sub>1], Undecided\\<rangle> \\<Rightarrow> ti\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, ti\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided", "by fast"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n        Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m'' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain' = chain; rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                         (Call\n                           chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Cons Call_return \\<open>chain' = chain\\<close>"], ["proof (chain)\npicking this:\n  rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided", "show ?Call_return_case"], ["proof (prove)\nusing this:\n  rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule_tac rs\\<^sub>1=\"rs\\<^sub>1s\" and m'=\"m''\" and rs\\<^sub>2=\"rs\\<^sub>2\" in call_return)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s; matches \\<gamma> m' p;\n     a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m' p\n 2. \\<lbrakk>rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s; matches \\<gamma> m' p;\n     a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n                      Some (rs\\<^sub>1s @ [Rule m'' Return] @ rs\\<^sub>2)\n 3. \\<lbrakk>rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s; matches \\<gamma> m' p;\n     a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m'' p\n 4. \\<lbrakk>rs\\<^sub>1 = r\\<^sub>1 # rs\\<^sub>1s; matches \\<gamma> m' p;\n     a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1s, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "case False"], ["proof (state)\nthis:\n  chain' \\<noteq> chain\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' \\<noteq> chain", "show ?Call_return_case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' \\<noteq> chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "by (auto intro: call_return)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "using Call_return"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result m' a' chain' rs' t')"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t'", "proof (cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain", "have \"rs' = [] @ [Rule m a] @ rs\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain\n\ngoal (1 subgoal):\n 1. rs' = [] @ [Rule m a] @ rs", "by simp"], ["proof (state)\nthis:\n  rs' = [] @ [Rule m a] @ rs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "with Call_result assms"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  a = Log \\<or> a = Empty\n  rs' = [] @ [Rule m a] @ rs", "have \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[] @ rs, Undecided\\<rangle> \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  a = Log \\<or> a = Empty\n  rs' = [] @ [Rule m a] @ rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[] @\n  rs, Undecided\\<rangle> \\<Rightarrow> t'", "using log_remove empty_empty"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  a = Log \\<or> a = Empty\n  rs' = [] @ [Rule m a] @ rs\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n        [Rule ?m Log] @\n        ?rs\\<^sub>2, ?s\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n        ?rs\\<^sub>2, ?s\\<rangle> \\<Rightarrow> ?t\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n        [Rule ?m Empty] @\n        ?rs\\<^sub>2, ?s\\<rangle> \\<Rightarrow> ?t \\<Longrightarrow>\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n        ?rs\\<^sub>2, ?s\\<rangle> \\<Rightarrow> ?t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[] @\n  rs, Undecided\\<rangle> \\<Rightarrow> t'", "by fast"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[] @\nrs, Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "hence \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[] @\nrs, Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "with Call_result True"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs'\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t'\n  chain' = chain\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> t'", "by (metis call_result fun_upd_same)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some rs';\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> t';\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> t'", "qed (fastforce intro: call_result)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> t'\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'", "qed (auto intro: iptables_bigstep.intros)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "have cases_a: \"\\<And>P. (a = Log \\<Longrightarrow> P a) \\<Longrightarrow> (a = Empty \\<Longrightarrow> P a) \\<Longrightarrow> P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>a = Log \\<Longrightarrow> P a;\n        a = Empty \\<Longrightarrow> P a\\<rbrakk>\n       \\<Longrightarrow> P a", "using assms"], ["proof (prove)\nusing this:\n  a = Log \\<or> a = Empty\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>a = Log \\<Longrightarrow> P a;\n        a = Empty \\<Longrightarrow> P a\\<rbrakk>\n       \\<Longrightarrow> P a", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>a = Log \\<Longrightarrow> ?P a;\n   a = Empty \\<Longrightarrow> ?P a\\<rbrakk>\n  \\<Longrightarrow> ?P a\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "assume ?r"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "thus ?l"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof (induction rs' s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_return m' a' chain' rs\\<^sub>1 m'' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "from Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "have xx: \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a # rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n  rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                    rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule cases_a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     a = Log\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                    rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                    rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (auto intro: nomatch seq_cons intro!: log empty simp del: fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\nrs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\nrs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "show ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\nrs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof(cases \"chain' = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "case False"], ["proof (state)\nthis:\n  chain' \\<noteq> chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' \\<noteq> chain", "have x: \"(\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' \\<noteq> chain\n\ngoal (1 subgoal):\n 1. (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n    Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)", "by(simp)"], ["proof (state)\nthis:\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)", "have \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule call_return[where rs\\<^sub>1=\"rs\\<^sub>1\" and m'=\"m''\" and rs\\<^sub>2=\"rs\\<^sub>2\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m' p\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n                      Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n 3. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m'' p\n 4. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp_all add: x xx del: fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' a'], Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "using Call_return"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  chain' = chain\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain", "have x: \"(\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' = Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain' = chain\n\ngoal (1 subgoal):\n 1. (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n    Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)", "by(simp)"], ["proof (state)\nthis:\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)", "have \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n  Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      (Call\n                        chain')], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule call_return[where rs\\<^sub>1=\"Rule m a#rs\\<^sub>1\" and m'=\"m''\" and rs\\<^sub>2=\"rs\\<^sub>2\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m' p\n 2. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n                      Some\n                       ((Rule m a # rs\\<^sub>1) @\n                        [Rule m'' Return] @ rs\\<^sub>2)\n 3. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m'' p\n 4. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chain' =\n     Some (Rule m a # rs\\<^sub>1 @ Rule m'' Return # rs\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                    rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp_all add: x xx del: fun_upd_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m' p; a' = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n     Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m'' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n                      a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m' a'], Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "using Call_return"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  (Call chain')], Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m' p\n  a' = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs)) chain' =\n  Some (rs\\<^sub>1 @ [Rule m'' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m'' p\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n    a'], Undecided\\<rangle> \\<Rightarrow> Undecided", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m'\n  a'], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result ma a chaina rs t)"], ["proof (state)\nthis:\n  matches \\<gamma> ma p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> ma p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    Rule m a #\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n    a], Undecided\\<rangle> \\<Rightarrow> t", "apply (cases \"chaina = chain\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "apply(rule cases_a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain; a = Log\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain; a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "apply (auto intro: nomatch seq_cons intro!: log empty call_result)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs)) chaina = Some rs;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      Rule m a #\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "by (auto intro!: call_result)[1]"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n  a], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Drop \\<or> aa = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>ma aa.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Log \\<or> aa = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma aa.\n       \\<not> matches \\<gamma> ma p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n       aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       Rule m a #\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         Rule m a #\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'", "qed (auto intro: iptables_bigstep.intros)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_update_chain_if: \"(\\<lambda>b. if b = chain then Some rs else \\<Gamma> b) = \\<Gamma>(chain \\<mapsto> rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b. if b = chain then Some rs else \\<Gamma> b) = \\<Gamma>\n    (chain \\<mapsto> rs)", "by auto"], ["", "lemma no_recursive_calls_helper:\n  assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\"\n  and     \"matches \\<gamma> m p\"\n  and     \"\\<Gamma> chain = Some [Rule m (Call chain)]\"\n  shows   False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (1 subgoal):\n 1. False", "proof (induction \"[Rule m (Call chain)]\" Undecided t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m (Call chain)] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m (Call chain)]; t = Undecided;\n         matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "case Seq"], ["proof (state)\nthis:\n  [Rule m (Call chain)] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>rs\\<^sub>1_ = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  \\<lbrakk>rs\\<^sub>2_ = [Rule m (Call chain)]; t_ = Undecided;\n   matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m (Call chain)] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m (Call chain)]; t = Undecided;\n         matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  [Rule m (Call chain)] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>rs\\<^sub>1_ = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  \\<lbrakk>rs\\<^sub>2_ = [Rule m (Call chain)]; t_ = Undecided;\n   matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (1 subgoal):\n 1. False", "by (metis Cons_eq_append_conv append_is_Nil_conv skipD)"], ["proof (state)\nthis:\n  False\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "case (Call_return chain' rs\\<^sub>1 m' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  Call chain = Call chain'\n  \\<Gamma> chain' = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 = [Rule m (Call chain')]\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  Call chain = Call chain'\n  \\<Gamma> chain' = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (1 subgoal):\n 1. rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 = [Rule m (Call chain')]", "by simp"], ["proof (state)\nthis:\n  rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 = [Rule m (Call chain')]\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 = [Rule m (Call chain')]\n\ngoal (1 subgoal):\n 1. False", "by (cases \"rs\\<^sub>1\") auto"], ["proof (state)\nthis:\n  False\n\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "case Call_result"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  Call chain = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>rs_ = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>rs = [Rule m (Call chain)]; matches \\<gamma> m p;\n         \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n        \\<Longrightarrow> False;\n        matches \\<gamma> m p;\n        \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  Call chain = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>rs_ = [Rule m (Call chain)]; matches \\<gamma> m p;\n   \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n  \\<Gamma> chain = Some [Rule m (Call chain)]\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept;\n     matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p;\n     \\<Gamma> chain = Some [Rule m (Call chain)]\\<rbrakk>\n    \\<Longrightarrow> False", "qed (auto intro: iptables_bigstep.intros)"], ["", "lemma no_recursive_calls:\n  \"\\<Gamma>(chain \\<mapsto> [Rule m (Call chain)]),\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(chain \\<mapsto>\n             [Rule m\n               (Call\n                 chain)]),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      (Call chain)], Undecided\\<rangle> \\<Rightarrow> t;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False", "by (fastforce intro: no_recursive_calls_helper)"], ["", "lemma no_recursive_calls2:\n  assumes \"\\<Gamma>(chain \\<mapsto> (Rule m (Call chain)) # rs''),\\<gamma>,p\\<turnstile> \\<langle>(Rule m (Call chain)) # rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"matches \\<gamma> m p\"\n  shows   False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call chain) #\n  rs''),\\<gamma>,p\\<turnstile> \\<langle>Rule m (Call chain) #\n  rs', Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. False", "proof (induction \"(Rule m (Call chain)) # rs'\" Undecided Undecided arbitrary: rs' rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>rs\\<^sub>1 rs\\<^sub>2 t rs'.\n       \\<lbrakk>Rule m (Call chain) # rs' = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # rs'; t = Undecided;\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>2 = Rule m (Call chain) # rs'; t = Undecided;\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False", "case (Seq rs\\<^sub>1 rs\\<^sub>2 t)"], ["proof (state)\nthis:\n  Rule m (Call chain) # rs' = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call chain) #\n  rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # ?rs'; t = Undecided;\n   matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call chain) #\n  rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>rs\\<^sub>2 = Rule m (Call chain) # ?rs'; t = Undecided;\n   matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>rs\\<^sub>1 rs\\<^sub>2 t rs'.\n       \\<lbrakk>Rule m (Call chain) # rs' = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # rs'; t = Undecided;\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>2 = Rule m (Call chain) # rs'; t = Undecided;\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False", "thus ?case"], ["proof (prove)\nusing this:\n  Rule m (Call chain) # rs' = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call chain) #\n  rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # ?rs'; t = Undecided;\n   matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call chain) #\n  rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>rs\\<^sub>2 = Rule m (Call chain) # ?rs'; t = Undecided;\n   matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> False\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. False", "by (cases rs\\<^sub>1) (auto elim: seqE_cons simp add: iptables_bigstep_to_undecided)"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> matches \\<gamma> m p; matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs\\<^sub>1 = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call chain) # rs'')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call chain) #\n        rs''),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<And>rs'.\n           \\<lbrakk>rs = Rule m (Call chain) # rs';\n            matches \\<gamma> m p\\<rbrakk>\n           \\<Longrightarrow> False;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> False", "qed (auto intro: iptables_bigstep.intros simp: Cons_eq_append_conv)"], ["", "lemma update_Gamma_nochange1: \n  assumes \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"\\<Gamma>(chain \\<mapsto> Rule m a # rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\"\n  shows   \"\\<Gamma>(chain \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t", "proof (induction rs' s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_return m a chaina rs\\<^sub>1 m' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (cases \"chaina = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  chaina = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "with Call_return"], ["proof (chain)\npicking this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chaina = chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chaina = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"rs\\<^sub>1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     m = m' \\<and> a = Return \\<and> rs = rs\\<^sub>2; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs', s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     m = m' \\<and> a = Return \\<and> rs = rs\\<^sub>2; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (metis no_free_return)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "(*gives False*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule_tac rs\\<^sub>1=\"list\" and m'=\"m'\" and rs\\<^sub>2=\"rs\\<^sub>2\" in call_return)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m p\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (if chain = chain then Some rs\n                          else \\<Gamma> chain) =\n                         Some (list @ [Rule m' Return] @ rs\\<^sub>2)\n 3. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 4. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (if chain = chain then Some rs\n                          else \\<Gamma> chain) =\n                         Some (list @ [Rule m' Return] @ rs\\<^sub>2)\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 3. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' p\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        Rule m a # rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n               list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = Rule m a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(erule seqE_cons[where \\<Gamma>=\"(\\<lambda>a. if a = chain then Some rs else \\<Gamma> a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = Rule m a # list;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                 a], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(frule iptables_bigstep_to_undecided[where \\<Gamma>=\"(\\<lambda>a. if a = chain then Some rs else \\<Gamma> a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rs\\<^sub>1 = Rule m a # list;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                 a], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided;\n        ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>list, Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: call_return)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result m a chaina rsa t)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>ma aa chaina rsa t.\n       \\<lbrakk>matches \\<gamma> ma p; aa = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                         aa], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> t", "proof (cases \"chaina = chain\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "case True"], ["proof (state)\nthis:\n  chaina = chain\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "with Call_result"], ["proof (chain)\npicking this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  chaina = chain", "show ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m a #\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t\n  chaina = chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "apply(cases \"rsa\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     (\\<lambda>a.\n         if a = chain then Some rs\n         else \\<Gamma>\n               a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina = chain; rsa = []\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>a.\n                          if a = chain then Some rs\n                          else \\<Gamma>\n                                a),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                                  m (Call\nchain)], Undecided\\<rangle> \\<Rightarrow> t", "apply(rule_tac rs=rs in call_result)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m p\n 2. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # list\\<rbrakk>\n       \\<Longrightarrow> (if chain = chain then Some rs\n                          else \\<Gamma> chain) =\n                         Some rs\n 3. \\<And>ab list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a # rs = rsa;\n        \\<Gamma>(chain \\<mapsto>\n        rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # list\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<lambda>a.\n            if a = chain then Some rs\n            else \\<Gamma>\n                  a),\\<gamma>,p\\<turnstile> \\<langle>ab #\n               rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(erule_tac seqE_cons[where \\<Gamma>=\"(\\<lambda>b. if b = chain then Some rs else \\<Gamma> b)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(case_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(frule iptables_bigstep_to_undecided[where \\<Gamma>=\"(\\<lambda>b. if b = chain then Some rs else \\<Gamma> b)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Undecided;\n        t = Undecided; ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Decision x2;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Decision\n        x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                                x2", "apply(subgoal_tac \"ti = Undecided\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Decision x2;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Decision\n        x2;\n        t = Decision x2; ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a.\n                             if a = chain then Some rs\n                             else \\<Gamma>\n                                   a),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                                x2\n 2. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Decision x2;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Decision\n        x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> ti = Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Decision x2;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Decision\n        x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> ti = Undecided", "using assms(1)[simplified map_update_chain_if[symmetric]] iptables_bigstep_deterministic"], ["proof (prove)\nusing this:\n  (\\<lambda>b.\n      if b = chain then Some rs\n      else \\<Gamma>\n            b),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n           a], Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n\ngoal (1 subgoal):\n 1. \\<And>ab ti x2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; Rule m a = ab;\n        \\<Gamma>(chain \\<mapsto>\n        ab #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>ab #\n      rs, Undecided\\<rangle> \\<Rightarrow> Decision x2;\n        chaina = chain; rsa = ab # rs;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>[ab], Undecided\\<rangle> \\<Rightarrow> ti;\n        (\\<lambda>b.\n            if b = chain then Some rs\n            else \\<Gamma>\n                  b),\\<gamma>,p\\<turnstile> \\<langle>rs, ti\\<rangle> \\<Rightarrow> Decision\n        x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> ti = Undecided", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m a # rs)) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m a #\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     \\<Gamma>(chain \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow> t", "qed (fastforce intro: call_result)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n  a], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                         a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rsa X.\n       \\<Gamma>(chain \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rsa rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rsa = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m a #\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<Gamma>(chain \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> t'", "qed (auto intro: iptables_bigstep.intros)"], ["", "lemma update_gamme_remove_Undecidedpart:\n  assumes \"\\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"\\<Gamma>(chain \\<mapsto> rs1@rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  shows   \"\\<Gamma>(chain \\<mapsto>rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (induction rs Undecided Undecided rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case Seq"], ["proof (state)\nthis:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  t_ = Undecided \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> Undecided\n  t_ = Undecided \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (6 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  t_ = Undecided \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> Undecided\n  t_ = Undecided \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Undecided", "by (auto simp: iptables_bigstep_to_undecided intro: seq)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (5 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case (Call_return m a chaina rs\\<^sub>1 m' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (5 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n     a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"chaina = chain\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"length rs1 \\<le> length rs\\<^sub>1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp add: List.append_eq_append_conv_if)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule_tac rs\\<^sub>1=\"drop (length rs1) rs\\<^sub>1\" and m'=m' and rs\\<^sub>2=rs\\<^sub>2 in call_return)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m p\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(chain \\<mapsto>\n                       drop (length rs1) rs\\<^sub>1 @\n                       Rule m' Return # rs\\<^sub>2))\n                       chain =\n                      Some\n                       (drop (length rs1) rs\\<^sub>1 @\n                        [Rule m' Return] @ rs\\<^sub>2)\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m' p\n 4. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp_all)[3]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(subgoal_tac \"rs\\<^sub>1 = (take (length rs1) rs\\<^sub>1) @ drop (length rs1) rs\\<^sub>1\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> rs\\<^sub>1 =\n                      take (length rs1) rs\\<^sub>1 @\n                      drop (length rs1) rs\\<^sub>1\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> rs\\<^sub>1 =\n                      take (length rs1) rs\\<^sub>1 @\n                      drop (length rs1) rs\\<^sub>1\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (metis append_take_drop_id)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 = take (length rs1) rs\\<^sub>1 \\<and>\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' =\n     drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(subgoal_tac \"\\<Gamma>(chain \\<mapsto> drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> \n            \\<langle>(take (length rs1) rs\\<^sub>1) @ drop (length rs1) rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take (length rs1)\n            rs\\<^sub>1 @\n           drop (length rs1)\n            rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' =\n     drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take\n                             (length rs1) rs\\<^sub>1 @\n                            drop (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' =\n     drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take\n                             (length rs1) rs\\<^sub>1 @\n                            drop (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take (length rs1)\n            rs\\<^sub>1 @\n           drop (length rs1)\n            rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(auto)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n     rs\\<^sub>1 =\n     take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n     rs1 = take (length rs1) rs\\<^sub>1;\n     rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     \\<Gamma>(chain \\<mapsto>\n     drop (length rs1) rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take (length rs1)\n            rs\\<^sub>1 @\n           drop (length rs1)\n            rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      drop (length rs1) rs\\<^sub>1 @\n                      Rule m' Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                             (length rs1)\n                             rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(erule_tac rs\\<^sub>1=\"take (length rs1) rs\\<^sub>1\" and rs\\<^sub>2=\"drop (length rs1) rs\\<^sub>1\" in seqE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n        rs\\<^sub>1 =\n        take (length rs1) rs\\<^sub>1 @ drop (length rs1) rs\\<^sub>1;\n        rs1 = take (length rs1) rs\\<^sub>1;\n        rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>take (length rs1)\n               rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop (length rs1)\n               rs\\<^sub>1, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         drop (length rs1) rs\\<^sub>1 @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                                (length rs1)\n                                rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n        rs\\<^sub>1 = rs1 @ drop (length rs1) rs\\<^sub>1;\n        rs1 = take (length rs1) rs\\<^sub>1;\n        rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop (length rs1)\n               rs\\<^sub>1, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         drop (length rs1) rs\\<^sub>1 @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                                (length rs1)\n                                rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(frule_tac rs=\"drop (length rs1) rs\\<^sub>1\" in iptables_bigstep_to_undecided)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chaina = chain; length rs1 \\<le> length rs\\<^sub>1;\n        rs\\<^sub>1 = rs1 @ drop (length rs1) rs\\<^sub>1;\n        rs1 = take (length rs1) rs\\<^sub>1;\n        rs' = drop (length rs1) rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>(chain \\<mapsto>\n        drop (length rs1) rs\\<^sub>1 @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop (length rs1)\n               rs\\<^sub>1, ti\\<rangle> \\<Rightarrow> Undecided;\n        ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         drop (length rs1) rs\\<^sub>1 @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>drop\n                                (length rs1)\n                                rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "(*oh wow*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     rs1 @ rs' = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2;\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs\\<^sub>1 @\n     Rule m' Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina = chain; \\<not> length rs1 \\<le> length rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (auto intro: call_result call_return)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n   a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (4 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case (Call_result _ _ chain' rsa)"], ["proof (state)\nthis:\n  matches \\<gamma> m_ p\n  a_ = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (4 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>m a chaina rs.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chaina = Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        rs1 @\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ p\n  a_ = Call chain'\n  (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  rs1 @\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n     a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"chain' = chain\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain; rs1 @ rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(rule call_result)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain; rs1 @ rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m_ p\n 2. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain; rs1 @ rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(chain \\<mapsto> rs')) chain = Some ?rs6\n 3. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain; rs1 @ rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>?rs6, Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp_all)[2]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain; rs1 @ rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (metis iptables_bigstep_to_undecided seqE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m_ p; a_ = Call chain';\n     (\\<Gamma>(chain \\<mapsto> rs1 @ rs')) chain' = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rs1 @\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     chain' \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n                       a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (auto intro: call_result)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n   a_], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (3 subgoals):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: iptables_bigstep.intros)"], ["", "lemma update_Gamma_nocall:\n  assumes \"\\<not> (\\<exists>chain. a = Call chain)\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "fix \\<Gamma> \\<Gamma>'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "proof (induction \"[Rule m a]\" s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        rs\\<^sub>2 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t'\n 7. \\<And>chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 8. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "case Seq"], ["proof (state)\nthis:\n  [Rule m a] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs\\<^sub>1_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  rs\\<^sub>2_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], t_\\<rangle> \\<Rightarrow> t'_\n\ngoal (8 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        rs\\<^sub>2 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t'\n 7. \\<And>chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 8. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  [Rule m a] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs\\<^sub>1_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  rs\\<^sub>2_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], t_\\<rangle> \\<Rightarrow> t'_\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> t'_", "by (metis (lifting, no_types) list_app_singletonE[where x = \"Rule m a\"] skipD)"], ["proof (state)\nthis:\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t'_\n\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "case Call_return"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  rs\\<^sub>1_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  rs\\<^sub>1_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  rs\\<^sub>1_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<nexists>chain. a = Call chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "by metis"], ["proof (state)\nthis:\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "case Call_result"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m a] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              a], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               a], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> t_", "using assms"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m a] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<nexists>chain. a = Call chain\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> t_", "by metis"], ["proof (state)\nthis:\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             a], Decision X\\<rangle> \\<Rightarrow> Decision X", "qed (auto intro: iptables_bigstep.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n           a], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n            a], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n           a], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n            a], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          a], s\\<rangle> \\<Rightarrow> t", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       a], s\\<rangle> \\<Rightarrow> t =\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        a], s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma update_Gamma_call:\n  assumes \"\\<Gamma> chain = Some rs\" and \"\\<Gamma>' chain = Some rs'\"\n  assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\" and \"\\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "fix \\<Gamma> \\<Gamma>' rs rs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "assume assms:\n        \"\\<Gamma> chain = Some rs\" \"\\<Gamma>' chain = Some rs'\"\n        \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\" \"\\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (state)\nthis:\n  \\<Gamma> chain = Some rs\n  \\<Gamma>' chain = Some rs'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "proof (induction \"[Rule m (Call chain)]\" s t rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m (Call chain)] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        rs\\<^sub>2 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t'\n 7. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 8. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "case Seq"], ["proof (state)\nthis:\n  [Rule m (Call chain)] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs\\<^sub>1_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  rs\\<^sub>2_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], t_\\<rangle> \\<Rightarrow> t'_\n\ngoal (8 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m (Call chain)] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        rs\\<^sub>2 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t'\n 7. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 8. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  [Rule m (Call chain)] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs\\<^sub>1_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> t'_\n  rs\\<^sub>2_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], t_\\<rangle> \\<Rightarrow> t'_\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> t'_", "by (metis (lifting, no_types) list_app_singletonE[where x = \"Rule m (Call chain)\"] skipD)"], ["proof (state)\nthis:\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t'_\n\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "case Call_result"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  Call chain = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (7 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 7. \\<And>chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        rs = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call chain)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  Call chain = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_", "using assms"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  Call chain = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> t_\n  rs_ = [Rule m (Call chain)] \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n  \\<Gamma> chain = Some rs\n  \\<Gamma>' chain = Some rs'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>rs', Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_", "by (metis call_result iptables_bigstep_deterministic)"], ["proof (state)\nthis:\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], Undecided\\<rangle> \\<Rightarrow> t_\n\ngoal (6 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; Call chain = Accept\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Drop \\<or> Call chain = Reject\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m p;\n     Call chain = Log \\<or> Call chain = Empty\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<not> matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>X.\n       \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n             (Call chain)], Decision X\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; Call chain = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        rs\\<^sub>1 = [Rule m (Call chain)] \\<Longrightarrow>\n        \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n              (Call\n                chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                               (Call\n                                 chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: iptables_bigstep.intros assms)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<Gamma>''2 chain = Some ?rsa2;\n   ?\\<Gamma>'''2 chain = Some ?rs'a2;\n   ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>?rsa2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n   ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>?rs'a2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n   ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n            (Call chain)], s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call chain)], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "note * = this"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<Gamma>''2 chain = Some ?rsa2;\n   ?\\<Gamma>'''2 chain = Some ?rs'a2;\n   ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>?rsa2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n   ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>?rs'a2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n   ?\\<Gamma>''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n            (Call chain)], s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>'''2,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call chain)], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "using *[OF assms(1-4)] *[OF assms(2,1,4,3)]"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], s\\<rangle> \\<Rightarrow> t\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call chain)], s\\<rangle> \\<Rightarrow> t", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], s\\<rangle> \\<Rightarrow> t =\n  \\<Gamma>',\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n        (Call chain)], s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma update_Gamma_remove_call_undecided:\n  assumes \"\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n  and     \"matches \\<gamma> m p\"\n  shows \"\\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (induction rs Undecided Undecided arbitrary: rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; matches \\<gamma> m p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                          rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; matches \\<gamma> m p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                          rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case Seq"], ["proof (state)\nthis:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>t_ = Undecided; matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t_ = Undecided; matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (6 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; matches \\<gamma> m p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                          rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; matches \\<gamma> m p\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                          rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> t_\n  \\<lbrakk>t_ = Undecided; matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t_ = Undecided; matches \\<gamma> m p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Undecided", "by (force simp: iptables_bigstep_to_undecided intro: seq')"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (5 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case (Call_return m a chaina rs\\<^sub>1 m' rs\\<^sub>2)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (5 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n  Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2)\n  matches \\<gamma> m' p\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n     a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"chaina = chain\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"rs\\<^sub>1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina = chain; rs\\<^sub>1 = []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p; chaina = chain;\n        rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(force intro: call_return)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p; chaina = chain;\n        rs\\<^sub>1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs' = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m (Call foo) #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>(chain \\<mapsto>\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m (Call foo) #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p; chaina = chain;\n        rs\\<^sub>1 = Rule m (Call foo) # list\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         list @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                                 (Call\n                                   chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(erule_tac \\<Gamma>=\"\\<Gamma>(chain \\<mapsto> list @ Rule m' Return # rs\\<^sub>2)\" in seqE_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs' = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m (Call foo) #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p; chaina = chain;\n        rs\\<^sub>1 = Rule m (Call foo) # list;\n        \\<Gamma>(chain \\<mapsto>\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                (Call foo)], Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>(chain \\<mapsto>\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         list @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                                 (Call\n                                   chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(frule_tac \\<Gamma>=\"\\<Gamma>(chain \\<mapsto> list @ Rule m' Return # rs\\<^sub>2)\" in iptables_bigstep_to_undecided)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list ti.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n        rs' = list @ Rule m' Return # rs\\<^sub>2; matches \\<gamma> m' p;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>Rule m (Call foo) #\n              list, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p; chaina = chain;\n        rs\\<^sub>1 = Rule m (Call foo) # list;\n        \\<Gamma>(chain \\<mapsto>\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                (Call foo)], Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>(chain \\<mapsto>\n        list @\n        Rule m' Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>list, ti\\<rangle> \\<Rightarrow> Undecided;\n        ti = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         list @\n                         Rule m' Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                                 (Call\n                                   chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n     Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n     matches \\<gamma> m' p;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(auto intro: call_return)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n   a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (4 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case (Call_result m a chaina rsa)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (4 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 4. \\<And>ma a chaina rs.\n       \\<lbrakk>matches \\<gamma> ma p; a = Call chaina;\n        (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina =\n        Some rs;\n        \\<Gamma>(chain \\<mapsto>\n        Rule m (Call foo) #\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chaina\n  (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa\n  \\<Gamma>(chain \\<mapsto>\n  Rule m (Call foo) #\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided\n  matches \\<gamma> m p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n     a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(cases \"chaina = chain\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chain;\n     Rule m (Call foo) # rs' = rsa;\n     \\<Gamma>(chain \\<mapsto>\n     rsa),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina = chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       (Call\n                         chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (metis call_result fun_upd_same iptables_bigstep_to_undecided seqE_cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n     (\\<Gamma>(chain \\<mapsto> Rule m (Call foo) # rs')) chaina = Some rsa;\n     \\<Gamma>(chain \\<mapsto>\n     Rule m (Call foo) #\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p \\<Longrightarrow>\n     \\<Gamma>(chain \\<mapsto>\n     rs'),\\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matches \\<gamma> m p; chaina \\<noteq> chain\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow> Undecided", "apply (auto intro: call_result)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n   a], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (3 subgoals):\n 1. matches \\<gamma> m p \\<Longrightarrow>\n    \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<And>ma a.\n       \\<lbrakk>matches \\<gamma> ma p; a = Log \\<or> a = Empty;\n        matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 3. \\<And>ma a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p; matches \\<gamma> m p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule ma\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "qed (auto intro: iptables_bigstep.intros)"], ["", "lemma all_return_subchain:\n  assumes a1: \"\\<Gamma> chain = Some rs\"\n  and     a2: \"matches \\<gamma> m p\"\n  and     a3: \"\\<forall>r\\<in>set rs. get_action r = Return\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "proof (cases \"\\<exists>r \\<in> set rs. matches \\<gamma> (get_match r) p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>r\\<in>set rs.\n       matches \\<gamma> (get_match r) p \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "case True"], ["proof (state)\nthis:\n  \\<exists>r\\<in>set rs. matches \\<gamma> (get_match r) p\n\ngoal (2 subgoals):\n 1. \\<exists>r\\<in>set rs.\n       matches \\<gamma> (get_match r) p \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "hence \"(\\<exists>rs1 r rs2. rs = rs1 @ r # rs2 \\<and> matches \\<gamma> (get_match r) p \\<and> (\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p))\""], ["proof (prove)\nusing this:\n  \\<exists>r\\<in>set rs. matches \\<gamma> (get_match r) p\n\ngoal (1 subgoal):\n 1. \\<exists>rs1 r rs2.\n       rs = rs1 @ r # rs2 \\<and>\n       matches \\<gamma> (get_match r) p \\<and>\n       (\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p)", "by (subst split_list_first_prop_iff[symmetric])"], ["proof (state)\nthis:\n  \\<exists>rs1 r rs2.\n     rs = rs1 @ r # rs2 \\<and>\n     matches \\<gamma> (get_match r) p \\<and>\n     (\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p)\n\ngoal (2 subgoals):\n 1. \\<exists>r\\<in>set rs.\n       matches \\<gamma> (get_match r) p \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "then"], ["proof (chain)\npicking this:\n  \\<exists>rs1 r rs2.\n     rs = rs1 @ r # rs2 \\<and>\n     matches \\<gamma> (get_match r) p \\<and>\n     (\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p)", "obtain rs1 r rs2\n      where *: \"rs = rs1 @ r # rs2\" \"matches \\<gamma> (get_match r) p\" \"\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p\""], ["proof (prove)\nusing this:\n  \\<exists>rs1 r rs2.\n     rs = rs1 @ r # rs2 \\<and>\n     matches \\<gamma> (get_match r) p \\<and>\n     (\\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p)\n\ngoal (1 subgoal):\n 1. (\\<And>rs1 r rs2.\n        \\<lbrakk>rs = rs1 @ r # rs2; matches \\<gamma> (get_match r) p;\n         \\<forall>r'\\<in>set rs1.\n            \\<not> matches \\<gamma> (get_match r') p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rs = rs1 @ r # rs2\n  matches \\<gamma> (get_match r) p\n  \\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p\n\ngoal (2 subgoals):\n 1. \\<exists>r\\<in>set rs.\n       matches \\<gamma> (get_match r) p \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "with a3"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set rs. get_action r = Return\n  rs = rs1 @ r # rs2\n  matches \\<gamma> (get_match r) p\n  \\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p", "obtain m' where \"r = Rule m' Return\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. get_action r = Return\n  rs = rs1 @ r # rs2\n  matches \\<gamma> (get_match r) p\n  \\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        r = Rule m' Return \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r) simp"], ["proof (state)\nthis:\n  r = Rule m' Return\n\ngoal (2 subgoals):\n 1. \\<exists>r\\<in>set rs.\n       matches \\<gamma> (get_match r) p \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n 2. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "with * assms"], ["proof (chain)\npicking this:\n  rs = rs1 @ r # rs2\n  matches \\<gamma> (get_match r) p\n  \\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p\n  \\<Gamma> chain = Some rs\n  matches \\<gamma> m p\n  \\<forall>r\\<in>set rs. get_action r = Return\n  r = Rule m' Return", "show ?thesis"], ["proof (prove)\nusing this:\n  rs = rs1 @ r # rs2\n  matches \\<gamma> (get_match r) p\n  \\<forall>r'\\<in>set rs1. \\<not> matches \\<gamma> (get_match r') p\n  \\<Gamma> chain = Some rs\n  matches \\<gamma> m p\n  \\<forall>r\\<in>set rs. get_action r = Return\n  r = Rule m' Return\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "by (fastforce intro: call_return nomatch')"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>r\\<in>set rs. matches \\<gamma> (get_match r) p)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "hence \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>r\\<in>set rs. matches \\<gamma> (get_match r) p)\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "by (blast intro: nomatch')"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>r\\<in>set rs.\n               matches \\<gamma> (get_match r) p) \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "with a1 a2"], ["proof (chain)\npicking this:\n  \\<Gamma> chain = Some rs\n  matches \\<gamma> m p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> chain = Some rs\n  matches \\<gamma> m p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided", "by (metis call_result)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n       (Call chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma get_action_case_simp: \"get_action (case r of Rule m' x \\<Rightarrow> Rule (MatchAnd m m') x) = get_action r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_action (case r of Rule m' x \\<Rightarrow> Rule (MatchAnd m m') x) =\n    get_action r", "by (metis rule.case_eq_if rule.sel(2))"], ["", "lemma updategamma_insert_new: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> chain \\<notin> dom \\<Gamma> \\<Longrightarrow> \\<Gamma>(chain \\<mapsto> rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t;\n     chain \\<notin> dom \\<Gamma>\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                      rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "proof(induction rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>m a chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> t", "case (Call_result m a chain' rs t)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  a = Call chain'\n  \\<Gamma> chain' = Some rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  chain \\<notin> dom \\<Gamma>\n\ngoal (9 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 9. \\<And>m a chaina rs t.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  a = Call chain'\n  \\<Gamma> chain' = Some rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n  chain \\<notin> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n     a], Undecided\\<rangle> \\<Rightarrow> t", "by (metis call_result domI fun_upd_def)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n   a], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "case Call_return"], ["proof (state)\nthis:\n  matches \\<gamma> m_ p\n  a_ = Call chain_\n  \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain \\<notin> dom \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<And>m a chaina rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>matches \\<gamma> m p; a = Call chaina;\n        \\<Gamma> chaina = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ p\n  a_ = Call chain_\n  \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ [Rule m'_ Return] @ rs\\<^sub>2_)\n  matches \\<gamma> m'_ p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided\n  chain \\<notin> dom \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Gamma>(chain \\<mapsto>\n    rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n     a_], Undecided\\<rangle> \\<Rightarrow> Undecided", "by (metis call_return domI fun_upd_def)"], ["proof (state)\nthis:\n  \\<Gamma>(chain \\<mapsto>\n  rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m_\n   a_], Undecided\\<rangle> \\<Rightarrow> Undecided\n\ngoal (7 subgoals):\n 1. \\<And>t.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Accept;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Drop \\<or> a = Reject;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                          a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n       \\<Gamma>(chain \\<mapsto>\n       rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n           X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma> \\<Longrightarrow>\n        \\<Gamma>(chain \\<mapsto>\n        rs'),\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        chain \\<notin> dom \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(chain \\<mapsto>\n                         rs'),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'", "qed(auto intro: iptables_bigstep.intros)"], ["", "end"]]}