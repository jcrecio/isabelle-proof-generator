{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Alternative_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma a: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\"", "lemma empty_rs_stateD: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>s t\" shows \"t = s\"", "lemma decided: \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\\<rbrakk> \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1@rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\"", "lemma decided_determ: \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>s t; s = Decision X\\<rbrakk> \\<Longrightarrow> t = Decision X\"", "lemma seq_ns:\n  \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t; \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk> \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1@rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\"", "lemma b: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t\"", "lemma c: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\"", "lemma d: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\"", "lemma returning:  \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided; matches \\<gamma> m' p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\"", "lemma e: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\"", "lemma all_chains_no_call_upd: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\"", "lemma updated_call: \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\"", "lemma shows\n      log_nz:     \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Log # rs \\<Rightarrow>\\<^sub>z t\"\nand empty_nz:   \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Empty # rs \\<Rightarrow>\\<^sub>z t\"", "lemma nz_empty_rs_stateD: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z t\" shows \"t = Undecided\"", "lemma upd_callD: \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> matches \\<gamma> m p \n  \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or> (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'. rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and> matches \\<gamma> m' p \\<and> \\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and> t = Undecided))\"", "lemma partial_fun_upd: \"(f(x \\<mapsto> y)) x = Some y\"", "lemma f: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> \n  (\\<Gamma>(c \\<mapsto> rs)),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\"", "lemma r_skip_inv: \"\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> t = Undecided\"", "lemma r_call_eq: \"\\<Gamma> c = Some rs \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\"", "lemma call_eq: \"\\<Gamma> c = Some rs \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<forall>r \\<in> set rs. get_action r \\<noteq> Return  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call c)],s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t\"", "theorem r_eq_orig: \"\\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs\\<rbrakk> \\<Longrightarrow>\n   \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c)], Undecided\\<rangle> \\<Rightarrow> t\"", "lemma r_no_call: \"\\<Gamma>,\\<gamma>,p\\<turnstile> Rule MatchAny (Call c)#rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma> c = None \\<Longrightarrow> False\"", "lemma no_call: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> rs = [Rule MatchAny (Call c)] \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma> c = None \\<Longrightarrow> False\"", "lemma r_tail: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Decision X\" shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r Decision X\"", "lemma r_seq: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided \\<Longrightarrow> \\<forall>r \\<in> set rs1. \\<not>(get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n   \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t\"", "lemma r_appendD: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<exists>s. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r s\"", "lemma ex_no_call: \"finite S \\<Longrightarrow> \\<exists>c. \\<forall>(rs :: 'a rule list) \\<in> S. no_call_to c rs\"", "lemma ex_no_call': \"finite (dom \\<Gamma>) \\<Longrightarrow> \\<exists>c. \\<Gamma> c = None \\<and> (\\<forall>(rs :: 'a rule list) \\<in> (ran \\<Gamma>). no_call_to c rs)\"", "lemma all_chains_no_call_upd_r: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\"", "lemma all_chains_no_call_upd_orig: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t\""], "translations": [["", "lemma a: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(induction rule: iptables_bigstep_ns.induct; (simp add: iptables_bigstep.intros;fail)?)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Accept #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\n 2. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\n 3. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\n 4. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Log #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 5. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Empty #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 6. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 7. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 8. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 9. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.decision iptables_bigstep.accept seq_cons)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\n 2. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\n 3. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Log #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 4. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Empty #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 5. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 6. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 7. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 8. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.decision iptables_bigstep.drop seq_cons)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>m rs.\n       matches \\<gamma> m p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n          rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\n 2. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Log #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Empty #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 4. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 5. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 6. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.decision iptables_bigstep.reject seq_cons)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Log #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Empty #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 4. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 5. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 6. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.log seq_cons)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m rs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             Empty #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 4. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 5. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.empty seq_cons)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                            rs, Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 4. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson nomatch seq_cons)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m chain rs\\<^sub>1 m' rs\\<^sub>2 rrs t.\n       \\<lbrakk>matches \\<gamma> m p;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 3. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m_ p;\n     \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ Rule m'_ Return # rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs_, Undecided\\<rangle> \\<Rightarrow> t_\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m_\n                          (Call chain_) #\n                         rrs_, Undecided\\<rangle> \\<Rightarrow> t_", "using iptables_bigstep.call_return seq_cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>matches ?\\<gamma> ?m ?p;\n   ?\\<Gamma> ?chain = Some (?rs\\<^sub>1 @ [Rule ?m' Return] @ ?rs\\<^sub>2);\n   matches ?\\<gamma> ?m' ?p;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>[Rule ?m\n                            (Call\n                              ?chain)], Undecided\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>[?r], Undecided\\<rangle> \\<Rightarrow> ?t;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?t\\<rangle> \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?r #\n                          ?rs, Undecided\\<rangle> \\<Rightarrow> ?t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m_ p;\n     \\<Gamma> chain_ = Some (rs\\<^sub>1_ @ Rule m'_ Return # rs\\<^sub>2_);\n     matches \\<gamma> m'_ p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs_, Undecided\\<rangle> \\<Rightarrow> t_\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m_\n                          (Call chain_) #\n                         rrs_, Undecided\\<rangle> \\<Rightarrow> t_", "by fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> Decision X\n 2. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.decision iptables_bigstep.call_result seq_cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m chain rs rrs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rrs, Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>Rule m\n                             (Call chain) #\n                            rrs, Undecided\\<rangle> \\<Rightarrow> t", "apply (meson iptables_bigstep.call_result seq'_cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma empty_rs_stateD: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>s t\" shows \"t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = s", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>s t\n\ngoal (1 subgoal):\n 1. t = s", "by(cases rule: iptables_bigstep_ns.cases)"], ["", "private"], ["", "lemma decided: \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\\<rbrakk> \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1@rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                       X \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X", "proof(induction rs\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n               X \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n      X", "case Nil"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n             X\n\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n               X \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n      X", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n             X", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n             X\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X", "by (fast dest: empty_rs_stateD)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n      X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n      X", "case (Cons a rs\\<^sub>1)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                     X \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                                   X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n                           X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision\n      X", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a # rs\\<^sub>1) @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X", "by(cases rule: iptables_bigstep_ns.cases; simp add: Cons.IH iptables_bigstep_ns.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a # rs\\<^sub>1) @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Decision X\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma decided_determ: \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>s t; s = Decision X\\<rbrakk> \\<Longrightarrow> t = Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>s t;\n     s = Decision X\\<rbrakk>\n    \\<Longrightarrow> t = Decision X", "by(induction rule: iptables_bigstep_ns.induct; (simp add: iptables_bigstep_ns.intros;fail)?)"], ["", "private"], ["", "lemma seq_ns:\n  \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t; \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk> \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1@rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "proof (cases t, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "case 1"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  t = Undecided\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "from 1(1,2)"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "unfolding 1"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "proof(induction rs\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                                     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "case (Cons a rs\\<^sub>3)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n   \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3 @\n                       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                                     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n           rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                             rs\\<^sub>1) @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n   \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3 @\n                       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n   \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3 @\n                       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n     rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a # rs\\<^sub>3) @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n              \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n             \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>3 @\n                                  rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t';\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>a #\n        rs\\<^sub>3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a #\n                          rs\\<^sub>3) @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "apply(rule iptables_bigstep_ns.cases[OF Cons.prems(1)]; simp add: iptables_bigstep_ns.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>(a # rs\\<^sub>3) @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[] @\n                         rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "qed simp"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "case (2 X)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  t = Decision X\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "hence \"t' = Decision X\""], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t'\n  t = Decision X\n\ngoal (1 subgoal):\n 1. t' = Decision X", "by (simp add: decided_determ)"], ["proof (state)\nthis:\n  t' = Decision X\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "from 2(1)"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n       rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'", "by (simp add: \"2\"(3) \\<open>t' = Decision X\\<close> decided)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n     rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma b: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t", "apply(induction rule: iptables_bigstep.induct; (simp add: iptables_bigstep_ns.intros;fail)?)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 t rs\\<^sub>2 t'.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        Undecided = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>s t';\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t'\n 2. \\<And>m chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        Undecided = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t", "apply (metis decided decision seq_ns seq_progress skipD state.exhaust)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m chain rs t.\n       \\<lbrakk>matches \\<gamma> m p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        Undecided = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t;\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t", "apply(metis call_no_result iptables_bigstep_ns.call_result iptables_bigstep_ns.skip state.exhaust)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "inductive iptables_bigstep_nz :: \"'a ruleset \\<Rightarrow> ('a, 'p) matcher \\<Rightarrow> 'p \\<Rightarrow> 'a rule list \\<Rightarrow> state \\<Rightarrow> bool\"\n  (\"_,_,_\\<turnstile> _ \\<Rightarrow>\\<^sub>z _\"  [60,60,60,20,98] 89)\n  for \\<Gamma> and \\<gamma> and p where\nskip:    \"\\<Gamma>,\\<gamma>,p \\<turnstile> []  \\<Rightarrow>\\<^sub>z Undecided\" |\naccept:  \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Accept # rs \\<Rightarrow>\\<^sub>z Decision FinalAllow\" |\ndrop:    \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Drop # rs \\<Rightarrow>\\<^sub>z Decision FinalDeny\" |\nreject:  \"matches \\<gamma> m p \\<Longrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Reject # rs \\<Rightarrow>\\<^sub>z Decision FinalDeny\" |\nlog:     \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Log # rs \\<Rightarrow>\\<^sub>z t\" |\nempty:   \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Empty # rs \\<Rightarrow>\\<^sub>z t\" |\nnms:     \"\\<not> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m a # rs \\<Rightarrow>\\<^sub>z t\" |\ncall_return:  \"\\<lbrakk> matches \\<gamma> m p; \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n                 matches \\<gamma> m' p; \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided; \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t \\<rbrakk> \\<Longrightarrow>\n               \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m (Call chain) # rrs \\<Rightarrow>\\<^sub>z t\" |\ncall_result:  \"\\<lbrakk> matches \\<gamma> m p; \\<Gamma> chain = Some rs; \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision X \\<rbrakk> \\<Longrightarrow>\n               \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m (Call chain) # rrs \\<Rightarrow>\\<^sub>z Decision X\" |\ncall_no_result:  \"\\<lbrakk> matches \\<gamma> m p; \\<Gamma> chain = Some rs; \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t \\<rbrakk> \\<Longrightarrow>\n               \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m (Call chain) # rrs \\<Rightarrow>\\<^sub>z t\""], ["", "private"], ["", "lemma c: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>s t", "by(induction rule: iptables_bigstep_nz.induct; simp add: iptables_bigstep_ns.intros)"], ["", "private"], ["", "lemma d: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>s t;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "by(induction rule: iptables_bigstep_ns.induct; simp add: iptables_bigstep_nz.intros)"], ["", "inductive iptables_bigstep_r :: \"'a ruleset \\<Rightarrow> ('a, 'p) matcher \\<Rightarrow> 'p \\<Rightarrow> 'a rule list \\<Rightarrow> state \\<Rightarrow> bool\"\n  (\"_,_,_\\<turnstile> _ \\<Rightarrow>\\<^sub>r _\"  [60,60,60,20,98] 89)\n  for \\<Gamma> and \\<gamma> and p where\nskip:    \"\\<Gamma>,\\<gamma>,p \\<turnstile> []  \\<Rightarrow>\\<^sub>r Undecided\" |\naccept:  \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Accept # rs \\<Rightarrow>\\<^sub>r Decision FinalAllow\" |\ndrop:    \"matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Drop # rs \\<Rightarrow>\\<^sub>r Decision FinalDeny\" |\nreject:  \"matches \\<gamma> m p \\<Longrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Reject # rs \\<Rightarrow>\\<^sub>r Decision FinalDeny\" |\nreturn:  \"matches \\<gamma> m p \\<Longrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Return # rs \\<Rightarrow>\\<^sub>r Undecided\" |\nlog:     \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Log # rs \\<Rightarrow>\\<^sub>r t\" |\nempty:   \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Empty # rs \\<Rightarrow>\\<^sub>r t\" |\nnms:     \"\\<not> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m a # rs \\<Rightarrow>\\<^sub>r t\" |\ncall_result:  \"\\<lbrakk> matches \\<gamma> m p; \\<Gamma> chain = Some rs; \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X \\<rbrakk> \\<Longrightarrow>\n               \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m (Call chain) # rrs \\<Rightarrow>\\<^sub>r Decision X\" |\ncall_no_result:  \"\\<lbrakk> \\<Gamma> chain = Some rs; \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t \\<rbrakk> \\<Longrightarrow>\n               \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m (Call chain) # rrs \\<Rightarrow>\\<^sub>r t\""], ["", "private"], ["", "lemma returning:  \"\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided; matches \\<gamma> m' p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n     matches \\<gamma> m' p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "proof(induction rs\\<^sub>1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided;\n     matches \\<gamma> m' p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n                 matches \\<gamma> m' p\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                            Rule m' Return #\n                            rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n        matches \\<gamma> m' p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>1) @\n                   Rule m' Return #\n                   rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "case Nil"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided;\n     matches \\<gamma> m' p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n 2. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n                 matches \\<gamma> m' p\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                            Rule m' Return #\n                            rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n        matches \\<gamma> m' p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>1) @\n                   Rule m' Return #\n                   rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                                    Rule m' Return #\n                                    rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "by (simp add: return)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                                  Rule m' Return #\n                                  rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n                 matches \\<gamma> m' p\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                            Rule m' Return #\n                            rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n        matches \\<gamma> m' p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>1) @\n                   Rule m' Return #\n                   rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n                 matches \\<gamma> m' p\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                            Rule m' Return #\n                            rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n        matches \\<gamma> m' p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>1) @\n                   Rule m' Return #\n                   rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "case (Cons a rs\\<^sub>3)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided;\n   matches \\<gamma> m' p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 @\n              Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n                                  rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<And>a rs\\<^sub>1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n                 matches \\<gamma> m' p\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 @\n                            Rule m' Return #\n                            rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>r Undecided;\n        matches \\<gamma> m' p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>1) @\n                   Rule m' Return #\n                   rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided;\n   matches \\<gamma> m' p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 @\n              Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n                                  rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided;\n   matches \\<gamma> m' p\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>3 @\n              Rule m' Return # rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n                                  rs\\<^sub>3 \\<Rightarrow>\\<^sub>r Undecided\n  matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>3) @\n                                    Rule m' Return #\n                                    rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided", "by - (rule iptables_bigstep_r.cases[OF Cons.prems(1)]; simp add: iptables_bigstep_r.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs\\<^sub>3) @\n                                  Rule m' Return #\n                                  rs\\<^sub>2 \\<Rightarrow>\\<^sub>r Undecided\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma e: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "by(induction rule: iptables_bigstep_nz.induct; simp add: iptables_bigstep_r.intros returning)"], ["", "definition \"no_call_to c rs \\<equiv> (\\<forall>r \\<in> set rs. case get_action r of Call c' \\<Rightarrow> c \\<noteq> c' | _ \\<Rightarrow> True)\""], ["", "definition \"all_chains p \\<Gamma> rs \\<equiv> (p rs \\<and> (\\<forall>l rs. \\<Gamma> l = Some rs \\<longrightarrow> p rs))\""], ["", "private"], ["", "lemma all_chains_no_call_upd: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "proof (rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "case 1"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "from 1(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "by(induction rule: iptables_bigstep_nz.induct; \n      (simp add: iptables_bigstep_nz.intros no_call_to_def all_chains_def split: if_splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "case 2"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "from 2(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "by(induction rule: iptables_bigstep_nz.induct; \n      (simp add: iptables_bigstep_nz.intros no_call_to_def all_chains_def split:  action.splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma updated_call: \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> [Rule m\n             (Call c)] \\<Rightarrow>\\<^sub>z t", "by(cases t; simp add: iptables_bigstep_nz.call_no_result iptables_bigstep_nz.call_result iptables_bigstep_nz.skip)"], ["", "private"], ["", "lemma shows\n      log_nz:     \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Log # rs \\<Rightarrow>\\<^sub>z t\"\nand empty_nz:   \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Empty # rs \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n     \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Log #\n                                     rs \\<Rightarrow>\\<^sub>z t) &&&\n    (\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n     \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m Empty #\n                                     rs \\<Rightarrow>\\<^sub>z t)", "by (meson iptables_bigstep_nz.log iptables_bigstep_nz.empty iptables_bigstep_nz.nms)+"], ["", "private"], ["", "lemma nz_empty_rs_stateD: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z t\" shows \"t = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = Undecided", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. t = Undecided", "by(cases rule: iptables_bigstep_nz.cases)"], ["", "private"], ["", "lemma upd_callD: \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t \\<Longrightarrow> matches \\<gamma> m p \n  \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or> (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'. rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and> matches \\<gamma> m' p \\<and> \\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and> t = Undecided))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> [Rule m\n    (Call c)] \\<Rightarrow>\\<^sub>z t;\n     matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or>\n                      (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                          rs =\n                          rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                          matches \\<gamma> m' p \\<and>\n                          \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                          t = Undecided)", "by(subst (asm) iptables_bigstep_nz.simps) (auto dest!: nz_empty_rs_stateD)"], ["", "private"], ["", "lemma partial_fun_upd: \"(f(x \\<mapsto> y)) x = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f(x \\<mapsto> y)) x = Some y", "by(fact fun_upd_same)"], ["", "lemma f: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> \n  (\\<Gamma>(c \\<mapsto> rs)),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n     matches \\<gamma> m p; all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      rs),\\<gamma>,p\\<turnstile> [Rule m\n             (Call c)] \\<Rightarrow>\\<^sub>z t", "proof(induction rule: iptables_bigstep_r.induct; (simp add: iptables_bigstep_nz.intros;fail)?)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>ma rs.\n       \\<lbrakk>matches \\<gamma> ma p; matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Return # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Return #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 5. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 6. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (return m rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m p\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m Return # rs)\n\ngoal (6 subgoals):\n 1. \\<And>ma rs.\n       \\<lbrakk>matches \\<gamma> ma p; matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Return # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Return #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 5. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 6. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "then"], ["proof (chain)\npicking this:\n  matches \\<gamma> m p\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m Return # rs)", "show ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m p\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m Return # rs)\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m Return #\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "by (metis append_Nil fun_upd_same iptables_bigstep_nz.call_return iptables_bigstep_nz.skip)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m Return #\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (5 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 5. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 5. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (log rs t mx)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Log # rs)\n\ngoal (5 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 5. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have ac: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using log(4)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Log # rs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (5 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 5. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have *: \"\\<Gamma>(c \\<mapsto> Rule mx Log # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z Undecided\"\n    if \"rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\" \"matches \\<gamma> m' p\" \n       \"\\<Gamma>(c \\<mapsto> rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\"\n    for rs\\<^sub>1 rs\\<^sub>2 m'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "have ac2: \"all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "using log(4) that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Log # rs)\n  rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\n  matches \\<gamma> m' p\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "hence \"\\<Gamma>(c \\<mapsto> Rule mx Log # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\""], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "using that(3)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "unfolding that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "by(simp add: all_chains_no_call_upd)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "hence \"\\<Gamma>(c \\<mapsto> Rule mx Log # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Log # rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\""], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Log #\n rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "by (simp add: log_nz)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Log #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Log #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "using that(1,2)"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Log #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n  rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\n  matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "by(elim iptables_bigstep_nz.call_return[where rs\\<^sub>2=rs\\<^sub>2, OF \\<open>matches \\<gamma> m p\\<close>, rotated]; simp add: iptables_bigstep_nz.skip)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>rs = ?rs\\<^sub>1 @ Rule ?m' Return # ?rs\\<^sub>2;\n   matches \\<gamma> ?m' p;\n   \\<Gamma>(c \\<mapsto>\n   ?rs\\<^sub>1 @\n   Rule ?m' Return #\n   ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    Rule mx Log #\n                    ?rs\\<^sub>1 @\n                    Rule ?m' Return #\n                    ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                    (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (5 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Log # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Log #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 5. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "from log(2)[OF log(3) ac]"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call\n                                   c)] \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or>\n    (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        t = Undecided) \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> Rule mx Log # rs \\<Rightarrow>\\<^sub>z t", "apply(rule log_nz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log # rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "apply(simp add: ac all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "using *"], ["proof (prove)\nusing this:\n  \\<lbrakk>rs = ?rs\\<^sub>1 @ Rule ?m' Return # ?rs\\<^sub>2;\n   matches \\<gamma> ?m' p;\n   \\<Gamma>(c \\<mapsto>\n   ?rs\\<^sub>1 @\n   Rule ?m' Return #\n   ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    Rule mx Log #\n                    ?rs\\<^sub>1 @\n                    Rule ?m' Return #\n                    ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                    (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Log #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Log #\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (empty rs t mx)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Empty # rs)\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "text\\<open>analogous\\<close>"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Empty # rs)\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "(*<*)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Empty # rs)\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have ac: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using empty(4)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Empty # rs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have *: \"\\<Gamma>(c \\<mapsto> Rule mx Empty # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z Undecided\"\n    if \"rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\" \"matches \\<gamma> m' p\" \n       \"\\<Gamma>(c \\<mapsto> rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\"\n    for rs\\<^sub>1 rs\\<^sub>2 m'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "have ac2: \"all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "using empty(4) that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule mx Empty # rs)\n  rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\n  matches \\<gamma> m' p\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "hence \"\\<Gamma>(c \\<mapsto> Rule mx Empty # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\""], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "using that(3)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "unfolding that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\n  \\<Gamma>(c \\<mapsto>\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "by(simp add: all_chains_no_call_upd)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "hence \"\\<Gamma>(c \\<mapsto> Rule mx Empty # rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Empty # rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\""], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Empty #\n rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided", "by (simp add: empty_nz)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Empty #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Empty #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "using that(1,2)"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule mx Empty #\n                                     rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n  rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2\n  matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs\\<^sub>1 @\n    Rule m' Return #\n    rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n   (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "by(elim iptables_bigstep_nz.call_return[where rs\\<^sub>2=rs\\<^sub>2, OF \\<open>matches \\<gamma> m p\\<close>, rotated]; simp add: iptables_bigstep_nz.skip)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs\\<^sub>1 @\n  Rule m' Return #\n  rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>rs = ?rs\\<^sub>1 @ Rule ?m' Return # ?rs\\<^sub>2;\n   matches \\<gamma> ?m' p;\n   \\<Gamma>(c \\<mapsto>\n   ?rs\\<^sub>1 @\n   Rule ?m' Return #\n   ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    Rule mx Empty #\n                    ?rs\\<^sub>1 @\n                    Rule ?m' Return #\n                    ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                    (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (4 subgoals):\n 1. \\<And>rs t ma.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma Empty # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma Empty #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 4. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "from empty(2)[OF empty(3) ac]"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call\n                                   c)] \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or>\n    (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        t = Undecided) \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> Rule mx Empty # rs \\<Rightarrow>\\<^sub>z t", "apply(rule empty_nz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty # rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "apply(simp add: ac all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "using *"], ["proof (prove)\nusing this:\n  \\<lbrakk>rs = ?rs\\<^sub>1 @ Rule ?m' Return # ?rs\\<^sub>2;\n   matches \\<gamma> ?m' p;\n   \\<Gamma>(c \\<mapsto>\n   ?rs\\<^sub>1 @\n   Rule ?m' Return #\n   ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    Rule mx Empty #\n                    ?rs\\<^sub>1 @\n                    Rule ?m' Return #\n                    ?rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                    (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule mx Empty #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (3 subgoals):\n 1. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 3. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "(*>*)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule mx Empty #\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (3 subgoals):\n 1. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 3. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 3. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (nms m' rs t a)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m' p\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m' a # rs)\n\ngoal (3 subgoals):\n 1. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 3. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have ac: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using nms(5)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule m' a # rs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (3 subgoals):\n 1. \\<And>ma rs t a.\n       \\<lbrakk>\\<not> matches \\<gamma> ma p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma> (Rule ma a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma a #\n                         rs),\\<gamma>,p\\<turnstile> [Rule m\n                (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 3. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "from nms.IH[OF nms(4) ac]"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call\n                                   c)] \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<or>\n    (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        t = Undecided) \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> Rule m' a # rs \\<Rightarrow>\\<^sub>z t", "apply(rule iptables_bigstep_nz.nms[OF \\<open>\\<not> matches \\<gamma> m' p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a # rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t", "apply(simp add: ac all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       t = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' a #\n    rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>rs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' a #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal for rs\\<^sub>1 rs\\<^sub>2 r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "apply(subgoal_tac \"all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided; all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "(* Ich kann auch anders. *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided; all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "apply(subst (asm) all_chains_no_call_upd, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided; all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "apply(subst (asm) all_chains_no_call_upd[symmetric], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     ?x5),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided; all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "apply(drule iptables_bigstep_nz.nms[where a=a, OF \\<open>\\<not> matches \\<gamma> m' p\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p; t = Undecided;\n     all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1;\n     \\<Gamma>(c \\<mapsto>\n     ?x5),\\<gamma>,p\\<turnstile> Rule m' a #\n                                 rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "apply(erule (1) iptables_bigstep_nz.call_return[where rs\\<^sub>2=rs\\<^sub>2, OF \\<open>matches \\<gamma> m p\\<close>, rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; t = Undecided;\n     all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1;\n     \\<Gamma>(c \\<mapsto>\n     Rule m' a #\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' a #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; t = Undecided;\n     all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1;\n     \\<Gamma>(c \\<mapsto>\n     Rule m' a #\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' a #\n  rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' a # rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2))\n                       c =\n                      Some\n                       ((Rule m' a # rs\\<^sub>1) @\n                        Rule r Return # rs\\<^sub>2)\n 3. \\<lbrakk>rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "apply(insert ac; simp add: all_chains_def no_call_to_def iptables_bigstep_nz.skip)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m' a #\n  rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (call_result m' c' rs X rrs)"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n  \\<Gamma> c' = Some rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have acrs: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using call_result(2,6)"], ["proof (prove)\nusing this:\n  \\<Gamma> c' = Some rs\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have cc: \"c \\<noteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "(* okay, this one is a bit nifty\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "using call_result(6)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  c \\<noteq> c'\n\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "using call_result.IH call_result.prems(1) acrs"], ["proof (prove)\nusing this:\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n\ngoal (2 subgoals):\n 1. \\<And>ma chain rs X rrs.\n       \\<lbrakk>matches \\<gamma> ma p; \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call\n                                   c)] \\<Rightarrow>\\<^sub>z Decision\n                        X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision X \\<or>\n    (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        Decision X = Undecided) \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n 2. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       Decision X = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                                rrs \\<Rightarrow>\\<^sub>z Decision X", "apply(rule iptables_bigstep_nz.call_result[where rs=rs, OF \\<open>matches \\<gamma> m' p\\<close> ])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    (\\<Gamma>(c \\<mapsto> Rule m' (Call c') # rrs)) c' = Some rs\n 2. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision X", "apply(simp add: cc[symmetric] call_result(2);fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision\n                   X \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Decision X", "apply(simp add: acrs all_chains_no_call_upd;fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n       rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n       matches \\<gamma> m' p \\<and>\n       \\<Gamma>(c \\<mapsto>\n       rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n       Decision X = Undecided \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call c)] \\<Rightarrow>\\<^sub>z Decision X", "apply safe"], ["proof (prove)\ngoal:\nNo subgoals!", "(* oh. Didn't expect that. :) *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m' (Call c') #\n  rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                (Call c)] \\<Rightarrow>\\<^sub>z Decision X\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "case (call_no_result c' rs rrs t m')"], ["proof (state)\nthis:\n  \\<Gamma> c' = Some rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rrs),\\<gamma>,p\\<turnstile> [Rule m\n            (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have acrs: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using call_no_result(1,7)"], ["proof (prove)\nusing this:\n  \\<Gamma> c' = Some rs\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have acrrs: \"all_chains (no_call_to c) \\<Gamma> rrs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rrs", "using call_no_result(7)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rrs", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rrs\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have acrs1: \"all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\" if \"rs = rs\\<^sub>1 @ rs\\<^sub>2\" for rs\\<^sub>1 rs\\<^sub>2"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "using acrs that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  rs = ?rs\\<^sub>1 @ ?rs\\<^sub>2 \\<Longrightarrow>\n  all_chains (no_call_to c) \\<Gamma> ?rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have acrrs1: \"all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1\" if \"rrs = rs\\<^sub>1 @ rs\\<^sub>2\" for rs\\<^sub>1 rs\\<^sub>2"], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "using acrrs that"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rrs\n  rrs = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs\\<^sub>1", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  rrs = ?rs\\<^sub>1 @ ?rs\\<^sub>2 \\<Longrightarrow>\n  all_chains (no_call_to c) \\<Gamma> ?rs\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have cc: \"c \\<noteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "(* okay, this one is a bit nifty\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "using call_no_result(7)"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> (Rule m' (Call c') # rrs)\n\ngoal (1 subgoal):\n 1. c \\<noteq> c'", "by(simp add: all_chains_def no_call_to_def)"], ["proof (state)\nthis:\n  c \\<noteq> c'\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have *: \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "using call_no_result.IH call_no_result.prems(1) acrs"], ["proof (prove)\nusing this:\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rs),\\<gamma>,p\\<turnstile> [Rule m\n           (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n  \\<lbrakk>matches \\<gamma> m p;\n   all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                    rrs),\\<gamma>,p\\<turnstile> [Rule m\n            (Call c)] \\<Rightarrow>\\<^sub>z t\n  matches \\<gamma> m p\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule m\n                                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "have **: \"\\<Gamma>(c \\<mapsto> rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "by (simp add: acrrs call_no_result.IH(2) call_no_result.prems(1))"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<And>chain rs rrs t ma.\n       \\<lbrakk>\\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t;\n        \\<lbrakk>matches \\<gamma> m p;\n         all_chains (no_call_to c) \\<Gamma> rrs\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                          rrs),\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>z t;\n        matches \\<gamma> m p;\n        all_chains (no_call_to c) \\<Gamma>\n         (Rule ma (Call chain) # rrs)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule ma (Call chain) #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "proof(cases \\<open>matches \\<gamma> m' p\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<not> matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "case True"], ["proof (state)\nthis:\n  matches \\<gamma> m' p\n\ngoal (2 subgoals):\n 1. matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<not> matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "from call_no_result(5)[OF \\<open>matches \\<gamma> m p\\<close> acrrs] *"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> [Rule m\n                               (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> [Rule m\n     (Call c)] \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> [Rule m\n                                  (Call\n                                    c)] \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t \\<or>\n             (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                 rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                 matches \\<gamma> m' p \\<and>\n                 \\<Gamma>(c \\<mapsto>\n                 rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                 t = Undecided);\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided \\<or>\n     (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n         rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n         matches \\<gamma> m' p \\<and>\n         \\<Gamma>(c \\<mapsto>\n         rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n         Undecided = Undecided)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(elim disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        Undecided = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<lbrakk>\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                matches \\<gamma> m' p \\<and>\n                \\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<lbrakk>\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                matches \\<gamma> m' p \\<and>\n                \\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                t = Undecided;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        Undecided = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "(* 4 sg *)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        Undecided = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<lbrakk>\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                matches \\<gamma> m' p \\<and>\n                \\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 4. \\<lbrakk>\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n                rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n                matches \\<gamma> m' p \\<and>\n                \\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n                t = Undecided;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        Undecided = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n        rs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t\n 3. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<Gamma>(c \\<mapsto>\n                rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n        rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<And>rs\\<^sub>1 rs\\<^sub>1' rs\\<^sub>2 rs\\<^sub>2' m'a m'aa.\n       \\<lbrakk>rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        rs = rs\\<^sub>1' @ Rule m'aa Return # rs\\<^sub>2';\n        matches \\<gamma> m'a p; matches \\<gamma> m'aa p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1' @\n        Rule m'aa Return #\n        rs\\<^sub>2'),\\<gamma>,p\\<turnstile> rs\\<^sub>1' \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n            rrs \\<Rightarrow>\\<^sub>z t", "apply(rule iptables_bigstep_nz.call_no_result[where rs=rs, OF \\<open>matches \\<gamma> m' p\\<close> ])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> Rule m' (Call c') # rrs)) c' =\n                      Some rs\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: cc[symmetric] call_no_result(1);fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: acrs all_chains_no_call_upd;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: acrrs all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<Gamma>(c \\<mapsto>\n                rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n        rs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rrs),\\<gamma>,p\\<turnstile> [Rule m\n                 (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<Gamma>(c \\<mapsto>\n                rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n        rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<And>rs\\<^sub>1 rs\\<^sub>1' rs\\<^sub>2 rs\\<^sub>2' m'a m'aa.\n       \\<lbrakk>rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        rs = rs\\<^sub>1' @ Rule m'aa Return # rs\\<^sub>2';\n        matches \\<gamma> m'a p; matches \\<gamma> m'aa p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1' @\n        Rule m'aa Return #\n        rs\\<^sub>2'),\\<gamma>,p\\<turnstile> rs\\<^sub>1' \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal for rs\\<^sub>1 rs\\<^sub>2 r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n            rrs \\<Rightarrow>\\<^sub>z t", "apply(rule call_return[OF \\<open>matches \\<gamma> m' p\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> Rule m' (Call c') # rrs)) c' =\n                      Some (?rs\\<^sub>13 @ Rule ?m'3 Return # ?rs\\<^sub>23)\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> ?m'3 p\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> ?rs\\<^sub>13 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: cc[symmetric] call_no_result(1);fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> r p\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: acrs1 all_chains_no_call_upd;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: acrrs all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<Gamma>(c \\<mapsto>\n                rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n        rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>1' rs\\<^sub>2 rs\\<^sub>2' m'a m'aa.\n       \\<lbrakk>rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        rs = rs\\<^sub>1' @ Rule m'aa Return # rs\\<^sub>2';\n        matches \\<gamma> m'a p; matches \\<gamma> m'aa p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1' @\n        Rule m'aa Return #\n        rs\\<^sub>2'),\\<gamma>,p\\<turnstile> rs\\<^sub>1' \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal for rs\\<^sub>1 rs\\<^sub>2 r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule call_return[where rs\\<^sub>1=\"Rule m' (Call c') # rs\\<^sub>1\", OF \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' (Call c') #\n                       rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2))\n                       c =\n                      Some\n                       ((Rule m' (Call c') # rs\\<^sub>1) @\n                        Rule ?m' Return # ?rs\\<^sub>2)\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> ?m' p\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> r p\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule iptables_bigstep_nz.call_no_result[OF \\<open>matches \\<gamma> m' p\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' (Call c') #\n                       rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2))\n                       c' =\n                      Some ?rs12\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs12 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp add: cc[symmetric] call_no_result(1);fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply (meson acrs all_chains_no_call_upd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(subst all_chains_no_call_upd; simp add: acrrs1 all_chains_no_call_upd; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>(c \\<mapsto>\n             rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z Undecided;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply (simp add: iptables_bigstep_nz.skip;fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>1' rs\\<^sub>2 rs\\<^sub>2' m'a m'aa.\n       \\<lbrakk>rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        rs = rs\\<^sub>1' @ Rule m'aa Return # rs\\<^sub>2';\n        matches \\<gamma> m'a p; matches \\<gamma> m'aa p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1' @\n        Rule m'aa Return #\n        rs\\<^sub>2'),\\<gamma>,p\\<turnstile> rs\\<^sub>1' \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal for rrs\\<^sub>1 rs\\<^sub>1 rrs\\<^sub>2 rs\\<^sub>2 rr r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                      (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule call_return[where rs\\<^sub>1=\"Rule m' (Call c') # rrs\\<^sub>1\", OF \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' (Call c') #\n                       rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2))\n                       c =\n                      Some\n                       ((Rule m' (Call c') # rrs\\<^sub>1) @\n                        Rule ?m' Return # ?rs\\<^sub>2)\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> ?m' p\n 3. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m'\n                     (Call c') #\n                    rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> rr p\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m'\n                     (Call c') #\n                    rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m'\n                     (Call c') #\n                    rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule call_return[OF \\<open>matches \\<gamma> m' p\\<close>])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' (Call c') #\n                       rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2))\n                       c' =\n                      Some\n                       (?rs\\<^sub>112 @ Rule ?m'12 Return # ?rs\\<^sub>212)\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> ?m'12 p\n 3. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> ?rs\\<^sub>112 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 5. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp add: cc[symmetric] call_no_result(1);fail)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> r p\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply (meson acrs1 all_chains_no_call_upd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(subst all_chains_no_call_upd; simp add: acrrs1 all_chains_no_call_upd; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rrs = rrs\\<^sub>1 @ Rule rr Return # rrs\\<^sub>2;\n     rs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> rr p;\n     matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rrs\\<^sub>1 @\n     Rule rr Return #\n     rrs\\<^sub>2),\\<gamma>,p\\<turnstile> rrs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs\\<^sub>1 @\n                      Rule rr Return #\n                      rrs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply (simp add: iptables_bigstep_nz.skip;fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m' (Call c') #\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "case False"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m' p\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m' p \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "from iptables_bigstep_nz.nms[OF False] **"], ["proof (chain)\npicking this:\n  ?\\<Gamma>,\\<gamma>,p\\<turnstile> ?rs \\<Rightarrow>\\<^sub>z ?t \\<Longrightarrow>\n  ?\\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' ?a # ?rs \\<Rightarrow>\\<^sub>z ?t\n  \\<Gamma>(c \\<mapsto>\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "show ?thesis"], ["proof (prove)\nusing this:\n  ?\\<Gamma>,\\<gamma>,p\\<turnstile> ?rs \\<Rightarrow>\\<^sub>z ?t \\<Longrightarrow>\n  ?\\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' ?a # ?rs \\<Rightarrow>\\<^sub>z ?t\n  \\<Gamma>(c \\<mapsto>\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    Rule m' (Call c') #\n    rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> [Rule m\n                                   (Call\n                                     c)] \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(drule upd_callD[OF _ \\<open>matches \\<gamma> m p\\<close>])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t \\<or>\n     (\\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n         rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n         matches \\<gamma> m' p \\<and>\n         \\<Gamma>(c \\<mapsto>\n         rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n         t = Undecided)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t\n 2. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply(rule updated_call[OF _ \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n            rrs \\<Rightarrow>\\<^sub>z t", "apply(rule iptables_bigstep_nz.nms[OF False])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<Gamma>(c \\<mapsto>\n     rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>z t", "apply(simp add: acrrs all_chains_no_call_upd)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     \\<exists>rs\\<^sub>1 rs\\<^sub>2 m'.\n        rrs = rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2 \\<and>\n        matches \\<gamma> m' p \\<and>\n        \\<Gamma>(c \\<mapsto>\n        rrs),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided \\<and>\n        t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rrs),\\<gamma>,p\\<turnstile> [Rule m\n              (Call c)] \\<Rightarrow>\\<^sub>z t", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 m'a.\n       \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                   \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                   \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n             rs \\<Rightarrow>\\<^sub>z t;\n        rrs = rs\\<^sub>1 @ Rule m'a Return # rs\\<^sub>2;\n        matches \\<gamma> m'a p;\n        \\<Gamma>(c \\<mapsto>\n        rs\\<^sub>1 @\n        Rule m'a Return #\n        rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                         Rule m' (Call c') #\n                         rs\\<^sub>1 @\n                         Rule m'a Return #\n                         rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                        (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "subgoal for rs\\<^sub>1 rs\\<^sub>2 r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule call_return[where rs\\<^sub>1=\"Rule m' (Call c') # rs\\<^sub>1\", OF \\<open>matches \\<gamma> m p\\<close>])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<Gamma>(c \\<mapsto>\n                       Rule m' (Call c') #\n                       rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2))\n                       c =\n                      Some\n                       ((Rule m' (Call c') # rs\\<^sub>1) @\n                        Rule ?m' Return # ?rs\\<^sub>2)\n 2. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> ?m' p\n 3. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 4. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> r p\n 2. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 3. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> Rule m' (Call c') #\n                   rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(rule iptables_bigstep_nz.nms[OF False])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided\n 2. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(subst all_chains_no_call_upd; simp add: acrrs1 all_chains_no_call_upd; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<Gamma> rs t a.\n                \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>z t \\<Longrightarrow>\n                \\<Gamma>,\\<gamma>,p\\<turnstile> Rule m' a #\n          rs \\<Rightarrow>\\<^sub>z t;\n     rrs = rs\\<^sub>1 @ Rule r Return # rs\\<^sub>2; matches \\<gamma> r p;\n     \\<Gamma>(c \\<mapsto>\n     rs\\<^sub>1 @\n     Rule r Return #\n     rs\\<^sub>2),\\<gamma>,p\\<turnstile> rs\\<^sub>1 \\<Rightarrow>\\<^sub>z Undecided;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      Rule m' (Call c') #\n                      rs\\<^sub>1 @\n                      Rule r Return #\n                      rs\\<^sub>2),\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>z Undecided", "apply(simp add: iptables_bigstep_nz.skip;fail)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m' (Call c') #\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  Rule m' (Call c') #\n  rrs),\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>z t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_skip_inv: \"\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> t = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    t = Undecided", "by(subst (asm) iptables_bigstep_r.simps) auto"], ["", "(* why did I do all this? essentially, because I thought this should be derivable: *)"], ["", "lemma r_call_eq: \"\\<Gamma> c = Some rs \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m (Call c)] \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t =\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "(* and yes, there is a more general form of this lemma, but\\<dots> meh. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t =\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n (Call c)] \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n 2. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n (Call c)] \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "apply(subst (asm) iptables_bigstep_r.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     [Rule m (Call c)] = [] \\<and> t = Undecided \\<or>\n     (\\<exists>ma rs.\n         [Rule m (Call c)] = Rule ma Accept # rs \\<and>\n         t = Decision FinalAllow \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma rs.\n         [Rule m (Call c)] = Rule ma Drop # rs \\<and>\n         t = Decision FinalDeny \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma rs.\n         [Rule m (Call c)] = Rule ma Reject # rs \\<and>\n         t = Decision FinalDeny \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma rs.\n         [Rule m (Call c)] = Rule ma Return # rs \\<and>\n         t = Undecided \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>rs ta ma.\n         [Rule m (Call c)] = Rule ma Log # rs \\<and>\n         t = ta \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n     (\\<exists>rs ta ma.\n         [Rule m (Call c)] = Rule ma Empty # rs \\<and>\n         t = ta \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n     (\\<exists>ma rs ta a.\n         [Rule m (Call c)] = Rule ma a # rs \\<and>\n         t = ta \\<and>\n         \\<not> matches \\<gamma> ma p \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n     (\\<exists>ma chain rs X rrs.\n         [Rule m (Call c)] = Rule ma (Call chain) # rrs \\<and>\n         t = Decision X \\<and>\n         matches \\<gamma> ma p \\<and>\n         \\<Gamma> chain = Some rs \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                             X) \\<or>\n     (\\<exists>chain rs rrs ta ma.\n         [Rule m (Call c)] = Rule ma (Call chain) # rrs \\<and>\n         t = ta \\<and>\n         \\<Gamma> chain = Some rs \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r ta)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "apply(auto dest: r_skip_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(cases t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                  (Call c)] \\<Rightarrow>\\<^sub>r t\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(erule iptables_bigstep_r.call_no_result)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided\n 2. \\<lbrakk>matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r t\n 3. \\<And>x2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m p;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n     t = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r t\n 2. \\<And>x2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(simp add: iptables_bigstep_r.skip;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                            x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule m\n                     (Call c)] \\<Rightarrow>\\<^sub>r Decision x2", "apply(erule (2) iptables_bigstep_r.call_result)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "by -"], ["", "(* we can make the same formulation for the original semantics if we tread a bit more carefully *)"], ["", "lemma call_eq: \"\\<Gamma> c = Some rs \\<Longrightarrow> matches \\<gamma> m p \\<Longrightarrow> \\<forall>r \\<in> set rs. get_action r \\<noteq> Return  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m (Call c)],s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                           (Call c)], s\\<rangle> \\<Rightarrow> t =\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call c)], s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                           (Call c)], s\\<rangle> \\<Rightarrow> t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n          (Call c)], s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(subst (asm) iptables_bigstep.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n     (\\<exists>ta. [Rule m (Call c)] = [] \\<and> s = ta \\<and> t = ta) \\<or>\n     (\\<exists>ma.\n         [Rule m (Call c)] = [Rule ma Accept] \\<and>\n         s = Undecided \\<and>\n         t = Decision FinalAllow \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma.\n         [Rule m (Call c)] = [Rule ma Drop] \\<and>\n         s = Undecided \\<and>\n         t = Decision FinalDeny \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma.\n         [Rule m (Call c)] = [Rule ma Reject] \\<and>\n         s = Undecided \\<and>\n         t = Decision FinalDeny \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma.\n         [Rule m (Call c)] = [Rule ma Log] \\<and>\n         s = Undecided \\<and>\n         t = Undecided \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma.\n         [Rule m (Call c)] = [Rule ma Empty] \\<and>\n         s = Undecided \\<and>\n         t = Undecided \\<and> matches \\<gamma> ma p) \\<or>\n     (\\<exists>ma a.\n         [Rule m (Call c)] = [Rule ma a] \\<and>\n         s = Undecided \\<and>\n         t = Undecided \\<and> \\<not> matches \\<gamma> ma p) \\<or>\n     (\\<exists>rs X.\n         [Rule m (Call c)] = rs \\<and>\n         s = Decision X \\<and> t = Decision X) \\<or>\n     (\\<exists>rs\\<^sub>1 ta rs\\<^sub>2 t'.\n         [Rule m (Call c)] = rs\\<^sub>1 @ rs\\<^sub>2 \\<and>\n         s = Undecided \\<and>\n         t = t' \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> ta \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ta\\<rangle> \\<Rightarrow> t') \\<or>\n     (\\<exists>ma chain rs\\<^sub>1 m' rs\\<^sub>2.\n         [Rule m (Call c)] = [Rule ma (Call chain)] \\<and>\n         s = Undecided \\<and>\n         t = Undecided \\<and>\n         matches \\<gamma> ma p \\<and>\n         \\<Gamma> chain =\n         Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2) \\<and>\n         matches \\<gamma> m' p \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided) \\<or>\n     (\\<exists>ma chain rs ta.\n         [Rule m (Call c)] = [Rule ma (Call chain)] \\<and>\n         s = Undecided \\<and>\n         t = ta \\<and>\n         matches \\<gamma> ma p \\<and>\n         \\<Gamma> chain = Some rs \\<and>\n         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> ta)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<forall>r\\<in>set rs. get_action r \\<noteq> Return; t = Decision X;\n        s = Decision X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n                                 X\\<rangle> \\<Rightarrow> Decision X\n 2. \\<And>rs\\<^sub>1 ta rs\\<^sub>2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n        [Rule m (Call c)] = rs\\<^sub>1 @ rs\\<^sub>2; s = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> ta;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ta\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply (simp add: decision)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 ta rs\\<^sub>2.\n       \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n        \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n        [Rule m (Call c)] = rs\\<^sub>1 @ rs\\<^sub>2; s = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> ta;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ta\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(erule rules_singleton_rev_E; simp; metis callD in_set_conv_decomp rule.sel(2) skipD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> c = Some rs; matches \\<gamma> m p;\n     \\<forall>r\\<in>set rs. get_action r \\<noteq> Return;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                           (Call c)], s\\<rangle> \\<Rightarrow> t", "by (metis decision iptables_bigstep.call_result iptables_bigstep_deterministic state.exhaust)"], ["", "theorem r_eq_orig: \"\\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs\\<rbrakk> \\<Longrightarrow>\n   \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c)], Undecided\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma> c = Some rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(drule f[where m=MatchAny, THEN c, THEN a])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma> c = Some rs\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> MatchAny p\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma> c = Some rs\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to ?c) \\<Gamma> rs\n 3. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>(?c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n     (Call ?c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma> c = Some rs\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to ?c) \\<Gamma> rs\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>(?c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n     (Call ?c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>(c \\<mapsto>\n     rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n     (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny\n                           (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply (metis fun_upd_triv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "apply(subst r_call_eq[where m=MatchAny, symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma> ?c = Some rs\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> MatchAny p\n 3. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                  (Call ?c)] \\<Rightarrow>\\<^sub>r t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> MatchAny p\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                  (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs; \\<Gamma> c = Some rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n          (Call c)], Undecided\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                  (Call c)] \\<Rightarrow>\\<^sub>r t", "apply(erule b[THEN d, THEN e, OF _ refl refl refl])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma r_no_call: \"\\<Gamma>,\\<gamma>,p\\<turnstile> Rule MatchAny (Call c)#rs \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma> c = None \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> Rule MatchAny (Call c) #\n       rs \\<Rightarrow>\\<^sub>r t;\n     \\<Gamma> c = None\\<rbrakk>\n    \\<Longrightarrow> False", "by(subst (asm) iptables_bigstep_r.simps) simp"], ["", "lemma no_call: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow> rs = [Rule MatchAny (Call c)] \\<Longrightarrow> s = Undecided \\<Longrightarrow> \\<Gamma> c = None \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t;\n     rs = [Rule MatchAny (Call c)]; s = Undecided;\n     \\<Gamma> c = None\\<rbrakk>\n    \\<Longrightarrow> False", "by (meson b d e r_no_call)"], ["", "(*by(induction rule: iptables_bigstep.induct; clarsimp) (metis list_app_singletonE skipD)*)\n\nprivate"], ["", "corollary r_eq_orig': assumes \"\\<forall>rs \\<in> ran \\<Gamma>. no_call_to c rs\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c)] \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c)], Undecided\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "(* if you really like symmetry *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "proof (cases \"\\<Gamma> c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n   (Call c)] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "fix rs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n   (Call c)] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "assume \"\\<Gamma> c = Some rs\""], ["proof (state)\nthis:\n  \\<Gamma> c = Some rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n   (Call c)] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma> c = Some rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n   (Call c)] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "hence \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\nusing this:\n  \\<Gamma> c = Some rs\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma> c = Some rs\n  \\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by (simp add: all_chains_def ranI)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n   (Call c)] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Gamma> c = Some rs\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> c = Some rs\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "by(simp add: r_call_eq r_eq_orig)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                    (Call c)] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n       (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "assume \"\\<Gamma> c = None\""], ["proof (state)\nthis:\n  \\<Gamma> c = None\n\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> c = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "using r_no_call no_call"], ["proof (prove)\nusing this:\n  \\<Gamma> c = None\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> Rule MatchAny (Call ?c) #\n        ?rs \\<Rightarrow>\\<^sub>r ?t;\n   ?\\<Gamma> ?c = None\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?rs = [Rule MatchAny (Call ?c)]; ?s = Undecided;\n   ?\\<Gamma> ?c = None\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n(Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n         (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "by metis"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                    (Call c)] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n       (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                    (Call c)] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n       (Call c)], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* btw, we can still formulate a seq rules, but we have to tread a bit more carefully *)"], ["", "lemma r_tail: assumes \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Decision X\" shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r Decision X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r Decision X", "have \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> t = Decision X \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r Decision X\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r t;\n     t = Decision X\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                rs2 \\<Rightarrow>\\<^sub>r Decision X", "by(induction rule: iptables_bigstep_r.induct; simp add: iptables_bigstep_r.intros)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r ?t;\n   ?t = Decision X\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n              rs2 \\<Rightarrow>\\<^sub>r Decision X\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r Decision X", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r ?t;\n   ?t = Decision X\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n              rs2 \\<Rightarrow>\\<^sub>r Decision X\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r Decision X", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r ?t;\n   ?t = Decision X\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n              rs2 \\<Rightarrow>\\<^sub>r Decision X\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Decision X\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r Decision X", "by blast"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r Decision X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_seq: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided \\<Longrightarrow> \\<forall>r \\<in> set rs1. \\<not>(get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n   \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n     \\<forall>r\\<in>set rs1.\n        \\<not> (get_action r = Return \\<and>\n                matches \\<gamma> (get_match r) p);\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                rs2 \\<Rightarrow>\\<^sub>r t", "proof(induction rs1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided;\n     \\<forall>r\\<in>set [].\n        \\<not> (get_action r = Return \\<and>\n                matches \\<gamma> (get_match r) p);\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                rs2 \\<Rightarrow>\\<^sub>r t\n 2. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "case Nil"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  \\<forall>r\\<in>set [].\n     \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided;\n     \\<forall>r\\<in>set [].\n        \\<not> (get_action r = Return \\<and>\n                matches \\<gamma> (get_match r) p);\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                rs2 \\<Rightarrow>\\<^sub>r t\n 2. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "then"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  \\<forall>r\\<in>set [].\n     \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r Undecided\n  \\<forall>r\\<in>set [].\n     \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] @ rs2 \\<Rightarrow>\\<^sub>r t", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [] @ rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "case (Cons r rs1)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n   \\<forall>r\\<in>set rs1.\n      \\<not> (get_action r = Return \\<and>\n              matches \\<gamma> (get_match r) p);\n   \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n              rs2 \\<Rightarrow>\\<^sub>r t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> r # rs1 \\<Rightarrow>\\<^sub>r Undecided\n  \\<forall>r\\<in>set (r # rs1).\n     \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "have p2: \"\\<forall>r\\<in>set rs1. \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\" \n           \"\\<not>(get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set rs1.\n       \\<not> (get_action r = Return \\<and>\n               matches \\<gamma> (get_match r) p) &&&\n    \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)", "by (simp_all add: Cons.prems(2))"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set rs1.\n     \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n\ngoal (1 subgoal):\n 1. \\<And>a rs1.\n       \\<lbrakk>\\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided;\n                 \\<forall>r\\<in>set rs1.\n                    \\<not> (get_action r = Return \\<and>\n                            matches \\<gamma> (get_match r) p);\n                 \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n                \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                            rs2 \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> a #\n  rs1 \\<Rightarrow>\\<^sub>r Undecided;\n        \\<forall>r\\<in>set (a # rs1).\n           \\<not> (get_action r = Return \\<and>\n                   matches \\<gamma> (get_match r) p);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n                   rs2 \\<Rightarrow>\\<^sub>r t", "from Cons.prems(1) p2(2) Cons.IH[OF _ p2(1) Cons.prems(3)]"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> r # rs1 \\<Rightarrow>\\<^sub>r Undecided\n  \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> r # rs1 \\<Rightarrow>\\<^sub>r Undecided\n  \\<not> (get_action r = Return \\<and> matches \\<gamma> (get_match r) p)\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r Undecided \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> (r # rs1) @ rs2 \\<Rightarrow>\\<^sub>r t", "by(cases rule: iptables_bigstep_r.cases; simp add: iptables_bigstep_r.intros)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> (r # rs1) @ rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r_appendD: \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @ rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow> \\<exists>s. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                    rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<exists>s. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r s", "proof(induction rs1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                                    rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p [])\n 2. \\<And>a rs1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n          rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n                Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p rs1);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n  rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p\n                              (a # rs1))", "case (Cons r rs1)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                  rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n  \\<exists>a. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r a\n  \\<Gamma>,\\<gamma>,p\\<turnstile> (r # rs1) @ rs2 \\<Rightarrow>\\<^sub>r t\n\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                                    rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p [])\n 2. \\<And>a rs1.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n          rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n                Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p rs1);\n        \\<Gamma>,\\<gamma>,p\\<turnstile> (a # rs1) @\n  rs2 \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n       \\<Longrightarrow> Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p\n                              (a # rs1))", "from Cons.prems Cons.IH"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> (r # rs1) @ rs2 \\<Rightarrow>\\<^sub>r t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                  rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n  \\<exists>a. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r a", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> (r # rs1) @ rs2 \\<Rightarrow>\\<^sub>r t\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 @\n                                  rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n  \\<exists>a. \\<Gamma>,\\<gamma>,p\\<turnstile> rs1 \\<Rightarrow>\\<^sub>r a\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       \\<Gamma>,\\<gamma>,p\\<turnstile> r # rs1 \\<Rightarrow>\\<^sub>r a", "by(cases rule: iptables_bigstep_r.cases) (auto intro: iptables_bigstep_r.intros)"], ["proof (state)\nthis:\n  \\<exists>a.\n     \\<Gamma>,\\<gamma>,p\\<turnstile> r # rs1 \\<Rightarrow>\\<^sub>r a\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [] @\n                                    rs2 \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    Ex (iptables_bigstep_r \\<Gamma> \\<gamma> p [])", "qed (meson iptables_bigstep_r.skip)"], ["", "corollary iptables_bigstep_r_eq: assumes \"\\<forall>rs \\<in> ran \\<Gamma>. no_call_to c rs\" \"A = Accept \\<or> A = Drop\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c), Rule MatchAny A] \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c), Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "(* if you really like the way we do our analyses *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "proof (cases \"\\<Gamma> c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n           Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "fix rs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n           Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "assume \"\\<Gamma> c = Some rs\""], ["proof (state)\nthis:\n  \\<Gamma> c = Some rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n           Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "moreover"], ["proof (state)\nthis:\n  \\<Gamma> c = Some rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n           Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "hence \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\nusing this:\n  \\<Gamma> c = Some rs\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma> c = Some rs\n  \\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs\n  A = Accept \\<or> A = Drop\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "by (simp add: all_chains_def ranI)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (2 subgoals):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>a.\n       \\<Gamma> c = Some a \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t =\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n           Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "(* if this proof breaks, don't fix it. say 'meh' and re-prove this as a corollary of r_eq_orig''' with a stronger assumption *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply(rule iffI[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny\n         A], Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply(erule seqE_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ti.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n                     (Call c)], Undecided\\<rangle> \\<Rightarrow> ti;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n             A], ti\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                     (Call c),\n                    Rule MatchAny A] \\<Rightarrow>\\<^sub>r t\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) r_eq_orig'[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ti.\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n            A], ti\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n       Ball (ran \\<Gamma>) (no_call_to c)\n 2. \\<And>ti.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            (Call c)] \\<Rightarrow>\\<^sub>r ti;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n             A], ti\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                     (Call c),\n                    Rule MatchAny A] \\<Rightarrow>\\<^sub>r t\n 3. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply (simp add: assms(1);fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ti.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            (Call c)] \\<Rightarrow>\\<^sub>r ti;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n             A], ti\\<rangle> \\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n                     (Call c),\n                    Rule MatchAny A] \\<Rightarrow>\\<^sub>r t\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply (meson assms(1) b d e r_eq_orig' seq'_cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "(* holy shi\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "apply(frule r_appendD[of _ _ _ \"[Rule MatchAny (Call c)]\" \"[Rule MatchAny A]\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n        Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n     \\<exists>s.\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    (Call c)] \\<Rightarrow>\\<^sub>r s\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny (Call c),\n                          Rule MatchAny\n                           A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) r_eq_orig')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n    Ball (ran \\<Gamma>) (no_call_to c)\n 2. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n        Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n     Ex (iptables_bigstep \\<Gamma> \\<gamma> p [Rule MatchAny (Call c)]\n          Undecided)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny (Call c),\n                          Rule MatchAny\n                           A], Undecided\\<rangle> \\<Rightarrow> t", "apply (simp add: assms(1);fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n        Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n     Ex (iptables_bigstep \\<Gamma> \\<gamma> p [Rule MatchAny (Call c)]\n          Undecided)\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny (Call c),\n                          Rule MatchAny\n                           A], Undecided\\<rangle> \\<Rightarrow> t", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n           Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n             (Call c)], Undecided\\<rangle> \\<Rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) r_eq_orig'[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n  Rule MatchAny A] \\<Rightarrow>\\<^sub>r t \\<Longrightarrow>\n       Ball (ran \\<Gamma>) (no_call_to c)\n 2. \\<And>x.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n           Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    (Call c)] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply (simp add: assms(1);fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n           Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    (Call c)] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm)(2) iptables_bigstep_r.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n           Rule MatchAny A] \\<Rightarrow>\\<^sub>r t;\n        [Rule MatchAny (Call c)] = [] \\<and> x = Undecided \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Accept # rs \\<and>\n            x = Decision FinalAllow \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Drop # rs \\<and>\n            x = Decision FinalDeny \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Reject # rs \\<and>\n            x = Decision FinalDeny \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Return # rs \\<and>\n            x = Undecided \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>rs t m.\n            [Rule MatchAny (Call c)] = Rule m Log # rs \\<and>\n            x = t \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>rs t m.\n            [Rule MatchAny (Call c)] = Rule m Empty # rs \\<and>\n            x = t \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>m rs t a.\n            [Rule MatchAny (Call c)] = Rule m a # rs \\<and>\n            x = t \\<and>\n            \\<not> matches \\<gamma> m p \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>m chain rs X rrs.\n            [Rule MatchAny (Call c)] = Rule m (Call chain) # rrs \\<and>\n            x = Decision X \\<and>\n            matches \\<gamma> m p \\<and>\n            \\<Gamma> chain = Some rs \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                                X) \\<or>\n        (\\<exists>chain rs rrs t m.\n            [Rule MatchAny (Call c)] = Rule m (Call chain) # rrs \\<and>\n            x = t \\<and>\n            \\<Gamma> chain = Some rs \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm)(1) iptables_bigstep_r.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>[Rule MatchAny (Call c), Rule MatchAny A] = [] \\<and>\n                t = Undecided \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Accept # rs \\<and>\n                    t = Decision FinalAllow \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Drop # rs \\<and>\n                    t = Decision FinalDeny \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Reject # rs \\<and>\n                    t = Decision FinalDeny \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Return # rs \\<and>\n                    t = Undecided \\<and> matches \\<gamma> m p) \\<or>\n                (\\<exists>rs ta m.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Log # rs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>rs ta m.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m Empty # rs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>m rs ta a.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m a # rs \\<and>\n                    t = ta \\<and>\n                    \\<not> matches \\<gamma> m p \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>m chain rs X rrs.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m (Call chain) # rrs \\<and>\n                    t = Decision X \\<and>\n                    matches \\<gamma> m p \\<and>\n                    \\<Gamma> chain = Some rs \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n  X) \\<or>\n                (\\<exists>chain rs rrs ta m.\n                    [Rule MatchAny (Call c), Rule MatchAny A] =\n                    Rule m (Call chain) # rrs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma> chain = Some rs \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r ta);\n        [Rule MatchAny (Call c)] = [] \\<and> x = Undecided \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Accept # rs \\<and>\n            x = Decision FinalAllow \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Drop # rs \\<and>\n            x = Decision FinalDeny \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Reject # rs \\<and>\n            x = Decision FinalDeny \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>m rs.\n            [Rule MatchAny (Call c)] = Rule m Return # rs \\<and>\n            x = Undecided \\<and> matches \\<gamma> m p) \\<or>\n        (\\<exists>rs t m.\n            [Rule MatchAny (Call c)] = Rule m Log # rs \\<and>\n            x = t \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>rs t m.\n            [Rule MatchAny (Call c)] = Rule m Empty # rs \\<and>\n            x = t \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>m rs t a.\n            [Rule MatchAny (Call c)] = Rule m a # rs \\<and>\n            x = t \\<and>\n            \\<not> matches \\<gamma> m p \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t) \\<or>\n        (\\<exists>m chain rs X rrs.\n            [Rule MatchAny (Call c)] = Rule m (Call chain) # rrs \\<and>\n            x = Decision X \\<and>\n            matches \\<gamma> m p \\<and>\n            \\<Gamma> chain = Some rs \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                                X) \\<or>\n        (\\<exists>chain rs rrs t m.\n            [Rule MatchAny (Call c)] = Rule m (Call chain) # rrs \\<and>\n            x = t \\<and>\n            \\<Gamma> chain = Some rs \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided \\<and>\n            \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r t)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>rs X Xa.\n       \\<lbrakk>t = Decision X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                            Xa\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> Decision\n                              X\n 2. \\<And>x rs X.\n       \\<lbrakk>t = Decision X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> Decision\n                              X\n 3. \\<And>rs X.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                            X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t\n 4. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply (metis append_Cons append_Nil assms(1) decision matches.simps(4) r_call_eq r_eq_orig' seq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x rs X.\n       \\<lbrakk>t = Decision X;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision X;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> Decision\n                              X\n 2. \\<And>rs X.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                            X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t\n 3. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply (metis \\<open>all_chains (no_call_to c) \\<Gamma> rs\\<close> calculation iptables_bigstep_deterministic option.inject r_eq_orig state.distinct(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs X.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n                            X\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t\n 2. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs_ \\<Rightarrow>\\<^sub>r Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n A] \\<Rightarrow>\\<^sub>r t;\n     \\<Gamma> c = Some rs_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs_ \\<Rightarrow>\\<^sub>r Decision\n                          X_\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny (Call c),\n                          Rule MatchAny\n                           A], Undecided\\<rangle> \\<Rightarrow> t", "using \\<open>all_chains (no_call_to c) \\<Gamma> rs\\<close> calculation iptables_bigstep_deterministic r_eq_orig"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma> c = Some rs\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n  \\<lbrakk>all_chains (no_call_to ?c) ?\\<Gamma> ?rs;\n   ?\\<Gamma> ?c = Some ?rs\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> ?rs \\<Rightarrow>\\<^sub>r ?t =\n                    ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>[Rule\n                            MatchAny\n                            (Call ?c)], Undecided\\<rangle> \\<Rightarrow> ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs_ \\<Rightarrow>\\<^sub>r Undecided;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n A] \\<Rightarrow>\\<^sub>r t;\n     \\<Gamma> c = Some rs_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs_ \\<Rightarrow>\\<^sub>r Decision\n                          X_\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                           MatchAny (Call c),\n                          Rule MatchAny\n                           A], Undecided\\<rangle> \\<Rightarrow> t", "by fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) r_eq_orig[rotated])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> (?c61 x rs) = Some rs\n 2. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> all_chains (no_call_to (?c61 x rs)) \\<Gamma> rs\n 3. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n                     (Call\n                       (?c61 x\n                         rs))], Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs\n 2. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n                     (Call c)], Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n         A] \\<Rightarrow>\\<^sub>r t;\n     \\<Gamma> c = Some rs_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x_\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs_", "using \\<open>all_chains (no_call_to c) \\<Gamma> rs\\<close> calculation"], ["proof (prove)\nusing this:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma> c = Some rs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n         A] \\<Rightarrow>\\<^sub>r t;\n     \\<Gamma> c = Some rs_;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x_\\<rbrakk>\n    \\<Longrightarrow> all_chains (no_call_to c) \\<Gamma> rs_", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n                     (Call c)], Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n    A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny (Call c),\n                             Rule MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(erule seq'_cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x rs.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny\n            A] \\<Rightarrow>\\<^sub>r t;\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm)(1) iptables_bigstep_r.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x rs.\n       \\<lbrakk>[Rule MatchAny A] = [] \\<and> t = Undecided \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny A] = Rule m Accept # rs \\<and>\n                    t = Decision FinalAllow \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny A] = Rule m Drop # rs \\<and>\n                    t = Decision FinalDeny \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny A] = Rule m Reject # rs \\<and>\n                    t = Decision FinalDeny \\<and>\n                    matches \\<gamma> m p) \\<or>\n                (\\<exists>m rs.\n                    [Rule MatchAny A] = Rule m Return # rs \\<and>\n                    t = Undecided \\<and> matches \\<gamma> m p) \\<or>\n                (\\<exists>rs ta m.\n                    [Rule MatchAny A] = Rule m Log # rs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>rs ta m.\n                    [Rule MatchAny A] = Rule m Empty # rs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>m rs ta a.\n                    [Rule MatchAny A] = Rule m a # rs \\<and>\n                    t = ta \\<and>\n                    \\<not> matches \\<gamma> m p \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r ta) \\<or>\n                (\\<exists>m chain rs X rrs.\n                    [Rule MatchAny A] = Rule m (Call chain) # rrs \\<and>\n                    t = Decision X \\<and>\n                    matches \\<gamma> m p \\<and>\n                    \\<Gamma> chain = Some rs \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Decision\n  X) \\<or>\n                (\\<exists>chain rs rrs ta m.\n                    [Rule MatchAny A] = Rule m (Call chain) # rrs \\<and>\n                    t = ta \\<and>\n                    \\<Gamma> chain = Some rs \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r Undecided \\<and>\n                    \\<Gamma>,\\<gamma>,p\\<turnstile> rrs \\<Rightarrow>\\<^sub>r ta);\n        \\<Gamma> c = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> [] \\<Rightarrow>\\<^sub>r x\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule\n                              MatchAny\n                              A], Undecided\\<rangle> \\<Rightarrow> t", "apply(insert assms(2); auto simp add: iptables_bigstep.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                   Rule MatchAny\n                                    A] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n      Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "assume \"\\<Gamma> c = None\""], ["proof (state)\nthis:\n  \\<Gamma> c = None\n\ngoal (1 subgoal):\n 1. \\<Gamma> c = None \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma> c = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "using r_no_call no_call"], ["proof (prove)\nusing this:\n  \\<Gamma> c = None\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> Rule MatchAny (Call ?c) #\n        ?rs \\<Rightarrow>\\<^sub>r ?t;\n   ?\\<Gamma> ?c = None\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?rs = [Rule MatchAny (Call ?c)]; ?s = Undecided;\n   ?\\<Gamma> ?c = None\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                     Rule MatchAny\nA] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n        Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t", "by (metis seqE_cons)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                   Rule MatchAny\n                                    A] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n      Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> [Rule MatchAny (Call c),\n                                   Rule MatchAny\n                                    A] \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny (Call c),\n      Rule MatchAny A], Undecided\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* now, you don't like that no_call_to assumption? this one's for you: *)"], ["", "lemma ex_no_call: \"finite S \\<Longrightarrow> \\<exists>c. \\<forall>(rs :: 'a rule list) \\<in> S. no_call_to c rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "(* If you want, you can put in \\<open>ran \\<Gamma>\\<close> for S. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "assume fS: \\<open>finite S\\<close>"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "define called_c where \"called_c rs = {c. \\<exists>m. Rule m (Call c) \\<in> set rs}\" for rs :: \"'a rule list\""], ["proof (state)\nthis:\n  called_c ?rs = _Collect c (\\<exists>m. Rule m (Call c) \\<in> set ?rs)\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "define called_c' where \"called_c' rs = set [c. r \\<leftarrow> rs, c \\<leftarrow> (case get_action r of Call c \\<Rightarrow> [c] | _ \\<Rightarrow> [])]\"\n    for rs :: \"'a rule list\""], ["proof (state)\nthis:\n  called_c' ?rs =\n  set (concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>c. c)\n                  (case get_action r of Call c \\<Rightarrow> [c]\n                   | _ \\<Rightarrow> []))\n          ?rs))\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "have cc: \"called_c' rs = called_c rs\" for rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. called_c' rs = called_c rs", "unfolding called_c'_def called_c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>r.\n                   map (\\<lambda>c. c)\n                    (case get_action r of Call c \\<Rightarrow> [c]\n                     | _ \\<Rightarrow> []))\n            rs)) =\n    _Collect c (\\<exists>m. Rule m (Call c) \\<in> set rs)", "by(induction rs; simp add: Un_def) (auto; metis rule.collapse)"], ["proof (state)\nthis:\n  called_c' ?rs = called_c ?rs\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "have f: \"finite (called_c rs)\" for rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (called_c rs)", "unfolding cc[symmetric] called_c'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (set (concat\n            (map (\\<lambda>r.\n                     map (\\<lambda>c. c)\n                      (case get_action r of Call c \\<Rightarrow> [c]\n                       | _ \\<Rightarrow> []))\n              rs)))", "by blast"], ["proof (state)\nthis:\n  finite (called_c ?rs)\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "have ncc: \"no_call_to c rs \\<longleftrightarrow> c \\<notin> called_c rs\" for c rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_call_to c rs = (c \\<notin> called_c rs)", "by(induction rs; auto simp add: no_call_to_def called_c_def split: action.splits) (metis rule.collapse)"], ["proof (state)\nthis:\n  no_call_to ?c ?rs = (?c \\<notin> called_c ?rs)\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "have isu: \"infinite (UNIV :: string set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "by (simp add: infinite_UNIV_listI)"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "have ff: \"finite (\\<Union>rs \\<in> S. called_c rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (called_c ` S))", "using f fS"], ["proof (prove)\nusing this:\n  finite (called_c ?rs)\n  finite S\n\ngoal (1 subgoal):\n 1. finite (\\<Union> (called_c ` S))", "by simp"], ["proof (state)\nthis:\n  finite (\\<Union> (called_c ` S))\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "then"], ["proof (chain)\npicking this:\n  finite (\\<Union> (called_c ` S))", "obtain c where ne: \"c \\<notin> (\\<Union>rs \\<in> S. called_c rs)\""], ["proof (prove)\nusing this:\n  finite (\\<Union> (called_c ` S))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<notin> \\<Union> (called_c ` S) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (blast dest: ex_new_if_finite[OF isu])"], ["proof (state)\nthis:\n  c \\<notin> \\<Union> (called_c ` S)\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow>\n    \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> \\<Union> (called_c ` S)\n\ngoal (1 subgoal):\n 1. \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs", "by(intro exI[where x=c]) (simp add: ncc)"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs\n\ngoal:\nNo subgoals!", "(* stupid way of proving something, once again\\<dots> *)"], ["proof (state)\nthis:\n  \\<exists>c. \\<forall>rs\\<in>S. no_call_to c rs\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma ex_no_call': \"finite (dom \\<Gamma>) \\<Longrightarrow> \\<exists>c. \\<Gamma> c = None \\<and> (\\<forall>(rs :: 'a rule list) \\<in> (ran \\<Gamma>). no_call_to c rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "(* I want a corollary, and I need something a tad stronger\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have *: \"finite S \\<Longrightarrow> (dom M) = S \\<Longrightarrow> \\<exists>m. M = map_of m\" for M S"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; dom M = S\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. M = map_of m", "proof(induction arbitrary: M rule: finite.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M. dom M = {} \\<Longrightarrow> \\<exists>m. M = map_of m\n 2. \\<And>A a M.\n       \\<lbrakk>finite A;\n        \\<And>M. dom M = A \\<Longrightarrow> \\<exists>m. M = map_of m;\n        dom M = {a} \\<union> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. M = map_of m", "case emptyI"], ["proof (state)\nthis:\n  dom M = {}\n\ngoal (2 subgoals):\n 1. \\<And>M. dom M = {} \\<Longrightarrow> \\<exists>m. M = map_of m\n 2. \\<And>A a M.\n       \\<lbrakk>finite A;\n        \\<And>M. dom M = A \\<Longrightarrow> \\<exists>m. M = map_of m;\n        dom M = {a} \\<union> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. M = map_of m", "then"], ["proof (chain)\npicking this:\n  dom M = {}", "show ?case"], ["proof (prove)\nusing this:\n  dom M = {}\n\ngoal (1 subgoal):\n 1. \\<exists>m. M = map_of m", "by(intro exI[where x=Nil]) simp"], ["proof (state)\nthis:\n  \\<exists>m. M = map_of m\n\ngoal (1 subgoal):\n 1. \\<And>A a M.\n       \\<lbrakk>finite A;\n        \\<And>M. dom M = A \\<Longrightarrow> \\<exists>m. M = map_of m;\n        dom M = {a} \\<union> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. M = map_of m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A a M.\n       \\<lbrakk>finite A;\n        \\<And>M. dom M = A \\<Longrightarrow> \\<exists>m. M = map_of m;\n        dom M = {a} \\<union> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. M = map_of m", "case (insertI A a)"], ["proof (state)\nthis:\n  finite A\n  dom ?M = A \\<Longrightarrow> \\<exists>m. ?M = map_of m\n  dom M = {a} \\<union> A\n\ngoal (1 subgoal):\n 1. \\<And>A a M.\n       \\<lbrakk>finite A;\n        \\<And>M. dom M = A \\<Longrightarrow> \\<exists>m. M = map_of m;\n        dom M = {a} \\<union> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. M = map_of m", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. M = map_of m", "proof(cases \"a \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow> \\<exists>m. M = map_of m\n 2. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "(* stupid induction rule *)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow> \\<exists>m. M = map_of m\n 2. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "case True"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow> \\<exists>m. M = map_of m\n 2. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "then"], ["proof (chain)\npicking this:\n  a \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>m. M = map_of m", "using insertI"], ["proof (prove)\nusing this:\n  a \\<in> A\n  finite A\n  dom ?M = A \\<Longrightarrow> \\<exists>m. ?M = map_of m\n  dom M = {a} \\<union> A\n\ngoal (1 subgoal):\n 1. \\<exists>m. M = map_of m", "by (simp add: insert_absorb)"], ["proof (state)\nthis:\n  \\<exists>m. M = map_of m\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "case False"], ["proof (state)\nthis:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "hence \"dom (M(a := None)) = A\""], ["proof (prove)\nusing this:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. dom (M(a := None)) = A", "using insertI.prems"], ["proof (prove)\nusing this:\n  a \\<notin> A\n  dom M = {a} \\<union> A\n\ngoal (1 subgoal):\n 1. dom (M(a := None)) = A", "by simp"], ["proof (state)\nthis:\n  dom (M(a := None)) = A\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "from insertI.IH[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>m. M(a := None) = map_of m", "obtain m where \"M(a := None) = map_of m\""], ["proof (prove)\nusing this:\n  \\<exists>m. M(a := None) = map_of m\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        M(a := None) = map_of m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  M(a := None) = map_of m\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<exists>m. M = map_of m", "then"], ["proof (chain)\npicking this:\n  M(a := None) = map_of m", "show ?thesis"], ["proof (prove)\nusing this:\n  M(a := None) = map_of m\n\ngoal (1 subgoal):\n 1. \\<exists>m. M = map_of m", "by(intro exI[where x=\"(a, the (M a)) # m\"]) (simp; metis domIff fun_upd_apply insertCI insertI.prems option.collapse)"], ["proof (state)\nthis:\n  \\<exists>m. M = map_of m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m. M = map_of m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?S1; dom ?M1 = ?S1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m. ?M1 = map_of m\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "(* hm, thought that would give me what I want\\<dots> *)"], ["proof (state)\nthis:\n  \\<lbrakk>finite ?S1; dom ?M1 = ?S1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>m. ?M1 = map_of m\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have ran_alt: \"ran f = (the o f) ` dom f\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. ran f = (the \\<circ> f) ` dom f", "by(auto simp add: ran_def dom_def image_def)"], ["proof (state)\nthis:\n  ran ?f2 = (the \\<circ> ?f2) ` dom ?f2\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "assume fD: \\<open>finite (dom \\<Gamma>)\\<close>"], ["proof (state)\nthis:\n  finite (dom \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "hence fS: \\<open>finite (ran \\<Gamma>)\\<close>"], ["proof (prove)\nusing this:\n  finite (dom \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (ran \\<Gamma>)", "by(simp add: ran_alt)"], ["proof (state)\nthis:\n  finite (ran \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "define called_c where \"called_c rs = {c. \\<exists>m. Rule m (Call c) \\<in> set rs}\" for rs :: \"'a rule list\""], ["proof (state)\nthis:\n  called_c ?rs = _Collect c (\\<exists>m. Rule m (Call c) \\<in> set ?rs)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "define called_c' where \"called_c' rs = set [c. r \\<leftarrow> rs, c \\<leftarrow> (case get_action r of Call c \\<Rightarrow> [c] | _ \\<Rightarrow> [])]\"\n    for rs :: \"'a rule list\""], ["proof (state)\nthis:\n  called_c' ?rs =\n  set (concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>c. c)\n                  (case get_action r of Call c \\<Rightarrow> [c]\n                   | _ \\<Rightarrow> []))\n          ?rs))\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have cc: \"called_c' rs = called_c rs\" for rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. called_c' rs = called_c rs", "unfolding called_c'_def called_c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>r.\n                   map (\\<lambda>c. c)\n                    (case get_action r of Call c \\<Rightarrow> [c]\n                     | _ \\<Rightarrow> []))\n            rs)) =\n    _Collect c (\\<exists>m. Rule m (Call c) \\<in> set rs)", "by(induction rs; simp add: Un_def) (auto; metis rule.collapse)"], ["proof (state)\nthis:\n  called_c' ?rs2 = called_c ?rs2\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have f: \"finite (called_c rs)\" for rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (called_c rs)", "unfolding cc[symmetric] called_c'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (set (concat\n            (map (\\<lambda>r.\n                     map (\\<lambda>c. c)\n                      (case get_action r of Call c \\<Rightarrow> [c]\n                       | _ \\<Rightarrow> []))\n              rs)))", "by blast"], ["proof (state)\nthis:\n  finite (called_c ?rs2)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have ncc: \"no_call_to c rs \\<longleftrightarrow> c \\<notin> called_c rs\" for c rs"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_call_to c rs = (c \\<notin> called_c rs)", "by(induction rs; auto simp add: no_call_to_def called_c_def split: action.splits) (metis rule.collapse)"], ["proof (state)\nthis:\n  no_call_to ?c2 ?rs2 = (?c2 \\<notin> called_c ?rs2)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have isu: \"infinite (UNIV :: string set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "by (simp add: infinite_UNIV_listI)"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "have ff: \"finite (\\<Union>rs \\<in> ran \\<Gamma>. called_c rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (called_c ` ran \\<Gamma>))", "using f fS"], ["proof (prove)\nusing this:\n  finite (called_c ?rs2)\n  finite (ran \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (\\<Union> (called_c ` ran \\<Gamma>))", "by simp"], ["proof (state)\nthis:\n  finite (\\<Union> (called_c ` ran \\<Gamma>))\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "hence fff: \"finite (dom \\<Gamma> \\<union> (\\<Union>rs \\<in> ran \\<Gamma>. called_c rs))\""], ["proof (prove)\nusing this:\n  finite (\\<Union> (called_c ` ran \\<Gamma>))\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))", "using fD"], ["proof (prove)\nusing this:\n  finite (\\<Union> (called_c ` ran \\<Gamma>))\n  finite (dom \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))", "by simp"], ["proof (state)\nthis:\n  finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "then"], ["proof (chain)\npicking this:\n  finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))", "obtain c where ne: \"c \\<notin> (dom \\<Gamma> \\<union> (\\<Union>rs \\<in> ran \\<Gamma>. called_c rs))\""], ["proof (prove)\nusing this:\n  finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<notin> dom \\<Gamma> \\<union>\n                   \\<Union> (called_c ` ran \\<Gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thm ex_new_if_finite"], ["proof (prove)\nusing this:\n  finite (dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>))\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<notin> dom \\<Gamma> \\<union>\n                   \\<Union> (called_c ` ran \\<Gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis UNIV_I isu set_eqI)"], ["proof (state)\nthis:\n  c \\<notin> dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>)\n\ngoal (1 subgoal):\n 1. finite (dom \\<Gamma>) \\<Longrightarrow>\n    \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<notin> dom \\<Gamma> \\<union> \\<Union> (called_c ` ran \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       \\<Gamma> c = None \\<and>\n       (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)", "by(fastforce simp add: ncc)"], ["proof (state)\nthis:\n  \\<exists>c.\n     \\<Gamma> c = None \\<and>\n     (\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma all_chains_no_call_upd_r: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "proof (rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "case 1"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "from 1(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "by(induction rule: iptables_bigstep_r.induct; \n      (simp add: iptables_bigstep_r.intros no_call_to_def all_chains_def split: if_splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "case 2"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "from 2(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t", "by(induction rule: iptables_bigstep_r.induct; \n      (simp add: iptables_bigstep_r.intros no_call_to_def all_chains_def split:  action.splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto> x),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* in a sense, this is code duplication with Ruleset_Update, but it's different enough that I can't use it. *)"], ["", "lemma all_chains_no_call_upd_orig: \"all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow> (\\<Gamma>(c \\<mapsto> x)),\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs \\<Longrightarrow>\n    \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "proof (rule iffI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "case 1"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>(c \\<mapsto>\n  x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>(c \\<mapsto>\n     x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n 2. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "from 1(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>(c \\<mapsto>\n  x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "by(induction rs s t rule: iptables_bigstep.induct; \n      (simp add: iptables_bigstep.intros no_call_to_def all_chains_def split: if_splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "case 2"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>all_chains (no_call_to c) \\<Gamma> rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>(c \\<mapsto>\n                      x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "from 2(2,1)"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  all_chains (no_call_to c) \\<Gamma> rs", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "by(induction rule: iptables_bigstep.induct; \n      (simp add: iptables_bigstep.intros no_call_to_def all_chains_def split:  action.splits;fail)?)"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  x),\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary r_eq_orig''': assumes \"finite (ran \\<Gamma>)\" and \"\\<forall>r \\<in> set rs. get_action r \\<noteq> Return\"\n  shows \"\\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "from assms"], ["proof (chain)\npicking this:\n  finite (ran \\<Gamma>)\n  \\<forall>r\\<in>set rs. get_action r \\<noteq> Return", "have \"finite ({rs} \\<union> (ran \\<Gamma>))\""], ["proof (prove)\nusing this:\n  finite (ran \\<Gamma>)\n  \\<forall>r\\<in>set rs. get_action r \\<noteq> Return\n\ngoal (1 subgoal):\n 1. finite ({rs} \\<union> ran \\<Gamma>)", "by simp"], ["proof (state)\nthis:\n  finite ({rs} \\<union> ran \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "from ex_no_call[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>c. \\<forall>rs\\<in>{rs} \\<union> ran \\<Gamma>. no_call_to c rs", "obtain c where c: \"(\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs)\" \"no_call_to c rs\""], ["proof (prove)\nusing this:\n  \\<exists>c. \\<forall>rs\\<in>{rs} \\<union> ran \\<Gamma>. no_call_to c rs\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>\\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs;\n         no_call_to c rs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs\n  no_call_to c rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "hence acnc: \"all_chains (no_call_to c) \\<Gamma> rs\""], ["proof (prove)\nusing this:\n  \\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs\n  no_call_to c rs\n\ngoal (1 subgoal):\n 1. all_chains (no_call_to c) \\<Gamma> rs", "unfolding all_chains_def"], ["proof (prove)\nusing this:\n  \\<forall>rs\\<in>ran \\<Gamma>. no_call_to c rs\n  no_call_to c rs\n\ngoal (1 subgoal):\n 1. no_call_to c rs \\<and>\n    (\\<forall>l rs. \\<Gamma> l = Some rs \\<longrightarrow> no_call_to c rs)", "by (simp add: ranI)"], ["proof (state)\nthis:\n  all_chains (no_call_to c) \\<Gamma> rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "have ranaway: \"\\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "(* hammer *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "fix rsa :: \"'a rule list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "assume a1: \"rsa \\<in> ran (\\<Gamma>(c \\<mapsto> rs))\""], ["proof (state)\nthis:\n  rsa \\<in> ran (\\<Gamma>(c \\<mapsto> rs))\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "have \"\\<And>R. rs \\<in> R \\<union> Collect (no_call_to c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>R. rs \\<in> R \\<union> Collect (no_call_to c)", "using c(2)"], ["proof (prove)\nusing this:\n  no_call_to c rs\n\ngoal (1 subgoal):\n 1. \\<And>R. rs \\<in> R \\<union> Collect (no_call_to c)", "by force"], ["proof (state)\nthis:\n  rs \\<in> ?R \\<union> Collect (no_call_to c)\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "then"], ["proof (chain)\npicking this:\n  rs \\<in> ?R \\<union> Collect (no_call_to c)", "have \"rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)\""], ["proof (prove)\nusing this:\n  rs \\<in> ?R \\<union> Collect (no_call_to c)\n\ngoal (1 subgoal):\n 1. rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)", "using a1"], ["proof (prove)\nusing this:\n  rs \\<in> ?R \\<union> Collect (no_call_to c)\n  rsa \\<in> ran (\\<Gamma>(c \\<mapsto> rs))\n\ngoal (1 subgoal):\n 1. rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)", "by (metis (no_types) Un_iff Un_insert_left fun_upd_same fun_upd_upd insert_absorb ran_map_upd)"], ["proof (state)\nthis:\n  rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "then"], ["proof (chain)\npicking this:\n  rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)", "have \"no_call_to c rsa\""], ["proof (prove)\nusing this:\n  rsa \\<in> ran (\\<Gamma>(c := None)) \\<union> Collect (no_call_to c)\n\ngoal (1 subgoal):\n 1. no_call_to c rsa", "by (metis (no_types) Un_iff c(1) mem_Collect_eq ranI ran_restrictD restrict_complement_singleton_eq)"], ["proof (state)\nthis:\n  no_call_to c rsa\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "}"], ["proof (state)\nthis:\n  ?rsa2 \\<in> ran (\\<Gamma>(c \\<mapsto> rs)) \\<Longrightarrow>\n  no_call_to c ?rsa2\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?rsa2 \\<in> ran (\\<Gamma>(c \\<mapsto> rs)) \\<Longrightarrow>\n  no_call_to c ?rsa2\n\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "by simp"], ["proof (state)\nthis:\n  \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "have \"\\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t \\<longleftrightarrow> \\<Gamma>(c \\<mapsto> rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t = \\<Gamma>(c \n    \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(subst r_call_eq[where c=c and m=MatchAny,symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<Gamma>(c \\<mapsto> rs)) c = Some rs\n 2. matches \\<gamma> MatchAny p\n 3. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches \\<gamma> MatchAny p\n 2. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(subst call_eq[where c=c and m=MatchAny,symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<Gamma>(c \\<mapsto> rs)) c = Some rs\n 2. matches \\<gamma> MatchAny p\n 3. \\<forall>r\\<in>set rs. get_action r \\<noteq> Return\n 4. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n    (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. matches \\<gamma> MatchAny p\n 2. \\<forall>r\\<in>set rs. get_action r \\<noteq> Return\n 3. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n    (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>r\\<in>set rs. get_action r \\<noteq> Return\n 2. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n    (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(simp add: assms;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> [Rule MatchAny\n                                 (Call c)] \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>[Rule MatchAny\n    (Call c)], Undecided\\<rangle> \\<Rightarrow> t", "apply(rule r_eq_orig')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>rs\\<in>ran (\\<Gamma>(c \\<mapsto> rs)). no_call_to c rs", "apply(fact ranaway)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t = \\<Gamma>(c \n  \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>(c \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t = \\<Gamma>(c \n  \\<mapsto>\n  rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>(c \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t = \\<Gamma>(c \n    \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) all_chains_no_call_upd_r[where x=rs, OF acnc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t = \\<Gamma>(c \n    \\<mapsto>\n    rs),\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "apply(subst (asm) all_chains_no_call_upd_orig[where x=rs, OF acnc])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t", "."], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> rs \\<Rightarrow>\\<^sub>r t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}