{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Common/Ternary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma \"the \\<circ> ternary_to_bool \\<circ> bool_to_ternary = id\"", "lemma ternary_to_bool_bool_to_ternary: \"ternary_to_bool (bool_to_ternary X) = Some X\"", "lemma ternary_to_bool_None: \"ternary_to_bool t = None \\<longleftrightarrow> t = TernaryUnknown\"", "lemma ternary_to_bool_SomeE: \"ternary_to_bool t = Some X \\<Longrightarrow>\n  (t = TernaryTrue \\<Longrightarrow> X = True \\<Longrightarrow> P) \\<Longrightarrow> (t = TernaryFalse \\<Longrightarrow> X = False \\<Longrightarrow> P)  \\<Longrightarrow> P\"", "lemma ternary_to_bool_Some: \"ternary_to_bool t = Some X \\<longleftrightarrow>\n  (t = TernaryTrue \\<and> X = True) \\<or> (t = TernaryFalse \\<and> X = False)\"", "lemma bool_to_ternary_Unknown: \"bool_to_ternary t = TernaryUnknown \\<longleftrightarrow> False\"", "lemma eval_ternary_And_comm: \"eval_ternary_And t1 t2 = eval_ternary_And t2 t1\"", "lemma \"eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b\"", "lemma eval_ternary_Not_UnknownD: \"eval_ternary_Not t = TernaryUnknown \\<Longrightarrow> t = TernaryUnknown\"", "lemma eval_ternary_DeMorgan:\n  \"eval_ternary_Not (eval_ternary_And a b) = eval_ternary_Or (eval_ternary_Not a) (eval_ternary_Not b)\"\n  \"eval_ternary_Not (eval_ternary_Or a b) = eval_ternary_And (eval_ternary_Not a) (eval_ternary_Not b)\"", "lemma eval_ternary_idempotence_Not: \"eval_ternary_Not (eval_ternary_Not a) = a\"", "lemma eval_ternary_simps_simple: \n  \"eval_ternary_And TernaryTrue x = x\"\n  \"eval_ternary_And x TernaryTrue = x\"\n  \"eval_ternary_And TernaryFalse x = TernaryFalse\"\n  \"eval_ternary_And x TernaryFalse = TernaryFalse\"", "lemma bool_to_ternary_simp1: \"bool_to_ternary X = TernaryTrue \\<longleftrightarrow> X\"", "lemma bool_to_ternary_simp2:  \"bool_to_ternary Y = TernaryFalse \\<longleftrightarrow> \\<not> Y\"", "lemma bool_to_ternary_simp3: \"eval_ternary_Not (bool_to_ternary X) = TernaryTrue \\<longleftrightarrow> \\<not> X\"", "lemma bool_to_ternary_simp4: \"eval_ternary_Not (bool_to_ternary X) = TernaryFalse \\<longleftrightarrow> X\"", "lemma bool_to_ternary_simp5: \"\\<not> (eval_ternary_Not (bool_to_ternary X) = TernaryUnknown)\"", "lemma bool_to_ternary_simp6: \"bool_to_ternary X \\<noteq> TernaryUnknown\"", "lemmas bool_to_ternary_simps = bool_to_ternary_simp1 bool_to_ternary_simp2\n                                 bool_to_ternary_simp3 bool_to_ternary_simp4\n                                 bool_to_ternary_simp5 bool_to_ternary_simp6", "lemma bool_to_ternary_pullup1:\n    \"eval_ternary_Not (bool_to_ternary X) = bool_to_ternary (\\<not> X)\"", "lemma bool_to_ternary_pullup2:\n    \"eval_ternary_And (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<and> X2)\"", "lemma bool_to_ternary_pullup3:\n    \"eval_ternary_Imp (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<longrightarrow> X2)\"", "lemma bool_to_ternary_pullup4:\n    \"eval_ternary_Or (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<or> X2)\"", "lemmas bool_to_ternary_pullup = bool_to_ternary_pullup1 bool_to_ternary_pullup2\n                                  bool_to_ternary_pullup3 bool_to_ternary_pullup4", "lemma ternary_ternary_eval_DeMorgan: \"ternary_ternary_eval (TernaryNot (TernaryAnd a b)) = \n    ternary_ternary_eval (TernaryOr (TernaryNot a) (TernaryNot b))\"", "lemma ternary_ternary_eval_idempotence_Not:\n  \"ternary_ternary_eval (TernaryNot (TernaryNot a)) = ternary_ternary_eval a\"", "lemma ternary_ternary_eval_TernaryAnd_comm:\n  \"ternary_ternary_eval (TernaryAnd t1 t2) = ternary_ternary_eval (TernaryAnd t2 t1)\"", "lemma \"eval_ternary_Not (ternary_ternary_eval t) = (ternary_ternary_eval (TernaryNot t))\"", "lemma eval_ternary_simps_2:\n      \"eval_ternary_And (bool_to_ternary P) T = TernaryTrue \\<longleftrightarrow> P \\<and> T = TernaryTrue\"\n      \"eval_ternary_And T (bool_to_ternary P) = TernaryTrue \\<longleftrightarrow> P \\<and> T = TernaryTrue\"", "lemma eval_ternary_simps_3:\n      \"eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue \\<longleftrightarrow>\n        ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue\"\n      \"eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue \\<longleftrightarrow>\n        ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue\"", "lemmas eval_ternary_simps = eval_ternary_simps_simple eval_ternary_simps_2 eval_ternary_simps_3", "lemma NNF_ternary_correct: \"ternary_ternary_eval (NNF_ternary t) = ternary_ternary_eval t\"", "lemma NNF_ternary_NegationNormalForm: \"NegationNormalForm (NNF_ternary t)\"", "lemma ternary_lift1: \"eval_ternary_Not tv \\<noteq> TernaryFalse \\<longleftrightarrow> tv = TernaryFalse \\<or> tv = TernaryUnknown\"", "lemma ternary_lift2: \"eval_ternary_Not tv \\<noteq> TernaryTrue \\<longleftrightarrow> tv = TernaryTrue \\<or> tv = TernaryUnknown\"", "lemma ternary_lift3: \"eval_ternary_Not tv = TernaryFalse \\<longleftrightarrow> tv = TernaryTrue\"", "lemma ternary_lift4: \"eval_ternary_Not tv = TernaryTrue \\<longleftrightarrow> tv = TernaryFalse\"", "lemma ternary_lift5: \"eval_ternary_Not tv = TernaryUnknown \\<longleftrightarrow> tv = TernaryUnknown\"", "lemma ternary_lift6: \"eval_ternary_And t1 t2 = TernaryFalse \\<longleftrightarrow> t1 = TernaryFalse \\<or> t2 = TernaryFalse\"", "lemma ternary_lift7: \"eval_ternary_And t1 t2 = TernaryTrue \\<longleftrightarrow> t1 = TernaryTrue \\<and> t2 = TernaryTrue\"", "lemmas ternary_lift = ternary_lift1 ternary_lift2 ternary_lift3 ternary_lift4 ternary_lift5 ternary_lift6 ternary_lift7", "lemma l1: \"eval_ternary_Not tv = TernaryTrue \\<Longrightarrow> tv = TernaryFalse\"", "lemma l2: \"eval_ternary_And t1 t2 = TernaryFalse \\<Longrightarrow> t1 = TernaryFalse \\<or> t2 = TernaryFalse\"", "lemmas eval_ternaryD = l1 l2"], "translations": [["", "lemma \"the \\<circ> ternary_to_bool \\<circ> bool_to_ternary = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the \\<circ> ternary_to_bool \\<circ> bool_to_ternary = id", "by(simp add: fun_eq_iff, clarify, case_tac x, simp_all)"], ["", "lemma ternary_to_bool_bool_to_ternary: \"ternary_to_bool (bool_to_ternary X) = Some X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_to_bool (bool_to_ternary X) = Some X", "by(cases X, simp_all)"], ["", "lemma ternary_to_bool_None: \"ternary_to_bool t = None \\<longleftrightarrow> t = TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ternary_to_bool t = None) = (t = TernaryUnknown)", "by(cases t, simp_all)"], ["", "lemma ternary_to_bool_SomeE: \"ternary_to_bool t = Some X \\<Longrightarrow>\n  (t = TernaryTrue \\<Longrightarrow> X = True \\<Longrightarrow> P) \\<Longrightarrow> (t = TernaryFalse \\<Longrightarrow> X = False \\<Longrightarrow> P)  \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_to_bool t = Some X;\n     \\<lbrakk>t = TernaryTrue; X = True\\<rbrakk> \\<Longrightarrow> P;\n     \\<lbrakk>t = TernaryFalse; X = False\\<rbrakk>\n     \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by(cases t)(simp)+"], ["", "lemma ternary_to_bool_Some: \"ternary_to_bool t = Some X \\<longleftrightarrow>\n  (t = TernaryTrue \\<and> X = True) \\<or> (t = TernaryFalse \\<and> X = False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ternary_to_bool t = Some X) =\n    (t = TernaryTrue \\<and> X = True \\<or>\n     t = TernaryFalse \\<and> X = False)", "by(cases t, simp_all)"], ["", "lemma bool_to_ternary_Unknown: \"bool_to_ternary t = TernaryUnknown \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_to_ternary t = TernaryUnknown) = False", "by(cases t, simp_all)"], ["", "fun eval_ternary_And :: \"ternaryvalue \\<Rightarrow> ternaryvalue \\<Rightarrow> ternaryvalue\" where\n  \"eval_ternary_And TernaryTrue TernaryTrue = TernaryTrue\" |\n  \"eval_ternary_And TernaryTrue TernaryFalse = TernaryFalse\" |\n  \"eval_ternary_And TernaryFalse TernaryTrue = TernaryFalse\" |\n  \"eval_ternary_And TernaryFalse TernaryFalse = TernaryFalse\" |\n  \"eval_ternary_And TernaryFalse TernaryUnknown = TernaryFalse\" |\n  \"eval_ternary_And TernaryTrue TernaryUnknown = TernaryUnknown\" |\n  \"eval_ternary_And TernaryUnknown TernaryFalse = TernaryFalse\" |\n  \"eval_ternary_And TernaryUnknown TernaryTrue = TernaryUnknown\"  |\n  \"eval_ternary_And TernaryUnknown TernaryUnknown = TernaryUnknown\""], ["", "lemma eval_ternary_And_comm: \"eval_ternary_And t1 t2 = eval_ternary_And t2 t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_And t1 t2 = eval_ternary_And t2 t1", "by (cases t1 t2 rule: ternaryvalue.exhaust[case_product ternaryvalue.exhaust]) auto"], ["", "fun eval_ternary_Or :: \"ternaryvalue \\<Rightarrow> ternaryvalue \\<Rightarrow> ternaryvalue\" where\n  \"eval_ternary_Or TernaryTrue TernaryTrue = TernaryTrue\" |\n  \"eval_ternary_Or TernaryTrue TernaryFalse = TernaryTrue\" |\n  \"eval_ternary_Or TernaryFalse TernaryTrue = TernaryTrue\" |\n  \"eval_ternary_Or TernaryFalse TernaryFalse = TernaryFalse\" |\n  \"eval_ternary_Or TernaryTrue TernaryUnknown = TernaryTrue\" | \n  \"eval_ternary_Or TernaryFalse TernaryUnknown = TernaryUnknown\" | \n  \"eval_ternary_Or TernaryUnknown TernaryTrue = TernaryTrue\" | \n  \"eval_ternary_Or TernaryUnknown TernaryFalse = TernaryUnknown\" | \n  \"eval_ternary_Or TernaryUnknown TernaryUnknown = TernaryUnknown\""], ["", "fun eval_ternary_Not :: \"ternaryvalue \\<Rightarrow>  ternaryvalue\" where\n  \"eval_ternary_Not TernaryTrue = TernaryFalse\" |\n  \"eval_ternary_Not TernaryFalse = TernaryTrue\" |\n  \"eval_ternary_Not TernaryUnknown = TernaryUnknown\""], ["", "text\\<open>Just to hint that we did not make a typo, we add the truth table for\n      the implication and show that it is compliant with @{term \"a \\<longrightarrow> b \\<longleftrightarrow> \\<not>a \\<or> b\"}\\<close>"], ["", "fun eval_ternary_Imp :: \"ternaryvalue \\<Rightarrow> ternaryvalue \\<Rightarrow> ternaryvalue\" where\n  \"eval_ternary_Imp TernaryTrue TernaryTrue = TernaryTrue\" |\n  \"eval_ternary_Imp TernaryTrue TernaryFalse = TernaryFalse\" |\n  \"eval_ternary_Imp TernaryFalse TernaryTrue = TernaryTrue\" |\n  \"eval_ternary_Imp TernaryFalse TernaryFalse = TernaryTrue\" |\n  \"eval_ternary_Imp TernaryTrue TernaryUnknown = TernaryUnknown\" | \n  \"eval_ternary_Imp TernaryFalse TernaryUnknown = TernaryTrue\" | \n  \"eval_ternary_Imp TernaryUnknown TernaryTrue = TernaryTrue\" | \n  \"eval_ternary_Imp TernaryUnknown TernaryFalse = TernaryUnknown\" | \n  \"eval_ternary_Imp TernaryUnknown TernaryUnknown = TernaryUnknown\""], ["", "lemma \"eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b", "apply(cases a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. a = TernaryTrue \\<Longrightarrow>\n    eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b\n 2. a = TernaryFalse \\<Longrightarrow>\n    eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b\n 3. a = TernaryUnknown \\<Longrightarrow>\n    eval_ternary_Imp a b = eval_ternary_Or (eval_ternary_Not a) b", "apply(case_tac [!] b)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>a = TernaryTrue; b = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 2. \\<lbrakk>a = TernaryTrue; b = TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 3. \\<lbrakk>a = TernaryTrue; b = TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 4. \\<lbrakk>a = TernaryFalse; b = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 5. \\<lbrakk>a = TernaryFalse; b = TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 6. \\<lbrakk>a = TernaryFalse; b = TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 7. \\<lbrakk>a = TernaryUnknown; b = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 8. \\<lbrakk>a = TernaryUnknown; b = TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b\n 9. \\<lbrakk>a = TernaryUnknown; b = TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_Imp a b =\n                      eval_ternary_Or (eval_ternary_Not a) b", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eval_ternary_Not_UnknownD: \"eval_ternary_Not t = TernaryUnknown \\<Longrightarrow> t = TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not t = TernaryUnknown \\<Longrightarrow> t = TernaryUnknown", "by (cases t) auto"], ["", "lemma eval_ternary_DeMorgan:\n  \"eval_ternary_Not (eval_ternary_And a b) = eval_ternary_Or (eval_ternary_Not a) (eval_ternary_Not b)\"\n  \"eval_ternary_Not (eval_ternary_Or a b) = eval_ternary_And (eval_ternary_Not a) (eval_ternary_Not b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not (eval_ternary_And a b) =\n    eval_ternary_Or (eval_ternary_Not a) (eval_ternary_Not b) &&&\n    eval_ternary_Not (eval_ternary_Or a b) =\n    eval_ternary_And (eval_ternary_Not a) (eval_ternary_Not b)", "by (cases a b rule: ternaryvalue.exhaust[case_product ternaryvalue.exhaust],auto)+"], ["", "lemma eval_ternary_idempotence_Not: \"eval_ternary_Not (eval_ternary_Not a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not (eval_ternary_Not a) = a", "by (cases a) simp_all"], ["", "lemma eval_ternary_simps_simple: \n  \"eval_ternary_And TernaryTrue x = x\"\n  \"eval_ternary_And x TernaryTrue = x\"\n  \"eval_ternary_And TernaryFalse x = TernaryFalse\"\n  \"eval_ternary_And x TernaryFalse = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_And TernaryTrue x = x &&&\n     eval_ternary_And x TernaryTrue = x) &&&\n    eval_ternary_And TernaryFalse x = TernaryFalse &&&\n    eval_ternary_And x TernaryFalse = TernaryFalse", "by(case_tac [!] x)(simp_all)"], ["", "context\nbegin"], ["", "private"], ["", "lemma bool_to_ternary_simp1: \"bool_to_ternary X = TernaryTrue \\<longleftrightarrow> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_to_ternary X = TernaryTrue) = X", "by (metis bool_to_ternary.elims ternaryvalue.distinct(1))"], ["", "private"], ["", "lemma bool_to_ternary_simp2:  \"bool_to_ternary Y = TernaryFalse \\<longleftrightarrow> \\<not> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_to_ternary Y = TernaryFalse) = (\\<not> Y)", "by (metis bool_to_ternary.elims ternaryvalue.distinct(1))"], ["", "private"], ["", "lemma bool_to_ternary_simp3: \"eval_ternary_Not (bool_to_ternary X) = TernaryTrue \\<longleftrightarrow> \\<not> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not (bool_to_ternary X) = TernaryTrue) = (\\<not> X)", "by (metis (full_types) bool_to_ternary_simp2 eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma bool_to_ternary_simp4: \"eval_ternary_Not (bool_to_ternary X) = TernaryFalse \\<longleftrightarrow> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not (bool_to_ternary X) = TernaryFalse) = X", "by (metis bool_to_ternary_simp1 eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma bool_to_ternary_simp5: \"\\<not> (eval_ternary_Not (bool_to_ternary X) = TernaryUnknown)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not (bool_to_ternary X) \\<noteq> TernaryUnknown", "by (metis bool_to_ternary_Unknown eval_ternary_Not_UnknownD)"], ["", "private"], ["", "lemma bool_to_ternary_simp6: \"bool_to_ternary X \\<noteq> TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bool_to_ternary X \\<noteq> TernaryUnknown", "by (metis (full_types) bool_to_ternary.simps(1) bool_to_ternary.simps(2) ternaryvalue.distinct(3) ternaryvalue.distinct(5))"], ["", "lemmas bool_to_ternary_simps = bool_to_ternary_simp1 bool_to_ternary_simp2\n                                 bool_to_ternary_simp3 bool_to_ternary_simp4\n                                 bool_to_ternary_simp5 bool_to_ternary_simp6"], ["", "end"], ["", "context\nbegin"], ["", "private"], ["", "lemma bool_to_ternary_pullup1:\n    \"eval_ternary_Not (bool_to_ternary X) = bool_to_ternary (\\<not> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not (bool_to_ternary X) = bool_to_ternary (\\<not> X)", "by(cases X)(simp_all)"], ["", "private"], ["", "lemma bool_to_ternary_pullup2:\n    \"eval_ternary_And (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<and> X2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_And (bool_to_ternary X1) (bool_to_ternary X2) =\n    bool_to_ternary (X1 \\<and> X2)", "by (metis bool_to_ternary_simps(1) bool_to_ternary_simps(2) eval_ternary_simps_simple(2) eval_ternary_simps_simple(4))"], ["", "private"], ["", "lemma bool_to_ternary_pullup3:\n    \"eval_ternary_Imp (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<longrightarrow> X2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Imp (bool_to_ternary X1) (bool_to_ternary X2) =\n    bool_to_ternary (X1 \\<longrightarrow> X2)", "by (metis bool_to_ternary_simps(1) bool_to_ternary_simps(2) eval_ternary_Imp.simps(1) \n        eval_ternary_Imp.simps(2) eval_ternary_Imp.simps(3) eval_ternary_Imp.simps(4))"], ["", "private"], ["", "lemma bool_to_ternary_pullup4:\n    \"eval_ternary_Or (bool_to_ternary X1) (bool_to_ternary X2) = bool_to_ternary (X1 \\<or> X2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Or (bool_to_ternary X1) (bool_to_ternary X2) =\n    bool_to_ternary (X1 \\<or> X2)", "by (metis (full_types) bool_to_ternary.simps(1) bool_to_ternary.simps(2) eval_ternary_Or.simps(1) eval_ternary_Or.simps(2) eval_ternary_Or.simps(3) eval_ternary_Or.simps(4))"], ["", "lemmas bool_to_ternary_pullup = bool_to_ternary_pullup1 bool_to_ternary_pullup2\n                                  bool_to_ternary_pullup3 bool_to_ternary_pullup4"], ["", "end"], ["", "fun ternary_ternary_eval :: \"ternaryformula \\<Rightarrow> ternaryvalue\" where\n  \"ternary_ternary_eval (TernaryAnd t1 t2) = eval_ternary_And (ternary_ternary_eval t1) (ternary_ternary_eval t2)\" |\n  \"ternary_ternary_eval (TernaryOr t1 t2) = eval_ternary_Or (ternary_ternary_eval t1) (ternary_ternary_eval t2)\" |\n  \"ternary_ternary_eval (TernaryNot t) = eval_ternary_Not (ternary_ternary_eval t)\" |\n  \"ternary_ternary_eval (TernaryValue t) = t\""], ["", "lemma ternary_ternary_eval_DeMorgan: \"ternary_ternary_eval (TernaryNot (TernaryAnd a b)) = \n    ternary_ternary_eval (TernaryOr (TernaryNot a) (TernaryNot b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (TernaryNot (TernaryAnd a b)) =\n    ternary_ternary_eval (TernaryOr (TernaryNot a) (TernaryNot b))", "by (simp add: eval_ternary_DeMorgan)"], ["", "lemma ternary_ternary_eval_idempotence_Not:\n  \"ternary_ternary_eval (TernaryNot (TernaryNot a)) = ternary_ternary_eval a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (TernaryNot (TernaryNot a)) =\n    ternary_ternary_eval a", "by (simp add: eval_ternary_idempotence_Not)"], ["", "lemma ternary_ternary_eval_TernaryAnd_comm:\n  \"ternary_ternary_eval (TernaryAnd t1 t2) = ternary_ternary_eval (TernaryAnd t2 t1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (TernaryAnd t1 t2) =\n    ternary_ternary_eval (TernaryAnd t2 t1)", "by (simp add: eval_ternary_And_comm)"], ["", "lemma \"eval_ternary_Not (ternary_ternary_eval t) = (ternary_ternary_eval (TernaryNot t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not (ternary_ternary_eval t) =\n    ternary_ternary_eval (TernaryNot t)", "by simp"], ["", "context\nbegin"], ["", "private"], ["", "lemma eval_ternary_simps_2:\n      \"eval_ternary_And (bool_to_ternary P) T = TernaryTrue \\<longleftrightarrow> P \\<and> T = TernaryTrue\"\n      \"eval_ternary_And T (bool_to_ternary P) = TernaryTrue \\<longleftrightarrow> P \\<and> T = TernaryTrue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_And (bool_to_ternary P) T = TernaryTrue) =\n    (P \\<and> T = TernaryTrue) &&&\n    (eval_ternary_And T (bool_to_ternary P) = TernaryTrue) =\n    (P \\<and> T = TernaryTrue)", "apply(case_tac [!] P)"], ["proof (prove)\ngoal (4 subgoals):\n 1. P \\<Longrightarrow>\n    (eval_ternary_And (bool_to_ternary P) T = TernaryTrue) =\n    (P \\<and> T = TernaryTrue)\n 2. \\<not> P \\<Longrightarrow>\n    (eval_ternary_And (bool_to_ternary P) T = TernaryTrue) =\n    (P \\<and> T = TernaryTrue)\n 3. P \\<Longrightarrow>\n    (eval_ternary_And T (bool_to_ternary P) = TernaryTrue) =\n    (P \\<and> T = TernaryTrue)\n 4. \\<not> P \\<Longrightarrow>\n    (eval_ternary_And T (bool_to_ternary P) = TernaryTrue) =\n    (P \\<and> T = TernaryTrue)", "apply(simp_all add: eval_ternary_simps_simple)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma eval_ternary_simps_3:\n      \"eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue \\<longleftrightarrow>\n        ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue\"\n      \"eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue \\<longleftrightarrow>\n        ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue) &&&\n    (eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)", "apply(case_tac [!] T)"], ["proof (prove)\ngoal (6 subgoals):\n 1. T = TernaryTrue \\<Longrightarrow>\n    (eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)\n 2. T = TernaryFalse \\<Longrightarrow>\n    (eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)\n 3. T = TernaryUnknown \\<Longrightarrow>\n    (eval_ternary_And (ternary_ternary_eval x) T = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)\n 4. T = TernaryTrue \\<Longrightarrow>\n    (eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)\n 5. T = TernaryFalse \\<Longrightarrow>\n    (eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)\n 6. T = TernaryUnknown \\<Longrightarrow>\n    (eval_ternary_And T (ternary_ternary_eval x) = TernaryTrue) =\n    (ternary_ternary_eval x = TernaryTrue \\<and> T = TernaryTrue)", "apply(simp_all add: eval_ternary_simps_simple)"], ["proof (prove)\ngoal (2 subgoals):\n 1. T = TernaryUnknown \\<Longrightarrow>\n    eval_ternary_And (ternary_ternary_eval x) TernaryUnknown \\<noteq>\n    TernaryTrue\n 2. T = TernaryUnknown \\<Longrightarrow>\n    eval_ternary_And TernaryUnknown (ternary_ternary_eval x) \\<noteq>\n    TernaryTrue", "apply(case_tac [!] \"(ternary_ternary_eval x)\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And (ternary_ternary_eval x)\n                       TernaryUnknown \\<noteq>\n                      TernaryTrue\n 2. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And (ternary_ternary_eval x)\n                       TernaryUnknown \\<noteq>\n                      TernaryTrue\n 3. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And (ternary_ternary_eval x)\n                       TernaryUnknown \\<noteq>\n                      TernaryTrue\n 4. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And TernaryUnknown\n                       (ternary_ternary_eval x) \\<noteq>\n                      TernaryTrue\n 5. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And TernaryUnknown\n                       (ternary_ternary_eval x) \\<noteq>\n                      TernaryTrue\n 6. \\<lbrakk>T = TernaryUnknown;\n     ternary_ternary_eval x = TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> eval_ternary_And TernaryUnknown\n                       (ternary_ternary_eval x) \\<noteq>\n                      TernaryTrue", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas eval_ternary_simps = eval_ternary_simps_simple eval_ternary_simps_2 eval_ternary_simps_3"], ["", "end"], ["", "definition ternary_eval :: \"ternaryformula \\<Rightarrow> bool option\" where\n  \"ternary_eval t = ternary_to_bool (ternary_ternary_eval t)\""], ["", "subsection\\<open>Negation Normal Form\\<close>"], ["", "text\\<open>A formula is in Negation Normal Form (NNF) if negations only occur at the atoms (not before and/or)\\<close>"], ["", "inductive NegationNormalForm :: \"ternaryformula \\<Rightarrow> bool\" where\n  \"NegationNormalForm (TernaryValue v)\" |\n  \"NegationNormalForm (TernaryNot (TernaryValue v))\" |\n  \"NegationNormalForm \\<phi> \\<Longrightarrow> NegationNormalForm \\<psi> \\<Longrightarrow> NegationNormalForm (TernaryAnd \\<phi> \\<psi>)\"|\n  \"NegationNormalForm \\<phi> \\<Longrightarrow> NegationNormalForm \\<psi> \\<Longrightarrow> NegationNormalForm (TernaryOr \\<phi> \\<psi>)\""], ["", "text\\<open>Convert a @{typ ternaryformula} to a  @{typ ternaryformula} in NNF.\\<close>"], ["", "fun NNF_ternary :: \"ternaryformula \\<Rightarrow> ternaryformula\" where\n  \"NNF_ternary (TernaryValue v) = TernaryValue v\" |\n  \"NNF_ternary (TernaryAnd t1 t2) = TernaryAnd (NNF_ternary t1) (NNF_ternary t2)\" |\n  \"NNF_ternary (TernaryOr t1 t2) = TernaryOr (NNF_ternary t1) (NNF_ternary t2)\" |\n  \"NNF_ternary (TernaryNot (TernaryNot t)) = NNF_ternary t\" |\n  \"NNF_ternary (TernaryNot (TernaryValue v)) = TernaryValue (eval_ternary_Not v)\" |\n  \"NNF_ternary (TernaryNot (TernaryAnd t1 t2)) = TernaryOr (NNF_ternary (TernaryNot t1)) (NNF_ternary (TernaryNot t2))\" |\n  \"NNF_ternary (TernaryNot (TernaryOr t1 t2)) = TernaryAnd (NNF_ternary (TernaryNot t1)) (NNF_ternary (TernaryNot t2))\""], ["", "lemma NNF_ternary_correct: \"ternary_ternary_eval (NNF_ternary t) = ternary_ternary_eval t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (NNF_ternary t) = ternary_ternary_eval t", "proof(induction t rule: NNF_ternary.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>v.\n       ternary_ternary_eval (NNF_ternary (TernaryValue v)) =\n       ternary_ternary_eval (TernaryValue v)\n 2. \\<And>t1 t2.\n       \\<lbrakk>ternary_ternary_eval (NNF_ternary t1) =\n                ternary_ternary_eval t1;\n        ternary_ternary_eval (NNF_ternary t2) =\n        ternary_ternary_eval t2\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (NNF_ternary (TernaryAnd t1 t2)) =\n                         ternary_ternary_eval (TernaryAnd t1 t2)\n 3. \\<And>t1 t2.\n       \\<lbrakk>ternary_ternary_eval (NNF_ternary t1) =\n                ternary_ternary_eval t1;\n        ternary_ternary_eval (NNF_ternary t2) =\n        ternary_ternary_eval t2\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (NNF_ternary (TernaryOr t1 t2)) =\n                         ternary_ternary_eval (TernaryOr t1 t2)\n 4. \\<And>t.\n       ternary_ternary_eval (NNF_ternary t) =\n       ternary_ternary_eval t \\<Longrightarrow>\n       ternary_ternary_eval (NNF_ternary (TernaryNot (TernaryNot t))) =\n       ternary_ternary_eval (TernaryNot (TernaryNot t))\n 5. \\<And>v.\n       ternary_ternary_eval (NNF_ternary (TernaryNot (TernaryValue v))) =\n       ternary_ternary_eval (TernaryNot (TernaryValue v))\n 6. \\<And>t1 t2.\n       \\<lbrakk>ternary_ternary_eval (NNF_ternary (TernaryNot t1)) =\n                ternary_ternary_eval (TernaryNot t1);\n        ternary_ternary_eval (NNF_ternary (TernaryNot t2)) =\n        ternary_ternary_eval (TernaryNot t2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (NNF_ternary (TernaryNot (TernaryAnd t1 t2))) =\n                         ternary_ternary_eval\n                          (TernaryNot (TernaryAnd t1 t2))\n 7. \\<And>t1 t2.\n       \\<lbrakk>ternary_ternary_eval (NNF_ternary (TernaryNot t1)) =\n                ternary_ternary_eval (TernaryNot t1);\n        ternary_ternary_eval (NNF_ternary (TernaryNot t2)) =\n        ternary_ternary_eval (TernaryNot t2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (NNF_ternary (TernaryNot (TernaryOr t1 t2))) =\n                         ternary_ternary_eval (TernaryNot (TernaryOr t1 t2))", "qed(simp_all add: eval_ternary_DeMorgan eval_ternary_idempotence_Not)"], ["", "lemma NNF_ternary_NegationNormalForm: \"NegationNormalForm (NNF_ternary t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NegationNormalForm (NNF_ternary t)", "proof(induction t rule: NNF_ternary.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>v. NegationNormalForm (NNF_ternary (TernaryValue v))\n 2. \\<And>t1 t2.\n       \\<lbrakk>NegationNormalForm (NNF_ternary t1);\n        NegationNormalForm (NNF_ternary t2)\\<rbrakk>\n       \\<Longrightarrow> NegationNormalForm (NNF_ternary (TernaryAnd t1 t2))\n 3. \\<And>t1 t2.\n       \\<lbrakk>NegationNormalForm (NNF_ternary t1);\n        NegationNormalForm (NNF_ternary t2)\\<rbrakk>\n       \\<Longrightarrow> NegationNormalForm (NNF_ternary (TernaryOr t1 t2))\n 4. \\<And>t.\n       NegationNormalForm (NNF_ternary t) \\<Longrightarrow>\n       NegationNormalForm (NNF_ternary (TernaryNot (TernaryNot t)))\n 5. \\<And>v. NegationNormalForm (NNF_ternary (TernaryNot (TernaryValue v)))\n 6. \\<And>t1 t2.\n       \\<lbrakk>NegationNormalForm (NNF_ternary (TernaryNot t1));\n        NegationNormalForm (NNF_ternary (TernaryNot t2))\\<rbrakk>\n       \\<Longrightarrow> NegationNormalForm\n                          (NNF_ternary (TernaryNot (TernaryAnd t1 t2)))\n 7. \\<And>t1 t2.\n       \\<lbrakk>NegationNormalForm (NNF_ternary (TernaryNot t1));\n        NegationNormalForm (NNF_ternary (TernaryNot t2))\\<rbrakk>\n       \\<Longrightarrow> NegationNormalForm\n                          (NNF_ternary (TernaryNot (TernaryOr t1 t2)))", "qed(auto simp add: eval_ternary_DeMorgan eval_ternary_idempotence_Not intro: NegationNormalForm.intros)"], ["", "context\nbegin"], ["", "private"], ["", "lemma ternary_lift1: \"eval_ternary_Not tv \\<noteq> TernaryFalse \\<longleftrightarrow> tv = TernaryFalse \\<or> tv = TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv \\<noteq> TernaryFalse) =\n    (tv = TernaryFalse \\<or> tv = TernaryUnknown)", "using eval_ternary_Not.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval_ternary_Not ?x = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?y = TernaryTrue\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv \\<noteq> TernaryFalse) =\n    (tv = TernaryFalse \\<or> tv = TernaryUnknown)", "by blast"], ["", "private"], ["", "lemma ternary_lift2: \"eval_ternary_Not tv \\<noteq> TernaryTrue \\<longleftrightarrow> tv = TernaryTrue \\<or> tv = TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv \\<noteq> TernaryTrue) =\n    (tv = TernaryTrue \\<or> tv = TernaryUnknown)", "using eval_ternary_Not.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval_ternary_Not ?x = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?y = TernaryTrue\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv \\<noteq> TernaryTrue) =\n    (tv = TernaryTrue \\<or> tv = TernaryUnknown)", "by blast"], ["", "private"], ["", "lemma ternary_lift3: \"eval_ternary_Not tv = TernaryFalse \\<longleftrightarrow> tv = TernaryTrue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv = TernaryFalse) = (tv = TernaryTrue)", "by (metis eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma ternary_lift4: \"eval_ternary_Not tv = TernaryTrue \\<longleftrightarrow> tv = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv = TernaryTrue) = (tv = TernaryFalse)", "by (metis eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma ternary_lift5: \"eval_ternary_Not tv = TernaryUnknown \\<longleftrightarrow> tv = TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_Not tv = TernaryUnknown) = (tv = TernaryUnknown)", "by (metis eval_ternary_Not.simps(3) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma ternary_lift6: \"eval_ternary_And t1 t2 = TernaryFalse \\<longleftrightarrow> t1 = TernaryFalse \\<or> t2 = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_And t1 t2 = TernaryFalse) =\n    (t1 = TernaryFalse \\<or> t2 = TernaryFalse)", "using eval_ternary_And.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval_ternary_And ?x ?xa = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryTrue; ?y = TernaryTrue\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryFalse; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryTrue; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryUnknown;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryTrue;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (eval_ternary_And t1 t2 = TernaryFalse) =\n    (t1 = TernaryFalse \\<or> t2 = TernaryFalse)", "by blast"], ["", "private"], ["", "lemma ternary_lift7: \"eval_ternary_And t1 t2 = TernaryTrue \\<longleftrightarrow> t1 = TernaryTrue \\<and> t2 = TernaryTrue\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_ternary_And t1 t2 = TernaryTrue) =\n    (t1 = TernaryTrue \\<and> t2 = TernaryTrue)", "using eval_ternary_And.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval_ternary_And ?x ?xa = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryTrue; ?y = TernaryTrue\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryFalse; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryTrue; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryUnknown;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryTrue;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (eval_ternary_And t1 t2 = TernaryTrue) =\n    (t1 = TernaryTrue \\<and> t2 = TernaryTrue)", "by blast"], ["", "lemmas ternary_lift = ternary_lift1 ternary_lift2 ternary_lift3 ternary_lift4 ternary_lift5 ternary_lift6 ternary_lift7"], ["", "end"], ["", "context\nbegin"], ["", "private"], ["", "lemma l1: \"eval_ternary_Not tv = TernaryTrue \\<Longrightarrow> tv = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not tv = TernaryTrue \\<Longrightarrow> tv = TernaryFalse", "by (metis eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "private"], ["", "lemma l2: \"eval_ternary_And t1 t2 = TernaryFalse \\<Longrightarrow> t1 = TernaryFalse \\<or> t2 = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_And t1 t2 = TernaryFalse \\<Longrightarrow>\n    t1 = TernaryFalse \\<or> t2 = TernaryFalse", "using eval_ternary_And.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>eval_ternary_And ?x ?xa = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryTrue; ?y = TernaryTrue\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryFalse; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryTrue; ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?xa = TernaryUnknown;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryTrue; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryFalse;\n    ?y = TernaryFalse\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryTrue;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?xa = TernaryUnknown;\n    ?y = TernaryUnknown\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. eval_ternary_And t1 t2 = TernaryFalse \\<Longrightarrow>\n    t1 = TernaryFalse \\<or> t2 = TernaryFalse", "by blast"], ["", "lemmas eval_ternaryD = l1 l2"], ["", "end"], ["", "end"]]}