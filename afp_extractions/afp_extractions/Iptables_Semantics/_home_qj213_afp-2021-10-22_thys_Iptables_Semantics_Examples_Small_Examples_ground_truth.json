{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Examples/Small_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma \"let fw = [''FORWARD'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 8))) (Call ''foo'')],\n                   ''foo'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,128,0,0)) 9))) action.Return,\n                               Rule (Match (Prot (Proto TCP))) action.Accept]\n                   ] in\n    let simplfw = to_simple_firewall\n      (upper_closure (optimize_matches abstract_for_simple_firewall\n        (upper_closure (packet_assume_new (unfold_ruleset_FORWARD action.Drop fw)))))\n    in map simple_rule_ipv4_toString simplfw =\n    [''ACCEPT     tcp  --  10.0.0.0/9            0.0.0.0/0    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\"", "lemma \" map simple_rule_ipv4_toString cool_example =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            0.0.0.0/0    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\"", "lemma \"map ipv4addr_wordinterval_toString (getParts cool_example) =\n    [''{10.128.0.0 .. 10.255.255.255}'',\n     ''{10.0.0.0 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']\"", "lemma \"map ipv4addr_wordinterval_toString (build_ip_partition parts_connection_ssh cool_example) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'',\n     ''{10.0.0.0 .. 10.127.255.255}'']\"", "lemma \"access_matrix_pretty_ipv4 parts_connection_ssh cool_example =\n    ([(''0.0.0.0'', ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.0'', ''{10.0.0.0 .. 10.127.255.255}'')],\n     [(''10.0.0.0'', ''0.0.0.0''),\n      (''10.0.0.0'', ''10.0.0.0'')])\"", "lemma \"map simple_rule_ipv4_toString cool_example2 =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            10.0.0.42/32    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\"", "lemma \"map ipv4addr_wordinterval_toString (getParts cool_example2) =\n    [''{10.128.0.0 .. 10.255.255.255}'', ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']\"", "lemma \"map ipv4addr_wordinterval_toString (build_ip_partition parts_connection_ssh cool_example2) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'', ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'']\"", "lemma \"access_matrix_pretty_ipv4 parts_connection_ssh cool_example2 =\n    ([(''0.0.0.0'', ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.42'', ''10.0.0.42''),\n      (''10.0.0.0'', ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'')\n     ],\n     [(''10.0.0.42'', ''10.0.0.42''),\n      (''10.0.0.0'', ''10.0.0.42'')\n     ])\""], "translations": [["", "lemma \"let fw = [''FORWARD'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 8))) (Call ''foo'')],\n                   ''foo'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,128,0,0)) 9))) action.Return,\n                               Rule (Match (Prot (Proto TCP))) action.Accept]\n                   ] in\n    let simplfw = to_simple_firewall\n      (upper_closure (optimize_matches abstract_for_simple_firewall\n        (upper_closure (packet_assume_new (unfold_ruleset_FORWARD action.Drop fw)))))\n    in map simple_rule_ipv4_toString simplfw =\n    [''ACCEPT     tcp  --  10.0.0.0/9            0.0.0.0/0    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. let fw = [''FORWARD'' \\<mapsto>\n              [Rule\n                (Match\n                  (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10, 0, 0, 0))\n                         8)))\n                (Call ''foo'')],\n              ''foo'' \\<mapsto>\n              [Rule\n                (Match\n                  (Src (IpAddrNetmask\n                         (ipv4addr_of_dotdecimal (10, 128, 0, 0)) 9)))\n                Return,\n               Rule (Match (Prot (Proto TCP))) action.Accept]];\n        simplfw =\n          to_simple_firewall\n           (upper_closure\n             (optimize_matches abstract_for_simple_firewall\n               (upper_closure\n                 (packet_assume_new\n                   (unfold_ruleset_FORWARD action.Drop fw)))))\n    in map simple_rule_ipv4_toString simplfw =\n       [''ACCEPT     tcp  --  10.0.0.0/9            0.0.0.0/0    '',\n        ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']", "by eval"], ["", "private"], ["", "definition \"cool_example \\<equiv> (let fw = \n                [''FORWARD'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 8))) (Call ''foo'')],\n                 ''foo'' \\<mapsto> [Rule (MatchNot (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 9)))) action.Drop,\n                             Rule (Match (Prot (Proto TCP))) action.Accept]\n                 ] in\n    to_simple_firewall (upper_closure (optimize_matches abstract_for_simple_firewall\n                          (upper_closure (packet_assume_new (unfold_ruleset_FORWARD action.Drop fw))))))\""], ["", "lemma \" map simple_rule_ipv4_toString cool_example =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            0.0.0.0/0    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map simple_rule_ipv4_toString cool_example =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            0.0.0.0/0    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']", "by eval"], ["", "lemma \"map ipv4addr_wordinterval_toString (getParts cool_example) =\n    [''{10.128.0.0 .. 10.255.255.255}'',\n     ''{10.0.0.0 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ipv4addr_wordinterval_toString (getParts cool_example) =\n    [''{10.128.0.0 .. 10.255.255.255}'', ''{10.0.0.0 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']", "by eval"], ["", "lemma \"map ipv4addr_wordinterval_toString (build_ip_partition parts_connection_ssh cool_example) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'',\n     ''{10.0.0.0 .. 10.127.255.255}'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ipv4addr_wordinterval_toString\n     (build_ip_partition parts_connection_ssh cool_example) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'',\n     ''{10.0.0.0 .. 10.127.255.255}'']", "by eval"], ["", "(*it is not minimal if we allow to further compress the node definitions?\n  the receiver nodes could be combined to UNIV\n  But minimal for a symmetric matrix*)"], ["", "lemma \"access_matrix_pretty_ipv4 parts_connection_ssh cool_example =\n    ([(''0.0.0.0'', ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.0'', ''{10.0.0.0 .. 10.127.255.255}'')],\n     [(''10.0.0.0'', ''0.0.0.0''),\n      (''10.0.0.0'', ''10.0.0.0'')])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. access_matrix_pretty_ipv4 parts_connection_ssh cool_example =\n    ([(''0.0.0.0'',\n       ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.0'', ''{10.0.0.0 .. 10.127.255.255}'')],\n     [(''10.0.0.0'', ''0.0.0.0''), (''10.0.0.0'', ''10.0.0.0'')])", "by eval"], ["", "end"], ["", "context\nbegin"], ["", "(*now with a destination IP*)\n  private"], ["", "definition \"cool_example2 \\<equiv> (let fw =\n    [''FORWARD'' \\<mapsto> [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 8))) (Call ''foo'')],\n     ''foo'' \\<mapsto> [Rule (MatchNot (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,0)) 9)))) action.Drop,\n                 Rule (MatchAnd (Match (Prot (Proto TCP))) (Match (Dst (IpAddrNetmask (ipv4addr_of_dotdecimal (10,0,0,42)) 32)))) action.Accept]\n                ] in\n    to_simple_firewall (upper_closure (optimize_matches abstract_for_simple_firewall\n                          (upper_closure (packet_assume_new (unfold_ruleset_FORWARD action.Drop fw))))))\""], ["", "lemma \"map simple_rule_ipv4_toString cool_example2 =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            10.0.0.42/32    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map simple_rule_ipv4_toString cool_example2 =\n    [''DROP     all  --  10.128.0.0/9            0.0.0.0/0    '',\n     ''ACCEPT     tcp  --  10.0.0.0/8            10.0.0.42/32    '',\n     ''DROP     all  --  0.0.0.0/0            0.0.0.0/0    '']", "by eval"], ["", "(*not minimal*)"], ["", "lemma \"map ipv4addr_wordinterval_toString (getParts cool_example2) =\n    [''{10.128.0.0 .. 10.255.255.255}'', ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ipv4addr_wordinterval_toString (getParts cool_example2) =\n    [''{10.128.0.0 .. 10.255.255.255}'', ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'',\n     ''{0.0.0.0 .. 9.255.255.255} u {11.0.0.0 .. 255.255.255.255}'']", "by eval"], ["", "lemma \"map ipv4addr_wordinterval_toString (build_ip_partition parts_connection_ssh cool_example2) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'', ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ipv4addr_wordinterval_toString\n     (build_ip_partition parts_connection_ssh cool_example2) =\n    [''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}'',\n     ''10.0.0.42'',\n     ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'']", "by eval"], ["", "lemma \"access_matrix_pretty_ipv4 parts_connection_ssh cool_example2 =\n    ([(''0.0.0.0'', ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.42'', ''10.0.0.42''),\n      (''10.0.0.0'', ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'')\n     ],\n     [(''10.0.0.42'', ''10.0.0.42''),\n      (''10.0.0.0'', ''10.0.0.42'')\n     ])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. access_matrix_pretty_ipv4 parts_connection_ssh cool_example2 =\n    ([(''0.0.0.0'',\n       ''{0.0.0.0 .. 9.255.255.255} u {10.128.0.0 .. 255.255.255.255}''),\n      (''10.0.0.42'', ''10.0.0.42''),\n      (''10.0.0.0'',\n       ''{10.0.0.0 .. 10.0.0.41} u {10.0.0.43 .. 10.127.255.255}'')],\n     [(''10.0.0.42'', ''10.0.0.42''), (''10.0.0.0'', ''10.0.0.42'')])", "by eval"], ["", "end"], ["", "end"]]}