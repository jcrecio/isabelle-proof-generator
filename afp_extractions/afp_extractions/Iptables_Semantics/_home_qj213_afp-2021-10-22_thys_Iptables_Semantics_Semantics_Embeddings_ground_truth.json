{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Embeddings.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma iptables_bigstep_undecided_to_undecided_in_doubt_allow_approx:\n  assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n      and good: \"good_ruleset rs\" and semantics: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n    shows \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or> (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\"", "lemma FinalAllow_approximating_in_doubt_allow:\n   assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n       and good: \"good_ruleset rs\" and semantics: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\"\n     shows \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\"", "lemma approximating_bigstep_undecided_to_undecided_in_doubt_allow_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\"", "lemma FinalDeny_approximating_in_doubt_allow: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\"", "lemma iptables_bigstep_undecided_to_undecided_in_doubt_deny_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n       (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or> (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny\"", "lemma FinalDeny_approximating_in_doubt_deny: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny \\<Longrightarrow> (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny\"", "lemma approximating_bigstep_undecided_to_undecided_in_doubt_deny_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\"", "lemma FinalAllow_approximating_in_doubt_deny: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\"", "theorem FinalAllowClosure:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\" and \"good_ruleset rs\"\n  shows \"{p. (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow}\"\n  and   \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow} \\<subseteq> {p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\"", "theorem FinalDenyClosure:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\" and \"good_ruleset rs\"\n  shows \"{p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny}\"\n  and   \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny} \\<subseteq> {p. (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"", "lemma LukassLemma: assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n        and noUnknown: \"(\\<forall> r \\<in> set rs. ternary_ternary_eval (map_match_tac \\<beta> p (get_match r)) \\<noteq> TernaryUnknown)\"\n        and good: \"good_ruleset rs\"\n      shows \"(\\<beta>,\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\"", "theorem \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_approximating_bigstep_iff_iptables_bigstep:\n  assumes \"\\<forall>r \\<in> set rs. \\<forall>c. get_action r \\<noteq> Call c\"\n  shows \"((\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>),\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\"", "lemma Semantics_optimize_primitive_univ_common_matcher:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> common_matcher\" \n    shows \"Semantics.matches \\<gamma> (optimize_primitive_univ m) p = Semantics.matches \\<gamma> m p\""], "translations": [["", "lemma iptables_bigstep_undecided_to_undecided_in_doubt_allow_approx:\n  assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n      and good: \"good_ruleset rs\" and semantics: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\"\n    shows \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or> (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "from semantics good"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n  good_ruleset rs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "proof(induction rs Undecided Undecided rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. good_ruleset [] \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 5. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 6. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case Skip"], ["proof (state)\nthis:\n  good_ruleset []\n\ngoal (6 subgoals):\n 1. good_ruleset [] \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 5. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 6. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  good_ruleset []\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "by(auto intro: approximating_bigstep.skip)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case Log"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> m_ p\n  a_ = Log \\<or> a_ = Empty\n  good_ruleset [Rule m_ a_]\n\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  Semantics.matches \\<gamma> m_ p\n  a_ = Log \\<or> a_ = Empty\n  good_ruleset [Rule m_ a_]\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n        a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n        a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow", "by(auto intro: approximating_bigstep.empty approximating_bigstep.log approximating_bigstep.nomatch)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n      a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n      a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\n\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case (Nomatch m a)"], ["proof (state)\nthis:\n  \\<not> Semantics.matches \\<gamma> m p\n  good_ruleset [Rule m a]\n\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "with not_exact_match_in_doubt_allow_approx_match[OF agree]"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a = action.Accept \\<or> ?a = Reject \\<or> ?a = action.Drop;\n   \\<not> Semantics.matches \\<gamma> ?m ?p\\<rbrakk>\n  \\<Longrightarrow> ?a = action.Accept \\<and>\n                    Matching_Ternary.matches (\\<beta>, in_doubt_allow) ?m ?a\n                     ?p \\<or>\n                    \\<not> Matching_Ternary.matches\n                            (\\<beta>, in_doubt_allow) ?m ?a ?p\n  \\<not> Semantics.matches \\<gamma> m p\n  good_ruleset [Rule m a]", "have\n        \"a \\<noteq> Log \\<Longrightarrow> a \\<noteq> Empty \\<Longrightarrow> a = Accept \\<and> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p \\<or> \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a = action.Accept \\<or> ?a = Reject \\<or> ?a = action.Drop;\n   \\<not> Semantics.matches \\<gamma> ?m ?p\\<rbrakk>\n  \\<Longrightarrow> ?a = action.Accept \\<and>\n                    Matching_Ternary.matches (\\<beta>, in_doubt_allow) ?m ?a\n                     ?p \\<or>\n                    \\<not> Matching_Ternary.matches\n                            (\\<beta>, in_doubt_allow) ?m ?a ?p\n  \\<not> Semantics.matches \\<gamma> m p\n  good_ruleset [Rule m a]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n    \\<Longrightarrow> a = action.Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "by(simp add: good_ruleset_alt) blast"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> a = action.Accept \\<and>\n                    Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                     p \\<or>\n                    \\<not> Matching_Ternary.matches\n                            (\\<beta>, in_doubt_allow) m a p\n\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n  \\<Longrightarrow> a = action.Accept \\<and>\n                    Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                     p \\<or>\n                    \\<not> Matching_Ternary.matches\n                            (\\<beta>, in_doubt_allow) m a p\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n        a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow", "by(cases a) (auto intro: approximating_bigstep.empty approximating_bigstep.log approximating_bigstep.accept approximating_bigstep.nomatch)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case (Seq rs rs1 rs2 t)"], ["proof (state)\nthis:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "from Seq"], ["proof (chain)\npicking this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs", "have \"good_ruleset rs1\" and \"good_ruleset rs2\""], ["proof (prove)\nusing this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs1 &&& good_ruleset rs2", "by(simp_all add: good_ruleset_append)"], ["proof (state)\nthis:\n  good_ruleset rs1\n  good_ruleset rs2\n\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "also"], ["proof (state)\nthis:\n  good_ruleset rs1\n  good_ruleset rs2\n\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "from Seq iptables_bigstep_to_undecided"], ["proof (chain)\npicking this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  ?s = Undecided", "have \"t = Undecided\""], ["proof (prove)\nusing this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  ?s = Undecided\n\ngoal (1 subgoal):\n 1. t = Undecided", "by simp"], ["proof (state)\nthis:\n  t = Undecided\n\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "ultimately"], ["proof (chain)\npicking this:\n  good_ruleset rs1\n  good_ruleset rs2\n  t = Undecided", "show ?case"], ["proof (prove)\nusing this:\n  good_ruleset rs1\n  good_ruleset rs2\n  t = Undecided\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "using Seq"], ["proof (prove)\nusing this:\n  good_ruleset rs1\n  good_ruleset rs2\n  t = Undecided\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Undecided; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Undecided\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                    (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "by(fastforce intro: approximating_bigstep.decision Semantics_Ternary.seq')"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal (2 subgoals):\n 1. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "qed(simp_all add: good_ruleset_def)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FinalAllow_approximating_in_doubt_allow:\n   assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n       and good: \"good_ruleset rs\" and semantics: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\"\n     shows \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "from semantics good"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n     FinalAllow\n  good_ruleset rs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n     FinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "proof(induction rs Undecided \"Decision FinalAllow\" rule: iptables_bigstep_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = action.Accept;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case Allow"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> m_ p\n  a_ = action.Accept\n  good_ruleset [Rule m_ a_]\n\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = action.Accept;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  Semantics.matches \\<gamma> m_ p\n  a_ = action.Accept\n  good_ruleset [Rule m_ a_]\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n        a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow", "by (auto intro: agree approximating_bigstep.accept in_doubt_allow_allows_Accept)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n      a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\n\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case (Seq rs rs1 rs2 t)"], ["proof (state)\nthis:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "from Seq"], ["proof (chain)\npicking this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs", "have good1: \"good_ruleset rs1\" and good2: \"good_ruleset rs2\""], ["proof (prove)\nusing this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs1 &&& good_ruleset rs2", "by(simp_all add: good_ruleset_append)"], ["proof (state)\nthis:\n  good_ruleset rs1\n  good_ruleset rs2\n\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "proof(cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n 2. \\<And>x2.\n       t = Decision x2 \\<Longrightarrow>\n       (\\<beta>,\n        in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow", "case Decision"], ["proof (state)\nthis:\n  t = Decision x2_\n\ngoal (2 subgoals):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n 2. \\<And>x2.\n       t = Decision x2 \\<Longrightarrow>\n       (\\<beta>,\n        in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow", "with Seq good1 good2"], ["proof (chain)\npicking this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  good_ruleset rs1\n  good_ruleset rs2\n  t = Decision x2_", "show \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\""], ["proof (prove)\nusing this:\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  good_ruleset rs1\n  good_ruleset rs2\n  t = Decision x2_\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "by (auto intro: approximating_bigstep.decision approximating_bigstep.seq dest: Semantics.decisionD)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal (1 subgoal):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "case Undecided"], ["proof (state)\nthis:\n  t = Undecided\n\ngoal (1 subgoal):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "with iptables_bigstep_undecided_to_undecided_in_doubt_allow_approx[OF agree good1] Seq"], ["proof (chain)\npicking this:\n  ?\\<Gamma>,\\<gamma>,?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  (\\<beta>,\n   in_doubt_allow),?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  t = Undecided", "have\n              \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or> (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\""], ["proof (prove)\nusing this:\n  ?\\<Gamma>,\\<gamma>,?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n  (\\<beta>,\n   in_doubt_allow),?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),?p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  t = Undecided\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow", "by simp"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow\n\ngoal (1 subgoal):\n 1. t = Undecided \\<Longrightarrow>\n    (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "with Undecided Seq good1 good2"], ["proof (chain)\npicking this:\n  t = Undecided\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  good_ruleset rs1\n  good_ruleset rs2\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow", "show \"(\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\""], ["proof (prove)\nusing this:\n  t = Undecided\n  rs = rs1 @ rs2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>t = Decision FinalAllow; good_ruleset rs1\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n  \\<lbrakk>t = Undecided; good_ruleset rs2\\<rbrakk>\n  \\<Longrightarrow> (\\<beta>,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n  good_ruleset rs\n  good_ruleset rs1\n  good_ruleset rs2\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow", "by (auto intro: approximating_bigstep.seq Semantics_Ternary.seq' approximating_bigstep.decision)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal (1 subgoal):\n 1. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "case Call_result"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> m_ p\n  a_ = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Decision\n      FinalAllow\n  good_ruleset rs_ \\<Longrightarrow>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow\n  good_ruleset [Rule m_ a_]\n\ngoal (1 subgoal):\n 1. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalAllow;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_allow),p\\<turnstile> \\<langle>[Rule m\n                             a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  Semantics.matches \\<gamma> m_ p\n  a_ = Call chain_\n  \\<Gamma> chain_ = Some rs_\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow> Decision\n      FinalAllow\n  good_ruleset rs_ \\<Longrightarrow>\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow\n  good_ruleset [Rule m_ a_]\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n        a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow", "by(simp add: good_ruleset_alt)"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>[Rule m_\n      a_], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<beta>,\n   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                   FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary FinalAllows_subseteq_in_doubt_allow: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> good_ruleset rs \\<Longrightarrow>\n   {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow} \\<subseteq> {p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                           FinalAllow)\n                      \\<subseteq> _Collect p\n                                   ((\\<beta>,\n                                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n               FinalAllow)", "using FinalAllow_approximating_in_doubt_allow"], ["proof (prove)\nusing this:\n  \\<lbrakk>matcher_agree_on_exact_matches ?\\<gamma> ?\\<beta>;\n   good_ruleset ?rs;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow> Decision\n          FinalAllow\\<rbrakk>\n  \\<Longrightarrow> (?\\<beta>,\n                     in_doubt_allow),?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalAllow\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                           FinalAllow)\n                      \\<subseteq> _Collect p\n                                   ((\\<beta>,\n                                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n               FinalAllow)", "by (metis (lifting, full_types) Collect_mono)"], ["", "(*referenced by name in paper*)"], ["", "corollary new_packets_to_simple_firewall_overapproximation:\n  defines \"preprocess rs \\<equiv> upper_closure (optimize_matches abstract_for_simple_firewall (upper_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  fixes p :: \"('i::len, 'pkt_ext) tagged_packet_scheme\"\n  assumes \"matcher_agree_on_exact_matches \\<gamma> common_matcher\" and \"simple_ruleset rs\"\n  shows \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow \\<and> newpkt p} \\<subseteq> {p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (simple_fw (to_simple_firewall (preprocess rs)) p =\n                  Decision FinalAllow \\<and>\n                  newpkt p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (simple_fw (to_simple_firewall (preprocess rs)) p =\n                  Decision FinalAllow \\<and>\n                  newpkt p)", "from assms(3)"], ["proof (chain)\npicking this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher", "have \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n      {p. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher\n\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n                  newpkt p)", "apply(drule_tac rs=rs and \\<Gamma>=\\<Gamma> in FinalAllows_subseteq_in_doubt_allow)"], ["proof (prove)\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow) \\<Longrightarrow>\n    _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n                  newpkt p)", "using simple_imp_good_ruleset assms(4)"], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  simple_ruleset rs\n\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow) \\<Longrightarrow>\n    _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n                  newpkt p)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow) \\<Longrightarrow>\n    _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 ((common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n                  newpkt p)", "by blast"], ["proof (state)\nthis:\n  _Collect p\n   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n       FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               ((common_matcher,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n                newpkt p)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (simple_fw (to_simple_firewall (preprocess rs)) p =\n                  Decision FinalAllow \\<and>\n                  newpkt p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  _Collect p\n   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n       FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               ((common_matcher,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n                newpkt p)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (simple_fw (to_simple_firewall (preprocess rs)) p =\n                  Decision FinalAllow \\<and>\n                  newpkt p)", "unfolding newpkt_def preprocess_def"], ["proof (prove)\nusing this:\n  _Collect p\n   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n       FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               ((common_matcher,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n      p_tag_ctstate p = CT_New)\n    \\<subseteq> _Collect p\n                 (simple_fw\n                   (to_simple_firewall\n                     (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))))\n                   p =\n                  Decision FinalAllow \\<and>\n                  match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                  p_tag_ctstate p = CT_New)", "using transform_simple_fw_upper(2)[OF assms(4)]"], ["proof (prove)\nusing this:\n  _Collect p\n   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n       FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               ((common_matcher,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n  _Collect p\n   ((common_matcher,\n     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               (simple_fw\n                 (to_simple_firewall\n                   (upper_closure\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs)))))\n                 p =\n                Decision FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow \\<and>\n      match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n      p_tag_ctstate p = CT_New)\n    \\<subseteq> _Collect p\n                 (simple_fw\n                   (to_simple_firewall\n                     (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))))\n                   p =\n                  Decision FinalAllow \\<and>\n                  match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                  p_tag_ctstate p = CT_New)", "by blast"], ["proof (state)\nthis:\n  _Collect p\n   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n       FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               (simple_fw (to_simple_firewall (preprocess rs)) p =\n                Decision FinalAllow \\<and>\n                newpkt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma approximating_bigstep_undecided_to_undecided_in_doubt_allow_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     (\\<beta>,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<beta>,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(induction rs Undecided Undecided rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m\n                        a p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m\n                        a p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.skip)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m\n                        a p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.empty iptables_bigstep.log iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m\n                        a p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp split: ternaryvalue.split_asm add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) =\n        TernaryFalse\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis in_doubt_allow_allows_Accept iptables_bigstep.nomatch matches_casesE ternaryvalue.distinct(1) ternaryvalue.distinct(5))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(case_tac a)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = action.Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = action.Drop\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 5. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 7. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 8. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 9. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_allow a p; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 10. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n        \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n         (\\<beta>,\n          in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n         \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                           \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\nFinalDeny;\n         (\\<beta>,\n          in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n         \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                           \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\nFinalDeny;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                             rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                             rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m action.Drop];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        a = action.Drop\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              action.Drop], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              action.Drop], Undecided\\<rangle> \\<Rightarrow> Decision\n  FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Log];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Decision\n                                FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Reject];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 4. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 5. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 6. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 7. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 8. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 9. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.drop iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Log];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Decision\n                                FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Reject];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 5. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 7. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 8. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.log iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Reject];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Reject], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 2. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 4. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 5. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.nomatch iptables_bigstep.reject)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 3. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 5. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 6. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalDeny\n 2. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 5. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.empty iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_append,clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        \\<not> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                  rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalDeny\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided", "by (metis approximating_bigstep_to_undecided iptables_bigstep.decision iptables_bigstep.seq)"], ["", "lemma FinalDeny_approximating_in_doubt_allow: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     (\\<beta>,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<beta>,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(induction rs Undecided \"Decision FinalDeny\" rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p;\n        a = action.Drop \\<or> a = Reject;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalDeny;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p;\n        a = action.Drop \\<or> a = Reject;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis action.distinct(1) action.distinct(5) deny not_exact_match_in_doubt_allow_approx_match)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp add: good_ruleset_append, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(case_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(drule(2) approximating_bigstep_undecided_to_undecided_in_doubt_allow_approx[where \\<Gamma>=\\<Gamma>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "apply (metis iptables_bigstep.decision iptables_bigstep.seq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalDeny \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalDeny;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalDeny", "by (metis Decision_approximating_bigstep_fun approximating_semantics_imp_fun iptables_bigstep.decision iptables_bigstep.seq)"], ["", "corollary FinalDenys_subseteq_in_doubt_allow: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> good_ruleset rs \\<Longrightarrow>\n   {p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       ((\\<beta>,\n                         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalDeny)\n                      \\<subseteq> _Collect p\n                                   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n FinalDeny)", "using FinalDeny_approximating_in_doubt_allow"], ["proof (prove)\nusing this:\n  \\<lbrakk>matcher_agree_on_exact_matches ?\\<gamma> ?\\<beta>;\n   good_ruleset ?rs;\n   (?\\<beta>,\n    in_doubt_allow),?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                           FinalDeny\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       ((\\<beta>,\n                         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalDeny)\n                      \\<subseteq> _Collect p\n                                   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n FinalDeny)", "by (metis (lifting, full_types) Collect_mono)"], ["", "text\\<open>\n  If our approximating firewall (the executable version) concludes that we deny a packet, \n  the exact semantic agrees that this packet is definitely denied!\n\\<close>"], ["", "corollary \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> good_ruleset rs \\<Longrightarrow>\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided = (Decision FinalDeny) \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(frule(1) FinalDeny_approximating_in_doubt_allow[where p=p and \\<Gamma>=\\<Gamma>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalDeny\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n        FinalDeny\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(rule approximating_fun_imp_semantics)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny\\<rbrakk>\n    \\<Longrightarrow> wf_ruleset (\\<beta>, in_doubt_allow) p rs\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       rs Undecided =\n                      Decision FinalDeny\n 3. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n        FinalDeny\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply (metis good_imp_wf_ruleset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       rs Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalDeny;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n        FinalDeny\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Tactic  @{const in_doubt_deny}\\<close>"], ["", "lemma iptables_bigstep_undecided_to_undecided_in_doubt_deny_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<Longrightarrow>\n       (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or> (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                      (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                      (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny", "apply(induction rs Undecided Undecided rule: iptables_bigstep_induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                      (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalDeny\n 5. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 6. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                      (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 5. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 6. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.skip)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.empty approximating_bigstep.log approximating_bigstep.nomatch)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(case_tac \"a = Log\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a = Log\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a \\<noteq> Log\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.log approximating_bigstep.nomatch)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a \\<noteq> Log\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(case_tac \"a = Empty\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a = Empty\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.empty approximating_bigstep.nomatch)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(drule_tac a=a in not_exact_match_in_doubt_deny_approx_match)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> a = action.Accept \\<or>\n                         a = Reject \\<or> a = action.Drop\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> \\<not> Semantics.matches \\<gamma> (?m21 m a)\n                                 (?p21 m a)\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty;\n        (a = action.Drop \\<or> a = Reject) \\<and>\n        Matching_Ternary.matches (\\<beta>, in_doubt_deny) (?m21 m a) a\n         (?p21 m a) \\<or>\n        \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) (?m21 m a)\n                a (?p21 m a)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 5. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 6. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> a = action.Accept \\<or>\n                         a = Reject \\<or> a = action.Drop\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty;\n        (a = action.Drop \\<or> a = Reject) \\<and>\n        Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p \\<or>\n        \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                p\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        a = action.Accept \\<or> a = action.Drop \\<or> a = Reject;\n        a \\<noteq> Log; a \\<noteq> Empty\\<rbrakk>\n       \\<Longrightarrow> a = action.Accept \\<or>\n                         a = Reject \\<or> a = action.Drop\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty;\n        (a = action.Drop \\<or> a = Reject) \\<and>\n        Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p \\<or>\n        \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                p\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 4. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 5. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        good_ruleset [Rule m a]; a \\<noteq> Log; a \\<noteq> Empty;\n        (a = action.Drop \\<or> a = Reject) \\<and>\n        Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p \\<or>\n        \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                p\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 4. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.drop approximating_bigstep.nomatch approximating_bigstep.reject)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(frule iptables_bigstep_to_undecided)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                          (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>2 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_append)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1 \\<and> good_ruleset rs\\<^sub>2;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis (hide_lams, no_types) approximating_bigstep.decision Semantics_Ternary.seq')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ Rule m' Return # rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs\\<^sub>1 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n                         (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma FinalDeny_approximating_in_doubt_deny: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny \\<Longrightarrow> (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n        FinalDeny\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                FinalDeny;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny", "apply(induction rs Undecided \"Decision FinalDeny\" rule: iptables_bigstep_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p;\n        a = action.Drop \\<or> a = Reject;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalDeny;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p;\n        a = action.Drop \\<or> a = Reject;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.drop approximating_bigstep.reject in_doubt_deny_denies_DropReject)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(case_tac t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<lbrakk>t = Decision FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>2 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   x2;\n        \\<lbrakk>x2 = FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Decision\n                        x2\\<rangle> \\<Rightarrow> Decision FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   x2;\n        \\<lbrakk>x2 = FinalDeny; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> (\\<beta>,\n                           in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Decision\n                        x2\\<rangle> \\<Rightarrow> Decision FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>2 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_append)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   x2;\n        x2 = FinalDeny \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Decision\n                        x2\\<rangle> \\<Rightarrow> Decision FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1 \\<and> good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>2 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.decision approximating_bigstep.seq Semantics.decisionD state.inject)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        good_ruleset rs\\<^sub>2 \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2); t = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_append, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(drule(2) iptables_bigstep_undecided_to_undecided_in_doubt_deny_approx)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<or>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 3. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalDeny;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalDeny\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                          rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n           FinalDeny\n 2. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply (metis approximating_bigstep.decision Semantics_Ternary.seq')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a chain rs.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n           FinalDeny;\n        good_ruleset rs \\<Longrightarrow>\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalDeny;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call chain)]\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>,\n                          in_doubt_deny),p\\<turnstile> \\<langle>[Rule m\n                            (Call\n                              chain)], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalDeny", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma approximating_bigstep_undecided_to_undecided_in_doubt_deny_approx: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n       good_ruleset rs \\<Longrightarrow>\n       (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     (\\<beta>,\n      in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<beta>,\n              in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow", "apply(induction rs Undecided Undecided rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                        p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow", "apply(simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset []\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                      \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                        p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.skip)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p;\n        a = Log \\<or> a = Empty;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                        p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.empty iptables_bigstep.log iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                        p;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp split: ternaryvalue.split_asm add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) =\n        TernaryFalse\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis in_doubt_allow_allows_Accept iptables_bigstep.nomatch matches_casesE ternaryvalue.distinct(1) ternaryvalue.distinct(5))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(case_tac a)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = action.Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = action.Drop\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 5. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 7. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 8. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 9. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> in_doubt_deny a p; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 10. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n        \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n         (\\<beta>,\n          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n         \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                           \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\nFinalAllow;\n         (\\<beta>,\n          in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n         \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n         \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                           \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\nFinalAllow;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                             rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                             rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow", "apply(simp_all)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m action.Accept];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        a = action.Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              action.Accept], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              action.Accept], Undecided\\<rangle> \\<Rightarrow> Decision\n    FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Log];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Decision\n                                FinalAllow\n 3. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 5. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 7. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 8. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.accept iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Log];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Log], Undecided\\<rangle> \\<Rightarrow> Decision\n                                FinalAllow\n 2. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 4. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 5. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 6. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.log iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>m a x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Call x5)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Call\n                                x5)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 3. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 5. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 6. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Return];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Return], Undecided\\<rangle> \\<Rightarrow> Decision\n                                   FinalAllow\n 2. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 4. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 5. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>m a x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m (Goto x7)];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              (Goto\n                                x7)], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Empty];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Empty], Undecided\\<rangle> \\<Rightarrow> Decision\n                                  FinalAllow\n 2. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.empty iptables_bigstep.nomatch)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m Unknown];\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        \\<not> undefined; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              Unknown], Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                          \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n                         \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_append,clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        \\<not> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                  rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                          FinalAllow\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Undecided", "by (metis approximating_bigstep_to_undecided iptables_bigstep.decision iptables_bigstep.seq)"], ["", "lemma FinalAllow_approximating_in_doubt_deny: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n   good_ruleset rs \\<Longrightarrow>\n   (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs;\n     (\\<beta>,\n      in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow", "apply(rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<beta>,\n              in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                         FinalAllow", "apply(induction rs Undecided \"Decision FinalAllow\" rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p;\n        a = action.Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m a]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalAllow;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        \\<lbrakk>t = Undecided;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                            FinalAllow", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, in_doubt_deny) m\n                 action.Accept p;\n        a = action.Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset [Rule m action.Accept]\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              action.Accept], Undecided\\<rangle> \\<Rightarrow> Decision\n    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis action.distinct(1) action.distinct(5) iptables_bigstep.accept not_exact_match_in_doubt_deny_approx_match)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>t = Decision FinalAllow; good_ruleset rs\\<^sub>1\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        \\<lbrakk>t = Undecided; good_ruleset rs\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                     FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp add: good_ruleset_append, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(case_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(drule(2) approximating_bigstep_undecided_to_undecided_in_doubt_deny_approx[where \\<Gamma>=\\<Gamma>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided \\<or>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply(erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2; t = Undecided;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "apply (metis iptables_bigstep.decision iptables_bigstep.seq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t x2.\n       \\<lbrakk>(\\<beta>,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Decision FinalAllow \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        (\\<beta>,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow;\n        t = Undecided \\<Longrightarrow>\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        good_ruleset rs\\<^sub>1; good_ruleset rs\\<^sub>2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1 @\n                            rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow> Decision\n                                    FinalAllow", "by (metis Decision_approximating_bigstep_fun approximating_semantics_imp_fun iptables_bigstep.decision iptables_bigstep.seq)"], ["", "corollary FinalAllows_subseteq_in_doubt_deny: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> good_ruleset rs \\<Longrightarrow>\n   {p. (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       ((\\<beta>,\n                         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n  FinalAllow)\n                      \\<subseteq> _Collect p\n                                   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n FinalAllow)", "using FinalAllow_approximating_in_doubt_deny"], ["proof (prove)\nusing this:\n  \\<lbrakk>matcher_agree_on_exact_matches ?\\<gamma> ?\\<beta>;\n   good_ruleset ?rs;\n   (?\\<beta>,\n    in_doubt_deny),?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow\\<rbrakk>\n  \\<Longrightarrow> ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                           FinalAllow\n\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     good_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> _Collect p\n                       ((\\<beta>,\n                         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n  FinalAllow)\n                      \\<subseteq> _Collect p\n                                   (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n FinalAllow)", "by (metis (lifting, full_types) Collect_mono)"], ["", "corollary new_packets_to_simple_firewall_underapproximation:\n  defines \"preprocess rs \\<equiv> lower_closure (optimize_matches abstract_for_simple_firewall (lower_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  fixes p :: \"('i::len, 'pkt_ext) tagged_packet_scheme\"\n  assumes \"matcher_agree_on_exact_matches \\<gamma> common_matcher\" and \"simple_ruleset rs\"\n  shows \"{p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw (to_simple_firewall (preprocess rs)) p =\n      Decision FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw (to_simple_firewall (preprocess rs)) p =\n      Decision FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "from assms(3)"], ["proof (chain)\npicking this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher", "have \"{p. (common_matcher, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n      {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher\n\ngoal (1 subgoal):\n 1. _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "apply(drule_tac rs=rs and \\<Gamma>=\\<Gamma> in FinalAllows_subseteq_in_doubt_deny)"], ["proof (prove)\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow) \\<Longrightarrow>\n    _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "using simple_imp_good_ruleset assms(4)"], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  simple_ruleset rs\n\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow) \\<Longrightarrow>\n    _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow) \\<Longrightarrow>\n    _Collect p\n     ((common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "by blast"], ["proof (state)\nthis:\n  _Collect p\n   ((common_matcher,\n     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow \\<and>\n                newpkt p)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw (to_simple_firewall (preprocess rs)) p =\n      Decision FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  _Collect p\n   ((common_matcher,\n     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow \\<and>\n                newpkt p)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw (to_simple_firewall (preprocess rs)) p =\n      Decision FinalAllow \\<and>\n      newpkt p)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  newpkt p)", "unfolding newpkt_def preprocess_def"], ["proof (prove)\nusing this:\n  _Collect p\n   ((common_matcher,\n     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw\n       (to_simple_firewall\n         (lower_closure\n           (optimize_matches abstract_for_simple_firewall\n             (lower_closure (packet_assume_new rs)))))\n       p =\n      Decision FinalAllow \\<and>\n      match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n      p_tag_ctstate p = CT_New)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                  p_tag_ctstate p = CT_New)", "using transform_simple_fw_lower(2)[OF assms(4)]"], ["proof (prove)\nusing this:\n  _Collect p\n   ((common_matcher,\n     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                    FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n  _Collect p\n   (simple_fw\n     (to_simple_firewall\n       (lower_closure\n         (optimize_matches abstract_for_simple_firewall\n           (lower_closure (packet_assume_new rs)))))\n     p =\n    Decision FinalAllow \\<and>\n    match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n    p_tag_ctstate p = CT_New)\n  \\<subseteq> _Collect p\n               ((common_matcher,\n                 in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n                match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                p_tag_ctstate p = CT_New)\n\ngoal (1 subgoal):\n 1. _Collect p\n     (simple_fw\n       (to_simple_firewall\n         (lower_closure\n           (optimize_matches abstract_for_simple_firewall\n             (lower_closure (packet_assume_new rs)))))\n       p =\n      Decision FinalAllow \\<and>\n      match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n      p_tag_ctstate p = CT_New)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow \\<and>\n                  match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n                  p_tag_ctstate p = CT_New)", "by blast"], ["proof (state)\nthis:\n  _Collect p\n   (simple_fw (to_simple_firewall (preprocess rs)) p =\n    Decision FinalAllow \\<and>\n    newpkt p)\n  \\<subseteq> _Collect p\n               (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                   FinalAllow \\<and>\n                newpkt p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Approximating Closures\\<close>"], ["", "theorem FinalAllowClosure:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\" and \"good_ruleset rs\"\n  shows \"{p. (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow}\"\n  and   \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalAllow} \\<subseteq> {p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     ((\\<beta>,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalAllow) &&&\n    _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow)\n    \\<subseteq> _Collect p\n                 ((\\<beta>,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow)", "apply (metis FinalAllows_subseteq_in_doubt_deny assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalAllow)\n    \\<subseteq> _Collect p\n                 ((\\<beta>,\n                   in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow)", "by (metis FinalAllows_subseteq_in_doubt_allow assms)"], ["", "theorem FinalDenyClosure:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\" and \"good_ruleset rs\"\n  shows \"{p. (\\<beta>, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny}\"\n  and   \"{p. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision FinalDeny} \\<subseteq> {p. (\\<beta>, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     ((\\<beta>,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalDeny)\n    \\<subseteq> _Collect p\n                 (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n                     FinalDeny) &&&\n    _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalDeny)\n    \\<subseteq> _Collect p\n                 ((\\<beta>,\n                   in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalDeny)", "apply (metis FinalDenys_subseteq_in_doubt_allow assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. _Collect p\n     (\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> Decision\n         FinalDeny)\n    \\<subseteq> _Collect p\n                 ((\\<beta>,\n                   in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalDeny)", "by (metis FinalDeny_approximating_in_doubt_deny assms mem_Collect_eq subsetI)"], ["", "subsection\\<open>Exact Embedding\\<close>"], ["", "lemma LukassLemma: assumes agree: \"matcher_agree_on_exact_matches \\<gamma> \\<beta>\"\n        and noUnknown: \"(\\<forall> r \\<in> set rs. ternary_ternary_eval (map_match_tac \\<beta> p (get_match r)) \\<noteq> TernaryUnknown)\"\n        and good: \"good_ruleset rs\"\n      shows \"(\\<beta>,\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "fix t \\<comment> \\<open>if we show it for arbitrary @{term t}, we can reuse this fact for the other direction.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "assume a: \"(\\<beta>,\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "from a good agree noUnknown"], ["proof (chain)\npicking this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  good_ruleset rs\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n  \\<forall>r\\<in>set rs.\n     ternary_ternary_eval (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n     TernaryUnknown", "have \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  good_ruleset rs\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n  \\<forall>r\\<in>set rs.\n     ternary_ternary_eval (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n     TernaryUnknown\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "proof(induction rs s t rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>good_ruleset [];\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set [].\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p;\n        a = action.Accept; good_ruleset [Rule m a];\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set [Rule m a].\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p;\n        a = action.Drop \\<or> a = Reject; good_ruleset [Rule m a];\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set [Rule m a].\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p;\n        a = Log \\<or> a = Empty; good_ruleset [Rule m a];\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set [Rule m a].\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p;\n        good_ruleset [Rule m a];\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set [Rule m a].\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       \\<lbrakk>good_ruleset rs;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set rs.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n                                 X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>good_ruleset rs\\<^sub>1;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         \\<forall>r\\<in>set rs\\<^sub>1.\n            ternary_ternary_eval\n             (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<beta>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>good_ruleset rs\\<^sub>2;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n         \\<forall>r\\<in>set rs\\<^sub>2.\n            ternary_ternary_eval\n             (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        good_ruleset rs; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<forall>r\\<in>set rs.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (get_match r)) \\<noteq>\n           TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'", "qed(auto intro: approximating_bigstep.intros iptables_bigstep.intros dest: iptables_bigstepD dest: matches_comply_exact simp: good_ruleset_append)"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "note 1=this"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "{"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "assume a: \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "obtain x where \"approximating_bigstep_fun (\\<beta>,\\<alpha>) p rs s = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s =\n        x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s = x\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "with approximating_fun_imp_semantics[OF good_imp_wf_ruleset[OF good]]"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun ?\\<gamma> ?p rs ?s = ?t \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s = x", "have x: \"(\\<beta>,\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun ?\\<gamma> ?p rs ?s = ?t \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s = x\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x", "by fast"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "with 1"], ["proof (chain)\npicking this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x", "have \"\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> x\""], ["proof (prove)\nusing this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x\n\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> x", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> x\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "with a iptables_bigstep_deterministic"], ["proof (chain)\npicking this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> x", "have \"x = t\""], ["proof (prove)\nusing this:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n  \\<lbrakk>?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t;\n   ?\\<Gamma>,?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> x\n\ngoal (1 subgoal):\n 1. x = t", "by metis"], ["proof (state)\nthis:\n  x = t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "hence \"(\\<beta>,\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  x = t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "using x"], ["proof (prove)\nusing this:\n  x = t\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> x\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by blast"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "}"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "note 2=this"], ["proof (state)\nthis:\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "from 1 2"], ["proof (chain)\npicking this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?ta2 \\<Longrightarrow>\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> ?ta2\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<beta>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "by blast"], ["proof (state)\nthis:\n  (\\<beta>,\n   \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\nFor rulesets without @{term Call}s, the approximating ternary semantics can perfectly simulate the Boolean semantics.\n\\<close>"], ["", "theorem \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_approximating_bigstep_iff_iptables_bigstep:\n  assumes \"\\<forall>r \\<in> set rs. \\<forall>c. get_action r \\<noteq> Call c\"\n  shows \"((\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>),\\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(induction rs s t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t.\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow> t\n 2. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m a p;\n        a = action.Accept\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m a p;\n        a = action.Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Decision\n                              FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m a p;\n        a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                              a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 5. \\<And>m a.\n       \\<not> Matching_Ternary.matches\n               (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                \\<alpha>)\n               m a p \\<Longrightarrow>\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n            a], Undecided\\<rangle> \\<Rightarrow> Undecided\n 6. \\<And>rs X.\n       \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n               X\\<rangle> \\<Rightarrow> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t'\n 8. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(auto intro: iptables_bigstep.intros simp: \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_matching)[7]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t \\<Longrightarrow>\n    (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(insert assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t;\n     \\<forall>r\\<in>set rs.\n        \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n    \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                        \\<gamma>,\n                       \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(induction rs s t rule: iptables_bigstep_induct)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>t.\n       \\<forall>r\\<in>set [].\n          \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n        \\<alpha>),p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = action.Accept;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p;\n        a = action.Drop \\<or> a = Reject;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Log \\<or> a = Empty;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 5. \\<And>m a.\n       \\<lbrakk>\\<not> Semantics.matches \\<gamma> m p;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 6. \\<And>rs X.\n       \\<forall>r\\<in>set rs.\n          \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n        \\<alpha>),p\\<turnstile> \\<langle>rs, Decision\n        X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow> t';\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<forall>r\\<in>set rs.\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n 8. \\<And>m a chain rs\\<^sub>1 m' rs\\<^sub>2.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some (rs\\<^sub>1 @ [Rule m' Return] @ rs\\<^sub>2);\n        Semantics.matches \\<gamma> m' p;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow> Undecided;\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 9. \\<And>m a chain rs t.\n       \\<lbrakk>Semantics.matches \\<gamma> m p; a = Call chain;\n        \\<Gamma> chain = Some rs;\n        \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow> t;\n        \\<forall>r\\<in>set rs.\n           \\<forall>c. get_action r \\<noteq> Call c \\<Longrightarrow>\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n         \\<alpha>),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<forall>r\\<in>set [Rule m a].\n           \\<forall>c. get_action r \\<noteq> Call c\\<rbrakk>\n       \\<Longrightarrow> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>,\n                          \\<alpha>),p\\<turnstile> \\<langle>[Rule m\n                       a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(auto intro: approximating_bigstep.intros simp: \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_matching)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_approximating_bigstep_fun_iff_iptables_bigstep:\n  assumes \"good_ruleset rs\"\n  shows \"approximating_bigstep_fun (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\\<alpha>) p rs s = t \\<longleftrightarrow>  \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun\n      (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>) p\n      rs s =\n     t) =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(subst approximating_semantics_iff_fun_good_ruleset[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "using assms"], ["proof (prove)\nusing this:\n  good_ruleset rs\n\ngoal (2 subgoals):\n 1. good_ruleset rs\n 2. (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n     \\<alpha>),p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply(subst \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_approximating_bigstep_iff_iptables_bigstep[where \\<Gamma>=\\<Gamma>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>r\\<in>set rs. \\<forall>c. get_action r \\<noteq> Call c\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "using assms"], ["proof (prove)\nusing this:\n  good_ruleset rs\n\ngoal (2 subgoals):\n 1. \\<forall>r\\<in>set rs. \\<forall>c. get_action r \\<noteq> Call c\n 2. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "apply (simp add: good_ruleset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t =\n    \\<Gamma>,\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow> t", "by simp"], ["", "text\\<open>The function @{const optimize_primitive_univ} was only applied to the ternary semantics.\n      It is, in fact, also correct for the Boolean semantics, assuming the @{const common_matcher}.\\<close>"], ["", "lemma Semantics_optimize_primitive_univ_common_matcher:\n  assumes \"matcher_agree_on_exact_matches \\<gamma> common_matcher\" \n    shows \"Semantics.matches \\<gamma> (optimize_primitive_univ m) p = Semantics.matches \\<gamma> m p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n    Semantics.matches \\<gamma> m p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n    Semantics.matches \\<gamma> m p", "have \"65535 = (max_word::16 word)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 65535 = - 1", "by simp"], ["proof (state)\nthis:\n  65535 = - 1\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n    Semantics.matches \\<gamma> m p", "then"], ["proof (chain)\npicking this:\n  65535 = - 1", "have port_range: \"\\<And>s e port. s = 0 \\<and> e = 0xFFFF \\<longrightarrow> (port::16 word) \\<le> 0xFFFF\""], ["proof (prove)\nusing this:\n  65535 = - 1\n\ngoal (1 subgoal):\n 1. \\<And>s e port.\n       s = (0::'c) \\<and> e = (65535::'d) \\<longrightarrow> port \\<le> 65535", "by (simp only:) simp"], ["proof (state)\nthis:\n  ?s = (0::?'c1) \\<and> ?e = (65535::?'d1) \\<longrightarrow>\n  ?port \\<le> 65535\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n    Semantics.matches \\<gamma> m p", "from assms"], ["proof (chain)\npicking this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher", "show ?thesis"], ["proof (prove)\nusing this:\n  matcher_agree_on_exact_matches \\<gamma> common_matcher\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n    Semantics.matches \\<gamma> m p", "apply(induction m rule: optimize_primitive_univ.induct)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<And>uu_.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (Src (IpAddrNetmask uu_ 0)))) p =\n       Semantics.matches \\<gamma> (Match (Src (IpAddrNetmask uu_ 0))) p\n 2. \\<And>uv_.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (Dst (IpAddrNetmask uv_ 0)))) p =\n       Semantics.matches \\<gamma> (Match (Dst (IpAddrNetmask uv_ 0))) p\n 3. \\<And>iface.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (IIface iface))) p =\n       Semantics.matches \\<gamma> (Match (IIface iface)) p\n 4. \\<And>iface.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (OIface iface))) p =\n       Semantics.matches \\<gamma> (Match (OIface iface)) p\n 5. matcher_agree_on_exact_matches \\<gamma> common_matcher \\<Longrightarrow>\n    Semantics.matches \\<gamma>\n     (optimize_primitive_univ (Match (Prot ProtoAny))) p =\n    Semantics.matches \\<gamma> (Match (Prot ProtoAny)) p\n 6. \\<And>m c.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (L4_Flags (TCP_Flags m c)))) p =\n       Semantics.matches \\<gamma> (Match (L4_Flags (TCP_Flags m c))) p\n 7. \\<And>ctstate.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (CT_State ctstate))) p =\n       Semantics.matches \\<gamma> (Match (CT_State ctstate)) p\n 8. \\<And>va.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (Src (IpAddr va)))) p =\n       Semantics.matches \\<gamma> (Match (Src (IpAddr va))) p\n 9. \\<And>va vc.\n       matcher_agree_on_exact_matches \\<gamma>\n        common_matcher \\<Longrightarrow>\n       Semantics.matches \\<gamma>\n        (optimize_primitive_univ (Match (Src (IpAddrNetmask va (Suc vc)))))\n        p =\n       Semantics.matches \\<gamma> (Match (Src (IpAddrNetmask va (Suc vc))))\n        p\n 10. \\<And>va vb.\n        matcher_agree_on_exact_matches \\<gamma>\n         common_matcher \\<Longrightarrow>\n        Semantics.matches \\<gamma>\n         (optimize_primitive_univ (Match (Src (IpAddrRange va vb)))) p =\n        Semantics.matches \\<gamma> (Match (Src (IpAddrRange va vb))) p\nA total of 21 subgoals...", "apply(auto elim!: matcher_agree_on_exact_matches_gammaE\n             simp add: port_range match_ifaceAny ipset_from_cidr_0 ctstate_is_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> (optimize_primitive_univ m) p =\n  Semantics.matches \\<gamma> m p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}