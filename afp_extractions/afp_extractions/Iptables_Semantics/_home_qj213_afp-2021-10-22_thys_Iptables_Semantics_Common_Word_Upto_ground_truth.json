{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Common/Word_Upto.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma word_upto_cons_front[code]:\n \"word_upto a b = word_upto' a b\"", "lemma word_upto_set_eq: \"a \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b) \\<longleftrightarrow> a \\<le> x \\<and> x \\<le> b\"", "lemma word_upto_distinct_hlp: \"a \\<le> b \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> b \\<notin> set (word_upto a (b - 1))\"", "lemma distinct_word_upto: \"a \\<le> b \\<Longrightarrow> distinct (word_upto a b)\"", "lemma word_upto_eq_upto: \"s \\<le> e \\<Longrightarrow> e \\<le> unat (max_word :: 'l word) \\<Longrightarrow>\n       word_upto ((of_nat :: nat \\<Rightarrow> ('l :: len) word) s) (of_nat e) = map of_nat (upt s (Suc e))\"", "lemma word_upto_alt: \"(a :: ('l :: len) word) \\<le> b \\<Longrightarrow>\n  word_upto a b = map of_nat (upt (unat a) (Suc (unat b)))\"", "lemma word_upto_upt:\n  \"word_upto a b = (if a \\<le> b then map of_nat (upt (unat a) (Suc (unat b))) else word_upto a b)\"", "lemma sorted_word_upto:\n  fixes a b :: \"('l :: len) word\"\n  assumes \"a \\<le> b\"\n  shows \"sorted (word_upto a b)\""], "translations": [["", "lemma word_upto_cons_front[code]:\n \"word_upto a b = word_upto' a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_upto a b = word_upto' a b", "proof(induction a b rule:word_upto'.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a \\<noteq> b \\<Longrightarrow>\n        word_upto (a + 1) b = word_upto' (a + 1) b) \\<Longrightarrow>\n       word_upto a b = word_upto' a b", "case (1 a b)"], ["proof (state)\nthis:\n  a \\<noteq> b \\<Longrightarrow> word_upto (a + 1) b = word_upto' (a + 1) b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a \\<noteq> b \\<Longrightarrow>\n        word_upto (a + 1) b = word_upto' (a + 1) b) \\<Longrightarrow>\n       word_upto a b = word_upto' a b", "have hlp1: \"a \\<noteq> b \\<Longrightarrow> a # word_upto (a + 1) b = word_upto a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> b \\<Longrightarrow> a # word_upto (a + 1) b = word_upto a b", "apply(induction a b rule:word_upto.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<noteq> b - 1\\<rbrakk>\n                \\<Longrightarrow> a # word_upto (a + 1) (b - 1) =\n                                  word_upto a (b - 1);\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) b = word_upto a b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) b = word_upto a b", "apply(subst(1) word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a #\n                         (if a + 1 = b then [a + 1]\n                          else word_upto (a + 1) (b - 1) @ [b]) =\n                         word_upto a b", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (a + 1 = b \\<longrightarrow>\n                          [a, b] = word_upto a b) \\<and>\n                         (a + 1 \\<noteq> b \\<longrightarrow>\n                          a # word_upto (a + 1) (b - 1) @ [b] =\n                          word_upto a b)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> a + 1 - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (a + 1 - 1) = word_upto a (a + 1 - 1);\n        a \\<noteq> a + 1\\<rbrakk>\n       \\<Longrightarrow> [a, a + 1] = word_upto a (a + 1)\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply(subst(1) word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> a + 1 - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (a + 1 - 1) = word_upto a (a + 1 - 1);\n        a \\<noteq> a + 1\\<rbrakk>\n       \\<Longrightarrow> [a, a + 1] =\n                         (if a = a + 1 then [a]\n                          else word_upto a (a + 1 - 1) @ [a + 1])\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. [a] = word_upto a a\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply(subst(1) word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. [a] = (if a = a then [a] else word_upto a (a - 1) @ [a])\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply (simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply(case_tac \"a \\<noteq> b - 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b; a \\<noteq> b - 1\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b; \\<not> a \\<noteq> b - 1\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b; a \\<noteq> b - 1\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b\n 2. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b; \\<not> a \\<noteq> b - 1\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply (metis Cons_eq_appendI word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> b - 1 \\<Longrightarrow>\n                a # word_upto (a + 1) (b - 1) = word_upto a (b - 1);\n        a \\<noteq> b; a + 1 \\<noteq> b; \\<not> a \\<noteq> b - 1\\<rbrakk>\n       \\<Longrightarrow> a # word_upto (a + 1) (b - 1) @ [b] = word_upto a b", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a \\<noteq> b \\<Longrightarrow> a # word_upto (a + 1) b = word_upto a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a \\<noteq> b \\<Longrightarrow>\n        word_upto (a + 1) b = word_upto' (a + 1) b) \\<Longrightarrow>\n       word_upto a b = word_upto' a b", "from 1[symmetric]"], ["proof (chain)\npicking this:\n  a \\<noteq> b \\<Longrightarrow> word_upto' (a + 1) b = word_upto (a + 1) b", "show ?case"], ["proof (prove)\nusing this:\n  a \\<noteq> b \\<Longrightarrow> word_upto' (a + 1) b = word_upto (a + 1) b\n\ngoal (1 subgoal):\n 1. word_upto a b = word_upto' a b", "apply(cases \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> word_upto a b = word_upto' a b\n 2. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> word_upto a b = word_upto' a b", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> word_upto a b = word_upto' a b", "apply(subst word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> (if a = b then [a] else word_upto a (b - 1) @ [b]) =\n                      word_upto' a b", "apply(subst word_upto'.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> (if a = b then [a] else word_upto a (b - 1) @ [b]) =\n                      (if a = b then [a] else a # word_upto' (a + 1) b)", "by(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> word_upto a b = word_upto' a b", "apply(subst word_upto'.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> b \\<Longrightarrow>\n             word_upto' (a + 1) b = word_upto (a + 1) b;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> word_upto a b =\n                      (if a = b then [a] else a # word_upto' (a + 1) b)", "by(simp add: hlp1)"], ["proof (state)\nthis:\n  word_upto a b = word_upto' a b\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Most of the lemmas I show about word_upto hold without a \\<le> b,\n   but I don't need that right now and it's giving me a headache *)"], ["", "lemma word_upto_set_eq: \"a \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b) \\<longleftrightarrow> a \\<le> x \\<and> x \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    (x \\<in> set (word_upto a b)) = (a \\<le> x \\<and> x \\<le> b)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; x \\<in> set (word_upto a b)\\<rbrakk>\n    \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\n 2. \\<lbrakk>a \\<le> b; a \\<le> x \\<and> x \\<le> b\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (word_upto a b)", "show \"a \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b) \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; x \\<in> set (word_upto a b)\\<rbrakk>\n    \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(induction a b rule: word_upto.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x \\<in> set (word_upto a b)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(case_tac \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x \\<in> set (word_upto a b); a = b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x \\<in> set (word_upto a b); a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(subst(asm) word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b;\n        x \\<in> set (if a = b then [a] else word_upto a (b - 1) @ [b]);\n        a = b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x \\<in> set (word_upto a b); a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x \\<in> set (word_upto a b); a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(subst(asm) word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b;\n        x \\<in> set (if a = b then [a] else word_upto a (b - 1) @ [b]);\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; x = b \\<or> x \\<in> set (word_upto a (b - 1));\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x = b\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "case (1 a b)"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<le> b - 1; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n  \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1\n  a \\<le> b\n  a \\<noteq> b\n  x \\<in> set (word_upto a (b - 1))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "from 1(2-3)"], ["proof (chain)\npicking this:\n  a \\<le> b\n  a \\<noteq> b", "have \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a \\<le> b\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by force"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "from 1(2,3)"], ["proof (chain)\npicking this:\n  a \\<le> b\n  a \\<noteq> b", "have \"a \\<le> b - 1\""], ["proof (prove)\nusing this:\n  a \\<le> b\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<le> b - 1", "by (simp add: word_le_minus_one_leq)"], ["proof (state)\nthis:\n  a \\<le> b - 1\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<le> b - 1;\n                 x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n                \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b - 1;\n        a \\<le> b; a \\<noteq> b; x \\<in> set (word_upto a (b - 1))\\<rbrakk>\n       \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b", "from 1(1)[OF this 1(4)]"], ["proof (chain)\npicking this:\n  a \\<le> x \\<and> x \\<le> b - 1", "show ?case"], ["proof (prove)\nusing this:\n  a \\<le> x \\<and> x \\<le> b - 1\n\ngoal (1 subgoal):\n 1. a \\<le> x \\<and> x \\<le> b", "by (metis dual_order.trans 1(2,3) less_imp_le measure_unat word_le_0_iff word_le_nat_alt)"], ["proof (state)\nthis:\n  a \\<le> x \\<and> x \\<le> b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<le> b; x \\<in> set (word_upto a b)\\<rbrakk>\n  \\<Longrightarrow> a \\<le> x \\<and> x \\<le> b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<le> x \\<and> x \\<le> b\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (word_upto a b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<le> x \\<and> x \\<le> b\\<rbrakk>\n    \\<Longrightarrow> x \\<in> set (word_upto a b)", "show \"a \\<le> x \\<and> x \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> x \\<and> x \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b)", "apply(induction a b rule: word_upto.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (word_upto a b)", "apply(case_tac \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a = b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (word_upto a b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (word_upto a b)", "apply(subst word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a = b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (if a = b then [a]\nelse word_upto a (b - 1) @ [b])\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (word_upto a b)", "apply(simp; force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (word_upto a b)", "apply(subst word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b;\n                 a \\<le> x \\<and> x \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (if a = b then [a]\nelse word_upto a (b - 1) @ [b])", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "apply(case_tac \"x = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x = b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))\n 2. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "proof(goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "case (1 a b)"], ["proof (state)\nthis:\n  x \\<le> b - 1 \\<Longrightarrow> x \\<in> set (word_upto a (b - 1))\n  a \\<le> x \\<and> x \\<le> b\n  a \\<noteq> b\n  x \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "from 1(2-4)"], ["proof (chain)\npicking this:\n  a \\<le> x \\<and> x \\<le> b\n  a \\<noteq> b\n  x \\<noteq> b", "have \"b \\<noteq> 0\""], ["proof (prove)\nusing this:\n  a \\<le> x \\<and> x \\<le> b\n  a \\<noteq> b\n  x \\<noteq> b\n\ngoal (1 subgoal):\n 1. b \\<noteq> 0", "by force"], ["proof (state)\nthis:\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "from 1(2,4)"], ["proof (chain)\npicking this:\n  a \\<le> x \\<and> x \\<le> b\n  x \\<noteq> b", "have \"x \\<le> b - 1\""], ["proof (prove)\nusing this:\n  a \\<le> x \\<and> x \\<le> b\n  x \\<noteq> b\n\ngoal (1 subgoal):\n 1. x \\<le> b - 1", "using le_step_down_word"], ["proof (prove)\nusing this:\n  a \\<le> x \\<and> x \\<le> b\n  x \\<noteq> b\n  \\<lbrakk>?i \\<le> ?n; ?i = ?n \\<longrightarrow> ?P;\n   ?i \\<le> ?n - 1 \\<longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<le> b - 1", "by auto"], ["proof (state)\nthis:\n  x \\<le> b - 1\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x \\<le> b - 1 \\<Longrightarrow>\n                x \\<in> set (word_upto a (b - 1));\n        a \\<le> x \\<and> x \\<le> b; a \\<noteq> b; x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> x = b \\<or> x \\<in> set (word_upto a (b - 1))", "from 1(1) this"], ["proof (chain)\npicking this:\n  x \\<le> b - 1 \\<Longrightarrow> x \\<in> set (word_upto a (b - 1))\n  x \\<le> b - 1", "show ?case"], ["proof (prove)\nusing this:\n  x \\<le> b - 1 \\<Longrightarrow> x \\<in> set (word_upto a (b - 1))\n  x \\<le> b - 1\n\ngoal (1 subgoal):\n 1. x = b \\<or> x \\<in> set (word_upto a (b - 1))", "by simp"], ["proof (state)\nthis:\n  x = b \\<or> x \\<in> set (word_upto a (b - 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<le> x \\<and> x \\<le> b \\<Longrightarrow> x \\<in> set (word_upto a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma word_upto_distinct_hlp: \"a \\<le> b \\<Longrightarrow> a \\<noteq> b \\<Longrightarrow> b \\<notin> set (word_upto a (b - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> set (word_upto a (b - 1))", "apply(rule ccontr, unfold not_not)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subgoal_tac \"a \\<le> b - 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b - 1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply(drule iffD1[OF word_upto_set_eq[of a \"b -1\" b]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> b \\<in> set (word_upto a (b - 1))\n 2. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b \\<and> b \\<le> b - 1\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply(simp add: word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b \\<and> b \\<le> b - 1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply(subgoal_tac \"b \\<noteq> 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b \\<and> b \\<le> b - 1; b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b \\<and> b \\<le> b - 1\\<rbrakk>\n    \\<Longrightarrow> b \\<noteq> 0\n 3. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply(meson leD measure_unat word_le_nat_alt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b; b \\<in> set (word_upto a (b - 1));\n     a \\<le> b \\<and> b \\<le> b - 1\\<rbrakk>\n    \\<Longrightarrow> b \\<noteq> 0\n 2. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply(blast intro: iffD1[OF word_le_0_iff])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "using le_step_down_word"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<le> ?n; ?i = ?n \\<longrightarrow> ?P;\n   ?i \\<le> ?n - 1 \\<longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; a \\<noteq> b;\n     b \\<in> set (word_upto a (b - 1))\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b - 1", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma distinct_word_upto: \"a \\<le> b \\<Longrightarrow> distinct (word_upto a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> distinct (word_upto a b)", "apply(induction a b rule: word_upto.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a b)", "apply(case_tac \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a = b\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a b)", "apply(subst word_upto.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a = b\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a b)", "apply(simp; force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a b)", "apply(subst word_upto.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])", "apply(case_tac \"a \\<le> b - 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b; \\<not> a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>distinct (word_upto a (b - 1)); a \\<le> b; a \\<noteq> b;\n        a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> b \\<notin> set (word_upto a (b - 1))\n 2. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b; \\<not> a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])", "apply(rule word_upto_distinct_hlp; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<lbrakk>a \\<noteq> b; a \\<le> b - 1\\<rbrakk>\n                \\<Longrightarrow> distinct (word_upto a (b - 1));\n        a \\<le> b; a \\<noteq> b; \\<not> a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (if a = b then [a] else word_upto a (b - 1) @ [b])", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<le> b; a \\<noteq> b; \\<not> a \\<le> b - 1\\<rbrakk>\n       \\<Longrightarrow> distinct (word_upto a (b - 1)) \\<and>\n                         b \\<notin> set (word_upto a (b - 1))", "apply(rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<le> b; a \\<noteq> b; \\<not> a \\<le> b - 1;\n        \\<not> (distinct (word_upto a (b - 1)) \\<and>\n                b \\<notin> set (word_upto a (b - 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: not_le antisym word_minus_one_le_leq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma word_upto_eq_upto: \"s \\<le> e \\<Longrightarrow> e \\<le> unat (max_word :: 'l word) \\<Longrightarrow>\n       word_upto ((of_nat :: nat \\<Rightarrow> ('l :: len) word) s) (of_nat e) = map of_nat (upt s (Suc e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat e) =\n                      map word_of_nat [s..<Suc e]", "proof(induction e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<le> 0; 0 \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat 0) =\n                      map word_of_nat [s..<Suc 0]\n 2. \\<And>e.\n       \\<lbrakk>\\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n                \\<Longrightarrow> word_upto (word_of_nat s)\n                                   (word_of_nat e) =\n                                  map word_of_nat [s..<Suc e];\n        s \\<le> Suc e; Suc e \\<le> unat (- 1)\\<rbrakk>\n       \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n                         map word_of_nat [s..<Suc (Suc e)]", "let ?mwon = \"of_nat :: nat \\<Rightarrow> 'l word\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<le> 0; 0 \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat 0) =\n                      map word_of_nat [s..<Suc 0]\n 2. \\<And>e.\n       \\<lbrakk>\\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n                \\<Longrightarrow> word_upto (word_of_nat s)\n                                   (word_of_nat e) =\n                                  map word_of_nat [s..<Suc e];\n        s \\<le> Suc e; Suc e \\<le> unat (- 1)\\<rbrakk>\n       \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n                         map word_of_nat [s..<Suc (Suc e)]", "let ?mmw = \"max_word :: 'l word\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<le> 0; 0 \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat 0) =\n                      map word_of_nat [s..<Suc 0]\n 2. \\<And>e.\n       \\<lbrakk>\\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n                \\<Longrightarrow> word_upto (word_of_nat s)\n                                   (word_of_nat e) =\n                                  map word_of_nat [s..<Suc e];\n        s \\<le> Suc e; Suc e \\<le> unat (- 1)\\<rbrakk>\n       \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n                         map word_of_nat [s..<Suc (Suc e)]", "case (Suc e)"], ["proof (state)\nthis:\n  \\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n  \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat e) =\n                    map word_of_nat [s..<Suc e]\n  s \\<le> Suc e\n  Suc e \\<le> unat (- 1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<le> 0; 0 \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat 0) =\n                      map word_of_nat [s..<Suc 0]\n 2. \\<And>e.\n       \\<lbrakk>\\<lbrakk>s \\<le> e; e \\<le> unat (- 1)\\<rbrakk>\n                \\<Longrightarrow> word_upto (word_of_nat s)\n                                   (word_of_nat e) =\n                                  map word_of_nat [s..<Suc e];\n        s \\<le> Suc e; Suc e \\<le> unat (- 1)\\<rbrakk>\n       \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n                         map word_of_nat [s..<Suc (Suc e)]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "proof(cases \"?mwon s = ?mwon (Suc e)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. word_of_nat s = word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]\n 2. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "case True"], ["proof (state)\nthis:\n  word_of_nat s = word_of_nat (Suc e)\n\ngoal (2 subgoals):\n 1. word_of_nat s = word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]\n 2. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "have \"s = Suc e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Suc e", "using le_unat_uoi Suc.prems True"], ["proof (prove)\nusing this:\n  ?y \\<le> unat ?z \\<Longrightarrow> unat (word_of_nat ?y) = ?y\n  s \\<le> Suc e\n  Suc e \\<le> unat (- 1)\n  word_of_nat s = word_of_nat (Suc e)\n\ngoal (1 subgoal):\n 1. s = Suc e", "by metis"], ["proof (state)\nthis:\n  s = Suc e\n\ngoal (2 subgoals):\n 1. word_of_nat s = word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]\n 2. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "with True"], ["proof (chain)\npicking this:\n  word_of_nat s = word_of_nat (Suc e)\n  s = Suc e", "show ?thesis"], ["proof (prove)\nusing this:\n  word_of_nat s = word_of_nat (Suc e)\n  s = Suc e\n\ngoal (1 subgoal):\n 1. word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "by(subst word_upto.simps) (simp)"], ["proof (state)\nthis:\n  word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n  map word_of_nat [s..<Suc (Suc e)]\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "case False"], ["proof (state)\nthis:\n  word_of_nat s \\<noteq> word_of_nat (Suc e)\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "hence le: \"s \\<le> e\""], ["proof (prove)\nusing this:\n  word_of_nat s \\<noteq> word_of_nat (Suc e)\n\ngoal (1 subgoal):\n 1. s \\<le> e", "using le_SucE Suc.prems"], ["proof (prove)\nusing this:\n  word_of_nat s \\<noteq> word_of_nat (Suc e)\n  \\<lbrakk>?m \\<le> Suc ?n; ?m \\<le> ?n \\<Longrightarrow> ?R;\n   ?m = Suc ?n \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  s \\<le> Suc e\n  Suc e \\<le> unat (- 1)\n\ngoal (1 subgoal):\n 1. s \\<le> e", "by blast"], ["proof (state)\nthis:\n  s \\<le> e\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "have lm: \"e \\<le> unat ?mmw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<le> unat (- 1)", "using Suc.prems"], ["proof (prove)\nusing this:\n  s \\<le> Suc e\n  Suc e \\<le> unat (- 1)\n\ngoal (1 subgoal):\n 1. e \\<le> unat (- 1)", "by simp"], ["proof (state)\nthis:\n  e \\<le> unat (- 1)\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "have sucm: \"(of_nat :: nat \\<Rightarrow> ('l :: len) word) (Suc e) - 1 = of_nat e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_of_nat (Suc e) - 1 = word_of_nat e", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  Suc e \\<le> unat (- 1)\n\ngoal (1 subgoal):\n 1. word_of_nat (Suc e) - 1 = word_of_nat e", "by simp"], ["proof (state)\nthis:\n  word_of_nat (Suc e) - 1 = word_of_nat e\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "note mIH = Suc.IH[OF le lm]"], ["proof (state)\nthis:\n  word_upto (word_of_nat s) (word_of_nat e) = map word_of_nat [s..<Suc e]\n\ngoal (1 subgoal):\n 1. word_of_nat s \\<noteq> word_of_nat (Suc e) \\<Longrightarrow>\n    word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n    map word_of_nat [s..<Suc (Suc e)]", "by(subst word_upto.simps) (simp add: False[simplified] Suc.prems mIH sucm)"], ["proof (state)\nthis:\n  word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n  map word_of_nat [s..<Suc (Suc e)]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  word_upto (word_of_nat s) (word_of_nat (Suc e)) =\n  map word_of_nat [s..<Suc (Suc e)]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<le> 0; 0 \\<le> unat (- 1)\\<rbrakk>\n    \\<Longrightarrow> word_upto (word_of_nat s) (word_of_nat 0) =\n                      map word_of_nat [s..<Suc 0]", "qed(simp add: word_upto.simps)"], ["", "lemma word_upto_alt: \"(a :: ('l :: len) word) \\<le> b \\<Longrightarrow>\n  word_upto a b = map of_nat (upt (unat a) (Suc (unat b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "let ?mmw = \"max_word :: 'l word\""], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "assume le: \"a \\<le> b\""], ["proof (state)\nthis:\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "hence nle: \"unat a \\<le> unat b\""], ["proof (prove)\nusing this:\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. unat a \\<le> unat b", "by(unat_arith)"], ["proof (state)\nthis:\n  unat a \\<le> unat b\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "have lem: \"unat b \\<le> unat ?mmw\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unat b \\<le> unat (- 1)", "by (simp add: word_unat_less_le)"], ["proof (state)\nthis:\n  unat b \\<le> unat (- 1)\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "note word_upto_eq_upto[OF nle lem, unfolded word_unat.Rep_inverse]"], ["proof (state)\nthis:\n  word_upto a b = map word_of_nat [unat a..<Suc (unat b)]\n\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow>\n    word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "thus \"word_upto a b = map of_nat [unat a..<Suc (unat b)]\""], ["proof (prove)\nusing this:\n  word_upto a b = map word_of_nat [unat a..<Suc (unat b)]\n\ngoal (1 subgoal):\n 1. word_upto a b = map word_of_nat [unat a..<Suc (unat b)]", "."], ["proof (state)\nthis:\n  word_upto a b = map word_of_nat [unat a..<Suc (unat b)]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma word_upto_upt:\n  \"word_upto a b = (if a \\<le> b then map of_nat (upt (unat a) (Suc (unat b))) else word_upto a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_upto a b =\n    (if a \\<le> b then map word_of_nat [unat a..<Suc (unat b)]\n     else word_upto a b)", "using word_upto_alt"], ["proof (prove)\nusing this:\n  ?a \\<le> ?b \\<Longrightarrow>\n  word_upto ?a ?b = map word_of_nat [unat ?a..<Suc (unat ?b)]\n\ngoal (1 subgoal):\n 1. word_upto a b =\n    (if a \\<le> b then map word_of_nat [unat a..<Suc (unat b)]\n     else word_upto a b)", "by metis"], ["", "lemma sorted_word_upto:\n  fixes a b :: \"('l :: len) word\"\n  assumes \"a \\<le> b\"\n  shows \"sorted (word_upto a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "define m and n where \\<open>m = unat a\\<close> and \\<open>n = Suc (unat b)\\<close>"], ["proof (state)\nthis:\n  m = unat a\n  n = Suc (unat b)\n\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "moreover"], ["proof (state)\nthis:\n  m = unat a\n  n = Suc (unat b)\n\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "have \\<open>sorted (map of_nat [m..<n] :: 'l word list)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted (map word_of_nat [m..<n])", "apply (simp add: sorted_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>x y. word_of_nat x \\<le> word_of_nat y) [m..<n]", "apply (rule sorted_wrt_mono_rel [of _ \\<open>(\\<le>)\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set [m..<n]; y \\<in> set [m..<n]; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> word_of_nat x \\<le> word_of_nat y\n 2. sorted_wrt (\\<le>) [m..<n]", "apply (simp_all flip: sorted_sorted_wrt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>m \\<le> x; y < n; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> word_of_nat x \\<le> word_of_nat y", "apply (simp add: le_unat_uoi less_Suc_eq_le n_def word_of_nat_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>m \\<le> x; y \\<le> unat b; x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> word_of_nat x \\<le> word_of_nat y", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> (nat \\<circ> take_bit LENGTH('l)) b;\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> take_bit LENGTH('l) (int x)\n                         \\<le> take_bit LENGTH('l) (int y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> nat (take_bit LENGTH('l) b);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> take_bit LENGTH('l) (int x)\n                         \\<le> take_bit LENGTH('l) (int y)", "apply (subst take_bit_int_eq_self)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> nat (take_bit LENGTH('l) b);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> int x\n 2. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> nat (take_bit LENGTH('l) b);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> int x < 2 ^ LENGTH('l)\n 3. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> nat (take_bit LENGTH('l) b);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> int x \\<le> take_bit LENGTH('l) (int y)", "apply (simp_all add: le_less_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y m b.\n       \\<lbrakk>m \\<le> x; y \\<le> nat (take_bit LENGTH('l) b);\n        x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> int x \\<le> take_bit LENGTH('l) (int y)", "apply (metis le_unat_uoi of_int_of_nat_eq of_nat_mono uint_word_of_int_eq unat_eq_nat_uint unsigned_of_int)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sorted (map word_of_nat [m..<n])\n\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "ultimately"], ["proof (chain)\npicking this:\n  m = unat a\n  n = Suc (unat b)\n  sorted (map word_of_nat [m..<n])", "have \\<open>sorted (map of_nat [unat a..<Suc (unat b)] :: 'l word list)\\<close>"], ["proof (prove)\nusing this:\n  m = unat a\n  n = Suc (unat b)\n  sorted (map word_of_nat [m..<n])\n\ngoal (1 subgoal):\n 1. sorted (map word_of_nat [unat a..<Suc (unat b)])", "by simp"], ["proof (state)\nthis:\n  sorted (map word_of_nat [unat a..<Suc (unat b)])\n\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "with assms"], ["proof (chain)\npicking this:\n  a \\<le> b\n  sorted (map word_of_nat [unat a..<Suc (unat b)])", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<le> b\n  sorted (map word_of_nat [unat a..<Suc (unat b)])\n\ngoal (1 subgoal):\n 1. sorted (word_upto a b)", "by (simp only: word_upto_alt)"], ["proof (state)\nthis:\n  sorted (word_upto a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}