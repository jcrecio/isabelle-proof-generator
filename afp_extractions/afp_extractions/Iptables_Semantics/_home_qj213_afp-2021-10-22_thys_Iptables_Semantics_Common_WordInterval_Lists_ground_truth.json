{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Common/WordInterval_Lists.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma l2wi_negation_type_union: \"wordinterval_to_set (l2wi_negation_type_union l) = \n                      (\\<Union> (i,j) \\<in> set (getPos l). {i .. j}) \\<union> (\\<Union> (i,j) \\<in> set (getNeg l). - {i .. j})\"", "lemma l2wi_intersect: \"wordinterval_to_set (l2wi_intersect l) = (\\<Inter> (i,j) \\<in> set l. {i .. j})\"", "lemma l2wi_negation_type_intersect_alt: \"wordinterval_to_set (l2wi_negation_type_intersect l) = \n                wordinterval_to_set (wordinterval_setminus (l2wi_intersect (getPos l)) (l2wi (getNeg l)))\"", "lemma l2wi_negation_type_intersect: \"wordinterval_to_set (l2wi_negation_type_intersect l) = \n                      (\\<Inter> (i,j) \\<in> set (getPos l). {i .. j}) - (\\<Union> (i,j) \\<in> set (getNeg l). {i .. j})\""], "translations": [["", "lemma l2wi_negation_type_union: \"wordinterval_to_set (l2wi_negation_type_union l) = \n                      (\\<Union> (i,j) \\<in> set (getPos l). {i .. j}) \\<union> (\\<Union> (i,j) \\<in> set (getNeg l). - {i .. j})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_negation_type_union l) =\n    (\\<Union>(i, j)\\<in>set (getPos l). {i..j}) \\<union>\n    (\\<Union>(i, j)\\<in>set (getNeg l). - {i..j})", "apply(simp add: l2wi)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_negation_type_union l) =\n    (\\<Union>x\\<in>set (getPos l).\n        case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n    (\\<Union>x\\<in>set (getNeg l). case x of (i, j) \\<Rightarrow> - {i..j})", "apply(induction l rule: l2wi_negation_type_union.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wordinterval_to_set (l2wi_negation_type_union []) =\n    (\\<Union>x\\<in>set (getPos []).\n        case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n    (\\<Union>x\\<in>set (getNeg []). case x of (i, j) \\<Rightarrow> - {i..j})\n 2. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_union ls) =\n       (\\<Union>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> - {i..j}) \\<Longrightarrow>\n       wordinterval_to_set (l2wi_negation_type_union (Pos (s, e) # ls)) =\n       (\\<Union>x\\<in>set (getPos (Pos (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg (Pos (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> - {i..j})\n 3. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_union ls) =\n       (\\<Union>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> - {i..j}) \\<Longrightarrow>\n       wordinterval_to_set (l2wi_negation_type_union (Neg (s, e) # ls)) =\n       (\\<Union>x\\<in>set (getPos (Neg (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg (Neg (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> - {i..j})", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_union ls) =\n       (\\<Union>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> - {i..j}) \\<Longrightarrow>\n       {s..e} \\<union>\n       ((\\<Union>x\\<in>set (getPos ls).\n            case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n        (\\<Union>x\\<in>set (getNeg ls).\n            case x of (i, j) \\<Rightarrow> - {i..j})) =\n       {s..e} \\<union> (\\<Union>(x, y)\\<in>set (getPos ls). {x..y}) \\<union>\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> - {i..j})\n 2. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_union ls) =\n       (\\<Union>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> - {i..j}) \\<Longrightarrow>\n       UNIV - {s..e} \\<union>\n       ((\\<Union>x\\<in>set (getPos ls).\n            case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n        (\\<Union>x\\<in>set (getNeg ls).\n            case x of (i, j) \\<Rightarrow> - {i..j})) =\n       (\\<Union>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<union>\n       (- {s..e} \\<union> (\\<Union>(i, j)\\<in>set (getNeg ls). - {i..j}))", "apply fast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition l2wi_intersect :: \"('a::len word \\<times> 'a::len word) list \\<Rightarrow> 'a::len wordinterval\" where\n  \"l2wi_intersect = foldl (\\<lambda> acc (s,e). wordinterval_intersection (WordInterval s e) acc) wordinterval_UNIV\""], ["", "lemma l2wi_intersect: \"wordinterval_to_set (l2wi_intersect l) = (\\<Inter> (i,j) \\<in> set l. {i .. j})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "fix U \\<comment> \\<open>@{const wordinterval_UNIV} generalized\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "have \"wordinterval_to_set (foldl (\\<lambda>acc (s, e). wordinterval_intersection (WordInterval s e) acc) U l) = (wordinterval_to_set U) \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set\n     (foldl\n       (\\<lambda>acc (s, e).\n           wordinterval_intersection (WordInterval s e) acc)\n       U l) =\n    wordinterval_to_set U \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})", "apply(induction l arbitrary: U)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>U.\n       wordinterval_to_set\n        (foldl\n          (\\<lambda>acc (s, e).\n              wordinterval_intersection (WordInterval s e) acc)\n          U []) =\n       wordinterval_to_set U \\<inter> (\\<Inter>(x, y)\\<in>set []. {x..y})\n 2. \\<And>a l U.\n       (\\<And>U.\n           wordinterval_to_set\n            (foldl\n              (\\<lambda>acc (s, e).\n                  wordinterval_intersection (WordInterval s e) acc)\n              U l) =\n           wordinterval_to_set U \\<inter>\n           (\\<Inter>(x, y)\\<in>set l. {x..y})) \\<Longrightarrow>\n       wordinterval_to_set\n        (foldl\n          (\\<lambda>acc (s, e).\n              wordinterval_intersection (WordInterval s e) acc)\n          U (a # l)) =\n       wordinterval_to_set U \\<inter>\n       (\\<Inter>(x, y)\\<in>set (a # l). {x..y})", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l U.\n       (\\<And>U.\n           wordinterval_to_set\n            (foldl\n              (\\<lambda>acc (s, e).\n                  wordinterval_intersection (WordInterval s e) acc)\n              U l) =\n           wordinterval_to_set U \\<inter>\n           (\\<Inter>(x, y)\\<in>set l. {x..y})) \\<Longrightarrow>\n       wordinterval_to_set\n        (foldl\n          (\\<lambda>acc (s, e).\n              wordinterval_intersection (WordInterval s e) acc)\n          U (a # l)) =\n       wordinterval_to_set U \\<inter>\n       (\\<Inter>(x, y)\\<in>set (a # l). {x..y})", "by force"], ["proof (state)\nthis:\n  wordinterval_to_set\n   (foldl\n     (\\<lambda>acc (s, e). wordinterval_intersection (WordInterval s e) acc)\n     U l) =\n  wordinterval_to_set U \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})\n\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "}"], ["proof (state)\nthis:\n  wordinterval_to_set\n   (foldl\n     (\\<lambda>acc (s, e). wordinterval_intersection (WordInterval s e) acc)\n     ?U2 l) =\n  wordinterval_to_set ?U2 \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})\n\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "thus ?thesis"], ["proof (prove)\nusing this:\n  wordinterval_to_set\n   (foldl\n     (\\<lambda>acc (s, e). wordinterval_intersection (WordInterval s e) acc)\n     ?U2 l) =\n  wordinterval_to_set ?U2 \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})\n\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_intersect l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "unfolding l2wi_intersect_def"], ["proof (prove)\nusing this:\n  wordinterval_to_set\n   (foldl\n     (\\<lambda>acc (s, e). wordinterval_intersection (WordInterval s e) acc)\n     ?U2 l) =\n  wordinterval_to_set ?U2 \\<inter> (\\<Inter>(i, j)\\<in>set l. {i..j})\n\ngoal (1 subgoal):\n 1. wordinterval_to_set\n     (foldl\n       (\\<lambda>acc (s, e).\n           wordinterval_intersection (WordInterval s e) acc)\n       wordinterval_UNIV l) =\n    (\\<Inter>(i, j)\\<in>set l. {i..j})", "by simp"], ["proof (state)\nthis:\n  wordinterval_to_set (l2wi_intersect l) =\n  (\\<Inter>(i, j)\\<in>set l. {i..j})\n\ngoal:\nNo subgoals!", "qed"], ["", "fun l2wi_negation_type_intersect :: \"('a::len word \\<times> 'a::len word) negation_type list \\<Rightarrow> 'a::len wordinterval\" where\n  \"l2wi_negation_type_intersect [] = wordinterval_UNIV\" |\n  \"l2wi_negation_type_intersect ((Pos (s,e))#ls) = wordinterval_intersection (WordInterval s e) (l2wi_negation_type_intersect ls)\" |\n  \"l2wi_negation_type_intersect ((Neg (s,e))#ls) = wordinterval_intersection (wordinterval_invert (WordInterval s e)) (l2wi_negation_type_intersect ls)\""], ["", "lemma l2wi_negation_type_intersect_alt: \"wordinterval_to_set (l2wi_negation_type_intersect l) = \n                wordinterval_to_set (wordinterval_setminus (l2wi_intersect (getPos l)) (l2wi (getNeg l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_negation_type_intersect l) =\n    wordinterval_to_set\n     (wordinterval_setminus (l2wi_intersect (getPos l)) (l2wi (getNeg l)))", "apply(simp add: l2wi_intersect l2wi)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_negation_type_intersect l) =\n    (\\<Inter>x\\<in>set (getPos l). case x of (i, j) \\<Rightarrow> {i..j}) -\n    (\\<Union>x\\<in>set (getNeg l). case x of (i, j) \\<Rightarrow> {i..j})", "apply(induction l rule :l2wi_negation_type_intersect.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wordinterval_to_set (l2wi_negation_type_intersect []) =\n    (\\<Inter>x\\<in>set (getPos []). case x of (i, j) \\<Rightarrow> {i..j}) -\n    (\\<Union>x\\<in>set (getNeg []). case x of (i, j) \\<Rightarrow> {i..j})\n 2. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_intersect ls) =\n       (\\<Inter>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<Longrightarrow>\n       wordinterval_to_set\n        (l2wi_negation_type_intersect (Pos (s, e) # ls)) =\n       (\\<Inter>x\\<in>set (getPos (Pos (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg (Pos (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j})\n 3. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_intersect ls) =\n       (\\<Inter>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<Longrightarrow>\n       wordinterval_to_set\n        (l2wi_negation_type_intersect (Neg (s, e) # ls)) =\n       (\\<Inter>x\\<in>set (getPos (Neg (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg (Neg (s, e) # ls)).\n           case x of (i, j) \\<Rightarrow> {i..j})", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_intersect ls) =\n       (\\<Inter>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<Longrightarrow>\n       {s..e} \\<inter>\n       ((\\<Inter>x\\<in>set (getPos ls).\n            case x of (i, j) \\<Rightarrow> {i..j}) -\n        (\\<Union>x\\<in>set (getNeg ls).\n            case x of (i, j) \\<Rightarrow> {i..j})) =\n       {s..e} \\<inter> (\\<Inter>(x, y)\\<in>set (getPos ls). {x..y}) -\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> {i..j})\n 2. \\<And>s e ls.\n       wordinterval_to_set (l2wi_negation_type_intersect ls) =\n       (\\<Inter>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       (\\<Union>x\\<in>set (getNeg ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) \\<Longrightarrow>\n       (UNIV - {s..e}) \\<inter>\n       ((\\<Inter>x\\<in>set (getPos ls).\n            case x of (i, j) \\<Rightarrow> {i..j}) -\n        (\\<Union>x\\<in>set (getNeg ls).\n            case x of (i, j) \\<Rightarrow> {i..j})) =\n       (\\<Inter>x\\<in>set (getPos ls).\n           case x of (i, j) \\<Rightarrow> {i..j}) -\n       ({s..e} \\<union> (\\<Union>(x, y)\\<in>set (getNeg ls). {x..y}))", "apply(fast)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l2wi_negation_type_intersect: \"wordinterval_to_set (l2wi_negation_type_intersect l) = \n                      (\\<Inter> (i,j) \\<in> set (getPos l). {i .. j}) - (\\<Union> (i,j) \\<in> set (getNeg l). {i .. j})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wordinterval_to_set (l2wi_negation_type_intersect l) =\n    (\\<Inter>(i, j)\\<in>set (getPos l). {i..j}) -\n    (\\<Union>(i, j)\\<in>set (getNeg l). {i..j})", "by(simp add: l2wi_negation_type_intersect_alt l2wi_intersect l2wi)"], ["", "end"]]}