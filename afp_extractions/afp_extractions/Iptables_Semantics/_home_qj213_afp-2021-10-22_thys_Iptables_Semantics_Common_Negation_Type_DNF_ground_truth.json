{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Common/Negation_Type_DNF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma dnf_True: \"dnf_to_bool f dnf_True\"", "lemma dnf_False: \"\\<not> dnf_to_bool f dnf_False\"", "lemma cnf_to_bool_append: \"cnf_to_bool \\<gamma> (a1 @ a2) \\<longleftrightarrow> cnf_to_bool \\<gamma> a1 \\<and> cnf_to_bool \\<gamma> a2\"", "lemma dnf_to_bool_append: \"dnf_to_bool \\<gamma> (a1 @ a2) \\<longleftrightarrow> dnf_to_bool \\<gamma> a1 \\<or> dnf_to_bool \\<gamma> a2\"", "lemma cnf_to_bool_set: \"cnf_to_bool f cnf \\<longleftrightarrow> (\\<forall> c \\<in> set cnf. (case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a))\"", "lemma dnf_to_bool_set: \"dnf_to_bool \\<gamma> dnf \\<longleftrightarrow> (\\<exists> d \\<in> set dnf. cnf_to_bool \\<gamma> d)\"", "lemma dnf_to_bool_seteq: \"set ` set d1 = set ` set d2 \\<Longrightarrow> dnf_to_bool \\<gamma> d1 \\<longleftrightarrow> dnf_to_bool \\<gamma> d2\"", "lemma dnf_and_correct: \"dnf_to_bool \\<gamma> (dnf_and d1 d2) \\<longleftrightarrow> dnf_to_bool \\<gamma> d1 \\<and> dnf_to_bool \\<gamma> d2\"", "lemma dnf_and_symmetric: \"dnf_to_bool \\<gamma> (dnf_and d1 d2) \\<longleftrightarrow> dnf_to_bool \\<gamma> (dnf_and d2 d1)\"", "lemma \"(\\<not> ((a1 \\<and> a2) \\<or> b \\<or> c)) = ((\\<not>a1 \\<and> \\<not> b \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b \\<and> \\<not> c))\"", "lemma \"(\\<not> ((a1 \\<and> a2) \\<or> (b1 \\<and> b2) \\<or> c)) = ((\\<not>a1 \\<and> \\<not> b1 \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b1 \\<and> \\<not> c) \\<or> (\\<not>a1 \\<and> \\<not> b2 \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b2 \\<and> \\<not> c))\"", "lemma \"listprepend [a,b] [as, bs] = [a#as, a#bs, b#as, b#bs]\"", "lemma map_a_and: \"dnf_to_bool \\<gamma> (map ((#) a) ds) \\<longleftrightarrow> dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds\"", "lemma \"\\<not> dnf_to_bool \\<gamma> (listprepend [] ds)\"", "lemma \"dnf_to_bool \\<gamma> (listprepend [a] ds) \\<longleftrightarrow> dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds\"", "lemma \"dnf_to_bool \\<gamma> (listprepend [a, b] ds) \\<longleftrightarrow> (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds) \\<or> (dnf_to_bool \\<gamma> [[b]] \\<and> dnf_to_bool \\<gamma> ds)\"", "lemma listprepend_correct: \"dnf_to_bool \\<gamma> (listprepend as ds) \\<longleftrightarrow> (\\<exists>a\\<in> set as. dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)\"", "lemma listprepend_correct': \"dnf_to_bool \\<gamma> (listprepend as ds) \\<longleftrightarrow> (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and> dnf_to_bool \\<gamma> ds)\"", "lemma cnf_invert_singelton: \"cnf_to_bool \\<gamma> [invert a] \\<longleftrightarrow> \\<not> cnf_to_bool \\<gamma> [a]\"", "lemma cnf_singleton_false: \"(\\<exists>a'\\<in>set as. \\<not> cnf_to_bool \\<gamma> [a']) \\<longleftrightarrow> \\<not> cnf_to_bool \\<gamma> as\"", "lemma dnf_not: \"dnf_to_bool \\<gamma> (dnf_not d) \\<longleftrightarrow> \\<not> dnf_to_bool \\<gamma> d\"", "lemma \"dnf_to_bool f (optimize_dfn dnf) = dnf_to_bool f dnf\""], "translations": [["", "lemma dnf_True: \"dnf_to_bool f dnf_True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool f dnf_True", "unfolding dnf_True_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool f [[]]", "by(simp)"], ["", "text\\<open>representing @{const False}\\<close>"], ["", "definition dnf_False :: \"'a dnf\" where\n  \"dnf_False \\<equiv> []\""], ["", "lemma dnf_False: \"\\<not> dnf_to_bool f dnf_False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dnf_to_bool f dnf_False", "unfolding dnf_False_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dnf_to_bool f []", "by(simp)"], ["", "lemma cnf_to_bool_append: \"cnf_to_bool \\<gamma> (a1 @ a2) \\<longleftrightarrow> cnf_to_bool \\<gamma> a1 \\<and> cnf_to_bool \\<gamma> a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnf_to_bool \\<gamma> (a1 @ a2) =\n    (cnf_to_bool \\<gamma> a1 \\<and> cnf_to_bool \\<gamma> a2)", "by(induction \\<gamma> a1 rule: cnf_to_bool.induct) (simp_all)"], ["", "lemma dnf_to_bool_append: \"dnf_to_bool \\<gamma> (a1 @ a2) \\<longleftrightarrow> dnf_to_bool \\<gamma> a1 \\<or> dnf_to_bool \\<gamma> a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (a1 @ a2) =\n    (dnf_to_bool \\<gamma> a1 \\<or> dnf_to_bool \\<gamma> a2)", "by(induction a1) (simp_all)"], ["", "definition dnf_and :: \"'a dnf \\<Rightarrow> 'a dnf \\<Rightarrow> 'a dnf\" where\n  \"dnf_and cnf1 cnf2 = [andlist1 @ andlist2. andlist1 <- cnf1, andlist2 <- cnf2]\""], ["", "value \"dnf_and ([[a,b], [c,d]]) ([[v,w], [x,y]])\""], ["", "lemma cnf_to_bool_set: \"cnf_to_bool f cnf \\<longleftrightarrow> (\\<forall> c \\<in> set cnf. (case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnf_to_bool f cnf =\n    (\\<forall>c\\<in>set cnf.\n        case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)", "proof(induction cnf)"], ["proof (state)\ngoal (2 subgoals):\n 1. cnf_to_bool f [] =\n    (\\<forall>c\\<in>set [].\n        case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n 2. \\<And>a cnf.\n       cnf_to_bool f cnf =\n       (\\<forall>c\\<in>set cnf.\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a) \\<Longrightarrow>\n       cnf_to_bool f (a # cnf) =\n       (\\<forall>c\\<in>set (a # cnf).\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. cnf_to_bool f [] =\n    (\\<forall>c\\<in>set [].\n        case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n 2. \\<And>a cnf.\n       cnf_to_bool f cnf =\n       (\\<forall>c\\<in>set cnf.\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a) \\<Longrightarrow>\n       cnf_to_bool f (a # cnf) =\n       (\\<forall>c\\<in>set (a # cnf).\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. cnf_to_bool f [] =\n    (\\<forall>c\\<in>set [].\n        case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)", "by simp"], ["proof (state)\nthis:\n  cnf_to_bool f [] =\n  (\\<forall>c\\<in>set [].\n      case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n\ngoal (1 subgoal):\n 1. \\<And>a cnf.\n       cnf_to_bool f cnf =\n       (\\<forall>c\\<in>set cnf.\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a) \\<Longrightarrow>\n       cnf_to_bool f (a # cnf) =\n       (\\<forall>c\\<in>set (a # cnf).\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a cnf.\n       cnf_to_bool f cnf =\n       (\\<forall>c\\<in>set cnf.\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a) \\<Longrightarrow>\n       cnf_to_bool f (a # cnf) =\n       (\\<forall>c\\<in>set (a # cnf).\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a)", "case Cons"], ["proof (state)\nthis:\n  cnf_to_bool f cnf_ =\n  (\\<forall>c\\<in>set cnf_.\n      case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n\ngoal (1 subgoal):\n 1. \\<And>a cnf.\n       cnf_to_bool f cnf =\n       (\\<forall>c\\<in>set cnf.\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a) \\<Longrightarrow>\n       cnf_to_bool f (a # cnf) =\n       (\\<forall>c\\<in>set (a # cnf).\n           case c of Pos a \\<Rightarrow> f a\n           | Neg a \\<Rightarrow> \\<not> f a)", "thus ?case"], ["proof (prove)\nusing this:\n  cnf_to_bool f cnf_ =\n  (\\<forall>c\\<in>set cnf_.\n      case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n\ngoal (1 subgoal):\n 1. cnf_to_bool f (a_ # cnf_) =\n    (\\<forall>c\\<in>set (a_ # cnf_).\n        case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)", "by (simp split: negation_type.split)"], ["proof (state)\nthis:\n  cnf_to_bool f (a_ # cnf_) =\n  (\\<forall>c\\<in>set (a_ # cnf_).\n      case c of Pos a \\<Rightarrow> f a | Neg a \\<Rightarrow> \\<not> f a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dnf_to_bool_set: \"dnf_to_bool \\<gamma> dnf \\<longleftrightarrow> (\\<exists> d \\<in> set dnf. cnf_to_bool \\<gamma> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> dnf =\n    (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d)", "proof(induction dnf)"], ["proof (state)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> [] =\n    (\\<exists>d\\<in>set []. cnf_to_bool \\<gamma> d)\n 2. \\<And>a dnf.\n       dnf_to_bool \\<gamma> dnf =\n       (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (a # dnf) =\n       (\\<exists>d\\<in>set (a # dnf). cnf_to_bool \\<gamma> d)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> [] =\n    (\\<exists>d\\<in>set []. cnf_to_bool \\<gamma> d)\n 2. \\<And>a dnf.\n       dnf_to_bool \\<gamma> dnf =\n       (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (a # dnf) =\n       (\\<exists>d\\<in>set (a # dnf). cnf_to_bool \\<gamma> d)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> [] =\n    (\\<exists>d\\<in>set []. cnf_to_bool \\<gamma> d)", "by simp"], ["proof (state)\nthis:\n  dnf_to_bool \\<gamma> [] = (\\<exists>d\\<in>set []. cnf_to_bool \\<gamma> d)\n\ngoal (1 subgoal):\n 1. \\<And>a dnf.\n       dnf_to_bool \\<gamma> dnf =\n       (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (a # dnf) =\n       (\\<exists>d\\<in>set (a # dnf). cnf_to_bool \\<gamma> d)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a dnf.\n       dnf_to_bool \\<gamma> dnf =\n       (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (a # dnf) =\n       (\\<exists>d\\<in>set (a # dnf). cnf_to_bool \\<gamma> d)", "case (Cons d d1)"], ["proof (state)\nthis:\n  dnf_to_bool \\<gamma> d1 = (\\<exists>d\\<in>set d1. cnf_to_bool \\<gamma> d)\n\ngoal (1 subgoal):\n 1. \\<And>a dnf.\n       dnf_to_bool \\<gamma> dnf =\n       (\\<exists>d\\<in>set dnf. cnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (a # dnf) =\n       (\\<exists>d\\<in>set (a # dnf). cnf_to_bool \\<gamma> d)", "thus ?case"], ["proof (prove)\nusing this:\n  dnf_to_bool \\<gamma> d1 = (\\<exists>d\\<in>set d1. cnf_to_bool \\<gamma> d)\n\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (d # d1) =\n    (\\<exists>d\\<in>set (d # d1). cnf_to_bool \\<gamma> d)", "by(simp)"], ["proof (state)\nthis:\n  dnf_to_bool \\<gamma> (d # d1) =\n  (\\<exists>d\\<in>set (d # d1). cnf_to_bool \\<gamma> d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dnf_to_bool_seteq: \"set ` set d1 = set ` set d2 \\<Longrightarrow> dnf_to_bool \\<gamma> d1 \\<longleftrightarrow> dnf_to_bool \\<gamma> d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2", "assume assm: \"set ` set d1 = set ` set d2\""], ["proof (state)\nthis:\n  set ` set d1 = set ` set d2\n\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2", "have helper1: \"\\<And>P d. (\\<exists>d\\<in>set d. \\<forall>c\\<in>set d. P c) \\<longleftrightarrow> (\\<exists>d\\<in>set ` set d. \\<forall>c\\<in>d. P c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P d.\n       (\\<exists>d\\<in>set d. \\<forall>c\\<in>set d. P c) =\n       (\\<exists>d\\<in>set ` set d. \\<forall>c\\<in>d. P c)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>d\\<in>set ?d. \\<forall>c\\<in>set d. ?P c) =\n  (\\<exists>d\\<in>set ` set ?d. \\<forall>c\\<in>d. ?P c)\n\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2", "from assm"], ["proof (chain)\npicking this:\n  set ` set d1 = set ` set d2", "show ?thesis"], ["proof (prove)\nusing this:\n  set ` set d1 = set ` set d2\n\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2", "apply(simp add: dnf_to_bool_set cnf_to_bool_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    (\\<exists>d\\<in>set d1.\n        \\<forall>c\\<in>set d.\n           case c of Pos a \\<Rightarrow> \\<gamma> a\n           | Neg a \\<Rightarrow> \\<not> \\<gamma> a) =\n    (\\<exists>d\\<in>set d2.\n        \\<forall>c\\<in>set d.\n           case c of Pos a \\<Rightarrow> \\<gamma> a\n           | Neg a \\<Rightarrow> \\<not> \\<gamma> a)", "apply(subst helper1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    (\\<exists>d\\<in>set ` set d1.\n        Ball d\n         (case_negation_type \\<gamma> (\\<lambda>a. \\<not> \\<gamma> a))) =\n    (\\<exists>d\\<in>set d2.\n        Ball (set d)\n         (case_negation_type \\<gamma> (\\<lambda>a. \\<not> \\<gamma> a)))", "apply(subst helper1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` set d1 = set ` set d2 \\<Longrightarrow>\n    (\\<exists>d\\<in>set ` set d1.\n        Ball d\n         (case_negation_type \\<gamma> (\\<lambda>a. \\<not> \\<gamma> a))) =\n    (\\<exists>d\\<in>set ` set d2.\n        Ball d\n         (case_negation_type \\<gamma> (\\<lambda>a. \\<not> \\<gamma> a)))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  dnf_to_bool \\<gamma> d1 = dnf_to_bool \\<gamma> d2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dnf_and_correct: \"dnf_to_bool \\<gamma> (dnf_and d1 d2) \\<longleftrightarrow> dnf_to_bool \\<gamma> d1 \\<and> dnf_to_bool \\<gamma> d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (dnf_and d1 d2) =\n    (dnf_to_bool \\<gamma> d1 \\<and> dnf_to_bool \\<gamma> d2)", "apply(simp add: dnf_and_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma>\n     (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) d1)) =\n    (dnf_to_bool \\<gamma> d1 \\<and> dnf_to_bool \\<gamma> d2)", "apply(induction d1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma>\n     (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) [])) =\n    (dnf_to_bool \\<gamma> [] \\<and> dnf_to_bool \\<gamma> d2)\n 2. \\<And>a d1.\n       dnf_to_bool \\<gamma>\n        (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) d1)) =\n       (dnf_to_bool \\<gamma> d1 \\<and>\n        dnf_to_bool \\<gamma> d2) \\<Longrightarrow>\n       dnf_to_bool \\<gamma>\n        (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) (a # d1))) =\n       (dnf_to_bool \\<gamma> (a # d1) \\<and> dnf_to_bool \\<gamma> d2)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a d1.\n       dnf_to_bool \\<gamma>\n        (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) d1)) =\n       (dnf_to_bool \\<gamma> d1 \\<and>\n        dnf_to_bool \\<gamma> d2) \\<Longrightarrow>\n       dnf_to_bool \\<gamma>\n        (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) (a # d1))) =\n       (dnf_to_bool \\<gamma> (a # d1) \\<and> dnf_to_bool \\<gamma> d2)", "apply(simp add: dnf_to_bool_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a d1.\n       dnf_to_bool \\<gamma>\n        (concat (map (\\<lambda>andlist1. map ((@) andlist1) d2) d1)) =\n       (dnf_to_bool \\<gamma> d1 \\<and>\n        dnf_to_bool \\<gamma> d2) \\<Longrightarrow>\n       (dnf_to_bool \\<gamma> (map ((@) a) d2) \\<or>\n        dnf_to_bool \\<gamma> d1 \\<and> dnf_to_bool \\<gamma> d2) =\n       ((cnf_to_bool \\<gamma> a \\<or> dnf_to_bool \\<gamma> d1) \\<and>\n        dnf_to_bool \\<gamma> d2)", "apply(simp add: dnf_to_bool_set cnf_to_bool_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a d1.\n       (\\<exists>y\\<in>set d1.\n           \\<exists>d\\<in>set d2.\n              \\<forall>x\\<in>set y \\<union> set d.\n                 case x of Pos x \\<Rightarrow> \\<gamma> x\n                 | Neg a \\<Rightarrow> \\<not> \\<gamma> a) =\n       ((\\<exists>d\\<in>set d1.\n            \\<forall>c\\<in>set d.\n               case c of Pos a \\<Rightarrow> \\<gamma> a\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a) \\<and>\n        (\\<exists>d\\<in>set d2.\n            \\<forall>c\\<in>set d.\n               case c of Pos a \\<Rightarrow> \\<gamma> a\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a)) \\<Longrightarrow>\n       ((\\<exists>d\\<in>set d2.\n            \\<forall>x\\<in>set a \\<union> set d.\n               case x of Pos x \\<Rightarrow> \\<gamma> x\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a) \\<or>\n        (\\<exists>d\\<in>set d1.\n            \\<forall>c\\<in>set d.\n               case c of Pos a \\<Rightarrow> \\<gamma> a\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a) \\<and>\n        (\\<exists>d\\<in>set d2.\n            \\<forall>c\\<in>set d.\n               case c of Pos a \\<Rightarrow> \\<gamma> a\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a)) =\n       (((\\<forall>c\\<in>set a.\n             case c of Pos a \\<Rightarrow> \\<gamma> a\n             | Neg a \\<Rightarrow> \\<not> \\<gamma> a) \\<or>\n         (\\<exists>d\\<in>set d1.\n             \\<forall>c\\<in>set d.\n                case c of Pos a \\<Rightarrow> \\<gamma> a\n                | Neg a \\<Rightarrow> \\<not> \\<gamma> a)) \\<and>\n        (\\<exists>d\\<in>set d2.\n            \\<forall>c\\<in>set d.\n               case c of Pos a \\<Rightarrow> \\<gamma> a\n               | Neg a \\<Rightarrow> \\<not> \\<gamma> a))", "by (meson UnCI UnE)"], ["", "lemma dnf_and_symmetric: \"dnf_to_bool \\<gamma> (dnf_and d1 d2) \\<longleftrightarrow> dnf_to_bool \\<gamma> (dnf_and d2 d1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (dnf_and d1 d2) =\n    dnf_to_bool \\<gamma> (dnf_and d2 d1)", "using dnf_and_correct"], ["proof (prove)\nusing this:\n  dnf_to_bool ?\\<gamma> (dnf_and ?d1.0 ?d2.0) =\n  (dnf_to_bool ?\\<gamma> ?d1.0 \\<and> dnf_to_bool ?\\<gamma> ?d2.0)\n\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (dnf_and d1 d2) =\n    dnf_to_bool \\<gamma> (dnf_and d2 d1)", "by blast"], ["", "subsubsection\\<open>inverting a DNF\\<close>"], ["", "text\\<open>Example\\<close>"], ["", "lemma \"(\\<not> ((a1 \\<and> a2) \\<or> b \\<or> c)) = ((\\<not>a1 \\<and> \\<not> b \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b \\<and> \\<not> c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (a1 \\<and> a2 \\<or> b \\<or> c)) =\n    (\\<not> a1 \\<and> \\<not> b \\<and> \\<not> c \\<or>\n     \\<not> a2 \\<and> \\<not> b \\<and> \\<not> c)", "by blast"], ["", "lemma \"(\\<not> ((a1 \\<and> a2) \\<or> (b1 \\<and> b2) \\<or> c)) = ((\\<not>a1 \\<and> \\<not> b1 \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b1 \\<and> \\<not> c) \\<or> (\\<not>a1 \\<and> \\<not> b2 \\<and> \\<not> c) \\<or> (\\<not>a2 \\<and> \\<not> b2 \\<and> \\<not> c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (a1 \\<and> a2 \\<or> b1 \\<and> b2 \\<or> c)) =\n    (\\<not> a1 \\<and> \\<not> b1 \\<and> \\<not> c \\<or>\n     \\<not> a2 \\<and> \\<not> b1 \\<and> \\<not> c \\<or>\n     \\<not> a1 \\<and> \\<not> b2 \\<and> \\<not> c \\<or>\n     \\<not> a2 \\<and> \\<not> b2 \\<and> \\<not> c)", "by blast"], ["", "fun listprepend :: \"'a list \\<Rightarrow> 'a list list \\<Rightarrow> 'a list list\" where\n    \"listprepend [] ns = []\" |\n    \"listprepend (a#as) ns = (map (\\<lambda>xs. a#xs) ns) @ (listprepend as ns)\""], ["", "lemma \"listprepend [a,b] [as, bs] = [a#as, a#bs, b#as, b#bs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. listprepend [a, b] [as, bs] = [a # as, a # bs, b # as, b # bs]", "by simp"], ["", "lemma map_a_and: \"dnf_to_bool \\<gamma> (map ((#) a) ds) \\<longleftrightarrow> dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (map ((#) a) ds) =\n    (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)", "apply(induction ds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> (map ((#) a) []) =\n    (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> [])\n 2. \\<And>aa ds.\n       dnf_to_bool \\<gamma> (map ((#) a) ds) =\n       (dnf_to_bool \\<gamma> [[a]] \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (map ((#) a) (aa # ds)) =\n       (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> (aa # ds))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ds.\n       dnf_to_bool \\<gamma> (map ((#) a) ds) =\n       (cnf_to_bool \\<gamma> [a] \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       (cnf_to_bool \\<gamma> (a # aa) \\<or>\n        cnf_to_bool \\<gamma> [a] \\<and> dnf_to_bool \\<gamma> ds) =\n       (cnf_to_bool \\<gamma> [a] \\<and>\n        (cnf_to_bool \\<gamma> aa \\<or> dnf_to_bool \\<gamma> ds))", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ds x1.\n       \\<lbrakk>dnf_to_bool \\<gamma> (map ((#) a) ds) =\n                (cnf_to_bool \\<gamma> [a] \\<and> dnf_to_bool \\<gamma> ds);\n        a = Pos x1\\<rbrakk>\n       \\<Longrightarrow> (cnf_to_bool \\<gamma> (a # aa) \\<or>\n                          cnf_to_bool \\<gamma> [a] \\<and>\n                          dnf_to_bool \\<gamma> ds) =\n                         (cnf_to_bool \\<gamma> [a] \\<and>\n                          (cnf_to_bool \\<gamma> aa \\<or>\n                           dnf_to_bool \\<gamma> ds))\n 2. \\<And>aa ds x2.\n       \\<lbrakk>dnf_to_bool \\<gamma> (map ((#) a) ds) =\n                (cnf_to_bool \\<gamma> [a] \\<and> dnf_to_bool \\<gamma> ds);\n        a = Neg x2\\<rbrakk>\n       \\<Longrightarrow> (cnf_to_bool \\<gamma> (a # aa) \\<or>\n                          cnf_to_bool \\<gamma> [a] \\<and>\n                          dnf_to_bool \\<gamma> ds) =\n                         (cnf_to_bool \\<gamma> [a] \\<and>\n                          (cnf_to_bool \\<gamma> aa \\<or>\n                           dnf_to_bool \\<gamma> ds))", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ds x1.\n       \\<lbrakk>dnf_to_bool \\<gamma> (map ((#) (Pos x1)) ds) =\n                (\\<gamma> x1 \\<and> dnf_to_bool \\<gamma> ds);\n        a = Pos x1\\<rbrakk>\n       \\<Longrightarrow> (\\<gamma> x1 \\<and> cnf_to_bool \\<gamma> aa \\<or>\n                          \\<gamma> x1 \\<and> dnf_to_bool \\<gamma> ds) =\n                         (\\<gamma> x1 \\<and>\n                          (cnf_to_bool \\<gamma> aa \\<or>\n                           dnf_to_bool \\<gamma> ds))\n 2. \\<And>aa ds x2.\n       \\<lbrakk>dnf_to_bool \\<gamma> (map ((#) (Neg x2)) ds) =\n                (\\<not> \\<gamma> x2 \\<and> dnf_to_bool \\<gamma> ds);\n        a = Neg x2\\<rbrakk>\n       \\<Longrightarrow> (\\<not> \\<gamma> x2 \\<and>\n                          cnf_to_bool \\<gamma> aa \\<or>\n                          \\<not> \\<gamma> x2 \\<and>\n                          dnf_to_bool \\<gamma> ds) =\n                         (\\<not> \\<gamma> x2 \\<and>\n                          (cnf_to_bool \\<gamma> aa \\<or>\n                           dnf_to_bool \\<gamma> ds))", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>this is how @{const listprepend} works:\\<close>"], ["", "lemma \"\\<not> dnf_to_bool \\<gamma> (listprepend [] ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> dnf_to_bool \\<gamma> (listprepend [] ds)", "by(simp)"], ["", "lemma \"dnf_to_bool \\<gamma> (listprepend [a] ds) \\<longleftrightarrow> dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (listprepend [a] ds) =\n    (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)", "by(simp add: map_a_and)"], ["", "lemma \"dnf_to_bool \\<gamma> (listprepend [a, b] ds) \\<longleftrightarrow> (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds) \\<or> (dnf_to_bool \\<gamma> [[b]] \\<and> dnf_to_bool \\<gamma> ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (listprepend [a, b] ds) =\n    (dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds \\<or>\n     dnf_to_bool \\<gamma> [[b]] \\<and> dnf_to_bool \\<gamma> ds)", "by(simp add: map_a_and dnf_to_bool_append)"], ["", "text\\<open>We use \\<open>\\<exists>\\<close> to model the big \\<open>\\<or>\\<close> operation\\<close>"], ["", "lemma listprepend_correct: \"dnf_to_bool \\<gamma> (listprepend as ds) \\<longleftrightarrow> (\\<exists>a\\<in> set as. dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (listprepend as ds) =\n    (\\<exists>a\\<in>set as.\n        dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)", "apply(induction as)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> (listprepend [] ds) =\n    (\\<exists>a\\<in>set [].\n        dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)\n 2. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (\\<exists>a\\<in>set as.\n           dnf_to_bool \\<gamma> [[a]] \\<and>\n           dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (listprepend (a # as) ds) =\n       (\\<exists>a\\<in>set (a # as).\n           dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (\\<exists>a\\<in>set as.\n           dnf_to_bool \\<gamma> [[a]] \\<and>\n           dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (listprepend (a # as) ds) =\n       (\\<exists>a\\<in>set (a # as).\n           dnf_to_bool \\<gamma> [[a]] \\<and> dnf_to_bool \\<gamma> ds)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       ((\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a]) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (map ((#) a) ds @ listprepend as ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         (\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a])) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(rename_tac a as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       ((\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a]) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (map ((#) a) ds @ listprepend as ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         (\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a])) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(simp add: map_a_and cnf_to_bool_append dnf_to_bool_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       ((\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a]) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       (cnf_to_bool \\<gamma> [a] \\<and> dnf_to_bool \\<gamma> ds \\<or>\n        (\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a]) \\<and>\n        dnf_to_bool \\<gamma> ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         (\\<exists>a\\<in>set as. cnf_to_bool \\<gamma> [a])) \\<and>\n        dnf_to_bool \\<gamma> ds)", "by blast"], ["", "lemma listprepend_correct': \"dnf_to_bool \\<gamma> (listprepend as ds) \\<longleftrightarrow> (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and> dnf_to_bool \\<gamma> ds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (listprepend as ds) =\n    (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n     dnf_to_bool \\<gamma> ds)", "apply(induction as)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> (listprepend [] ds) =\n    (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) []) \\<and>\n     dnf_to_bool \\<gamma> ds)\n 2. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (listprepend (a # as) ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) (a # as)) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (listprepend (a # as) ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) (a # as)) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (map ((#) a) ds @ listprepend as ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as)) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(rename_tac a as)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (map ((#) a) ds @ listprepend as ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as)) \\<and>\n        dnf_to_bool \\<gamma> ds)", "apply(simp add: map_a_and cnf_to_bool_append dnf_to_bool_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       dnf_to_bool \\<gamma> (listprepend as ds) =\n       (dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) \\<Longrightarrow>\n       (cnf_to_bool \\<gamma> [a] \\<and> dnf_to_bool \\<gamma> ds \\<or>\n        dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as) \\<and>\n        dnf_to_bool \\<gamma> ds) =\n       ((cnf_to_bool \\<gamma> [a] \\<or>\n         dnf_to_bool \\<gamma> (map (\\<lambda>a. [a]) as)) \\<and>\n        dnf_to_bool \\<gamma> ds)", "by blast"], ["", "lemma cnf_invert_singelton: \"cnf_to_bool \\<gamma> [invert a] \\<longleftrightarrow> \\<not> cnf_to_bool \\<gamma> [a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnf_to_bool \\<gamma> [invert a] = (\\<not> cnf_to_bool \\<gamma> [a])", "by(cases a, simp_all)"], ["", "lemma cnf_singleton_false: \"(\\<exists>a'\\<in>set as. \\<not> cnf_to_bool \\<gamma> [a']) \\<longleftrightarrow> \\<not> cnf_to_bool \\<gamma> as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a'\\<in>set as. \\<not> cnf_to_bool \\<gamma> [a']) =\n    (\\<not> cnf_to_bool \\<gamma> as)", "by(induction \\<gamma> as rule: cnf_to_bool.induct) (simp_all)"], ["", "fun dnf_not :: \"'a dnf \\<Rightarrow> 'a dnf\" where\n    \"dnf_not [] = [[]]\" | (*False goes to True*)\n    \"dnf_not (ns#nss) = listprepend (map invert ns) (dnf_not nss)\""], ["", "lemma dnf_not: \"dnf_to_bool \\<gamma> (dnf_not d) \\<longleftrightarrow> \\<not> dnf_to_bool \\<gamma> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool \\<gamma> (dnf_not d) = (\\<not> dnf_to_bool \\<gamma> d)", "apply(induction d)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dnf_to_bool \\<gamma> (dnf_not []) = (\\<not> dnf_to_bool \\<gamma> [])\n 2. \\<And>a d.\n       dnf_to_bool \\<gamma> (dnf_not d) =\n       (\\<not> dnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (dnf_not (a # d)) =\n       (\\<not> dnf_to_bool \\<gamma> (a # d))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a d.\n       dnf_to_bool \\<gamma> (dnf_not d) =\n       (\\<not> dnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       dnf_to_bool \\<gamma> (listprepend (map invert a) (dnf_not d)) =\n       (\\<not> cnf_to_bool \\<gamma> a \\<and> \\<not> dnf_to_bool \\<gamma> d)", "apply(simp add: listprepend_correct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a d.\n       dnf_to_bool \\<gamma> (dnf_not d) =\n       (\\<not> dnf_to_bool \\<gamma> d) \\<Longrightarrow>\n       ((\\<exists>a\\<in>set a. cnf_to_bool \\<gamma> [invert a]) \\<and>\n        \\<not> dnf_to_bool \\<gamma> d) =\n       (\\<not> cnf_to_bool \\<gamma> a \\<and> \\<not> dnf_to_bool \\<gamma> d)", "apply(simp add: cnf_invert_singelton cnf_singleton_false)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection\\<open>Optimizing\\<close>"], ["", "(*there is probably a way better way to represent the set in the Collection framework\n    A list of lists can be quite inefficient\n    A better datastructure can help as we actually only use a set of sets*)"], ["", "definition optimize_dfn :: \"'a dnf \\<Rightarrow> 'a dnf\" where\n    \"optimize_dfn dnf = map remdups (remdups dnf)\""], ["", "lemma \"dnf_to_bool f (optimize_dfn dnf) = dnf_to_bool f dnf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool f (optimize_dfn dnf) = dnf_to_bool f dnf", "unfolding optimize_dfn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dnf_to_bool f (map remdups (remdups dnf)) = dnf_to_bool f dnf", "apply(rule dnf_to_bool_seteq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` set (map remdups (remdups dnf)) = set ` set dnf", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set ` remdups ` set dnf = set ` set dnf", "by (metis image_cong image_image set_remdups)"], ["", "end"]]}