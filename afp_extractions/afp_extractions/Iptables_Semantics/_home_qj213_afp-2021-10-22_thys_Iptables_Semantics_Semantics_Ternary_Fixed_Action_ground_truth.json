{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Fixed_Action.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma approximating_bigstep_fun_prepend_replicate: \n  \"n > 0 \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r#rs) Undecided = approximating_bigstep_fun \\<gamma> p ((replicate n r)@rs) Undecided\"", "lemma fixedaction_Log: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Log) ms) Undecided = Undecided\"", "lemma fixedaction_Empty:\"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Empty) ms) Undecided = Undecided\"", "lemma helperX1_Log: \"matches \\<gamma> m' Log p \\<Longrightarrow> \n         approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m Log) \\<circ> MatchAnd m') m2' @ rs2) Undecided =\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided\"", "lemma helperX1_Empty: \"matches \\<gamma> m' Empty p \\<Longrightarrow> \n         approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m Empty) \\<circ> MatchAnd m') m2' @ rs2) Undecided =\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided\"", "lemma helperX3: \"matches \\<gamma> m' a p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @ rs2 ) Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided\"", "lemmas fixed_action_simps = fixedaction_Log fixedaction_Empty helperX1_Log helperX1_Empty helperX3", "lemma fixedaction_swap:\n   \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m1@m2)) s = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m2@m1)) s\"", "lemma approximating_bigstep_fun_fixaction_matchseteq: \"set m1 = set m2 \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s = \n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s\"", "lemma match_list_matches: \"match_list \\<gamma> ms a p \\<longleftrightarrow> (\\<exists>m \\<in> set ms. matches \\<gamma> m a p)\"", "lemma match_list_True: \"match_list \\<gamma> ms a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms) Undecided = (case a of Accept \\<Rightarrow> Decision FinalAllow\n              | Drop \\<Rightarrow> Decision FinalDeny\n              | Reject \\<Rightarrow> Decision FinalDeny\n              | Log \\<Rightarrow> Undecided\n              | Empty \\<Rightarrow> Undecided\n              \\<comment> \\<open>unhandled cases\\<close>\n              )\"", "lemma match_list_False: \"\\<not> match_list \\<gamma> ms a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms) Undecided = Undecided\"", "lemma match_list_semantics: \"match_list \\<gamma> ms1 a p \\<longleftrightarrow> match_list \\<gamma> ms2 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1) s = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms2) s\"", "lemma match_list_to_match_expr_disjunction: \"match_list \\<gamma> ms a p \\<longleftrightarrow> matches \\<gamma> (match_list_to_match_expr ms) a p\"", "lemma match_list_singleton: \"match_list \\<gamma> [m] a p \\<longleftrightarrow> matches \\<gamma> m a p\"", "lemma match_list_append: \"match_list \\<gamma> (m1@m2) a p \\<longleftrightarrow> (\\<not> match_list \\<gamma> m1 a p \\<longrightarrow> match_list \\<gamma> m2 a p)\"", "lemma match_list_helper1: \"\\<not> matches \\<gamma> m2 a p \\<Longrightarrow> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a p \\<Longrightarrow> False\"", "lemma match_list_helper2: \" \\<not> matches \\<gamma> m a p \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p\"", "lemma match_list_helper3: \"matches \\<gamma> m a p \\<Longrightarrow> match_list \\<gamma> m2' a p \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) m2') a p\"", "lemma match_list_helper4: \"\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p \"", "lemma match_list_helper5: \" \\<not> match_list \\<gamma> m2' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p \"", "lemma match_list_helper6: \"\\<not> match_list \\<gamma> m1' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p \"", "lemmas match_list_helper = match_list_helper1 match_list_helper2 match_list_helper3 match_list_helper4 match_list_helper5 match_list_helper6", "lemma match_list_map_And1: \"matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p \\<Longrightarrow>\n           matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> match_list \\<gamma>  (map (\\<lambda>x. MatchAnd x m2) m1') a p\"", "lemma matches_list_And_concat: \"matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p \\<Longrightarrow> matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p \\<Longrightarrow>\n           matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> match_list \\<gamma> [MatchAnd x y. x <- m1', y <- m2'] a p\"", "lemma match_list_concat: \"match_list \\<gamma> (concat lss) a p \\<longleftrightarrow> (\\<exists>ls \\<in> set lss. match_list \\<gamma> ls a p)\"", "lemma fixedaction_wf_ruleset: \"wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) \\<longleftrightarrow>\n  \\<not> match_list \\<gamma> ms a p \\<or> \\<not> (\\<exists>chain. a = Call chain) \\<and> a \\<noteq> Return \\<and> \\<not> (\\<exists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\"", "lemma wf_ruleset_singleton: \"wf_ruleset \\<gamma> p [Rule m a] \\<longleftrightarrow> \\<not> matches \\<gamma> m a p \\<or> \\<not> (\\<exists>chain. a = Call chain) \\<and> a \\<noteq> Return \\<and> \\<not> (\\<exists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\""], "translations": [["", "lemma approximating_bigstep_fun_prepend_replicate: \n  \"n > 0 \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r#rs) Undecided = approximating_bigstep_fun \\<gamma> p ((replicate n r)@rs) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n    approximating_bigstep_fun \\<gamma> p (replicate n r @ rs) Undecided", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < 0 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n    approximating_bigstep_fun \\<gamma> p (replicate 0 r @ rs) Undecided\n 2. \\<And>n.\n       \\<lbrakk>0 < n \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p (replicate n r @ rs)\n                 Undecided;\n        0 < Suc n\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (replicate (Suc n) r @ rs) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p (replicate n r @ rs)\n                 Undecided;\n        0 < Suc n\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (replicate (Suc n) r @ rs) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0 < n \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p (replicate n r @ rs)\n         Undecided) \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n       approximating_bigstep_fun \\<gamma> p (r # replicate n r @ rs)\n        Undecided", "apply(case_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x1 x2.\n       \\<lbrakk>0 < n \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p (replicate n r @ rs)\n                 Undecided;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (r # replicate n r @ rs) Undecided", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a.\n       \\<lbrakk>0 < n \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p (r # rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p (replicate n r @ rs)\n                 Undecided;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (r # replicate n r @ rs) Undecided", "apply(simp split: action.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m a.\n       \\<lbrakk>0 < n \\<Longrightarrow>\n                (if \\<not> matches \\<gamma> m a p\n                 then approximating_bigstep_fun \\<gamma> p rs Undecided\n                 else case a of Accept \\<Rightarrow> Decision FinalAllow\n                      | Drop \\<Rightarrow> Decision FinalDeny\n                      | Log \\<Rightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs Undecided\n                      | Reject \\<Rightarrow> Decision FinalDeny\n                      | Empty \\<Rightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) =\n                approximating_bigstep_fun \\<gamma> p\n                 (replicate n (Rule m a) @ rs) Undecided;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> (a = Accept \\<longrightarrow>\n                          \\<not> matches \\<gamma> m Accept\n                                  p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (replicate n (Rule m Accept) @ rs)\n                           Undecided) \\<and>\n                         (a = Drop \\<longrightarrow>\n                          \\<not> matches \\<gamma> m Drop p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (replicate n (Rule m Drop) @ rs)\n                           Undecided) \\<and>\n                         (a = Log \\<longrightarrow>\n                          (\\<not> matches \\<gamma> m Log p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           approximating_bigstep_fun \\<gamma> p\n                            (replicate n (Rule m Log) @ rs)\n                            Undecided) \\<and>\n                          (matches \\<gamma> m Log p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           approximating_bigstep_fun \\<gamma> p\n                            (replicate n (Rule m Log) @ rs)\n                            Undecided)) \\<and>\n                         (a = Reject \\<longrightarrow>\n                          \\<not> matches \\<gamma> m Reject\n                                  p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (replicate n (Rule m Reject) @ rs)\n                           Undecided) \\<and>\n                         (\\<forall>x5.\n                             a = Call x5 \\<longrightarrow>\n                             \\<not> matches \\<gamma> m (Call x5)\n                                     p \\<longrightarrow>\n                             approximating_bigstep_fun \\<gamma> p rs\n                              Undecided =\n                             approximating_bigstep_fun \\<gamma> p\n                              (replicate n (Rule m (Call x5)) @ rs)\n                              Undecided) \\<and>\n                         (a = Return \\<longrightarrow>\n                          \\<not> matches \\<gamma> m Return\n                                  p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (replicate n (Rule m Return) @ rs)\n                           Undecided) \\<and>\n                         (\\<forall>x7.\n                             a = Goto x7 \\<longrightarrow>\n                             \\<not> matches \\<gamma> m (Goto x7)\n                                     p \\<longrightarrow>\n                             approximating_bigstep_fun \\<gamma> p rs\n                              Undecided =\n                             approximating_bigstep_fun \\<gamma> p\n                              (replicate n (Rule m (Goto x7)) @ rs)\n                              Undecided) \\<and>\n                         (a = Empty \\<longrightarrow>\n                          (\\<not> matches \\<gamma> m Empty\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           approximating_bigstep_fun \\<gamma> p\n                            (replicate n (Rule m Empty) @ rs)\n                            Undecided) \\<and>\n                          (matches \\<gamma> m Empty p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           approximating_bigstep_fun \\<gamma> p\n                            (replicate n (Rule m Empty) @ rs)\n                            Undecided)) \\<and>\n                         (a = Unknown \\<longrightarrow>\n                          \\<not> matches \\<gamma> m Unknown\n                                  p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (replicate n (Rule m Unknown) @ rs) Undecided)", "by fastforce"], ["", "text\\<open>utility lemmas\\<close>"], ["", "context\nbegin"], ["", "private"], ["", "lemma fixedaction_Log: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Log) ms) Undecided = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Log) ms)\n     Undecided =\n    Undecided", "by(induction ms, simp_all)"], ["", "private"], ["", "lemma fixedaction_Empty:\"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Empty) ms) Undecided = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Empty) ms)\n     Undecided =\n    Undecided", "by(induction ms, simp_all)"], ["", "private"], ["", "lemma helperX1_Log: \"matches \\<gamma> m' Log p \\<Longrightarrow> \n         approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m Log) \\<circ> MatchAnd m') m2' @ rs2) Undecided =\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m' Log p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m Log) \\<circ> MatchAnd m') m2' @ rs2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p rs2 Undecided", "by(induction m2')(simp_all split: action.split)"], ["", "private"], ["", "lemma helperX1_Empty: \"matches \\<gamma> m' Empty p \\<Longrightarrow> \n         approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m Empty) \\<circ> MatchAnd m') m2' @ rs2) Undecided =\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m' Empty p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m Empty) \\<circ> MatchAnd m') m2' @ rs2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p rs2 Undecided", "by(induction m2')(simp_all split: action.split)"], ["", "private"], ["", "lemma helperX3: \"matches \\<gamma> m' a p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @ rs2 ) Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m' a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @ rs2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided", "proof(induction m2')"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> m' a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') [] @ rs2) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ rs2) Undecided\n 2. \\<And>aa m2'.\n       \\<lbrakk>matches \\<gamma> m' a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @\n                  rs2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided;\n        matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m')\n                            (aa # m2') @\n                           rs2)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2') @ rs2)\n                          Undecided", "case Nil"], ["proof (state)\nthis:\n  matches \\<gamma> m' a p\n\ngoal (2 subgoals):\n 1. matches \\<gamma> m' a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') [] @ rs2) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ rs2) Undecided\n 2. \\<And>aa m2'.\n       \\<lbrakk>matches \\<gamma> m' a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @\n                  rs2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided;\n        matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m')\n                            (aa # m2') @\n                           rs2)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2') @ rs2)\n                          Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') [] @ rs2) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ rs2) Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') [] @ rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [] @ rs2)\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>matches \\<gamma> m' a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @\n                  rs2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided;\n        matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m')\n                            (aa # m2') @\n                           rs2)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2') @ rs2)\n                          Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>matches \\<gamma> m' a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @\n                  rs2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided;\n        matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m')\n                            (aa # m2') @\n                           rs2)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2') @ rs2)\n                          Undecided", "case Cons"], ["proof (state)\nthis:\n  matches \\<gamma> m' a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2'_ @ rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2'_ @ rs2) Undecided\n  matches \\<gamma> m' a p\n\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>matches \\<gamma> m' a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2' @\n                  rs2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2' @ rs2) Undecided;\n        matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m')\n                            (aa # m2') @\n                           rs2)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2') @ rs2)\n                          Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m' a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') m2'_ @ rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2'_ @ rs2) Undecided\n  matches \\<gamma> m' a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') (a_ # m2'_) @ rs2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (a_ # m2'_) @ rs2) Undecided", "by(cases a) (simp_all add: matches_simps)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map ((\\<lambda>m. Rule m a) \\<circ> MatchAnd m') (a_ # m2'_) @ rs2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (a_ # m2'_) @ rs2) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas fixed_action_simps = fixedaction_Log fixedaction_Empty helperX1_Log helperX1_Empty helperX3"], ["", "end"], ["", "lemma fixedaction_swap:\n   \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m1@m2)) s = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m2@m1)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "proof(induction s rule: just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2) Undecided =\n        approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n     Undecided", "proof(induction m1)"], ["proof (state)\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) [])\n     Undecided\n 2. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) [])\n     Undecided\n 2. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) [])\n     Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) []) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "case (Cons m m1)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "{"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "fix m rs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "have \"approximating_bigstep_fun \\<gamma> p ((map (\\<lambda>m. Rule m Log) m)@rs) Undecided =\n            approximating_bigstep_fun \\<gamma> p rs Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m Log) m @ rs) Undecided =\n    approximating_bigstep_fun \\<gamma> p rs Undecided", "by(induction m) (simp_all)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Log) m @ rs)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "}"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Log) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "note Log_helper=this"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Log) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "{"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Log) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "fix m rs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "have \"approximating_bigstep_fun \\<gamma> p ((map (\\<lambda>m. Rule m Empty) m)@rs) Undecided =\n            approximating_bigstep_fun \\<gamma> p rs Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m Empty) m @ rs) Undecided =\n    approximating_bigstep_fun \\<gamma> p rs Undecided", "by(induction m) (simp_all)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Empty) m @ rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "}"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Empty) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "note Empty_helper=this"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Empty) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m1) @\n         map (\\<lambda>m. Rule m a) m2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) m2 @\n         map (\\<lambda>m. Rule m a) (aa # m1))\n        Undecided", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "proof(cases \"matches \\<gamma> m a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided\n 2. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "case True"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n\ngoal (2 subgoals):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided\n 2. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "thus ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "proof(induction m2)"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided\n 2. \\<And>aa m2.\n       \\<lbrakk>matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (m # m1) @\n                  map (\\<lambda>m. Rule m a) m2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) (m # m1))\n                 Undecided;\n        matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # m1) @\n                           map (\\<lambda>m. Rule m a) (aa # m2))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) (m # m1))\n                          Undecided", "case Nil"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n\ngoal (2 subgoals):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided\n 2. \\<And>aa m2.\n       \\<lbrakk>matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (m # m1) @\n                  map (\\<lambda>m. Rule m a) m2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) (m # m1))\n                 Undecided;\n        matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # m1) @\n                           map (\\<lambda>m. Rule m a) (aa # m2))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) (m # m1))\n                          Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) [])\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       \\<lbrakk>matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (m # m1) @\n                  map (\\<lambda>m. Rule m a) m2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) (m # m1))\n                 Undecided;\n        matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # m1) @\n                           map (\\<lambda>m. Rule m a) (aa # m2))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) (m # m1))\n                          Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       \\<lbrakk>matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (m # m1) @\n                  map (\\<lambda>m. Rule m a) m2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) (m # m1))\n                 Undecided;\n        matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # m1) @\n                           map (\\<lambda>m. Rule m a) (aa # m2))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) (m # m1))\n                          Undecided", "case Cons"], ["proof (state)\nthis:\n  matches \\<gamma> m a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2_)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2_ @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n  matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       \\<lbrakk>matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (m # m1) @\n                  map (\\<lambda>m. Rule m a) m2)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) (m # m1))\n                 Undecided;\n        matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # m1) @\n                           map (\\<lambda>m. Rule m a) (aa # m2))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) (m # m1))\n                          Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2_)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2_ @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n  matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @\n      map (\\<lambda>m. Rule m a) (a_ # m2_))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (a_ # m2_) @\n      map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "apply(simp split:action.split action.split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m1 @ map (\\<lambda>m. Rule m Log) m2_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m2_ @\n       Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n      Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<not> matches \\<gamma> a_ Log p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m1 @\n                         Rule a_ Log # map (\\<lambda>m. Rule m Log) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2_ @\n                         Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n                        Undecided) \\<and>\n                      (matches \\<gamma> a_ Log p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m1 @\n                         Rule a_ Log # map (\\<lambda>m. Rule m Log) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2_ @\n                         Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n                        Undecided)\n 2. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m1 @\n       map (\\<lambda>m. Rule m Empty) m2_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m2_ @\n       Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n      Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<not> matches \\<gamma> a_ Empty p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m1 @\n                         Rule a_ Empty # map (\\<lambda>m. Rule m Empty) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2_ @\n                         Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n                        Undecided) \\<and>\n                      (matches \\<gamma> a_ Empty p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m1 @\n                         Rule a_ Empty # map (\\<lambda>m. Rule m Empty) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2_ @\n                         Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n                        Undecided)", "using Log_helper Empty_helper"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Log) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m Empty) ?ma2 @ ?rs2) Undecided =\n  approximating_bigstep_fun \\<gamma> p ?rs2 Undecided\n\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m1 @ map (\\<lambda>m. Rule m Log) m2_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m2_ @\n       Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n      Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<not> matches \\<gamma> a_ Log p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m1 @\n                         Rule a_ Log # map (\\<lambda>m. Rule m Log) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2_ @\n                         Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n                        Undecided) \\<and>\n                      (matches \\<gamma> a_ Log p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m1 @\n                         Rule a_ Log # map (\\<lambda>m. Rule m Log) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2_ @\n                         Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n                        Undecided)\n 2. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m1 @\n       map (\\<lambda>m. Rule m Empty) m2_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m2_ @\n       Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n      Undecided\\<rbrakk>\n    \\<Longrightarrow> (\\<not> matches \\<gamma> a_ Empty p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m1 @\n                         Rule a_ Empty # map (\\<lambda>m. Rule m Empty) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2_ @\n                         Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n                        Undecided) \\<and>\n                      (matches \\<gamma> a_ Empty p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m1 @\n                         Rule a_ Empty # map (\\<lambda>m. Rule m Empty) m2_)\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2_ @\n                         Rule m Empty # map (\\<lambda>m. Rule m Empty) m1)\n                        Undecided)", "by fastforce+"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @\n    map (\\<lambda>m. Rule m a) (a_ # m2_))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (a_ # m2_) @\n    map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "case False"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n     Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @\n      Rule m a # map (\\<lambda>m. Rule m a) m1)\n     Undecided", "apply(simp add: Cons.IH)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m2 @\n      Rule m a # map (\\<lambda>m. Rule m a) m1)\n     Undecided", "apply(induction m2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @ map (\\<lambda>m. Rule m a) m1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) [] @\n      Rule m a # map (\\<lambda>m. Rule m a) m1)\n     Undecided\n 2. \\<And>aa m2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) m1)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  Rule m a # map (\\<lambda>m. Rule m a) m1)\n                 Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           map (\\<lambda>m. Rule m a) m1)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m2) @\n                           Rule m a # map (\\<lambda>m. Rule m a) m1)\n                          Undecided", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) m1)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  Rule m a # map (\\<lambda>m. Rule m a) m1)\n                 Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> aa a p \\<longrightarrow>\n                         (case a of Accept \\<Rightarrow> Decision FinalAllow\n                          | Drop \\<Rightarrow> Decision FinalDeny\n                          | Log \\<Rightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (map (\\<lambda>m. Rule m a) m2 @\n                                map (\\<lambda>m. Rule m a) m1)\n                               Undecided\n                          | Reject \\<Rightarrow> Decision FinalDeny\n                          | Empty \\<Rightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (map (\\<lambda>m. Rule m a) m2 @\n                                map (\\<lambda>m. Rule m a) m1)\n                               Undecided) =\n                         (case a of Accept \\<Rightarrow> Decision FinalAllow\n                          | Drop \\<Rightarrow> Decision FinalDeny\n                          | Log \\<Rightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (map (\\<lambda>m. Rule m a) m2 @\n                                Rule m a # map (\\<lambda>m. Rule m a) m1)\n                               Undecided\n                          | Reject \\<Rightarrow> Decision FinalDeny\n                          | Empty \\<Rightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (map (\\<lambda>m. Rule m a) m2 @\n                                Rule m a # map (\\<lambda>m. Rule m a) m1)\n                               Undecided)", "apply(simp split:action.split action.split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  map (\\<lambda>m. Rule m a) m1)\n                 Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) m2 @\n                  Rule m a # map (\\<lambda>m. Rule m a) m1)\n                 Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> (a = Log \\<longrightarrow>\n                          matches \\<gamma> aa Log p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Log) m2 @\n                            map (\\<lambda>m. Rule m Log) m1)\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Log) m2 @\n                            Rule m Log # map (\\<lambda>m. Rule m Log) m1)\n                           Undecided) \\<and>\n                         (a = Empty \\<longrightarrow>\n                          matches \\<gamma> aa Empty p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Empty) m2 @\n                            map (\\<lambda>m. Rule m Empty) m1)\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Empty) m2 @\n                            Rule m Empty #\n                            map (\\<lambda>m. Rule m Empty) m1)\n                           Undecided)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # m1) @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "using Undecided"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1) Undecided\n  s = Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1)) s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2)) s =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1)) s\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary fixedaction_reorder: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "proof(induction s rule: just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided", "proof(induction m3)"], ["proof (state)\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ [])) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ [])) Undecided\n 2. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ [])) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ [])) Undecided\n 2. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ [])) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ [])) Undecided", "using fixedaction_swap"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun ?\\<gamma> ?p\n   (map (\\<lambda>m. Rule m ?a) (?m1.0 @ ?m2.0)) ?s =\n  approximating_bigstep_fun ?\\<gamma> ?p\n   (map (\\<lambda>m. Rule m ?a) (?m2.0 @ ?m1.0)) ?s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ [])) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ [])) Undecided", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ [])) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ [])) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "case (Cons m3'1 m3)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1)) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1)) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> matches \\<gamma> m3'1 a p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n      Undecided) \\<and>\n    (matches \\<gamma> m3'1 a p \\<longrightarrow>\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided) =\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided))", "apply(cases \"matches \\<gamma> m3'1 a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    (\\<not> matches \\<gamma> m3'1 a p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n      Undecided) \\<and>\n    (matches \\<gamma> m3'1 a p \\<longrightarrow>\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided) =\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided))\n 2. \\<not> matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    (\\<not> matches \\<gamma> m3'1 a p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n      Undecided) \\<and>\n    (matches \\<gamma> m3'1 a p \\<longrightarrow>\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided) =\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided))", "apply(simp split: action.split action.split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    (a = Log \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m3 @\n       map (\\<lambda>m. Rule m Log) m1 @ map (\\<lambda>m. Rule m Log) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) m3 @\n       map (\\<lambda>m. Rule m Log) m2 @ map (\\<lambda>m. Rule m Log) m1)\n      Undecided) \\<and>\n    (a = Empty \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m3 @\n       map (\\<lambda>m. Rule m Empty) m1 @\n       map (\\<lambda>m. Rule m Empty) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m3 @\n       map (\\<lambda>m. Rule m Empty) m2 @\n       map (\\<lambda>m. Rule m Empty) m1)\n      Undecided)\n 2. \\<not> matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    (\\<not> matches \\<gamma> m3'1 a p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n      Undecided) \\<and>\n    (matches \\<gamma> m3'1 a p \\<longrightarrow>\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided) =\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided))", "apply (metis append_assoc fixedaction_swap map_append Cons.IH)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    (\\<not> matches \\<gamma> m3'1 a p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m a) m3 @\n       map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n      Undecided) \\<and>\n    (matches \\<gamma> m3'1 a p \\<longrightarrow>\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n           Undecided) =\n     (case a of Accept \\<Rightarrow> Decision FinalAllow\n      | Drop \\<Rightarrow> Decision FinalDeny\n      | Log \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided\n      | Reject \\<Rightarrow> Decision FinalDeny\n      | Empty \\<Rightarrow>\n          approximating_bigstep_fun \\<gamma> p\n           (map (\\<lambda>m. Rule m a) m3 @\n            map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n           Undecided))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m3'1 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m3 @\n      map (\\<lambda>m. Rule m a) m1 @ map (\\<lambda>m. Rule m a) m2)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) m3 @\n      map (\\<lambda>m. Rule m a) m2 @ map (\\<lambda>m. Rule m a) m1)\n     Undecided", "by (metis append_assoc fixedaction_swap map_append Cons.IH)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1)) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "hence \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1)) Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided", "apply(subst fixedaction_swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1))\n     Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided", "apply(subst(2) fixedaction_swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1))\n     Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m1 @ m2)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m3'1 # m3) @ m2 @ m1)) Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m3.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3))\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m1 @ m2 @ aa # m3)) Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (m2 @ m1 @ aa # m3)) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3'1 # m3)) Undecided", "apply(subst append_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3))\n     Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3'1 # m3)) Undecided", "apply(subst append_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3))\n     Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m1 @ m2) @ m3'1 # m3)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) ((m2 @ m1) @ m3'1 # m3)) Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3'1 # m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3'1 # m3)) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "using Undecided"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) Undecided\n  s = Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m1 @ m2 @ m3)) s =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2 @ m1 @ m3)) s\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>If the actions are equal, the @{term set} (position and replication independent) of the match expressions can be considered.\\<close>"], ["", "lemma approximating_bigstep_fun_fixaction_matchseteq: \"set m1 = set m2 \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s = \n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set m1 = set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s", "proof(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>set m1 = set m2; s = Undecided\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m1) s =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m2) s", "assume m1m2_seteq: \"set m1 = set m2\" and \"s = Undecided\""], ["proof (state)\nthis:\n  set m1 = set m2\n  s = Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set m1 = set m2; s = Undecided\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m1) s =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m2) s", "from m1m2_seteq"], ["proof (chain)\npicking this:\n  set m1 = set m2", "have\n    \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) Undecided =\n     approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) Undecided\""], ["proof (prove)\nusing this:\n  set m1 = set m2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "proof(induction m1 arbitrary: m2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m2.\n       set [] = set m2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided\n 2. \\<And>aa m1 m2.\n       \\<lbrakk>\\<And>m2.\n                   set m1 = set m2 \\<Longrightarrow>\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m1) Undecided =\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m2) Undecided;\n        set (aa # m1) = set m2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m1)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) m2) Undecided", "case Nil"], ["proof (state)\nthis:\n  set [] = set m2\n\ngoal (2 subgoals):\n 1. \\<And>m2.\n       set [] = set m2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided\n 2. \\<And>aa m1 m2.\n       \\<lbrakk>\\<And>m2.\n                   set m1 = set m2 \\<Longrightarrow>\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m1) Undecided =\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m2) Undecided;\n        set (aa # m1) = set m2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m1)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) m2) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  set [] = set m2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m1 m2.\n       \\<lbrakk>\\<And>m2.\n                   set m1 = set m2 \\<Longrightarrow>\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m1) Undecided =\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m2) Undecided;\n        set (aa # m1) = set m2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m1)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) m2) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m1 m2.\n       \\<lbrakk>\\<And>m2.\n                   set m1 = set m2 \\<Longrightarrow>\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m1) Undecided =\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m2) Undecided;\n        set (aa # m1) = set m2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m1)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) m2) Undecided", "case (Cons m m1)"], ["proof (state)\nthis:\n  set m1 = set ?m2.0 \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ?m2.0)\n   Undecided\n  set (m # m1) = set m2\n\ngoal (1 subgoal):\n 1. \\<And>aa m1 m2.\n       \\<lbrakk>\\<And>m2.\n                   set m1 = set m2 \\<Longrightarrow>\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m1) Undecided =\n                   approximating_bigstep_fun \\<gamma> p\n                    (map (\\<lambda>m. Rule m a) m2) Undecided;\n        set (aa # m1) = set m2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # m1)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) m2) Undecided", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "proof (cases \"m \\<in> set m1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<in> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "case True"], ["proof (state)\nthis:\n  m \\<in> set m1\n\ngoal (2 subgoals):\n 1. m \\<in> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from True"], ["proof (chain)\npicking this:\n  m \\<in> set m1", "have \"set m1 = set (m # m1)\""], ["proof (prove)\nusing this:\n  m \\<in> set m1\n\ngoal (1 subgoal):\n 1. set m1 = set (m # m1)", "by auto"], ["proof (state)\nthis:\n  set m1 = set (m # m1)\n\ngoal (2 subgoals):\n 1. m \\<in> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from Cons.IH[OF \\<open>set m1 = set (m # m1)\\<close>]"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1)) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m1)) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n     Undecided", ".."], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided\n\ngoal (2 subgoals):\n 1. m \\<in> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "thus ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "by (metis Cons.IH Cons.prems \\<open>set m1 = set (m # m1)\\<close>)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "case False"], ["proof (state)\nthis:\n  m \\<notin> set m1\n\ngoal (1 subgoal):\n 1. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from False"], ["proof (chain)\npicking this:\n  m \\<notin> set m1", "have \"m \\<notin> set m1\""], ["proof (prove)\nusing this:\n  m \\<notin> set m1\n\ngoal (1 subgoal):\n 1. m \\<notin> set m1", "."], ["proof (state)\nthis:\n  m \\<notin> set m1\n\ngoal (1 subgoal):\n 1. m \\<notin> set m1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "proof (cases \"m \\<notin> set m2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "case True"], ["proof (state)\nthis:\n  m \\<notin> set m2\n\ngoal (2 subgoals):\n 1. m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from True \\<open>m \\<notin> set m1\\<close> Cons.prems"], ["proof (chain)\npicking this:\n  m \\<notin> set m2\n  m \\<notin> set m1\n  set (m # m1) = set m2", "have \"set m1 = set m2\""], ["proof (prove)\nusing this:\n  m \\<notin> set m2\n  m \\<notin> set m1\n  set (m # m1) = set m2\n\ngoal (1 subgoal):\n 1. set m1 = set m2", "by auto"], ["proof (state)\nthis:\n  set m1 = set m2\n\ngoal (2 subgoals):\n 1. m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided\n 2. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from Cons.IH[OF this]"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided", "show ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "by (metis Cons.IH Cons.prems \\<open>set m1 = set m2\\<close>)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "case False"], ["proof (state)\nthis:\n  \\<not> m \\<notin> set m2\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "hence \"m \\<in> set m2\""], ["proof (prove)\nusing this:\n  \\<not> m \\<notin> set m2\n\ngoal (1 subgoal):\n 1. m \\<in> set m2", "by simp"], ["proof (state)\nthis:\n  m \\<in> set m2\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "have repl_filter_simp: \"(replicate (length [x\\<leftarrow>m2 . x = m]) m) = [x\\<leftarrow>m2 . x = m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. replicate (length (filter (\\<lambda>x. x = m) m2)) m =\n    filter (\\<lambda>x. x = m) m2", "by (metis (lifting, full_types) filter_set member_filter replicate_length_same)"], ["proof (state)\nthis:\n  replicate (length (filter (\\<lambda>x. x = m) m2)) m =\n  filter (\\<lambda>x. x = m) m2\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from Cons.prems  \\<open>m \\<notin> set m1\\<close>"], ["proof (chain)\npicking this:\n  set (m # m1) = set m2\n  m \\<notin> set m1", "have \"set m1 = set (filter (\\<lambda>x. x\\<noteq>m) m2)\""], ["proof (prove)\nusing this:\n  set (m # m1) = set m2\n  m \\<notin> set m1\n\ngoal (1 subgoal):\n 1. set m1 = set (filter (\\<lambda>x. x \\<noteq> m) m2)", "by auto"], ["proof (state)\nthis:\n  set m1 = set (filter (\\<lambda>x. x \\<noteq> m) m2)\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from Cons.IH[OF this]"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2 . x \\<noteq> m]) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "."], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "from this"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m#m1)) Undecided = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m#[x\\<leftarrow>m2 . x \\<noteq> m])) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "apply(simp split: action.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided \\<Longrightarrow>\n    (a = Log \\<longrightarrow>\n     matches \\<gamma> m Log p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m Log) m1)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Log) (filter (\\<lambda>x. x \\<noteq> m) m2))\n      Undecided) \\<and>\n    (a = Empty \\<longrightarrow>\n     matches \\<gamma> m Empty p \\<longrightarrow>\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty) m1) Undecided =\n     approximating_bigstep_fun \\<gamma> p\n      (map (\\<lambda>m. Rule m Empty)\n        (filter (\\<lambda>x. x \\<noteq> m) m2))\n      Undecided)", "by fast"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "also"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "have \"\\<dots> = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ([x\\<leftarrow>m2 . x = m]@[x\\<leftarrow>m2 . x \\<noteq> m])) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "apply(simp only: list.map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (Rule m a #\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "thm approximating_bigstep_fun_prepend_replicate[where n=\"length [x\\<leftarrow>m2 . x = m]\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (Rule m a #\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "apply(subst approximating_bigstep_fun_prepend_replicate[where n=\"length [x\\<leftarrow>m2 . x = m]\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < length (filter (\\<lambda>x. x = m) m2)\n 2. approximating_bigstep_fun \\<gamma> p\n     (replicate (length (filter (\\<lambda>x. x = m) m2)) (Rule m a) @\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "apply (metis (full_types) False filter_empty_conv neq0_conv repl_filter_simp replicate_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (replicate (length (filter (\\<lambda>x. x = m) m2)) (Rule m a) @\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided", "by (metis (lifting, no_types) map_append map_replicate repl_filter_simp)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2 @ filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "also"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m # filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2 @ filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "have \"\\<dots> =  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2 @\n        filter (\\<lambda>x. x \\<noteq> m) m2))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "proof(induction m2)"], ["proof (state)\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) [] @\n        filter (\\<lambda>x. x \\<noteq> m) []))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided\n 2. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) [] @\n        filter (\\<lambda>x. x \\<noteq> m) []))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided\n 2. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) [] @\n        filter (\\<lambda>x. x \\<noteq> m) []))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) [] @ filter (\\<lambda>x. x \\<noteq> m) []))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "case(Cons m2'1 m2')"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2')\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "have \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x = m] @ Rule m2'1 a # map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x \\<noteq> m]) Undecided =\n                    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ([x\\<leftarrow>m2' . x = m] @ [m2'1] @ [x\\<leftarrow>m2' . x \\<noteq> m])) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n      Rule m2'1 a #\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2' @\n        [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "also"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "have \"\\<dots> = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ([m2'1] @ [x\\<leftarrow>m2' . x = m] @ [x\\<leftarrow>m2' . x \\<noteq> m])) Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2' @\n        [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       ([m2'1] @\n        filter (\\<lambda>x. x = m) m2' @\n        filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided", "using fixedaction_reorder"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun ?\\<gamma> ?p\n   (map (\\<lambda>m. Rule m ?a) (?m1.0 @ ?m2.0 @ ?m3.0)) ?s =\n  approximating_bigstep_fun ?\\<gamma> ?p\n   (map (\\<lambda>m. Rule m ?a) (?m2.0 @ ?m1.0 @ ?m3.0)) ?s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) m2' @\n        [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       ([m2'1] @\n        filter (\\<lambda>x. x = m) m2' @\n        filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided", "by fast"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      [m2'1] @ filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     ([m2'1] @\n      filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "finally"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     ([m2'1] @\n      filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided", "have XX: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x = m] @ Rule m2'1 a # map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x \\<noteq> m]) Undecided =\n                    approximating_bigstep_fun \\<gamma> p (Rule m2'1 a # (map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x = m] @ map (\\<lambda>m. Rule m a) [x\\<leftarrow>m2' . x \\<noteq> m])) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     ([m2'1] @\n      filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n      Rule m2'1 a #\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (Rule m2'1 a #\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n      map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n     Undecided", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (Rule m2'1 a #\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n    map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<And>aa m2.\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) m2 @\n           filter (\\<lambda>x. x \\<noteq> m) m2))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n        Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (filter (\\<lambda>x. x = m) (aa # m2) @\n           filter (\\<lambda>x. x \\<noteq> m) (aa # m2)))\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (aa # m2)) Undecided", "from Cons"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2')\n   Undecided", "show ?case"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2' @\n      filter (\\<lambda>x. x \\<noteq> m) m2'))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2')\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n        filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided", "apply(case_tac \"m2'1 = m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x = m) m2' @\n                 filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 = m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n                          filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided\n 2. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x = m) m2' @\n                 filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n                          filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided", "apply(simp split: action.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 = m\\<rbrakk>\n    \\<Longrightarrow> (a = Log \\<longrightarrow>\n                       matches \\<gamma> m Log p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log)\n                          (filter (\\<lambda>x. x = m) m2') @\n                         map (\\<lambda>m. Rule m Log)\n                          (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2') Undecided) \\<and>\n                      (a = Empty \\<longrightarrow>\n                       matches \\<gamma> m Empty p \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty)\n                          (filter (\\<lambda>x. x = m) m2') @\n                         map (\\<lambda>m. Rule m Empty)\n                          (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2') Undecided)\n 2. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x = m) m2' @\n                 filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n                          filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x = m) m2' @\n                 filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n                          filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided", "apply(simp del: approximating_bigstep_fun.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(simp only: XX)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(case_tac \"matches \\<gamma> m2'1 a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided\n 2. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; \\<not> matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> (case a of Accept \\<Rightarrow> Decision FinalAllow\n                       | Drop \\<Rightarrow> Decision FinalDeny\n                       | Log \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (map (\\<lambda>m. Rule m a)\n                              (filter (\\<lambda>x. x = m) m2') @\n                             map (\\<lambda>m. Rule m a)\n                              (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                            Undecided\n                       | Reject \\<Rightarrow> Decision FinalDeny\n                       | Empty \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (map (\\<lambda>m. Rule m a)\n                              (filter (\\<lambda>x. x = m) m2') @\n                             map (\\<lambda>m. Rule m a)\n                              (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                            Undecided) =\n                      (case a of Accept \\<Rightarrow> Decision FinalAllow\n                       | Drop \\<Rightarrow> Decision FinalDeny\n                       | Log \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (map (\\<lambda>m. Rule m a) m2') Undecided\n                       | Reject \\<Rightarrow> Decision FinalDeny\n                       | Empty \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (map (\\<lambda>m. Rule m a) m2') Undecided)\n 2. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; \\<not> matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(simp split: action.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> (a = Log \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log)\n                          (filter (\\<lambda>x. x = m) m2') @\n                         map (\\<lambda>m. Rule m Log)\n                          (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Log) m2') Undecided) \\<and>\n                      (a = Empty \\<longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty)\n                          (filter (\\<lambda>x. x = m) m2') @\n                         map (\\<lambda>m. Rule m Empty)\n                          (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                        Undecided =\n                       approximating_bigstep_fun \\<gamma> p\n                        (map (\\<lambda>m. Rule m Empty) m2') Undecided)\n 2. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; \\<not> matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (filter (\\<lambda>x. x = m) m2') @\n               map (\\<lambda>m. Rule m a)\n                (filter (\\<lambda>x. x \\<noteq> m) m2'))\n              Undecided =\n             approximating_bigstep_fun \\<gamma> p\n              (map (\\<lambda>m. Rule m a) m2') Undecided;\n     m2'1 \\<noteq> m; \\<not> matches \\<gamma> m2'1 a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a #\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x = m) m2') @\n                        map (\\<lambda>m. Rule m a)\n                         (filter (\\<lambda>x. x \\<noteq> m) m2'))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (Rule m2'1 a # map (\\<lambda>m. Rule m a) m2')\n                       Undecided", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) (m2'1 # m2') @\n      filter (\\<lambda>x. x \\<noteq> m) (m2'1 # m2')))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (m2'1 # m2')) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (filter (\\<lambda>x. x = m) m2 @ filter (\\<lambda>x. x \\<noteq> m) m2))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<not> m \\<notin> set m2 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "finally"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided", "show ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (m # m1)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n     Undecided", "."], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (m # m1))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set m1 = set m2; s = Undecided\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m1) s =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) m2) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s", "using \\<open>s = Undecided\\<close>"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1)\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2)\n   Undecided\n  s = Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m1) s =\n  approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) m2) s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>@{term match_list}\\<close>"], ["", "text\\<open>Reducing the firewall semantics to short-circuit matching evaluation\\<close>"], ["", "fun match_list :: \"('a, 'packet) match_tac \\<Rightarrow> 'a match_expr list \\<Rightarrow> action \\<Rightarrow> 'packet \\<Rightarrow> bool\" where\n   \"match_list \\<gamma> [] a p = False\" |\n   \"match_list \\<gamma> (m#ms) a p = (if matches \\<gamma> m a p then True else match_list \\<gamma> ms a p)\""], ["", "lemma match_list_matches: \"match_list \\<gamma> ms a p \\<longleftrightarrow> (\\<exists>m \\<in> set ms. matches \\<gamma> m a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> ms a p =\n    (\\<exists>m\\<in>set ms. matches \\<gamma> m a p)", "by(induction ms, simp_all)"], ["", "lemma match_list_True: \"match_list \\<gamma> ms a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms) Undecided = (case a of Accept \\<Rightarrow> Decision FinalAllow\n              | Drop \\<Rightarrow> Decision FinalDeny\n              | Reject \\<Rightarrow> Decision FinalDeny\n              | Log \\<Rightarrow> Undecided\n              | Empty \\<Rightarrow> Undecided\n              \\<comment> \\<open>unhandled cases\\<close>\n              )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> ms a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms)\n     Undecided =\n    (case a of Accept \\<Rightarrow> Decision FinalAllow\n     | Drop \\<Rightarrow> Decision FinalDeny | Log \\<Rightarrow> Undecided\n     | Reject \\<Rightarrow> Decision FinalDeny\n     | Empty \\<Rightarrow> Undecided)", "apply(induction ms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. match_list \\<gamma> [] a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    (case a of Accept \\<Rightarrow> Decision FinalAllow\n     | Drop \\<Rightarrow> Decision FinalDeny | Log \\<Rightarrow> Undecided\n     | Reject \\<Rightarrow> Decision FinalDeny\n     | Empty \\<Rightarrow> Undecided)\n 2. \\<And>aa ms.\n       \\<lbrakk>match_list \\<gamma> ms a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms) Undecided =\n                (case a of Accept \\<Rightarrow> Decision FinalAllow\n                 | Drop \\<Rightarrow> Decision FinalDeny\n                 | Log \\<Rightarrow> Undecided\n                 | Reject \\<Rightarrow> Decision FinalDeny\n                 | Empty \\<Rightarrow> Undecided);\n        match_list \\<gamma> (aa # ms) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms)) Undecided =\n                         (case a of Accept \\<Rightarrow> Decision FinalAllow\n                          | Drop \\<Rightarrow> Decision FinalDeny\n                          | Log \\<Rightarrow> Undecided\n                          | Reject \\<Rightarrow> Decision FinalDeny\n                          | Empty \\<Rightarrow> Undecided)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ms.\n       \\<lbrakk>match_list \\<gamma> ms a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms) Undecided =\n                (case a of Accept \\<Rightarrow> Decision FinalAllow\n                 | Drop \\<Rightarrow> Decision FinalDeny\n                 | Log \\<Rightarrow> Undecided\n                 | Reject \\<Rightarrow> Decision FinalDeny\n                 | Empty \\<Rightarrow> Undecided);\n        match_list \\<gamma> (aa # ms) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms)) Undecided =\n                         (case a of Accept \\<Rightarrow> Decision FinalAllow\n                          | Drop \\<Rightarrow> Decision FinalDeny\n                          | Log \\<Rightarrow> Undecided\n                          | Reject \\<Rightarrow> Decision FinalDeny\n                          | Empty \\<Rightarrow> Undecided)", "apply(simp split: if_split_asm action.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ms.\n       \\<lbrakk>match_list \\<gamma> ms a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms) Undecided =\n                (case a of Accept \\<Rightarrow> Decision FinalAllow\n                 | Drop \\<Rightarrow> Decision FinalDeny\n                 | Log \\<Rightarrow> Undecided\n                 | Reject \\<Rightarrow> Decision FinalDeny\n                 | Empty \\<Rightarrow> Undecided);\n        matches \\<gamma> aa a p\\<rbrakk>\n       \\<Longrightarrow> (a = Log \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Log) ms) Undecided =\n                          Undecided) \\<and>\n                         (a = Empty \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (map (\\<lambda>m. Rule m Empty) ms) Undecided =\n                          Undecided)", "apply(simp add: fixed_action_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma match_list_False: \"\\<not> match_list \\<gamma> ms a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms) Undecided = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> match_list \\<gamma> ms a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms)\n     Undecided =\n    Undecided", "apply(induction ms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> match_list \\<gamma> [] a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    Undecided\n 2. \\<And>aa ms.\n       \\<lbrakk>\\<not> match_list \\<gamma> ms a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms) Undecided =\n                Undecided;\n        \\<not> match_list \\<gamma> (aa # ms) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms)) Undecided =\n                         Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ms.\n       \\<lbrakk>\\<not> match_list \\<gamma> ms a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms) Undecided =\n                Undecided;\n        \\<not> match_list \\<gamma> (aa # ms) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms)) Undecided =\n                         Undecided", "apply(simp split: if_split_asm action.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>The key idea behind @{const match_list}: Reducing semantics to match list\\<close>"], ["", "lemma match_list_semantics: \"match_list \\<gamma> ms1 a p \\<longleftrightarrow> match_list \\<gamma> ms2 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1) s = approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms2) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> ms1 a p =\n    match_list \\<gamma> ms2 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1)\n     s =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms2) s", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>match_list \\<gamma> ms1 a p = match_list \\<gamma> ms2 a p;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) ms1) s =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) ms2) s", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>match_list \\<gamma> ms1 a p = match_list \\<gamma> ms2 a p;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                      approximating_bigstep_fun \\<gamma> p\n                       (map (\\<lambda>m. Rule m a) ms2) Undecided", "apply(thin_tac \"s = Undecided\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> ms1 a p =\n    match_list \\<gamma> ms2 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms2)\n     Undecided", "apply(induction ms2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. match_list \\<gamma> ms1 a p =\n    match_list \\<gamma> [] a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided\n 2. \\<And>aa ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (aa # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms2)) Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> match_list \\<gamma> ms1 a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) ms1)\n     Undecided =\n    Undecided\n 2. \\<And>aa ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (aa # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms2)) Undecided", "apply(induction ms1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<not> match_list \\<gamma> [] a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) [])\n     Undecided =\n    Undecided\n 2. \\<And>aa ms1.\n       \\<lbrakk>\\<not> match_list \\<gamma> ms1 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                Undecided;\n        \\<not> match_list \\<gamma> (aa # ms1) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms1))\n                          Undecided =\n                         Undecided\n 3. \\<And>aa ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (aa # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms2)) Undecided", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ms1.\n       \\<lbrakk>\\<not> match_list \\<gamma> ms1 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                Undecided;\n        \\<not> match_list \\<gamma> (aa # ms1) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms1))\n                          Undecided =\n                         Undecided\n 2. \\<And>aa ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (aa # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms2)) Undecided", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (aa # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (aa # ms2)) Undecided", "apply(rename_tac m ms2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m ms2.\n       \\<lbrakk>match_list \\<gamma> ms1 a p =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        match_list \\<gamma> (m # ms2) a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) (m # ms2)) Undecided", "apply(simp del: approximating_bigstep_fun.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m ms2.\n       \\<lbrakk>(if matches \\<gamma> m a p then True\n                 else match_list \\<gamma> ms2 a p) =\n                match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        match_list \\<gamma> ms1 a p =\n        (if matches \\<gamma> m a p then True\n         else match_list \\<gamma> ms2 a p)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # map (\\<lambda>m. Rule m a) ms2)\n                          Undecided", "apply(simp split: if_split_asm del: approximating_bigstep_fun.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m ms2.\n       \\<lbrakk>match_list \\<gamma> ms2 a p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        matches \\<gamma> m a p; match_list \\<gamma> ms1 a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # map (\\<lambda>m. Rule m a) ms2)\n                          Undecided\n 2. \\<And>m ms2.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        \\<not> matches \\<gamma> m a p;\n        match_list \\<gamma> ms1 a p = match_list \\<gamma> ms2 a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms2) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # map (\\<lambda>m. Rule m a) ms2)\n                          Undecided", "apply(simp split: action.split add: match_list_True fixed_action_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m ms2.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms1) Undecided =\n                approximating_bigstep_fun \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) ms2) Undecided;\n        \\<not> matches \\<gamma> m a p;\n        match_list \\<gamma> ms1 a p = match_list \\<gamma> ms2 a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (map (\\<lambda>m. Rule m a) ms2) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # map (\\<lambda>m. Rule m a) ms2)\n                          Undecided", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>We can exploit de-morgan to get a disjunction in the match expression!\\<close>"], ["", "(*but we need to normalize afterwards, which is quite slow*)"], ["", "fun match_list_to_match_expr :: \"'a match_expr list \\<Rightarrow> 'a match_expr\" where\n    \"match_list_to_match_expr [] = MatchNot MatchAny\" |\n    \"match_list_to_match_expr (m#ms) = MatchOr m (match_list_to_match_expr ms)\""], ["", "text\\<open>@{const match_list_to_match_expr} constructs a unwieldy @{typ \"'a match_expr\"} from a list.\n        The semantics of the resulting match expression is the disjunction of the elements of the list.\n        This is handy because the normal match expressions do not directly support disjunction.\n        Use this function with care because the resulting match expression is very ugly!\\<close>"], ["", "lemma match_list_to_match_expr_disjunction: \"match_list \\<gamma> ms a p \\<longleftrightarrow> matches \\<gamma> (match_list_to_match_expr ms) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> ms a p =\n    matches \\<gamma> (match_list_to_match_expr ms) a p", "apply(induction ms rule: match_list_to_match_expr.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. match_list \\<gamma> [] a p =\n    matches \\<gamma> (match_list_to_match_expr []) a p\n 2. \\<And>m ms.\n       match_list \\<gamma> ms a p =\n       matches \\<gamma> (match_list_to_match_expr ms) a p \\<Longrightarrow>\n       match_list \\<gamma> (m # ms) a p =\n       matches \\<gamma> (match_list_to_match_expr (m # ms)) a p", "apply(simp add: bunch_of_lemmata_about_matches; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m ms.\n       match_list \\<gamma> ms a p =\n       matches \\<gamma> (match_list_to_match_expr ms) a p \\<Longrightarrow>\n       match_list \\<gamma> (m # ms) a p =\n       matches \\<gamma> (match_list_to_match_expr (m # ms)) a p", "apply(simp add: MatchOr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma match_list_singleton: \"match_list \\<gamma> [m] a p \\<longleftrightarrow> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [m] a p = matches \\<gamma> m a p", "by(simp)"], ["", "lemma match_list_append: \"match_list \\<gamma> (m1@m2) a p \\<longleftrightarrow> (\\<not> match_list \\<gamma> m1 a p \\<longrightarrow> match_list \\<gamma> m2 a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> (m1 @ m2) a p =\n    (\\<not> match_list \\<gamma> m1 a p \\<longrightarrow>\n     match_list \\<gamma> m2 a p)", "by(induction m1) simp+"], ["", "lemma match_list_helper1: \"\\<not> matches \\<gamma> m2 a p \\<Longrightarrow> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m2 a p;\n     match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a p\\<rbrakk>\n    \\<Longrightarrow> False", "apply(induction m1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m2 a p;\n     match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) []) a p\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>aa m1'.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> m2 a p;\n                 match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                  p\\<rbrakk>\n                \\<Longrightarrow> False;\n        \\<not> matches \\<gamma> m2 a p;\n        match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) (aa # m1')) a\n         p\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1'.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> m2 a p;\n                 match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                  p\\<rbrakk>\n                \\<Longrightarrow> False;\n        \\<not> matches \\<gamma> m2 a p;\n        match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) (aa # m1')) a\n         p\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p \\<Longrightarrow>\n                False;\n        \\<not> matches \\<gamma> m2 a p;\n        matches \\<gamma> (MatchAnd aa m2) a p\\<rbrakk>\n       \\<Longrightarrow> False", "by(auto dest: matches_dest)"], ["", "lemma match_list_helper2: \" \\<not> matches \\<gamma> m a p \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p", "apply(induction m2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma> (map (MatchAnd m) []) a p\n 2. \\<And>aa m2'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (map (MatchAnd m) (aa # m2')) a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (map (MatchAnd m) (aa # m2')) a p", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> (map (MatchAnd m) m2') a p;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd m aa) a p", "by(auto dest: matches_dest)"], ["", "lemma match_list_helper3: \"matches \\<gamma> m a p \\<Longrightarrow> match_list \\<gamma> m2' a p \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) m2') a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m a p; match_list \\<gamma> m2' a p\\<rbrakk>\n    \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) m2') a p", "apply(induction m2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m a p; match_list \\<gamma> [] a p\\<rbrakk>\n    \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) []) a p\n 2. \\<And>aa m2'.\n       \\<lbrakk>\\<lbrakk>matches \\<gamma> m a p;\n                 match_list \\<gamma> m2' a p\\<rbrakk>\n                \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) m2')\n                                   a p;\n        matches \\<gamma> m a p; match_list \\<gamma> (aa # m2') a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) (aa # m2')) a\n                          p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<lbrakk>matches \\<gamma> m a p;\n                 match_list \\<gamma> m2' a p\\<rbrakk>\n                \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) m2')\n                                   a p;\n        matches \\<gamma> m a p; match_list \\<gamma> (aa # m2') a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> (map (MatchAnd m) (aa # m2')) a\n                          p", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>match_list \\<gamma> m2' a p \\<Longrightarrow>\n                match_list \\<gamma> (map (MatchAnd m) m2') a p;\n        matches \\<gamma> m a p; matches \\<gamma> aa a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd m aa) a\n                                 p \\<longrightarrow>\n                         match_list \\<gamma> (map (MatchAnd m) m2') a p", "by (simp add: matches_simps)"], ["", "lemma match_list_helper4: \"\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p", "apply(induction m2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> match_list \\<gamma> [] a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma> (map (MatchAnd aa) []) a p\n 2. \\<And>ab m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> match_list \\<gamma> (ab # m2') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (map (MatchAnd aa) (ab # m2')) a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> match_list \\<gamma> (ab # m2') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (map (MatchAnd aa) (ab # m2')) a p", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ab m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> matches \\<gamma> ab a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd aa ab) a p", "by(auto dest: matches_dest)"], ["", "lemma match_list_helper5: \" \\<not> match_list \\<gamma> m2' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma>\n            (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p", "apply(induction m2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> match_list \\<gamma> [] a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma>\n            (concat (map (\\<lambda>x. map (MatchAnd x) []) m1')) a p\n 2. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> match_list \\<gamma> (aa # m2') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      map (MatchAnd x) (aa # m2'))\n                                     m1'))\n                                 a p", "apply(simp add:empty_concat; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m2' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> match_list \\<gamma> (aa # m2') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      map (MatchAnd x) (aa # m2'))\n                                     m1'))\n                                 a p", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> matches \\<gamma> aa a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aa # map (MatchAnd x) m2')\n                                     m1'))\n                                 a p", "apply(induction m1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (concat (map (\\<lambda>x. map (MatchAnd x) m2') []))\n                        a p;\n        \\<not> matches \\<gamma> aa a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aa # map (MatchAnd x) m2')\n                                     []))\n                                 a p\n 2. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<lbrakk>\\<not> match_list \\<gamma>\n                                    (concat\n(map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                                    a p;\n                    \\<not> matches \\<gamma> aa a p;\n                    \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n                   \\<Longrightarrow> \\<not> match_list \\<gamma>\n       (concat (map (\\<lambda>x. MatchAnd x aa # map (MatchAnd x) m2') m1'))\n       a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') (aa # m1')))\n                a p;\n        \\<not> matches \\<gamma> aaa a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aaa # map (MatchAnd x) m2')\n                                     (aa # m1')))\n                                 a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<lbrakk>\\<not> match_list \\<gamma>\n                                    (concat\n(map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                                    a p;\n                    \\<not> matches \\<gamma> aa a p;\n                    \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n                   \\<Longrightarrow> \\<not> match_list \\<gamma>\n       (concat (map (\\<lambda>x. MatchAnd x aa # map (MatchAnd x) m2') m1'))\n       a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') (aa # m1')))\n                a p;\n        \\<not> matches \\<gamma> aaa a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aaa # map (MatchAnd x) m2')\n                                     (aa # m1')))\n                                 a p", "apply(simp add: match_list_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<lbrakk>\\<not> match_list \\<gamma>\n                                    (concat\n(map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                                    a p;\n                    \\<not> matches \\<gamma> aa a p;\n                    \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n                   \\<Longrightarrow> \\<not> match_list \\<gamma>\n       (concat (map (\\<lambda>x. MatchAnd x aa # map (MatchAnd x) m2') m1'))\n       a p;\n        \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p \\<and>\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> matches \\<gamma> aaa a p;\n        \\<not> match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd aa aaa) a p", "by(auto dest: matches_dest)"], ["", "lemma match_list_helper6: \"\\<not> match_list \\<gamma> m1' a p \\<Longrightarrow> \\<not> match_list \\<gamma> (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> match_list \\<gamma> m1' a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma>\n            (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p", "apply(induction m2')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> match_list \\<gamma> m1' a p \\<Longrightarrow>\n    \\<not> match_list \\<gamma>\n            (concat (map (\\<lambda>x. map (MatchAnd x) []) m1')) a p\n 2. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m1' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      map (MatchAnd x) (aa # m2'))\n                                     m1'))\n                                 a p", "apply(simp add:empty_concat; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma> m1' a p \\<Longrightarrow>\n                \\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      map (MatchAnd x) (aa # m2'))\n                                     m1'))\n                                 a p", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (concat\n                          (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                        a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aa # map (MatchAnd x) m2')\n                                     m1'))\n                                 a p", "apply(induction m1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m2'.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (concat (map (\\<lambda>x. map (MatchAnd x) m2') []))\n                        a p;\n        \\<not> match_list \\<gamma> [] a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aa # map (MatchAnd x) m2')\n                                     []))\n                                 a p\n 2. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<lbrakk>\\<not> match_list \\<gamma>\n                                    (concat\n(map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                                    a p;\n                    \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n                   \\<Longrightarrow> \\<not> match_list \\<gamma>\n       (concat (map (\\<lambda>x. MatchAnd x aa # map (MatchAnd x) m2') m1'))\n       a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') (aa # m1')))\n                a p;\n        \\<not> match_list \\<gamma> (aa # m1') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aaa # map (MatchAnd x) m2')\n                                     (aa # m1')))\n                                 a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<lbrakk>\\<not> match_list \\<gamma>\n                                    (concat\n(map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                                    a p;\n                    \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n                   \\<Longrightarrow> \\<not> match_list \\<gamma>\n       (concat (map (\\<lambda>x. MatchAnd x aa # map (MatchAnd x) m2') m1'))\n       a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') (aa # m1')))\n                a p;\n        \\<not> match_list \\<gamma> (aa # m1') a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma>\n                                 (concat\n                                   (map (\\<lambda>x.\n      MatchAnd x aaa # map (MatchAnd x) m2')\n                                     (aa # m1')))\n                                 a p", "apply(simp add: match_list_append split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1' aaa m2'.\n       \\<lbrakk>\\<And>aa m2'.\n                   \\<not> match_list \\<gamma>\n                           (concat\n                             (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                           a p \\<Longrightarrow>\n                   \\<not> match_list \\<gamma>\n                           (concat\n                             (map (\\<lambda>x.\nMatchAnd x aa # map (MatchAnd x) m2')\n                               m1'))\n                           a p;\n        \\<not> matches \\<gamma> aa a p;\n        \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd aa aaa) a p", "by(auto dest: matches_dest)"], ["", "lemmas match_list_helper = match_list_helper1 match_list_helper2 match_list_helper3 match_list_helper4 match_list_helper5 match_list_helper6"], ["", "hide_fact match_list_helper1 match_list_helper2 match_list_helper3 match_list_helper4 match_list_helper5 match_list_helper6"], ["", "lemma match_list_map_And1: \"matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p \\<Longrightarrow>\n           matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> match_list \\<gamma>  (map (\\<lambda>x. MatchAnd x m2) m1') a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p \\<Longrightarrow>\n    matches \\<gamma> (MatchAnd m1 m2) a p =\n    match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a p", "apply(induction m1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches \\<gamma> m1 a p = match_list \\<gamma> [] a p \\<Longrightarrow>\n    matches \\<gamma> (MatchAnd m1 m2) a p =\n    match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) []) a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> m1 a p =\n                match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> m1 a p =\n        match_list \\<gamma> (aa # m1') a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) (aa # m1')) a p", "apply(auto dest: matches_dest; fail)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> m1 a p =\n                match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> m1 a p =\n        match_list \\<gamma> (aa # m1') a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) (aa # m1')) a p", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> (matches \\<gamma> (MatchAnd aa m2) a\n                           p \\<longrightarrow>\n                          matches \\<gamma> (MatchAnd m1 m2) a p) \\<and>\n                         (\\<not> matches \\<gamma> (MatchAnd aa m2) a\n                                  p \\<longrightarrow>\n                          matches \\<gamma> (MatchAnd m1 m2) a p =\n                          match_list \\<gamma>\n                           (map (\\<lambda>x. MatchAnd x m2) m1') a p)\n 2. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd aa m2) a\n                          p \\<longrightarrow>\n                         match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) m1') a p", "apply safe"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n        matches \\<gamma> (MatchAnd aa m2) a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n        \\<not> matches \\<gamma> (MatchAnd aa m2) a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) m1') a p\n 3. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                 p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n        \\<not> matches \\<gamma> (MatchAnd aa m2) a p;\n        match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n         p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) m1') a p\n 5. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (map (\\<lambda>x. MatchAnd x m2) m1') a p", "apply(simp_all add: matches_simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow> False;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n        \\<not> matches \\<gamma> m2 a p;\n        match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n         p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> m2 a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False", "apply(auto dest: match_list_helper(1))[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> m2 a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> (MatchAnd aa m2) a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma> (map (\\<lambda>x. MatchAnd x m2) m1') a\n                p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False", "by(auto dest: matches_dest)"], ["", "lemma matches_list_And_concat: \"matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p \\<Longrightarrow> matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p \\<Longrightarrow>\n           matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> match_list \\<gamma> [MatchAnd x y. x <- m1', y <- m2'] a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p;\n     matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                       a p", "apply(induction m1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m1 a p = match_list \\<gamma> [] a p;\n     matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat (map (\\<lambda>x. map (MatchAnd x) m2') []))\n                       a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>\\<lbrakk>matches \\<gamma> m1 a p =\n                         match_list \\<gamma> m1' a p;\n                 matches \\<gamma> m2 a p =\n                 match_list \\<gamma> m2' a p\\<rbrakk>\n                \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                                  match_list \\<gamma>\n                                   (concat\n                                     (map (\\<lambda>x. map (MatchAnd x) m2')\n m1'))\n                                   a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> (aa # m1') a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2')\n                              (aa # m1')))\n                          a p", "apply(auto dest: matches_dest; fail)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa m1'.\n       \\<lbrakk>\\<lbrakk>matches \\<gamma> m1 a p =\n                         match_list \\<gamma> m1' a p;\n                 matches \\<gamma> m2 a p =\n                 match_list \\<gamma> m2' a p\\<rbrakk>\n                \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                                  match_list \\<gamma>\n                                   (concat\n                                     (map (\\<lambda>x. map (MatchAnd x) m2')\n m1'))\n                                   a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> (aa # m1') a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2')\n                              (aa # m1')))\n                          a p", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p", "apply(simp add: match_list_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p =\n                         (\\<not> match_list \\<gamma> (map (MatchAnd aa) m2')\n                                  a p \\<longrightarrow>\n                          match_list \\<gamma>\n                           (concat\n                             (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                           a p)\n 2. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p", "apply(subgoal_tac \"\\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p;\n        \\<not> match_list \\<gamma> (map (MatchAnd aa) m2') a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p =\n                         (\\<not> match_list \\<gamma> (map (MatchAnd aa) m2')\n                                  a p \\<longrightarrow>\n                          match_list \\<gamma>\n                           (concat\n                             (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                           a p)\n 2. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd aa) m2')\n                                 a p\n 3. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p", "apply(simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> aa a p;\n        matches \\<gamma> m1 a p = match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_list \\<gamma> (map (MatchAnd aa) m2')\n                                 a p\n 2. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p = match_list \\<gamma> m2' a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                         match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p", "apply safe"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p;\n        match_list \\<gamma>\n         (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p;\n        match_list \\<gamma>\n         (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p;\n        match_list \\<gamma>\n         (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> matches \\<gamma> m2 a p; \\<not> match_list \\<gamma> m2' a p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p;\n        match_list \\<gamma>\n         (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> matches \\<gamma> m2 a p; \\<not> match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> matches \\<gamma> m2 a p; \\<not> match_list \\<gamma> m2' a p;\n        matches \\<gamma> m1 a p; match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>aa m1'.\n       \\<lbrakk>\\<not> matches \\<gamma> aa a p;\n        match_list \\<gamma> (map (MatchAnd aa) m2') a p;\n        \\<not> matches \\<gamma> (MatchAnd m1 m2) a p;\n        \\<not> match_list \\<gamma>\n                (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        \\<not> matches \\<gamma> m2 a p; \\<not> match_list \\<gamma> m2' a p;\n        \\<not> matches \\<gamma> m1 a p;\n        \\<not> match_list \\<gamma> m1' a p\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>aa m1'.\n       \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                matches \\<gamma> (MatchAnd m1 m2) a p =\n                match_list \\<gamma>\n                 (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n        matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n        matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n        matches \\<gamma> (MatchAnd m1 m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma>\n                          (map (MatchAnd aa) m2' @\n                           concat\n                            (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n                          a p\n 10. \\<And>aa m1'.\n        \\<lbrakk>match_list \\<gamma> m1' a p \\<Longrightarrow>\n                 matches \\<gamma> (MatchAnd m1 m2) a p =\n                 match_list \\<gamma>\n                  (concat (map (\\<lambda>x. map (MatchAnd x) m2') m1')) a p;\n         matches \\<gamma> aa a p; matches \\<gamma> m1 a p;\n         matches \\<gamma> m2 a p; match_list \\<gamma> m2' a p;\n         match_list \\<gamma>\n          (map (MatchAnd aa) m2' @\n           concat (map (\\<lambda>x. map (MatchAnd x) m2') m1'))\n          a p\\<rbrakk>\n        \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p\nA total of 12 subgoals...", "apply(simp_all add: matches_simps match_list_append match_list_helper)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma match_list_concat: \"match_list \\<gamma> (concat lss) a p \\<longleftrightarrow> (\\<exists>ls \\<in> set lss. match_list \\<gamma> ls a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> (concat lss) a p =\n    (\\<exists>ls\\<in>set lss. match_list \\<gamma> ls a p)", "apply(induction lss)"], ["proof (prove)\ngoal (2 subgoals):\n 1. match_list \\<gamma> (concat []) a p =\n    (\\<exists>ls\\<in>set []. match_list \\<gamma> ls a p)\n 2. \\<And>aa lss.\n       match_list \\<gamma> (concat lss) a p =\n       (\\<exists>ls\\<in>set lss.\n           match_list \\<gamma> ls a p) \\<Longrightarrow>\n       match_list \\<gamma> (concat (aa # lss)) a p =\n       (\\<exists>ls\\<in>set (aa # lss). match_list \\<gamma> ls a p)", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa lss.\n       match_list \\<gamma> (concat lss) a p =\n       (\\<exists>ls\\<in>set lss.\n           match_list \\<gamma> ls a p) \\<Longrightarrow>\n       match_list \\<gamma> (concat (aa # lss)) a p =\n       (\\<exists>ls\\<in>set (aa # lss). match_list \\<gamma> ls a p)", "by(auto simp add: match_list_append)"], ["", "lemma fixedaction_wf_ruleset: \"wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) \\<longleftrightarrow>\n  \\<not> match_list \\<gamma> ms a p \\<or> \\<not> (\\<exists>chain. a = Call chain) \\<and> a \\<noteq> Return \\<and> \\<not> (\\<exists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) =\n    (\\<not> match_list \\<gamma> ms a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) =\n    (\\<not> match_list \\<gamma> ms a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)", "have helper: \"\\<And>a b c. a \\<longleftrightarrow> c \\<Longrightarrow> (a \\<longrightarrow> b) = (c \\<longrightarrow> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       a = c \\<Longrightarrow>\n       (a \\<longrightarrow> b) = (c \\<longrightarrow> b)", "by fast"], ["proof (state)\nthis:\n  ?a = ?c \\<Longrightarrow>\n  (?a \\<longrightarrow> ?b) = (?c \\<longrightarrow> ?b)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) =\n    (\\<not> match_list \\<gamma> ms a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) =\n    (\\<not> match_list \\<gamma> ms a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)", "apply(simp add: wf_ruleset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>r\\<in>set ms. matches \\<gamma> r a p) \\<longrightarrow>\n     (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<forall>chain. a \\<noteq> Goto chain) \\<and> a \\<noteq> Unknown) =\n    (match_list \\<gamma> ms a p \\<longrightarrow>\n     (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<forall>chain. a \\<noteq> Goto chain) \\<and> a \\<noteq> Unknown)", "apply(rule helper)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r\\<in>set ms. matches \\<gamma> r a p) =\n    match_list \\<gamma> ms a p", "apply(induction ms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>r\\<in>set []. matches \\<gamma> r a p) =\n    match_list \\<gamma> [] a p\n 2. \\<And>aa ms.\n       (\\<exists>r\\<in>set ms. matches \\<gamma> r a p) =\n       match_list \\<gamma> ms a p \\<Longrightarrow>\n       (\\<exists>r\\<in>set (aa # ms). matches \\<gamma> r a p) =\n       match_list \\<gamma> (aa # ms) a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ms.\n       (\\<exists>r\\<in>set ms. matches \\<gamma> r a p) =\n       match_list \\<gamma> ms a p \\<Longrightarrow>\n       (\\<exists>r\\<in>set (aa # ms). matches \\<gamma> r a p) =\n       match_list \\<gamma> (aa # ms) a p", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) ms) =\n  (\\<not> match_list \\<gamma> ms a p \\<or>\n   (\\<nexists>chain. a = Call chain) \\<and>\n   a \\<noteq> Return \\<and>\n   (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_ruleset_singleton: \"wf_ruleset \\<gamma> p [Rule m a] \\<longleftrightarrow> \\<not> matches \\<gamma> m a p \\<or> \\<not> (\\<exists>chain. a = Call chain) \\<and> a \\<noteq> Return \\<and> \\<not> (\\<exists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule m a] =\n    (\\<not> matches \\<gamma> m a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown)", "by(simp add: wf_ruleset_def)"], ["", "end"]]}