{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Optimizing.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma rmshadow_sound: \n    \"simple_ruleset rs \\<Longrightarrow> p \\<in> P \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) = approximating_bigstep_fun \\<gamma> p rs\"", "lemma rmMatchFalse_correct: \"approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma cut_off_after_match_any:\n  \"approximating_bigstep_fun \\<gamma> p (cut_off_after_match_any rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma cut_off_after_match_any_simplers: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (cut_off_after_match_any rs)\"", "lemma cut_off_after_match_any_preserve_matches:\n  \"\\<forall> r \\<in> set rs. P (get_match r) \\<Longrightarrow> \\<forall> r \\<in> set (cut_off_after_match_any rs). P (get_match r)\""], "translations": [["", "lemma rmshadow_sound: \n    \"simple_ruleset rs \\<Longrightarrow> p \\<in> P \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) = approximating_bigstep_fun \\<gamma> p rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> rs P) =\n                      approximating_bigstep_fun \\<gamma> p rs", "proof(induction rs arbitrary: P)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>simple_ruleset []; p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> [] P) =\n                         approximating_bigstep_fun \\<gamma> p []\n 2. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "case Nil"], ["proof (state)\nthis:\n  simple_ruleset []\n  p \\<in> P\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>simple_ruleset []; p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> [] P) =\n                         approximating_bigstep_fun \\<gamma> p []\n 2. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "thus ?case"], ["proof (prove)\nusing this:\n  simple_ruleset []\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> [] P) =\n    approximating_bigstep_fun \\<gamma> p []", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> [] P) =\n  approximating_bigstep_fun \\<gamma> p []\n\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "case (Cons r rs)"], ["proof (state)\nthis:\n  \\<lbrakk>simple_ruleset rs; p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs ?P) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "let ?fw=\"approximating_bigstep_fun \\<gamma>\" \\<comment> \\<open>firewall semantics\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "let ?rm=\"rmshadow \\<gamma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "let ?match=\"matches \\<gamma> (get_match r) (get_action r)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "let ?set=\"{p \\<in> P. \\<not> ?match p}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "from Cons.IH Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>simple_ruleset rs; p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs ?P) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P", "have IH: \"?fw p (?rm rs P) = ?fw p rs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>simple_ruleset rs; p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs ?P) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n    approximating_bigstep_fun \\<gamma> p rs", "by (simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "from Cons.IH[of \"?set\"] Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>simple_ruleset rs;\n   p \\<in> {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs\n                       {p \\<in> P.\n                        \\<not> matches \\<gamma> (get_match r) (get_action r)\n                                p}) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P", "have IH': \"p \\<in> ?set \\<Longrightarrow> ?fw p (?rm rs ?set) = ?fw p rs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>simple_ruleset rs;\n   p \\<in> {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs\n                       {p \\<in> P.\n                        \\<not> matches \\<gamma> (get_match r) (get_action r)\n                                p}) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. p \\<in> {p \\<in> P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r)\n                     p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p rs", "by (simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r)\n                   p} \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. \\<And>a rs P.\n       \\<lbrakk>\\<And>P.\n                   \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(rmshadow \\<gamma> rs P) =\n                                     approximating_bigstep_fun \\<gamma> p\nrs;\n        simple_ruleset (a # rs); p \\<in> P\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (a # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (a # rs)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>simple_ruleset rs; p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs ?P) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>simple_ruleset rs; p \\<in> ?P\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (rmshadow \\<gamma> rs ?P) =\n                    approximating_bigstep_fun \\<gamma> p rs\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "proof(cases \"\\<forall>p\\<in>P. \\<not> ?match p\") \\<comment> \\<open>the if-condition of rmshadow\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<forall>p\\<in>P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "case True"], ["proof (state)\nthis:\n  \\<forall>p\\<in>P. \\<not> matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<forall>p\\<in>P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "from True"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>P. \\<not> matches \\<gamma> (get_match r) (get_action r) p", "have 1: \"?rm (r#rs) P = ?rm rs P\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>P. \\<not> matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (1 subgoal):\n 1. rmshadow \\<gamma> (r # rs) P = rmshadow \\<gamma> rs P", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>p\\<in>P.\n                   \\<not> matches \\<gamma> (get_match r) (get_action r) p;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> rmshadow \\<gamma> (r # rs) P =\n                         rmshadow \\<gamma> rs P", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>p\\<in>P.\n                   \\<not> matches \\<gamma> (get_match r) (get_action r) p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> rmshadow \\<gamma> (r # rs) P =\n                         rmshadow \\<gamma> rs P", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>p\\<in>P.\n                   \\<not> matches \\<gamma> (get_match (Rule m a))\n                           (get_action (Rule m a)) p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> rmshadow \\<gamma> (Rule m a # rs) P =\n                         rmshadow \\<gamma> rs P", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rmshadow \\<gamma> (r # rs) P = rmshadow \\<gamma> rs P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<forall>p\\<in>P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "from True Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>p\\<in>P. \\<not> matches \\<gamma> (get_match r) (get_action r) p\n  simple_ruleset (r # rs)\n  p \\<in> P", "have \"?fw p (r # rs) = ?fw p rs\""], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>P. \\<not> matches \\<gamma> (get_match r) (get_action r) p\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (r # rs) =\n    approximating_bigstep_fun \\<gamma> p rs", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>p\\<in>P.\n                   \\<not> matches \\<gamma> (get_match r) (get_action r) p;\n        simple_ruleset (r # rs); p \\<in> P; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs) =\n                         approximating_bigstep_fun \\<gamma> p rs", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>p\\<in>P.\n                   \\<not> matches \\<gamma> (get_match r) (get_action r) p;\n        simple_ruleset (r # rs); p \\<in> P; r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (r # rs) =\n                         approximating_bigstep_fun \\<gamma> p rs", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>p\\<in>P. \\<not> matches \\<gamma> m a p;\n        simple_ruleset (Rule m a # rs); p \\<in> P; r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            approximating_bigstep_fun \\<gamma> p\n                             (Rule m a # rs) x =\n                            approximating_bigstep_fun \\<gamma> p rs x", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a x.\n       \\<lbrakk>\\<forall>p\\<in>P. \\<not> matches \\<gamma> m a p;\n        simple_ruleset (Rule m a # rs); p \\<in> P; r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x =\n                         approximating_bigstep_fun \\<gamma> p rs x", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a x.\n       \\<lbrakk>\\<forall>p\\<in>P. \\<not> matches \\<gamma> m a p;\n        simple_ruleset (Rule m a # rs); p \\<in> P; r = Rule m a;\n        x = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x =\n                         approximating_bigstep_fun \\<gamma> p rs x", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (r # rs) =\n  approximating_bigstep_fun \\<gamma> p rs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<forall>p\\<in>P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "from this IH"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (r # rs) =\n  approximating_bigstep_fun \\<gamma> p rs\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p rs", "have \"?fw p (?rm rs P) = ?fw p (r#rs) \""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (r # rs) =\n  approximating_bigstep_fun \\<gamma> p rs\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<forall>p\\<in>P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "thus \"?fw p (?rm (r#rs) P) = ?fw p (r#rs) \""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "using 1"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> rs P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n  rmshadow \\<gamma> (r # rs) P = rmshadow \\<gamma> rs P\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "case False \\<comment> \\<open>else\\<close>"], ["proof (state)\nthis:\n  \\<not> (\\<forall>p\\<in>P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r) p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "have \"?fw p (r # (?rm rs ?set)) = ?fw p (r # rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "proof(cases \"p \\<in> ?set\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> {p \\<in> P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r)\n                     p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "case True"], ["proof (state)\nthis:\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n\ngoal (2 subgoals):\n 1. p \\<in> {p \\<in> P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r)\n                     p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)\n 2. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "from True IH'"], ["proof (chain)\npicking this:\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r)\n                   p} \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p rs", "show \"?fw p (r # (?rm rs ?set)) = ?fw p (r#rs)\""], ["proof (prove)\nusing this:\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n  p \\<in> {p \\<in> P.\n           \\<not> matches \\<gamma> (get_match r) (get_action r)\n                   p} \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>p \\<in> {p \\<in> P.\n                         \\<not> matches \\<gamma> (get_match r)\n                                 (get_action r) p};\n        p \\<in> {p \\<in> P.\n                 \\<not> matches \\<gamma> (get_match r) (get_action r)\n                         p} \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p\n         (rmshadow \\<gamma> rs\n           {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n        approximating_bigstep_fun \\<gamma> p rs;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (r #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P.\n                             \\<not> matches \\<gamma> (get_match r)\n                                     (get_action r) p}) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>p \\<in> {p \\<in> P.\n                         \\<not> matches \\<gamma> (get_match r)\n                                 (get_action r) p};\n        p \\<in> {p \\<in> P.\n                 \\<not> matches \\<gamma> (get_match r) (get_action r)\n                         p} \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p\n         (rmshadow \\<gamma> rs\n           {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n        approximating_bigstep_fun \\<gamma> p rs;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (r #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P.\n                             \\<not> matches \\<gamma> (get_match r)\n                                     (get_action r) p}) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>p \\<in> P \\<and> \\<not> matches \\<gamma> m a p;\n        \\<forall>x.\n           approximating_bigstep_fun \\<gamma> p\n            (rmshadow \\<gamma> rs\n              {p \\<in> P. \\<not> matches \\<gamma> m a p})\n            x =\n           approximating_bigstep_fun \\<gamma> p rs x;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            approximating_bigstep_fun \\<gamma> p\n                             (Rule m a #\n                              rmshadow \\<gamma> rs\n                               {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                             x =\n                            approximating_bigstep_fun \\<gamma> p\n                             (Rule m a # rs) x", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a x.\n       \\<lbrakk>\\<forall>x.\n                   approximating_bigstep_fun \\<gamma> p\n                    (rmshadow \\<gamma> rs\n                      {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                    x =\n                   approximating_bigstep_fun \\<gamma> p rs x;\n        r = Rule m a; p \\<in> P; \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                          x =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a x.\n       \\<lbrakk>\\<forall>x.\n                   approximating_bigstep_fun \\<gamma> p\n                    (rmshadow \\<gamma> rs\n                      {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                    x =\n                   approximating_bigstep_fun \\<gamma> p rs x;\n        r = Rule m a; p \\<in> P; \\<not> matches \\<gamma> m a p;\n        x = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                          x =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (r #\n    rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "case False"], ["proof (state)\nthis:\n  p \\<notin> {p \\<in> P.\n              \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "from False Cons.prems"], ["proof (chain)\npicking this:\n  p \\<notin> {p \\<in> P.\n              \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n  simple_ruleset (r # rs)\n  p \\<in> P", "have \"?match p\""], ["proof (prove)\nusing this:\n  p \\<notin> {p \\<in> P.\n              \\<not> matches \\<gamma> (get_match r) (get_action r) p}\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (get_match r) (get_action r) p", "by simp"], ["proof (state)\nthis:\n  matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "from Cons.prems"], ["proof (chain)\npicking this:\n  simple_ruleset (r # rs)\n  p \\<in> P", "have \"get_action r = Accept \\<or> get_action r = Drop\""], ["proof (prove)\nusing this:\n  simple_ruleset (r # rs)\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. get_action r = Accept \\<or> get_action r = Drop", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  get_action r = Accept \\<or> get_action r = Drop\n\ngoal (1 subgoal):\n 1. p \\<notin> {p \\<in> P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p} \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "from this \\<open>?match p\\<close>"], ["proof (chain)\npicking this:\n  get_action r = Accept \\<or> get_action r = Drop\n  matches \\<gamma> (get_match r) (get_action r) p", "show \"?fw p (r # (?rm rs ?set)) = ?fw p (r#rs)\""], ["proof (prove)\nusing this:\n  get_action r = Accept \\<or> get_action r = Drop\n  matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (r #\n      rmshadow \\<gamma> rs\n       {p \\<in> P.\n        \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>get_action r = Accept \\<or> get_action r = Drop;\n        matches \\<gamma> (get_match r) (get_action r) p;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (r #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P.\n                             \\<not> matches \\<gamma> (get_match r)\n                                     (get_action r) p}) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>get_action r = Accept \\<or> get_action r = Drop;\n        matches \\<gamma> (get_match r) (get_action r) p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (r #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P.\n                             \\<not> matches \\<gamma> (get_match r)\n                                     (get_action r) p}) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>a = Accept \\<or> a = Drop; matches \\<gamma> m a p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            approximating_bigstep_fun \\<gamma> p\n                             (Rule m a #\n                              rmshadow \\<gamma> rs\n                               {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                             x =\n                            approximating_bigstep_fun \\<gamma> p\n                             (Rule m a # rs) x", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a x.\n       \\<lbrakk>a = Accept \\<or> a = Drop; matches \\<gamma> m a p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                          x =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x", "apply(rename_tac s)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a s.\n       \\<lbrakk>a = Accept \\<or> a = Drop; matches \\<gamma> m a p;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                          s =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) s", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a s.\n       \\<lbrakk>a = Accept \\<or> a = Drop; matches \\<gamma> m a p;\n        r = Rule m a; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m a #\n                           rmshadow \\<gamma> rs\n                            {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                          s =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) s", "apply(simp split:action.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a s.\n       \\<lbrakk>a = Accept \\<or> a = Drop; matches \\<gamma> m a p;\n        r = Rule m a; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> (a = Log \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (rmshadow \\<gamma> rs\n                             {p \\<in> P. \\<not> matches \\<gamma> m Log p})\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (a = Empty \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (rmshadow \\<gamma> rs\n                             {p \\<in> P. \\<not> matches \\<gamma> m Empty p})\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (r #\n    rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (r #\n    rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>simple_ruleset rs; p \\<in> P\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (rmshadow \\<gamma> rs P) =\n                                  approximating_bigstep_fun \\<gamma> p rs;\n     simple_ruleset (r # rs); p \\<in> P;\n     \\<not> (\\<forall>p\\<in>P.\n                \\<not> matches \\<gamma> (get_match r) (get_action r)\n                        p)\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (rmshadow \\<gamma> (r # rs) P) =\n                      approximating_bigstep_fun \\<gamma> p (r # rs)", "from False this"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>p\\<in>P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r) p)\n  approximating_bigstep_fun \\<gamma> p\n   (r #\n    rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>p\\<in>P.\n             \\<not> matches \\<gamma> (get_match r) (get_action r) p)\n  approximating_bigstep_fun \\<gamma> p\n   (r #\n    rmshadow \\<gamma> rs\n     {p \\<in> P. \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n    approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<not> (\\<forall>p\\<in>P.\n                           \\<not> matches \\<gamma> (get_match r)\n                                   (get_action r) p);\n        approximating_bigstep_fun \\<gamma> p\n         (r #\n          rmshadow \\<gamma> rs\n           {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n        approximating_bigstep_fun \\<gamma> p (r # rs);\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (r # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> (\\<forall>p\\<in>P.\n                           \\<not> matches \\<gamma> (get_match r)\n                                   (get_action r) p);\n        approximating_bigstep_fun \\<gamma> p\n         (r #\n          rmshadow \\<gamma> rs\n           {p \\<in> P.\n            \\<not> matches \\<gamma> (get_match r) (get_action r) p}) =\n        approximating_bigstep_fun \\<gamma> p (r # rs);\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> (r # rs) P) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<exists>p\\<in>P. matches \\<gamma> m a p;\n        \\<forall>x.\n           approximating_bigstep_fun \\<gamma> p\n            (Rule m a #\n             rmshadow \\<gamma> rs\n              {p \\<in> P. \\<not> matches \\<gamma> m a p})\n            x =\n           approximating_bigstep_fun \\<gamma> p (Rule m a # rs) x;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>p\\<in>P.\n                             \\<not> matches \\<gamma> m a\n                                     p) \\<longrightarrow>\n                         (\\<forall>x.\n                             approximating_bigstep_fun \\<gamma> p\n                              (rmshadow \\<gamma> rs P) x =\n                             approximating_bigstep_fun \\<gamma> p\n                              (Rule m a # rs) x)", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a pa x.\n       \\<lbrakk>\\<forall>x.\n                   approximating_bigstep_fun \\<gamma> p\n                    (Rule m a #\n                     rmshadow \\<gamma> rs\n                      {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                    x =\n                   approximating_bigstep_fun \\<gamma> p (Rule m a # rs) x;\n        r = Rule m a; pa \\<in> P; matches \\<gamma> m a pa;\n        \\<forall>p\\<in>P. \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> rs P) x =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a pa x.\n       \\<lbrakk>\\<forall>x.\n                   approximating_bigstep_fun \\<gamma> p\n                    (Rule m a #\n                     rmshadow \\<gamma> rs\n                      {p \\<in> P. \\<not> matches \\<gamma> m a p})\n                    x =\n                   approximating_bigstep_fun \\<gamma> p (Rule m a # rs) x;\n        r = Rule m a; pa \\<in> P; matches \\<gamma> m a pa;\n        \\<forall>p\\<in>P. \\<not> matches \\<gamma> m a p;\n        x = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmshadow \\<gamma> rs P) x =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) x", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmshadow \\<gamma> (r # rs) P) =\n  approximating_bigstep_fun \\<gamma> p (r # rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Removing rules which cannot apply\\<close>"], ["", "fun rmMatchFalse :: \"'a rule list \\<Rightarrow> 'a rule list\" where\n  \"rmMatchFalse [] = []\" |\n  \"rmMatchFalse ((Rule (MatchNot MatchAny) _)#rs) = rmMatchFalse rs\" |\n  \"rmMatchFalse (r#rs) = r # rmMatchFalse rs\""], ["", "lemma rmMatchFalse_correct: \"approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "fix m::\"'a match_expr\" and a and rs"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "assume assm: \"m \\<noteq> MatchNot MatchAny\""], ["proof (state)\nthis:\n  m \\<noteq> MatchNot MatchAny\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "have \"rmMatchFalse (Rule m a # rs) = Rule m a # (rmMatchFalse rs)\" (is ?hlp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs", "proof(cases m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       m = Match x1 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 2. \\<And>x2.\n       m = MatchNot x2 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 3. \\<And>x31 x32.\n       m = MatchAnd x31 x32 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 4. m = MatchAny \\<Longrightarrow>\n    rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs", "case (MatchNot mexpr)"], ["proof (state)\nthis:\n  m = MatchNot mexpr\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       m = Match x1 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 2. \\<And>x2.\n       m = MatchNot x2 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 3. \\<And>x31 x32.\n       m = MatchAnd x31 x32 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 4. m = MatchAny \\<Longrightarrow>\n    rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs", "with assm"], ["proof (chain)\npicking this:\n  m \\<noteq> MatchNot MatchAny\n  m = MatchNot mexpr", "show ?hlp"], ["proof (prove)\nusing this:\n  m \\<noteq> MatchNot MatchAny\n  m = MatchNot mexpr\n\ngoal (1 subgoal):\n 1. rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs", "by(cases mexpr) simp_all"], ["proof (state)\nthis:\n  rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       m = Match x1 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 2. \\<And>x31 x32.\n       m = MatchAnd x31 x32 \\<Longrightarrow>\n       rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n 3. m = MatchAny \\<Longrightarrow>\n    rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs", "qed(simp_all)"], ["proof (state)\nthis:\n  rmMatchFalse (Rule m a # rs) = Rule m a # rmMatchFalse rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "}"], ["proof (state)\nthis:\n  ?m2 \\<noteq> MatchNot MatchAny \\<Longrightarrow>\n  rmMatchFalse (Rule ?m2 ?a2 # ?rsa2) = Rule ?m2 ?a2 # rmMatchFalse ?rsa2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "note rmMatchFalse_helper=this"], ["proof (state)\nthis:\n  ?m2 \\<noteq> MatchNot MatchAny \\<Longrightarrow>\n  rmMatchFalse (Rule ?m2 ?a2 # ?rsa2) = Rule ?m2 ?a2 # rmMatchFalse ?rsa2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Empty"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_ (rmMatchFalse []) s_ =\n    approximating_bigstep_fun \\<gamma>_ p_ [] s_", "by(simp)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_ (rmMatchFalse []) s_ =\n  approximating_bigstep_fun \\<gamma>_ p_ [] s_\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Decision"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rmMatchFalse (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_ (rmMatchFalse (r_ # rs_))\n     (Decision X_) =\n    approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)", "by(metis Decision_approximating_bigstep_fun)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_ (rmMatchFalse (r_ # rs_))\n   (Decision X_) =\n  approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Nomatch \\<gamma> p m a)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs_) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs_ Undecided\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs_) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs_ Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse (Rule m a # rs_))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs_) Undecided", "by(cases \"m = MatchNot MatchAny\") (simp_all add: rmMatchFalse_helper)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse (Rule m a # rs_))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs_) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Match \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Log \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  a = Empty \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "from Match(1)"], ["proof (chain)\npicking this:\n  matches \\<gamma> m a p", "have \"m \\<noteq> MatchNot MatchAny\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. m \\<noteq> MatchNot MatchAny", "using bunch_of_lemmata_about_matches(3)"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  matches ?\\<gamma> (MatchNot MatchAny) ?a ?p = False\n\ngoal (1 subgoal):\n 1. m \\<noteq> MatchNot MatchAny", "by fast"], ["proof (state)\nthis:\n  m \\<noteq> MatchNot MatchAny\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rmMatchFalse (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "with Match rmMatchFalse_helper"], ["proof (chain)\npicking this:\n  matches \\<gamma> m a p\n  a = Log \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  a = Empty \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  ?m2 \\<noteq> MatchNot MatchAny \\<Longrightarrow>\n  rmMatchFalse (Rule ?m2 ?a2 # ?rsa2) = Rule ?m2 ?a2 # rmMatchFalse ?rsa2\n  m \\<noteq> MatchNot MatchAny", "show ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Log \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  a = Empty \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  ?m2 \\<noteq> MatchNot MatchAny \\<Longrightarrow>\n  rmMatchFalse (Rule ?m2 ?a2 # ?rsa2) = Rule ?m2 ?a2 # rmMatchFalse ?rsa2\n  m \\<noteq> MatchNot MatchAny\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rmMatchFalse (Rule m a # rs))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "by(simp split:action.split)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse (Rule m a # rs))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rmMatchFalse rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>We can stop after a default rule (a rule which matches anything) is observed.\\<close>"], ["", "fun cut_off_after_match_any :: \"'a rule list \\<Rightarrow> 'a rule list\" where\n  \"cut_off_after_match_any [] = []\" |\n  \"cut_off_after_match_any (Rule m a # rs) =\n    (if m = MatchAny \\<and> (a = Accept \\<or> a = Drop \\<or> a = Reject)\n     then [Rule m a] else Rule m a # cut_off_after_match_any rs)\""], ["", "lemma cut_off_after_match_any:\n  \"approximating_bigstep_fun \\<gamma> p (cut_off_after_match_any rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (cut_off_after_match_any rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "apply(rule just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (cut_off_after_match_any rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "apply(induction \\<gamma> p rs s rule: approximating_bigstep_fun.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       s = Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (cut_off_after_match_any []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p v va X.\n       Decision X = Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (cut_off_after_match_any (v # va)) (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (v # va) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> m a p;\n                 Undecided = Undecided\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (cut_off_after_match_any rs) Undecided =\n                                  approximating_bigstep_fun \\<gamma> p rs\n                                   Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Log;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Empty;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (cut_off_after_match_any (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p v va X.\n       Decision X = Undecided \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p\n        (cut_off_after_match_any (v # va)) (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (v # va) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> m a p;\n                 Undecided = Undecided\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (cut_off_after_match_any rs) Undecided =\n                                  approximating_bigstep_fun \\<gamma> p rs\n                                   Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Log;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Empty;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (cut_off_after_match_any (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> m a p;\n                 Undecided = Undecided\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (cut_off_after_match_any rs) Undecided =\n                                  approximating_bigstep_fun \\<gamma> p rs\n                                   Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Log;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Empty;\n         Undecided = Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (cut_off_after_match_any rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        Undecided = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (cut_off_after_match_any (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "by(simp split: action.split action.split_asm add: bunch_of_lemmata_about_matches(2))"], ["", "lemma cut_off_after_match_any_simplers: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (cut_off_after_match_any rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (cut_off_after_match_any rs)", "by(induction rs rule: cut_off_after_match_any.induct) (simp_all add: simple_ruleset_def)"], ["", "lemma cut_off_after_match_any_preserve_matches:\n  \"\\<forall> r \\<in> set rs. P (get_match r) \\<Longrightarrow> \\<forall> r \\<in> set (cut_off_after_match_any rs). P (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set rs. P (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (cut_off_after_match_any rs). P (get_match r)", "apply(induction rs rule: cut_off_after_match_any.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>r\\<in>set []. P (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (cut_off_after_match_any []). P (get_match r)\n 2. \\<And>m a rs.\n       \\<lbrakk>\\<lbrakk>\\<not> (m = MatchAny \\<and>\n                                 (a = Accept \\<or>\n                                  a = Drop \\<or> a = Reject));\n                 \\<forall>r\\<in>set rs. P (get_match r)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (cut_off_after_match_any rs).\n                                     P (get_match r);\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (cut_off_after_match_any (Rule m a # rs)).\n                            P (get_match r)", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a rs.\n       \\<lbrakk>\\<lbrakk>\\<not> (m = MatchAny \\<and>\n                                 (a = Accept \\<or>\n                                  a = Drop \\<or> a = Reject));\n                 \\<forall>r\\<in>set rs. P (get_match r)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (cut_off_after_match_any rs).\n                                     P (get_match r);\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (cut_off_after_match_any (Rule m a # rs)).\n                            P (get_match r)", "by(auto simp add: simple_ruleset_def)"], ["", "end"]]}