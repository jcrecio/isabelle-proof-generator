{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Matching_Embeddings.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma \"\\<exists>m \\<beta> \\<alpha> a. Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p \\<noteq> \n  Semantics.matches (\\<lambda> atm p. case \\<beta> atm p of TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False | TernaryUnknown \\<Rightarrow> \\<alpha> a p) m p\"", "lemma \"\\<forall>m \\<in> {m. approx m p \\<noteq> TernaryUnknown}. ternary_to_bool (approx m p) \\<noteq> None\"", "lemma \"matcher_agree_on_exact_matches exact approx \\<longleftrightarrow> (\\<forall>p m. exact m p = the (ternary_to_bool (approx m p)) \\<or> approx m p = TernaryUnknown)\"", "lemma matcher_agree_on_exact_matches_alt: (*no `the`*)\n  \"matcher_agree_on_exact_matches exact approx \\<longleftrightarrow> (\\<forall>p m. approx m p \\<noteq> TernaryUnknown \\<longrightarrow> bool_to_ternary (exact m p) = approx m p)\"", "lemma eval_ternary_Not_TrueD: \"eval_ternary_Not m = TernaryTrue \\<Longrightarrow> m = TernaryFalse\"", "lemma matches_comply_exact: \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown \\<Longrightarrow>\n       matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p = Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p\"", "lemma matcher_agree_on_exact_matches_gammaE:\n  \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> \\<beta> X p = TernaryTrue \\<Longrightarrow> \\<gamma> X p\"", "lemma in_doubt_allow_allows_Accept: \"a = Accept \\<Longrightarrow> matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\"", "lemma not_exact_match_in_doubt_allow_approx_match: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> a = Accept \\<or> a = Reject \\<or> a = Drop \\<Longrightarrow>\n  \\<not> Semantics.matches \\<gamma> m p \\<Longrightarrow> \n  (a = Accept \\<and> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p) \\<or> \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\"", "lemma in_doubt_deny_denies_DropReject: \"a = Drop \\<or> a = Reject \\<Longrightarrow> matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\"", "lemma not_exact_match_in_doubt_deny_approx_match: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> a = Accept \\<or> a = Reject \\<or> a = Drop \\<Longrightarrow>\n  \\<not> Semantics.matches \\<gamma> m p \\<Longrightarrow> \n  ((a = Drop \\<or> a = Reject) \\<and> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p) \\<or> \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\"", "lemma \"matcher_agree_on_exact_matches \\<gamma> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\"", "lemma \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_not_Unknown: \"ternary_ternary_eval (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m) \\<noteq> TernaryUnknown\"", "lemma \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_matching: \"Matching_Ternary.matches ((\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>), \\<alpha>) m a p \\<longleftrightarrow> Semantics.matches \\<gamma> m p\""], "translations": [["", "lemma \"\\<exists>m \\<beta> \\<alpha> a. Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p \\<noteq> \n  Semantics.matches (\\<lambda> atm p. case \\<beta> atm p of TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False | TernaryUnknown \\<Rightarrow> \\<alpha> a p) m p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m \\<beta> \\<alpha> a.\n       Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p \\<noteq>\n       Semantics.matches\n        (\\<lambda>atm p.\n            case \\<beta> atm p of TernaryTrue \\<Rightarrow> True\n            | TernaryFalse \\<Rightarrow> False\n            | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n        m p", "apply(rule_tac x=\"MatchNot (Match X)\" in exI) \\<comment> \\<open>any @{term \"X::'a\"}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<beta> \\<alpha> a.\n       Matching_Ternary.matches (\\<beta>, \\<alpha>) (MatchNot (Match X)) a\n        p \\<noteq>\n       Semantics.matches\n        (\\<lambda>atm p.\n            case \\<beta> atm p of TernaryTrue \\<Rightarrow> True\n            | TernaryFalse \\<Rightarrow> False\n            | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n        (MatchNot (Match X)) p", "by (auto split: ternaryvalue.split ternaryvalue.split_asm simp add: matches_case_ternaryvalue_tuple)"], ["", "text\\<open>the @{const the} in the next definition is always defined\\<close>"], ["", "lemma \"\\<forall>m \\<in> {m. approx m p \\<noteq> TernaryUnknown}. ternary_to_bool (approx m p) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<in>_Collect m (approx m p \\<noteq> TernaryUnknown).\n       ternary_to_bool (approx m p) \\<noteq> None", "by(simp add: ternary_to_bool_None)"], ["", "text\\<open>\nThe Boolean and the ternary matcher agree (where the ternary matcher is defined)\n\\<close>"], ["", "definition matcher_agree_on_exact_matches :: \"('a, 'p) matcher \\<Rightarrow> ('a \\<Rightarrow> 'p \\<Rightarrow> ternaryvalue) \\<Rightarrow> bool\" where\n  \"matcher_agree_on_exact_matches exact approx \\<equiv> \\<forall>p m. approx m p \\<noteq> TernaryUnknown \\<longrightarrow> exact m p = the (ternary_to_bool (approx m p))\""], ["", "text\\<open>We say the Boolean and ternary matchers agree iff they return the same result or the ternary matcher returns @{const TernaryUnknown}.\\<close>"], ["", "lemma \"matcher_agree_on_exact_matches exact approx \\<longleftrightarrow> (\\<forall>p m. exact m p = the (ternary_to_bool (approx m p)) \\<or> approx m p = TernaryUnknown)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matcher_agree_on_exact_matches exact approx =\n    (\\<forall>p m.\n        exact m p = the (ternary_to_bool (approx m p)) \\<or>\n        approx m p = TernaryUnknown)", "unfolding matcher_agree_on_exact_matches_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p m.\n        approx m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        exact m p = the (ternary_to_bool (approx m p))) =\n    (\\<forall>p m.\n        exact m p = the (ternary_to_bool (approx m p)) \\<or>\n        approx m p = TernaryUnknown)", "by blast"], ["", "lemma matcher_agree_on_exact_matches_alt: (*no `the`*)\n  \"matcher_agree_on_exact_matches exact approx \\<longleftrightarrow> (\\<forall>p m. approx m p \\<noteq> TernaryUnknown \\<longrightarrow> bool_to_ternary (exact m p) = approx m p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matcher_agree_on_exact_matches exact approx =\n    (\\<forall>p m.\n        approx m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        bool_to_ternary (exact m p) = approx m p)", "unfolding matcher_agree_on_exact_matches_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>p m.\n        approx m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        exact m p = the (ternary_to_bool (approx m p))) =\n    (\\<forall>p m.\n        approx m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        bool_to_ternary (exact m p) = approx m p)", "by (metis (full_types) bool_to_ternary.simps(1) bool_to_ternary.simps(2) option.sel ternary_to_bool.simps(1)\n                         ternary_to_bool.simps(2) ternaryvalue.exhaust)"], ["", "lemma eval_ternary_Not_TrueD: \"eval_ternary_Not m = TernaryTrue \\<Longrightarrow> m = TernaryFalse\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_ternary_Not m = TernaryTrue \\<Longrightarrow> m = TernaryFalse", "by (metis eval_ternary_Not.simps(1) eval_ternary_idempotence_Not)"], ["", "lemma matches_comply_exact: \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown \\<Longrightarrow>\n       matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p = Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                      Matching_Ternary.matches (\\<beta>, \\<alpha>) m a p", "proof(unfold matches_case_ternaryvalue_tuple,induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match x)) \\<noteq>\n                TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (Match x) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (Match x)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchNot m) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (MatchNot m)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 4. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "case Match"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match x)) \\<noteq>\n                TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (Match x) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (Match x)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchNot m) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (MatchNot m)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 4. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "thus ?case"], ["proof (prove)\nusing this:\n  ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (Match x_) p =\n    (case ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) of\n     TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "by(simp split: ternaryvalue.split add: matcher_agree_on_exact_matches_def)"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> (Match x_) p =\n  (case ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) of\n   TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n   | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchNot m) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (MatchNot m)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchNot m) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (MatchNot m)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "case (MatchNot m)"], ["proof (state)\nthis:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchNot m) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p (MatchNot m)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (MatchNot m) p =\n    (case ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) of\n     TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "apply(simp split: ternaryvalue.split add: matcher_agree_on_exact_matches_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n             TernaryUnknown \\<Longrightarrow>\n             Semantics.matches \\<gamma> m p =\n             (case ternary_ternary_eval (map_match_tac \\<beta> p m) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     eval_ternary_Not\n      (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n     TernaryUnknown;\n     \\<forall>p m.\n        \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        \\<gamma> m p = the (ternary_to_bool (\\<beta> m p))\\<rbrakk>\n    \\<Longrightarrow> (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryTrue \\<longrightarrow>\n                       \\<not> Semantics.matches \\<gamma> m p) \\<and>\n                      (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryFalse \\<longrightarrow>\n                       Semantics.matches \\<gamma> m p)", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n             TernaryUnknown \\<Longrightarrow>\n             Semantics.matches \\<gamma> m p =\n             (case ternary_ternary_eval (map_match_tac \\<beta> p m) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     eval_ternary_Not\n      (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n     TernaryUnknown;\n     \\<forall>p m.\n        \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        \\<gamma> m p = the (ternary_to_bool (\\<beta> m p));\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryTrue \\<longrightarrow>\n                       \\<not> Semantics.matches \\<gamma> m p) \\<and>\n                      (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryFalse \\<longrightarrow>\n                       Semantics.matches \\<gamma> m p)\n 2. \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n             TernaryUnknown \\<Longrightarrow>\n             Semantics.matches \\<gamma> m p =\n             (case ternary_ternary_eval (map_match_tac \\<beta> p m) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     eval_ternary_Not\n      (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n     TernaryUnknown;\n     \\<forall>p m.\n        \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        \\<gamma> m p = the (ternary_to_bool (\\<beta> m p));\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryTrue \\<longrightarrow>\n                       \\<not> Semantics.matches \\<gamma> m p) \\<and>\n                      (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryFalse \\<longrightarrow>\n                       Semantics.matches \\<gamma> m p)\n 3. \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n             TernaryUnknown \\<Longrightarrow>\n             Semantics.matches \\<gamma> m p =\n             (case ternary_ternary_eval (map_match_tac \\<beta> p m) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     eval_ternary_Not\n      (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n     TernaryUnknown;\n     \\<forall>p m.\n        \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        \\<gamma> m p = the (ternary_to_bool (\\<beta> m p));\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryTrue \\<longrightarrow>\n                       \\<not> Semantics.matches \\<gamma> m p) \\<and>\n                      (eval_ternary_Not\n                        (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                       TernaryFalse \\<longrightarrow>\n                       Semantics.matches \\<gamma> m p)", "by(simp_all)"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> (MatchNot m) p =\n  (case ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) of\n   TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n   | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "case (MatchAnd m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m1) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m2) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                          (map_match_tac \\<beta> p m1) \\<noteq>\n                         TernaryUnknown;\n                 matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n                \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                                  (case ternary_ternary_eval\n   (map_match_tac \\<beta> p m1) of\n                                   TernaryTrue \\<Rightarrow> True\n                                   | TernaryFalse \\<Rightarrow> False\n                                   | TernaryUnknown \\<Rightarrow>\n \\<alpha> a p);\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n                 TernaryUnknown;\n         matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n        \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                          (case ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n        TernaryUnknown;\n        matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n       \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                         (case ternary_ternary_eval\n                                (map_match_tac \\<beta> p\n                                  (MatchAnd m1 m2)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m1) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                    (case ternary_ternary_eval\n                           (map_match_tac \\<beta> p m2) of\n                     TernaryTrue \\<Rightarrow> True\n                     | TernaryFalse \\<Rightarrow> False\n                     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n    (case ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n     TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m1)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "apply(case_tac [!] \"ternary_ternary_eval (map_match_tac \\<beta> p m2)\")"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryTrue;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 2. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryTrue;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 3. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryTrue;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 4. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryFalse;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 5. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryFalse;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 6. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryFalse;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 7. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryUnknown;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 8. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryUnknown;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n 9. \\<lbrakk>\\<lbrakk>ternary_ternary_eval\n                       (map_match_tac \\<beta> p m1) \\<noteq>\n                      TernaryUnknown;\n              matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n             \\<Longrightarrow> Semantics.matches \\<gamma> m1 p =\n                               (case ternary_ternary_eval\n(map_match_tac \\<beta> p m1) of\n                                TernaryTrue \\<Rightarrow> True\n                                | TernaryFalse \\<Rightarrow> False\n                                | TernaryUnknown \\<Rightarrow>\n                                    \\<alpha> a p);\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n              TernaryUnknown;\n      matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n     \\<Longrightarrow> Semantics.matches \\<gamma> m2 p =\n                       (case ternary_ternary_eval\n                              (map_match_tac \\<beta> p m2) of\n                        TernaryTrue \\<Rightarrow> True\n                        | TernaryFalse \\<Rightarrow> False\n                        | TernaryUnknown \\<Rightarrow> \\<alpha> a p);\n     ternary_ternary_eval\n      (map_match_tac \\<beta> p (MatchAnd m1 m2)) \\<noteq>\n     TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     ternary_ternary_eval (map_match_tac \\<beta> p m1) = TernaryUnknown;\n     ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "by(simp_all)"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> (MatchAnd m1 m2) p =\n  (case ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1 m2)) of\n   TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n   | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "case MatchAny"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac \\<beta> p MatchAny) \\<noteq>\n             TernaryUnknown;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>\\<rbrakk>\n    \\<Longrightarrow> Semantics.matches \\<gamma> MatchAny p =\n                      (case ternary_ternary_eval\n                             (map_match_tac \\<beta> p MatchAny) of\n                       TernaryTrue \\<Rightarrow> True\n                       | TernaryFalse \\<Rightarrow> False\n                       | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "thus ?case"], ["proof (prove)\nusing this:\n  ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n  TernaryUnknown\n  matcher_agree_on_exact_matches \\<gamma> \\<beta>\n\ngoal (1 subgoal):\n 1. Semantics.matches \\<gamma> MatchAny p =\n    (case ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) of\n     TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "by simp"], ["proof (state)\nthis:\n  Semantics.matches \\<gamma> MatchAny p =\n  (case ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) of\n   TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n   | TernaryUnknown \\<Rightarrow> \\<alpha> a p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matcher_agree_on_exact_matches_gammaE:\n  \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> \\<beta> X p = TernaryTrue \\<Longrightarrow> \\<gamma> X p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<beta> X p = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> \\<gamma> X p", "apply(simp add: matcher_agree_on_exact_matches_alt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>p m.\n                \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n                bool_to_ternary (\\<gamma> m p) = \\<beta> m p;\n     \\<beta> X p = TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> \\<gamma> X p", "apply(erule_tac x=p in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> X p = TernaryTrue;\n     \\<forall>m.\n        \\<beta> m p \\<noteq> TernaryUnknown \\<longrightarrow>\n        bool_to_ternary (\\<gamma> m p) = \\<beta> m p\\<rbrakk>\n    \\<Longrightarrow> \\<gamma> X p", "apply(erule_tac x=X in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<beta> X p = TernaryTrue;\n     \\<beta> X p \\<noteq> TernaryUnknown \\<longrightarrow>\n     bool_to_ternary (\\<gamma> X p) = \\<beta> X p\\<rbrakk>\n    \\<Longrightarrow> \\<gamma> X p", "apply(simp add: bool_to_ternary_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_doubt_allow_allows_Accept: \"a = Accept \\<Longrightarrow> matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p\n 2. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p", "using matches_comply_exact"], ["proof (prove)\nusing this:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac ?\\<beta> ?p ?m) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches ?\\<gamma> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches ?\\<gamma> ?m ?p =\n                    Matching_Ternary.matches (?\\<beta>, ?\\<alpha>) ?m ?a ?p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p\n 2. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Accept; matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p", "apply(simp add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_exact_match_in_doubt_allow_approx_match: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> a = Accept \\<or> a = Reject \\<or> a = Drop \\<Longrightarrow>\n  \\<not> Semantics.matches \\<gamma> m p \\<Longrightarrow> \n  (a = Accept \\<and> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p) \\<or> \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply(drule(1) matches_comply_exact[where \\<alpha>=in_doubt_allow and a=a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     Semantics.matches \\<gamma> m p =\n     Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply(rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     Semantics.matches \\<gamma> m p =\n     Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p\\<rbrakk>\n    \\<Longrightarrow> \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_allow) m a p", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     Matching_Ternary.matches (\\<beta>, in_doubt_allow) m a p; \\<not> False;\n     a = Reject \\<or> a = Drop\\<rbrakk>\n    \\<Longrightarrow> a = Accept", "apply(simp add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop\\<rbrakk>\n    \\<Longrightarrow> a = Accept", "apply(cases a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Accept\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Drop\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 3. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Log\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 4. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Reject\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 5. \\<And>x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<not> Semantics.matches \\<gamma> m p;\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> a = Accept\n 6. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Return\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 7. \\<And>x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        \\<not> Semantics.matches \\<gamma> m p;\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> a = Accept\n 8. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Empty\\<rbrakk>\n    \\<Longrightarrow> a = Accept\n 9. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_allow a p; a = Reject \\<or> a = Drop; a = Unknown\\<rbrakk>\n    \\<Longrightarrow> a = Accept", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_doubt_deny_denies_DropReject: \"a = Drop \\<or> a = Reject \\<Longrightarrow> matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow>\n        Semantics.matches \\<gamma> m p \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p\n 2. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p", "using matches_comply_exact"], ["proof (prove)\nusing this:\n  \\<lbrakk>ternary_ternary_eval (map_match_tac ?\\<beta> ?p ?m) \\<noteq>\n           TernaryUnknown;\n   matcher_agree_on_exact_matches ?\\<gamma> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> Semantics.matches ?\\<gamma> ?m ?p =\n                    Matching_Ternary.matches (?\\<beta>, ?\\<alpha>) ?m ?a ?p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p\n 2. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Drop \\<or> a = Reject;\n     matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p", "apply(auto simp add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_exact_match_in_doubt_deny_approx_match: \"matcher_agree_on_exact_matches \\<gamma> \\<beta> \\<Longrightarrow> a = Accept \\<or> a = Reject \\<or> a = Drop \\<Longrightarrow>\n  \\<not> Semantics.matches \\<gamma> m p \\<Longrightarrow> \n  ((a = Drop \\<or> a = Reject) \\<and> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p) \\<or> \\<not> Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply(case_tac \"ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply(drule(1) matches_comply_exact[where \\<alpha>=in_doubt_deny and a=a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     Semantics.matches \\<gamma> m p =\n     Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply(rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     Semantics.matches \\<gamma> m p =\n     Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p\\<rbrakk>\n    \\<Longrightarrow> \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     \\<not> ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n            TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> (a = Drop \\<or> a = Reject) \\<and>\n                      Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a\n                       p \\<or>\n                      \\<not> Matching_Ternary.matches\n                              (\\<beta>, in_doubt_deny) m a p", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Reject \\<or> a = Drop;\n     \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     Matching_Ternary.matches (\\<beta>, in_doubt_deny) m a p; \\<not> False;\n     a \\<noteq> Reject\\<rbrakk>\n    \\<Longrightarrow> a = Drop", "apply(simp add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject\\<rbrakk>\n    \\<Longrightarrow> a = Drop", "apply(cases a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Accept\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 2. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Drop\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 3. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Log\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 4. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Reject\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 5. \\<And>x5.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        in_doubt_deny a p; a \\<noteq> Reject; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> a = Drop\n 6. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Return\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 7. \\<And>x7.\n       \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n        a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n        ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n        in_doubt_deny a p; a \\<noteq> Reject; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> a = Drop\n 8. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Empty\\<rbrakk>\n    \\<Longrightarrow> a = Drop\n 9. \\<lbrakk>matcher_agree_on_exact_matches \\<gamma> \\<beta>;\n     a = Accept \\<or> a = Drop; \\<not> Semantics.matches \\<gamma> m p;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown;\n     in_doubt_deny a p; a \\<noteq> Reject; a = Unknown\\<rbrakk>\n    \\<Longrightarrow> a = Drop", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>The ternary primitive matcher can return exactly the result of the Boolean primitive matcher\\<close>"], ["", "definition \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c :: \"('a, 'p) matcher \\<Rightarrow> ('a \\<Rightarrow> 'p \\<Rightarrow> ternaryvalue)\" where\n  \"\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma> \\<equiv> (\\<lambda> a p. if \\<gamma> a p then TernaryTrue else TernaryFalse)\""], ["", "lemma \"matcher_agree_on_exact_matches \\<gamma> (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matcher_agree_on_exact_matches \\<gamma>\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)", "by(simp add: matcher_agree_on_exact_matches_def \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_def)"], ["", "lemma \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_not_Unknown: \"ternary_ternary_eval (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m) \\<noteq> TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       m) \\<noteq>\n    TernaryUnknown", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          m) \\<noteq>\n       TernaryUnknown \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (MatchNot m)) \\<noteq>\n       TernaryUnknown\n 3. \\<And>m1 m2.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac\n                   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                     \\<gamma>)\n                   p m1) \\<noteq>\n                TernaryUnknown;\n        ternary_ternary_eval\n         (map_match_tac\n           (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n           m2) \\<noteq>\n        TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac\n                            (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                              \\<gamma>)\n                            p (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 4. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       MatchAny) \\<noteq>\n    TernaryUnknown", "case MatchNot"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m_) \\<noteq>\n  TernaryUnknown\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          m) \\<noteq>\n       TernaryUnknown \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (MatchNot m)) \\<noteq>\n       TernaryUnknown\n 3. \\<And>m1 m2.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac\n                   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                     \\<gamma>)\n                   p m1) \\<noteq>\n                TernaryUnknown;\n        ternary_ternary_eval\n         (map_match_tac\n           (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n           m2) \\<noteq>\n        TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac\n                            (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                              \\<gamma>)\n                            p (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 4. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       MatchAny) \\<noteq>\n    TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m_) \\<noteq>\n  TernaryUnknown\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       (MatchNot m_)) \\<noteq>\n    TernaryUnknown", "using eval_ternary_Not_UnknownD \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_def"], ["proof (prove)\nusing this:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m_) \\<noteq>\n  TernaryUnknown\n  eval_ternary_Not ?t = TernaryUnknown \\<Longrightarrow> ?t = TernaryUnknown\n  \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c ?\\<gamma> \\<equiv>\n  \\<lambda>a p. if ?\\<gamma> a p then TernaryTrue else TernaryFalse\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       (MatchNot m_)) \\<noteq>\n    TernaryUnknown", "by (simp) blast"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p (MatchNot m_)) \\<noteq>\n  TernaryUnknown\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac\n                   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                     \\<gamma>)\n                   p m1) \\<noteq>\n                TernaryUnknown;\n        ternary_ternary_eval\n         (map_match_tac\n           (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n           m2) \\<noteq>\n        TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac\n                            (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                              \\<gamma>)\n                            p (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 3. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       MatchAny) \\<noteq>\n    TernaryUnknown", "case (MatchAnd m1 m2)"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m1) \\<noteq>\n  TernaryUnknown\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m2) \\<noteq>\n  TernaryUnknown\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>ternary_ternary_eval\n                 (map_match_tac\n                   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                     \\<gamma>)\n                   p m1) \\<noteq>\n                TernaryUnknown;\n        ternary_ternary_eval\n         (map_match_tac\n           (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n           m2) \\<noteq>\n        TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac\n                            (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                              \\<gamma>)\n                            p (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 3. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       MatchAny) \\<noteq>\n    TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m1) \\<noteq>\n  TernaryUnknown\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p m2) \\<noteq>\n  TernaryUnknown\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       (MatchAnd m1 m2)) \\<noteq>\n    TernaryUnknown", "apply(case_tac \"ternary_ternary_eval (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 2. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 3. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown", "apply(case_tac [!] \"ternary_ternary_eval (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2)\")"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryTrue;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 2. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryTrue;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 3. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryTrue;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 4. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryFalse;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 5. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryFalse;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 6. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryFalse;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 7. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryTrue\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 8. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryFalse\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown\n 9. \\<lbrakk>ternary_ternary_eval\n              (map_match_tac\n                (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n                m1) \\<noteq>\n             TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n        m2) \\<noteq>\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m1) =\n     TernaryUnknown;\n     ternary_ternary_eval\n      (map_match_tac\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p m2) =\n     TernaryUnknown\\<rbrakk>\n    \\<Longrightarrow> ternary_ternary_eval\n                       (map_match_tac\n                         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                           \\<gamma>)\n                         p (MatchAnd m1 m2)) \\<noteq>\n                      TernaryUnknown", "by(simp_all add: \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_def)"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>)\n     p (MatchAnd m1 m2)) \\<noteq>\n  TernaryUnknown\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ternary_ternary_eval\n        (map_match_tac\n          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n          (Match x)) \\<noteq>\n       TernaryUnknown\n 2. ternary_ternary_eval\n     (map_match_tac\n       (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>) p\n       MatchAny) \\<noteq>\n    TernaryUnknown", "qed (simp_all add: \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_def)"], ["", "lemma \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_matching: \"Matching_Ternary.matches ((\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>), \\<alpha>) m a p \\<longleftrightarrow> Semantics.matches \\<gamma> m p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>) m\n     a p =\n    Semantics.matches \\<gamma> m p", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (Match x) a p =\n       Semantics.matches \\<gamma> (Match x) p\n 2. \\<And>m.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        m a p =\n       Semantics.matches \\<gamma> m p \\<Longrightarrow>\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (MatchNot m) a p =\n       Semantics.matches \\<gamma> (MatchNot m) p\n 3. \\<And>m1 m2.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m1 a p =\n                Semantics.matches \\<gamma> m1 p;\n        Matching_Ternary.matches\n         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n          \\<alpha>)\n         m2 a p =\n        Semantics.matches \\<gamma> m2 p\\<rbrakk>\n       \\<Longrightarrow> Matching_Ternary.matches\n                          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                            \\<gamma>,\n                           \\<alpha>)\n                          (MatchAnd m1 m2) a p =\n                         Semantics.matches \\<gamma> (MatchAnd m1 m2) p\n 4. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     MatchAny a p =\n    Semantics.matches \\<gamma> MatchAny p", "case Match"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (Match x) a p =\n       Semantics.matches \\<gamma> (Match x) p\n 2. \\<And>m.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        m a p =\n       Semantics.matches \\<gamma> m p \\<Longrightarrow>\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (MatchNot m) a p =\n       Semantics.matches \\<gamma> (MatchNot m) p\n 3. \\<And>m1 m2.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m1 a p =\n                Semantics.matches \\<gamma> m1 p;\n        Matching_Ternary.matches\n         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n          \\<alpha>)\n         m2 a p =\n        Semantics.matches \\<gamma> m2 p\\<rbrakk>\n       \\<Longrightarrow> Matching_Ternary.matches\n                          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                            \\<gamma>,\n                           \\<alpha>)\n                          (MatchAnd m1 m2) a p =\n                         Semantics.matches \\<gamma> (MatchAnd m1 m2) p\n 4. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     MatchAny a p =\n    Semantics.matches \\<gamma> MatchAny p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     (Match x_) a p =\n    Semantics.matches \\<gamma> (Match x_) p", "by(simp add: \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_def matches_case_ternaryvalue_tuple)"], ["proof (state)\nthis:\n  Matching_Ternary.matches\n   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n   (Match x_) a p =\n  Semantics.matches \\<gamma> (Match x_) p\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        m a p =\n       Semantics.matches \\<gamma> m p \\<Longrightarrow>\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (MatchNot m) a p =\n       Semantics.matches \\<gamma> (MatchNot m) p\n 2. \\<And>m1 m2.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m1 a p =\n                Semantics.matches \\<gamma> m1 p;\n        Matching_Ternary.matches\n         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n          \\<alpha>)\n         m2 a p =\n        Semantics.matches \\<gamma> m2 p\\<rbrakk>\n       \\<Longrightarrow> Matching_Ternary.matches\n                          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                            \\<gamma>,\n                           \\<alpha>)\n                          (MatchAnd m1 m2) a p =\n                         Semantics.matches \\<gamma> (MatchAnd m1 m2) p\n 3. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     MatchAny a p =\n    Semantics.matches \\<gamma> MatchAny p", "case MatchNot"], ["proof (state)\nthis:\n  Matching_Ternary.matches\n   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>) m_ a\n   p =\n  Semantics.matches \\<gamma> m_ p\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        m a p =\n       Semantics.matches \\<gamma> m p \\<Longrightarrow>\n       Matching_Ternary.matches\n        (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n        (MatchNot m) a p =\n       Semantics.matches \\<gamma> (MatchNot m) p\n 2. \\<And>m1 m2.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m1 a p =\n                Semantics.matches \\<gamma> m1 p;\n        Matching_Ternary.matches\n         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n          \\<alpha>)\n         m2 a p =\n        Semantics.matches \\<gamma> m2 p\\<rbrakk>\n       \\<Longrightarrow> Matching_Ternary.matches\n                          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                            \\<gamma>,\n                           \\<alpha>)\n                          (MatchAnd m1 m2) a p =\n                         Semantics.matches \\<gamma> (MatchAnd m1 m2) p\n 3. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     MatchAny a p =\n    Semantics.matches \\<gamma> MatchAny p", "thus ?case"], ["proof (prove)\nusing this:\n  Matching_Ternary.matches\n   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>) m_ a\n   p =\n  Semantics.matches \\<gamma> m_ p\n\ngoal (1 subgoal):\n 1. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     (MatchNot m_) a p =\n    Semantics.matches \\<gamma> (MatchNot m_) p", "by(simp add: matches_case_ternaryvalue_tuple \\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c_not_Unknown split: ternaryvalue.split_asm)"], ["proof (state)\nthis:\n  Matching_Ternary.matches\n   (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n   (MatchNot m_) a p =\n  Semantics.matches \\<gamma> (MatchNot m_) p\n\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>Matching_Ternary.matches\n                 (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n                  \\<alpha>)\n                 m1 a p =\n                Semantics.matches \\<gamma> m1 p;\n        Matching_Ternary.matches\n         (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>,\n          \\<alpha>)\n         m2 a p =\n        Semantics.matches \\<gamma> m2 p\\<rbrakk>\n       \\<Longrightarrow> Matching_Ternary.matches\n                          (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c\n                            \\<gamma>,\n                           \\<alpha>)\n                          (MatchAnd m1 m2) a p =\n                         Semantics.matches \\<gamma> (MatchAnd m1 m2) p\n 2. Matching_Ternary.matches\n     (\\<beta>\\<^sub>m\\<^sub>a\\<^sub>g\\<^sub>i\\<^sub>c \\<gamma>, \\<alpha>)\n     MatchAny a p =\n    Semantics.matches \\<gamma> MatchAny p", "qed (simp_all add: matches_case_ternaryvalue_tuple split: ternaryvalue.split ternaryvalue.split_asm)"], ["", "end"]]}