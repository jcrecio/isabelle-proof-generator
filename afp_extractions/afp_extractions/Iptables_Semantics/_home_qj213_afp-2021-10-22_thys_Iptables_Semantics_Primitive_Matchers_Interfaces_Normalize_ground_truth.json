{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Interfaces_Normalize.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma compress_interfaces_None:\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows   \n      \"compress_interfaces ifces = None \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\"\n      \"compress_interfaces ifces = None \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p\"", "lemma compress_interfaces_Some: \n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows \n      \"compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ((map Pos i_pos)@(map Neg i_neg)))) a p \\<longleftrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\"\n      \"compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ((map Pos i_pos)@(map Neg i_neg)))) a p \\<longleftrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p\"", "lemma compress_normalize_input_interfaces_Some:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_input_interfaces m = Some m'\"\n    shows \"matches (\\<beta>, \\<alpha>) m' a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) m a p\"", "lemma compress_normalize_input_interfaces_None:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_input_interfaces m = None\"\n    shows \"\\<not> matches (\\<beta>, \\<alpha>) m a p\"", "lemma compress_normalize_input_interfaces_nnf: \"normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n      normalized_nnf_match m'\"", "lemma compress_normalize_input_interfaces_not_introduces_Iiface:\n    \"\\<not> has_disc is_Iiface m \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     \\<not> has_disc is_Iiface m'\"", "lemma compress_normalize_input_interfaces_not_introduces_Iiface_negated:\n    assumes notdisc: \"\\<not> has_disc_negated is_Iiface False m\"\n        and nm: \"normalized_nnf_match m\"\n        and some: \"compress_normalize_input_interfaces m = Some m'\"\n     shows \"\\<not> has_disc_negated is_Iiface False m'\"", "lemma compress_normalize_input_interfaces_hasdisc:\n    \"\\<not> has_disc disc m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc disc m'\"", "lemma compress_normalize_input_interfaces_hasdisc_negated:\n    \"\\<not> has_disc_negated disc neg m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc_negated disc neg m'\"", "lemma compress_normalize_input_interfaces_preserves_normalized_n_primitive:\n    \"normalized_n_primitive (disc, sel) P m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> normalized_n_primitive (disc, sel) P m'\"", "lemma compress_normalize_output_interfaces_Some:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_output_interfaces m = Some m'\"\n    shows \"matches (\\<beta>, \\<alpha>) m' a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) m a p\"", "lemma compress_normalize_output_interfaces_None:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_output_interfaces m = None\"\n    shows \"\\<not> matches (\\<beta>, \\<alpha>) m a p\"", "lemma compress_normalize_output_interfaces_nnf: \"normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n      normalized_nnf_match m'\"", "lemma compress_normalize_output_interfaces_not_introduces_Oiface:\n    \"\\<not> has_disc is_Oiface m \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     \\<not> has_disc is_Oiface m'\"", "lemma compress_normalize_output_interfaces_not_introduces_Oiface_negated:\n    assumes notdisc: \"\\<not> has_disc_negated is_Oiface False m\"\n        and nm: \"normalized_nnf_match m\"\n        and some: \"compress_normalize_output_interfaces m = Some m'\"\n     shows \"\\<not> has_disc_negated is_Oiface False m'\"", "lemma compress_normalize_output_interfaces_hasdisc:\n    \"\\<not> has_disc disc m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc disc m'\"", "lemma compress_normalize_output_interfaces_hasdisc_negated:\n    \"\\<not> has_disc_negated disc neg m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc_negated disc neg m'\"", "lemma compress_normalize_output_interfaces_preserves_normalized_n_primitive:\n    \"normalized_n_primitive (disc, sel) P m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> normalized_n_primitive (disc, sel) P m'\""], "translations": [["", "lemma compress_interfaces_None:\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows   \n      \"compress_interfaces ifces = None \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\"\n      \"compress_interfaces ifces = None \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compress_interfaces ifces = None \\<Longrightarrow>\n     \\<not> matches (\\<beta>, \\<alpha>)\n             (alist_and (NegPos_map IIface ifces)) a p) &&&\n    (compress_interfaces ifces = None \\<Longrightarrow>\n     \\<not> matches (\\<beta>, \\<alpha>)\n             (alist_and (NegPos_map OIface ifces)) a p)", "apply(simp_all add: compress_interfaces_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces))\n            a p\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces))\n            a p", "apply(simp_all add: nt_match_list_matches[symmetric] nt_match_list_simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos (NegPos_map IIface ifces)).\n        \\<not> matches (\\<beta>, \\<alpha>) (Match m) a p) \\<or>\n    (\\<exists>m\\<in>set (getNeg (NegPos_map IIface ifces)).\n        \\<not> matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p)\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos (NegPos_map OIface ifces)).\n        \\<not> matches (\\<beta>, \\<alpha>) (Match m) a p) \\<or>\n    (\\<exists>m\\<in>set (getNeg (NegPos_map OIface ifces)).\n        \\<not> matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p)", "apply(simp_all add: NegPos_map_simps primitive_matcher_generic.Iface_single[OF generic]\n                          primitive_matcher_generic.Iface_single_not[OF generic])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_iiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_iiface p))\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))", "apply(case_tac [!] \"compress_pos_interfaces (getPos ifces)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n              None \\<Rightarrow> None\n              | Some i \\<Rightarrow>\n                  if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                        iface_subset i negated_ifce\n                  then None\n                  else if \\<not> iface_is_wildcard i then Some ([i], [])\n                       else Some\n                             (if i = ifaceAny then [] else [i],\n                              getNeg ifces)) =\n             None;\n     compress_pos_interfaces (getPos ifces) = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                          \\<not> match_iface m (p_iiface p)) \\<or>\n                      (\\<exists>m\\<in>set (getNeg ifces).\n                          match_iface m (p_iiface p))\n 2. \\<And>a.\n       \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n                 None \\<Rightarrow> None\n                 | Some i \\<Rightarrow>\n                     if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                           iface_subset i negated_ifce\n                     then None\n                     else if \\<not> iface_is_wildcard i then Some ([i], [])\n                          else Some\n                                (if i = ifaceAny then [] else [i],\n                                 getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 3. \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n              None \\<Rightarrow> None\n              | Some i \\<Rightarrow>\n                  if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                        iface_subset i negated_ifce\n                  then None\n                  else if \\<not> iface_is_wildcard i then Some ([i], [])\n                       else Some\n                             (if i = ifaceAny then [] else [i],\n                              getNeg ifces)) =\n             None;\n     compress_pos_interfaces (getPos ifces) = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                          \\<not> match_iface m (p_oiface p)) \\<or>\n                      (\\<exists>m\\<in>set (getNeg ifces).\n                          match_iface m (p_oiface p))\n 4. \\<And>a.\n       \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n                 None \\<Rightarrow> None\n                 | Some i \\<Rightarrow>\n                     if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                           iface_subset i negated_ifce\n                     then None\n                     else if \\<not> iface_is_wildcard i then Some ([i], [])\n                          else Some\n                                (if i = ifaceAny then [] else [i],\n                                 getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_iiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_iiface p))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 3. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 4. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(drule_tac p_i=\"p_iiface p\" in compress_pos_interfaces_None)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<not> (\\<forall>i\\<in>set (getPos ifces).\n               match_iface i (p_iiface p)) \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_iiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_iiface p))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 3. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 4. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(simp; fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 2. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(drule_tac p_i=\"p_iiface p\" in compress_pos_interfaces_Some)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        match_iface a (p_iiface p) =\n        (\\<forall>i\\<in>set (getPos ifces).\n            match_iface i (p_iiface p))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 2. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 2. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "using iface_subset"], ["proof (prove)\nusing this:\n  iface_subset ?i1.0 ?i2.0 =\n  ({i. match_iface ?i1.0 i} \\<subseteq> {i. match_iface ?i2.0 i})\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_iiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_iiface p))\n 2. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_pos_interfaces (getPos ifces) = None \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(drule_tac p_i=\"p_oiface p\" in compress_pos_interfaces_None)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> (\\<forall>i\\<in>set (getPos ifces).\n               match_iface i (p_oiface p)) \\<Longrightarrow>\n    (\\<exists>m\\<in>set (getPos ifces).\n        \\<not> match_iface m (p_oiface p)) \\<or>\n    (\\<exists>m\\<in>set (getNeg ifces). match_iface m (p_oiface p))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(drule_tac p_i=\"p_oiface p\" in compress_pos_interfaces_Some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                None;\n        match_iface a (p_oiface p) =\n        (\\<forall>i\\<in>set (getPos ifces).\n            match_iface i (p_oiface p))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "using iface_subset"], ["proof (prove)\nusing this:\n  iface_subset ?i1.0 ?i2.0 =\n  ({i. match_iface ?i1.0 i} \\<subseteq> {i. match_iface ?i2.0 i})\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>m\\<in>set (getPos ifces).\n                             \\<not> match_iface m (p_oiface p)) \\<or>\n                         (\\<exists>m\\<in>set (getNeg ifces).\n                             match_iface m (p_oiface p))", "by blast"], ["", "private"], ["", "lemma compress_interfaces_Some: \n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows \n      \"compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ((map Pos i_pos)@(map Neg i_neg)))) a p \\<longleftrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\"\n      \"compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ((map Pos i_pos)@(map Neg i_neg)))) a p \\<longleftrightarrow>\n        matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n     matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map IIface (map Pos i_pos @ map Neg i_neg))) a p =\n     matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a\n      p) &&&\n    (compress_interfaces ifces = Some (i_pos, i_neg) \\<Longrightarrow>\n     matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map OIface (map Pos i_pos @ map Neg i_neg))) a p =\n     matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p)", "apply(simp_all add: compress_interfaces_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>)\n     (alist_and (NegPos_map IIface (map Pos i_pos @ map Neg i_neg))) a p =\n    matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>)\n     (alist_and (NegPos_map OIface (map Pos i_pos @ map Neg i_neg))) a p =\n    matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p", "apply(simp_all add: bunch_of_lemmata_about_matches(1) alist_and_append NegPos_map_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    (matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map IIface (map Pos i_pos))) a p \\<and>\n     matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map IIface (map Neg i_neg))) a p) =\n    matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface ifces)) a p\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    (matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map OIface (map Pos i_pos))) a p \\<and>\n     matches (\\<beta>, \\<alpha>)\n      (alist_and (NegPos_map OIface (map Neg i_neg))) a p) =\n    matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface ifces)) a p", "apply(simp_all add: nt_match_list_matches[symmetric] nt_match_list_simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    ((\\<forall>m\\<in>set (getPos (NegPos_map IIface (map Pos i_pos))).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map IIface (map Pos i_pos))).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getPos (NegPos_map IIface (map Neg i_neg))).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map IIface (map Neg i_neg))).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p)) =\n    ((\\<forall>m\\<in>set (getPos (NegPos_map IIface ifces)).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map IIface ifces)).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p))\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    ((\\<forall>m\\<in>set (getPos (NegPos_map OIface (map Pos i_pos))).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map OIface (map Pos i_pos))).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getPos (NegPos_map OIface (map Neg i_neg))).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map OIface (map Neg i_neg))).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p)) =\n    ((\\<forall>m\\<in>set (getPos (NegPos_map OIface ifces)).\n         matches (\\<beta>, \\<alpha>) (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg (NegPos_map OIface ifces)).\n         matches (\\<beta>, \\<alpha>) (MatchNot (Match m)) a p))", "apply(simp_all add: NegPos_map_simps primitive_matcher_generic.Iface_single[OF generic]\n                          primitive_matcher_generic.Iface_single_not[OF generic])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    ((\\<forall>m\\<in>set i_pos. match_iface m (p_iiface p)) \\<and>\n     (\\<forall>m\\<in>set i_neg. \\<not> match_iface m (p_iiface p))) =\n    ((\\<forall>m\\<in>set (getPos ifces). match_iface m (p_iiface p)) \\<and>\n     (\\<forall>m\\<in>set (getNeg ifces). \\<not> match_iface m (p_iiface p)))\n 2. (case compress_pos_interfaces (getPos ifces) of None \\<Rightarrow> None\n     | Some i \\<Rightarrow>\n         if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n               iface_subset i negated_ifce\n         then None\n         else if \\<not> iface_is_wildcard i then Some ([i], [])\n              else Some (if i = ifaceAny then [] else [i], getNeg ifces)) =\n    Some (i_pos, i_neg) \\<Longrightarrow>\n    ((\\<forall>m\\<in>set i_pos. match_iface m (p_oiface p)) \\<and>\n     (\\<forall>m\\<in>set i_neg. \\<not> match_iface m (p_oiface p))) =\n    ((\\<forall>m\\<in>set (getPos ifces). match_iface m (p_oiface p)) \\<and>\n     (\\<forall>m\\<in>set (getNeg ifces). \\<not> match_iface m (p_oiface p)))", "apply(case_tac [!] \"compress_pos_interfaces (getPos ifces)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n              None \\<Rightarrow> None\n              | Some i \\<Rightarrow>\n                  if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                        iface_subset i negated_ifce\n                  then None\n                  else if \\<not> iface_is_wildcard i then Some ([i], [])\n                       else Some\n                             (if i = ifaceAny then [] else [i],\n                              getNeg ifces)) =\n             Some (i_pos, i_neg);\n     compress_pos_interfaces (getPos ifces) = None\\<rbrakk>\n    \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                           match_iface m (p_iiface p)) \\<and>\n                       (\\<forall>m\\<in>set i_neg.\n                           \\<not> match_iface m (p_iiface p))) =\n                      ((\\<forall>m\\<in>set (getPos ifces).\n                           match_iface m (p_iiface p)) \\<and>\n                       (\\<forall>m\\<in>set (getNeg ifces).\n                           \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n                 None \\<Rightarrow> None\n                 | Some i \\<Rightarrow>\n                     if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                           iface_subset i negated_ifce\n                     then None\n                     else if \\<not> iface_is_wildcard i then Some ([i], [])\n                          else Some\n                                (if i = ifaceAny then [] else [i],\n                                 getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_iiface p)))\n 3. \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n              None \\<Rightarrow> None\n              | Some i \\<Rightarrow>\n                  if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                        iface_subset i negated_ifce\n                  then None\n                  else if \\<not> iface_is_wildcard i then Some ([i], [])\n                       else Some\n                             (if i = ifaceAny then [] else [i],\n                              getNeg ifces)) =\n             Some (i_pos, i_neg);\n     compress_pos_interfaces (getPos ifces) = None\\<rbrakk>\n    \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                           match_iface m (p_oiface p)) \\<and>\n                       (\\<forall>m\\<in>set i_neg.\n                           \\<not> match_iface m (p_oiface p))) =\n                      ((\\<forall>m\\<in>set (getPos ifces).\n                           match_iface m (p_oiface p)) \\<and>\n                       (\\<forall>m\\<in>set (getNeg ifces).\n                           \\<not> match_iface m (p_oiface p)))\n 4. \\<And>a.\n       \\<lbrakk>(case compress_pos_interfaces (getPos ifces) of\n                 None \\<Rightarrow> None\n                 | Some i \\<Rightarrow>\n                     if \\<exists>negated_ifce\\<in>set (getNeg ifces).\n                           iface_subset i negated_ifce\n                     then None\n                     else if \\<not> iface_is_wildcard i then Some ([i], [])\n                          else Some\n                                (if i = ifaceAny then [] else [i],\n                                 getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply(drule_tac p_i=\"p_iiface p\" in compress_pos_interfaces_Some)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        match_iface a (p_iiface p) =\n        (\\<forall>i\\<in>set (getPos ifces).\n            match_iface i (p_iiface p))\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set (getNeg ifces). \\<not> iface_subset a x;\n        \\<not> iface_is_wildcard a; [a] = i_pos \\<and> [] = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_pos.\n                             match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 3. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 4. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "using iface_is_wildcard_def iface_subset match_iface_case_nowildcard"], ["proof (prove)\nusing this:\n  iface_is_wildcard ?ifce \\<equiv> iface_name_is_wildcard (iface_sel ?ifce)\n  iface_subset ?i1.0 ?i2.0 =\n  ({i. match_iface ?i1.0 i} \\<subseteq> {i. match_iface ?i2.0 i})\n  \\<not> iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (?i = ?p_i)\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set (getNeg ifces). \\<not> iface_subset a x;\n        \\<not> iface_is_wildcard a; [a] = i_pos \\<and> [] = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_pos.\n                             match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 3. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 4. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "using match_ifaceAny"], ["proof (prove)\nusing this:\n  match_iface ifaceAny ?i\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_iiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 3. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_iiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_iiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_iiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_iiface p)))\n 2. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        compress_pos_interfaces (getPos ifces) = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply(drule_tac p_i=\"p_oiface p\" in compress_pos_interfaces_Some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>(if \\<exists>x\\<in>set (getNeg ifces). iface_subset a x\n                 then None\n                 else if \\<not> iface_is_wildcard a then Some ([a], [])\n                      else Some\n                            (if a = ifaceAny then [] else [a],\n                             getNeg ifces)) =\n                Some (i_pos, i_neg);\n        match_iface a (p_oiface p) =\n        (\\<forall>i\\<in>set (getPos ifces).\n            match_iface i (p_oiface p))\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))", "apply(simp split:if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set (getNeg ifces). \\<not> iface_subset a x;\n        \\<not> iface_is_wildcard a; [a] = i_pos \\<and> [] = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_pos.\n                             match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))\n 3. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))", "using iface_is_wildcard_def iface_subset match_iface_case_nowildcard"], ["proof (prove)\nusing this:\n  iface_is_wildcard ?ifce \\<equiv> iface_name_is_wildcard (iface_sel ?ifce)\n  iface_subset ?i1.0 ?i2.0 =\n  ({i. match_iface ?i1.0 i} \\<subseteq> {i. match_iface ?i2.0 i})\n  \\<not> iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (?i = ?p_i)\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set (getNeg ifces). \\<not> iface_subset a x;\n        \\<not> iface_is_wildcard a; [a] = i_pos \\<and> [] = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_pos.\n                             match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set (getNeg ifces).\n                              \\<not> match_iface m (p_oiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))\n 3. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))", "using match_ifaceAny"], ["proof (prove)\nusing this:\n  match_iface ifaceAny ?i\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifaceAny (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset ifaceAny x;\n        iface_is_wildcard ifaceAny; a = ifaceAny;\n        [] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m\\<in>set i_neg.\n                             \\<not> match_iface m (p_oiface p)) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))\n 2. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a (p_oiface p) =\n                (\\<forall>i\\<in>set (getPos ifces).\n                    match_iface i (p_oiface p));\n        \\<forall>x\\<in>set i_neg. \\<not> iface_subset a x;\n        iface_is_wildcard a; a \\<noteq> ifaceAny;\n        [a] = i_pos \\<and> getNeg ifces = i_neg\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>m\\<in>set i_pos.\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p))) =\n                         ((\\<forall>m\\<in>set (getPos ifces).\n                              match_iface m (p_oiface p)) \\<and>\n                          (\\<forall>m\\<in>set i_neg.\n                              \\<not> match_iface m (p_oiface p)))", "by force"], ["", "definition compress_normalize_input_interfaces :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr option\" where \n    \"compress_normalize_input_interfaces m \\<equiv> compress_normalize_primitive (is_Iiface, iiface_sel) IIface compress_interfaces m\""], ["", "lemma compress_normalize_input_interfaces_Some:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_input_interfaces m = Some m'\"\n    shows \"matches (\\<beta>, \\<alpha>) m' a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m' a p = matches (\\<beta>, \\<alpha>) m a p", "apply(rule compress_normalize_primitive_Some[OF assms(2) wf_disc_sel_common_primitive(5)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       ?f as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map IIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as)) a p", "using assms(3)"], ["proof (prove)\nusing this:\n  compress_normalize_input_interfaces m = Some m'\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       ?f as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map IIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as)) a p", "apply(simp add: compress_normalize_input_interfaces_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       compress_interfaces as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map IIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as)) a p", "using compress_interfaces_Some[OF generic]"], ["proof (prove)\nusing this:\n  compress_interfaces ?ifces = Some (?i_pos, ?i_neg) \\<Longrightarrow>\n  matches (\\<beta>, ?\\<alpha>)\n   (alist_and (NegPos_map IIface (map Pos ?i_pos @ map Neg ?i_neg))) ?a ?p =\n  matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map IIface ?ifces)) ?a ?p\n  compress_interfaces ?ifces = Some (?i_pos, ?i_neg) \\<Longrightarrow>\n  matches (\\<beta>, ?\\<alpha>)\n   (alist_and (NegPos_map OIface (map Pos ?i_pos @ map Neg ?i_neg))) ?a ?p =\n  matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map OIface ?ifces)) ?a ?p\n\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       compress_interfaces as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map IIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as)) a p", "by simp"], ["", "lemma compress_normalize_input_interfaces_None:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_input_interfaces m = None\"\n    shows \"\\<not> matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches (\\<beta>, \\<alpha>) m a p", "apply(rule compress_normalize_primitive_None[OF assms(2) wf_disc_sel_common_primitive(5)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m = None\n 2. \\<And>as.\n       ?f as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as))\n               a p", "using assms(3)"], ["proof (prove)\nusing this:\n  compress_normalize_input_interfaces m = None\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m = None\n 2. \\<And>as.\n       ?f as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as))\n               a p", "apply(simp add: compress_normalize_input_interfaces_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as.\n       compress_interfaces as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as))\n               a p", "using compress_interfaces_None[OF generic]"], ["proof (prove)\nusing this:\n  compress_interfaces ?ifces = None \\<Longrightarrow>\n  \\<not> matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map IIface ?ifces))\n          ?a ?p\n  compress_interfaces ?ifces = None \\<Longrightarrow>\n  \\<not> matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map OIface ?ifces))\n          ?a ?p\n\ngoal (1 subgoal):\n 1. \\<And>as.\n       compress_interfaces as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map IIface as))\n               a p", "by simp"], ["", "lemma compress_normalize_input_interfaces_nnf: \"normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n      normalized_nnf_match m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_input_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "unfolding compress_normalize_input_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "using compress_normalize_primitive_nnf[OF wf_disc_sel_common_primitive(5)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "by blast"], ["", "lemma compress_normalize_input_interfaces_not_introduces_Iiface:\n    \"\\<not> has_disc is_Iiface m \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     \\<not> has_disc is_Iiface m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc is_Iiface m; normalized_nnf_match m;\n     compress_normalize_input_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m'", "apply(simp add: compress_normalize_input_interfaces_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc is_Iiface m; normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m'", "apply(drule compress_normalize_primitive_not_introduces_C[where m=m and C'=IIface])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> wf_disc_sel (is_Iiface, ?sel) IIface\n 2. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m\n 3. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> compress_normalize_primitive (is_Iiface, ?sel) ?C ?f\n                       m =\n                      Some ?m'\n 4. \\<And>as_pos as_neg.\n       \\<lbrakk>normalized_nnf_match m;\n        compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n         compress_interfaces m =\n        Some m';\n        ?f [] = Some (as_pos, as_neg)\\<rbrakk>\n       \\<Longrightarrow> as_pos = [] \\<and> as_neg = []\n 5. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m';\n     \\<not> has_disc is_Iiface ?m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m'", "apply(simp_all add: wf_disc_sel_common_primitive(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as_pos as_neg.\n       \\<lbrakk>normalized_nnf_match m;\n        compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n         compress_interfaces m =\n        Some m';\n        compress_interfaces [] = Some (as_pos, as_neg)\\<rbrakk>\n       \\<Longrightarrow> as_pos = [] \\<and> as_neg = []", "by(simp add: compress_interfaces_def iface_is_wildcard_ifaceAny)"], ["", "lemma compress_normalize_input_interfaces_not_introduces_Iiface_negated:\n    assumes notdisc: \"\\<not> has_disc_negated is_Iiface False m\"\n        and nm: \"normalized_nnf_match m\"\n        and some: \"compress_normalize_input_interfaces m = Some m'\"\n     shows \"\\<not> has_disc_negated is_Iiface False m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_disc_negated is_Iiface False m'", "apply(rule compress_normalize_primitive_not_introduces_C_negated[OF notdisc wf_disc_sel_common_primitive(5) nm])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       \\<lbrakk>?f as = Some (as_pos, as_neg); getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "using some"], ["proof (prove)\nusing this:\n  compress_normalize_input_interfaces m = Some m'\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       \\<lbrakk>?f as = Some (as_pos, as_neg); getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "apply(simp add: compress_normalize_input_interfaces_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       \\<lbrakk>compress_interfaces as = Some (as_pos, as_neg);\n        getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "by(simp add: compress_interfaces_def split: option.split_asm if_split_asm)"], ["", "(* only for arbitrary discs that do not match Iiface*)"], ["", "lemma compress_normalize_input_interfaces_hasdisc:\n    \"\\<not> has_disc disc m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc disc m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (IIface a);\n     normalized_nnf_match m;\n     compress_normalize_input_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "unfolding compress_normalize_input_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (IIface a);\n     normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "using compress_normalize_primitive_hasdisc[OF _ wf_disc_sel_common_primitive(5)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc ?disc2.0 ?m;\n   \\<forall>a. \\<not> ?disc2.0 (IIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    \\<not> has_disc ?disc2.0 ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (IIface a);\n     normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "by blast"], ["", "(* only for arbitrary discs that do not match Iiface*)"], ["", "lemma compress_normalize_input_interfaces_hasdisc_negated:\n    \"\\<not> has_disc_negated disc neg m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc_negated disc neg m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_input_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "unfolding compress_normalize_input_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "using compress_normalize_primitive_hasdisc_negated[OF _ wf_disc_sel_common_primitive(5)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc_negated ?disc2.0 ?neg ?m;\n   \\<forall>a. \\<not> ?disc2.0 (IIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    \\<not> has_disc_negated ?disc2.0 ?neg ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "by blast"], ["", "lemma compress_normalize_input_interfaces_preserves_normalized_n_primitive:\n    \"normalized_n_primitive (disc, sel) P m \\<Longrightarrow> (\\<forall>a. \\<not> disc (IIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_input_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> normalized_n_primitive (disc, sel) P m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_input_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "unfolding compress_normalize_input_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "using compress_normalize_primitve_preserves_normalized_n_primitive[OF _ wf_disc_sel_common_primitive(5)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;\n   \\<forall>a. \\<not> ?disc2.0 (IIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Iiface, iiface_sel) IIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (IIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Iiface, iiface_sel) IIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "by blast"], ["", "value[code] \"compress_normalize_input_interfaces \n    (MatchAnd (MatchAnd (MatchAnd (Match ((IIface (Iface ''eth+'')::32 common_primitive))) (MatchNot (Match (IIface (Iface ''eth4''))))) (Match (IIface (Iface ''eth1''))))\n              (Match (Prot (Proto TCP))))\""], ["", "value[code] \"compress_normalize_input_interfaces (MatchAny:: 32 common_primitive match_expr)\""], ["", "definition compress_normalize_output_interfaces :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr option\" where \n    \"compress_normalize_output_interfaces m \\<equiv> compress_normalize_primitive (is_Oiface, oiface_sel) OIface compress_interfaces m\""], ["", "lemma compress_normalize_output_interfaces_Some:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_output_interfaces m = Some m'\"\n    shows \"matches (\\<beta>, \\<alpha>) m' a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m' a p = matches (\\<beta>, \\<alpha>) m a p", "apply(rule compress_normalize_primitive_Some[OF assms(2) wf_disc_sel_common_primitive(6)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       ?f as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map OIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as)) a p", "using assms(3)"], ["proof (prove)\nusing this:\n  compress_normalize_output_interfaces m = Some m'\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       ?f as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map OIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as)) a p", "apply(simp add: compress_normalize_output_interfaces_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       compress_interfaces as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map OIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as)) a p", "using compress_interfaces_Some[OF generic]"], ["proof (prove)\nusing this:\n  compress_interfaces ?ifces = Some (?i_pos, ?i_neg) \\<Longrightarrow>\n  matches (\\<beta>, ?\\<alpha>)\n   (alist_and (NegPos_map IIface (map Pos ?i_pos @ map Neg ?i_neg))) ?a ?p =\n  matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map IIface ?ifces)) ?a ?p\n  compress_interfaces ?ifces = Some (?i_pos, ?i_neg) \\<Longrightarrow>\n  matches (\\<beta>, ?\\<alpha>)\n   (alist_and (NegPos_map OIface (map Pos ?i_pos @ map Neg ?i_neg))) ?a ?p =\n  matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map OIface ?ifces)) ?a ?p\n\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       compress_interfaces as = Some (as_pos, as_neg) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (alist_and (NegPos_map OIface (map Pos as_pos @ map Neg as_neg))) a\n        p =\n       matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as)) a p", "by simp"], ["", "lemma compress_normalize_output_interfaces_None:\n  assumes generic: \"primitive_matcher_generic \\<beta>\"\n      and \"normalized_nnf_match m\" and \"compress_normalize_output_interfaces m = None\"\n    shows \"\\<not> matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches (\\<beta>, \\<alpha>) m a p", "apply(rule compress_normalize_primitive_None[OF assms(2) wf_disc_sel_common_primitive(6)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m = None\n 2. \\<And>as.\n       ?f as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as))\n               a p", "using assms(3)"], ["proof (prove)\nusing this:\n  compress_normalize_output_interfaces m = None\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m = None\n 2. \\<And>as.\n       ?f as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as))\n               a p", "apply(simp add: compress_normalize_output_interfaces_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as.\n       compress_interfaces as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as))\n               a p", "using compress_interfaces_None[OF generic]"], ["proof (prove)\nusing this:\n  compress_interfaces ?ifces = None \\<Longrightarrow>\n  \\<not> matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map IIface ?ifces))\n          ?a ?p\n  compress_interfaces ?ifces = None \\<Longrightarrow>\n  \\<not> matches (\\<beta>, ?\\<alpha>) (alist_and (NegPos_map OIface ?ifces))\n          ?a ?p\n\ngoal (1 subgoal):\n 1. \\<And>as.\n       compress_interfaces as = None \\<Longrightarrow>\n       \\<not> matches (\\<beta>, \\<alpha>) (alist_and (NegPos_map OIface as))\n               a p", "by simp"], ["", "lemma compress_normalize_output_interfaces_nnf: \"normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n      normalized_nnf_match m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_output_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "unfolding compress_normalize_output_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "using compress_normalize_primitive_nnf[OF wf_disc_sel_common_primitive(6)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m'", "by blast"], ["", "lemma compress_normalize_output_interfaces_not_introduces_Oiface:\n    \"\\<not> has_disc is_Oiface m \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     \\<not> has_disc is_Oiface m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc is_Oiface m; normalized_nnf_match m;\n     compress_normalize_output_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Oiface m'", "apply(simp add: compress_normalize_output_interfaces_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc is_Oiface m; normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Oiface m'", "apply(drule compress_normalize_primitive_not_introduces_C[where m=m  and C'=OIface])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> wf_disc_sel (is_Oiface, ?sel) OIface\n 2. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m\n 3. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> compress_normalize_primitive (is_Oiface, ?sel) ?C ?f\n                       m =\n                      Some ?m'\n 4. \\<And>as_pos as_neg.\n       \\<lbrakk>normalized_nnf_match m;\n        compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n         compress_interfaces m =\n        Some m';\n        ?f [] = Some (as_pos, as_neg)\\<rbrakk>\n       \\<Longrightarrow> as_pos = [] \\<and> as_neg = []\n 5. \\<lbrakk>normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m';\n     \\<not> has_disc is_Oiface ?m'\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Oiface m'", "apply(simp_all add: wf_disc_sel_common_primitive(6))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as_pos as_neg.\n       \\<lbrakk>normalized_nnf_match m;\n        compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n         compress_interfaces m =\n        Some m';\n        compress_interfaces [] = Some (as_pos, as_neg)\\<rbrakk>\n       \\<Longrightarrow> as_pos = [] \\<and> as_neg = []", "by(simp add: compress_interfaces_def iface_is_wildcard_ifaceAny)"], ["", "lemma compress_normalize_output_interfaces_not_introduces_Oiface_negated:\n    assumes notdisc: \"\\<not> has_disc_negated is_Oiface False m\"\n        and nm: \"normalized_nnf_match m\"\n        and some: \"compress_normalize_output_interfaces m = Some m'\"\n     shows \"\\<not> has_disc_negated is_Oiface False m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_disc_negated is_Oiface False m'", "apply(rule compress_normalize_primitive_not_introduces_C_negated[OF notdisc wf_disc_sel_common_primitive(6) nm])"], ["proof (prove)\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       \\<lbrakk>?f as = Some (as_pos, as_neg); getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "using some"], ["proof (prove)\nusing this:\n  compress_normalize_output_interfaces m = Some m'\n\ngoal (2 subgoals):\n 1. compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f m =\n    Some m'\n 2. \\<And>as as_pos as_neg.\n       \\<lbrakk>?f as = Some (as_pos, as_neg); getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "apply(simp add: compress_normalize_output_interfaces_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>as as_pos as_neg.\n       \\<lbrakk>compress_interfaces as = Some (as_pos, as_neg);\n        getNeg as = []\\<rbrakk>\n       \\<Longrightarrow> as_neg = []", "by(simp add: compress_interfaces_def split: option.split_asm if_split_asm)"], ["", "(* only for arbitrary discs that do not match Oiface*)"], ["", "lemma compress_normalize_output_interfaces_hasdisc:\n    \"\\<not> has_disc disc m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc disc m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (OIface a);\n     normalized_nnf_match m;\n     compress_normalize_output_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "unfolding compress_normalize_output_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (OIface a);\n     normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "using compress_normalize_primitive_hasdisc[OF _ wf_disc_sel_common_primitive(6)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc ?disc2.0 ?m;\n   \\<forall>a. \\<not> ?disc2.0 (OIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    \\<not> has_disc ?disc2.0 ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc m; \\<forall>a. \\<not> disc (OIface a);\n     normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and> \\<not> has_disc disc m'", "by blast"], ["", "(* only for arbitrary discs that do not match Oiface*)"], ["", "lemma compress_normalize_output_interfaces_hasdisc_negated:\n    \"\\<not> has_disc_negated disc neg m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> \\<not> has_disc_negated disc neg m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_output_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "unfolding compress_normalize_output_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "using compress_normalize_primitive_hasdisc_negated[OF _ wf_disc_sel_common_primitive(6)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc_negated ?disc2.0 ?neg ?m;\n   \\<forall>a. \\<not> ?disc2.0 (OIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    \\<not> has_disc_negated ?disc2.0 ?neg ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc neg m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      \\<not> has_disc_negated disc neg m'", "by blast"], ["", "lemma compress_normalize_output_interfaces_preserves_normalized_n_primitive:\n    \"normalized_n_primitive (disc, sel) P m \\<Longrightarrow> (\\<forall>a. \\<not> disc (OIface a)) \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> compress_normalize_output_interfaces m = Some m' \\<Longrightarrow>\n     normalized_nnf_match m' \\<and> normalized_n_primitive (disc, sel) P m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_output_interfaces m = Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "unfolding compress_normalize_output_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "using compress_normalize_primitve_preserves_normalized_n_primitive[OF _ wf_disc_sel_common_primitive(6)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m;\n   \\<forall>a. \\<not> ?disc2.0 (OIface a); normalized_nnf_match ?m;\n   compress_normalize_primitive (is_Oiface, oiface_sel) OIface ?f ?m =\n   Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m' \\<and>\n                    normalized_n_primitive (?disc2.0, ?sel2.0) ?P ?m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_n_primitive (disc, sel) P m;\n     \\<forall>a. \\<not> disc (OIface a); normalized_nnf_match m;\n     compress_normalize_primitive (is_Oiface, oiface_sel) OIface\n      compress_interfaces m =\n     Some m'\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m' \\<and>\n                      normalized_n_primitive (disc, sel) P m'", "by blast"], ["", "end"], ["", "end"]]}