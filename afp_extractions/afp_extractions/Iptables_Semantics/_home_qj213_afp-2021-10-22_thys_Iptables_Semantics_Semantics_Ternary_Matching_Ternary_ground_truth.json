{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Matching_Ternary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma map_match_tac__does_not_use_TernaryOr: \"\\<not> (ternary_has_or (map_match_tac \\<beta> p m))\"", "lemma matches_tuple: \"matches (\\<beta>, \\<alpha>) m a p = ternary_to_bool_unknown_match_tac \\<alpha> a p (ternary_ternary_eval (map_match_tac \\<beta> p m))\"", "lemma matches_case: \"matches \\<gamma> m a p \\<longleftrightarrow> (case ternary_eval (map_match_tac (fst \\<gamma>) p m) of None \\<Rightarrow> (snd \\<gamma>) a p | Some b \\<Rightarrow> b)\"", "lemma matches_case_tuple: \"matches (\\<beta>, \\<alpha>) m a p \\<longleftrightarrow> (case ternary_eval (map_match_tac \\<beta> p m) of None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b)\"", "lemma matches_case_ternaryvalue_tuple: \"matches (\\<beta>, \\<alpha>) m a p \\<longleftrightarrow> (case ternary_ternary_eval (map_match_tac \\<beta> p m) of \n        TernaryUnknown \\<Rightarrow> \\<alpha> a p | \n        TernaryTrue \\<Rightarrow> True |\n        TernaryFalse \\<Rightarrow> False)\"", "lemma matches_casesE:\n  \"matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow> \n    (ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown \\<Longrightarrow> \\<alpha> a p \\<Longrightarrow> P) \\<Longrightarrow> \n    (ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryTrue \\<Longrightarrow> P)\n  \\<Longrightarrow> P\"", "lemma \"\\<lbrakk> ternary_ternary_eval (map_match_tac \\<beta> p expr) = TernaryUnknown \\<rbrakk> \\<Longrightarrow> matches (\\<beta>, \\<alpha>) expr a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (MatchNot expr) a p\"", "lemma bunch_of_lemmata_about_matches:\n  \"matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> matches \\<gamma> m1 a p \\<and> matches \\<gamma> m2 a p\" (*split AND*)\n  \"matches \\<gamma> MatchAny a p\" (*MatchAny is True*)\n  \"matches \\<gamma> (MatchNot MatchAny) a p \\<longleftrightarrow> False\" (*Not True*)\n  \"matches \\<gamma> (MatchNot (MatchNot m)) a p \\<longleftrightarrow> matches \\<gamma> m a p\"", "lemma match_raw_bool:\n  \"matches (\\<beta>, \\<alpha>) (Match expr) a p = (case ternary_to_bool (\\<beta> expr p) of Some r \\<Rightarrow> r | None \\<Rightarrow> (\\<alpha> a p))\"", "lemma match_raw_ternary:\n  \"matches (\\<beta>, \\<alpha>) (Match expr) a p = (case (\\<beta> expr p) of TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False | TernaryUnknown \\<Rightarrow> (\\<alpha> a p))\"", "lemma matches_DeMorgan: \"matches \\<gamma> (MatchNot (MatchAnd m1 m2)) a p \\<longleftrightarrow> (matches \\<gamma> (MatchNot m1) a p) \\<or> (matches \\<gamma> (MatchNot m2) a p)\"", "lemma matches_and_comm: \"matches \\<gamma> (MatchAnd m m') a p \\<longleftrightarrow> matches \\<gamma> (MatchAnd m' m) a p\"", "lemma matches_not_idem: \"matches \\<gamma> (MatchNot (MatchNot m)) a p \\<longleftrightarrow> matches \\<gamma> m a p\"", "lemma MatchOr: \"matches \\<gamma> (MatchOr m1 m2) a p \\<longleftrightarrow> matches \\<gamma> m1 a p \\<or> matches \\<gamma> m2 a p\"", "lemma MatchOr_MatchNot: \"matches \\<gamma> (MatchNot (MatchOr m1 m2)) a p \\<longleftrightarrow> matches \\<gamma> (MatchNot m1) a p \\<and> matches \\<gamma> (MatchNot m2) a p\"", "lemma \"(TernaryNot (map_match_tac \\<beta> p (m))) = (map_match_tac \\<beta> p (MatchNot m))\"", "lemma matches_simp1: \"matches \\<gamma> m a p \\<Longrightarrow> matches \\<gamma> (MatchAnd m m') a p \\<longleftrightarrow> matches \\<gamma> m' a p\"", "lemma matches_simp11: \"matches \\<gamma> m a p \\<Longrightarrow> matches \\<gamma> (MatchAnd m' m) a p \\<longleftrightarrow> matches \\<gamma> m' a p\"", "lemma matches_simp2: \"matches \\<gamma> (MatchAnd m m') a p \\<Longrightarrow> \\<not> matches \\<gamma> m a p \\<Longrightarrow> False\"", "lemma matches_simp22: \"matches \\<gamma> (MatchAnd m m') a p \\<Longrightarrow> \\<not> matches \\<gamma> m' a p \\<Longrightarrow> False\"", "lemma matches_simp3: \"matches \\<gamma> (MatchNot m) a p \\<Longrightarrow> matches \\<gamma> m a p \\<Longrightarrow> (snd \\<gamma>) a p\"", "lemma \"matches \\<gamma> (MatchNot m) a p \\<Longrightarrow> matches \\<gamma> m a p \\<Longrightarrow> (ternary_eval (map_match_tac (fst \\<gamma>) p m)) = None\"", "lemmas matches_simps = matches_simp1 matches_simp11", "lemmas matches_dest = matches_simp2 matches_simp22", "lemma matches_iff_apply_f_generic: \"ternary_ternary_eval (map_match_tac \\<beta> p (f (\\<beta>,\\<alpha>) a m)) = ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow> matches (\\<beta>,\\<alpha>) (f (\\<beta>,\\<alpha>) a m) a p \\<longleftrightarrow> matches (\\<beta>,\\<alpha>) m a p\"", "lemma matches_iff_apply_f: \"ternary_ternary_eval (map_match_tac \\<beta> p (f m)) = ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow> matches (\\<beta>,\\<alpha>) (f m) a p \\<longleftrightarrow> matches (\\<beta>,\\<alpha>) m a p\"", "lemma opt_MatchAny_match_expr_correct: \"matches \\<gamma> (opt_MatchAny_match_expr m) = matches \\<gamma> m\"", "lemma wf_unknown_match_tacD_False1: \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) m Reject p \\<Longrightarrow> matches (\\<beta>, \\<alpha>) m Drop p \\<Longrightarrow> False\"", "lemma wf_unknown_match_tacD_False2: \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> matches (\\<beta>, \\<alpha>) m Reject p \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) m Drop p \\<Longrightarrow> False\"", "lemma[code_unfold]: \"remove_unknowns_generic \\<gamma> a (MatchNot (MatchAnd m1 m2)) = \n    (let m1' = remove_unknowns_generic \\<gamma>  a (MatchNot m1); m2' = remove_unknowns_generic \\<gamma>  a (MatchNot m2) in\n    (if m1' = MatchAny \\<or> m2' = MatchAny\n     then MatchAny\n     else \n        if m1' = MatchNot MatchAny then m2' else\n        if m2' = MatchNot MatchAny then m1'\n     else\n        MatchNot (MatchAnd (MatchNot m1') (MatchNot m2')))\n       )\"", "lemma remove_unknowns_generic_simp_3_4_unfolded: \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if (\\<forall>p. \\<alpha> a p) then MatchAny else if (\\<forall>p. \\<not> \\<alpha> a p) then MatchNot MatchAny else Match A\n    else (Match A))\" \n \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if (\\<forall>p. \\<alpha> a p) then MatchAny else if (\\<forall>p. \\<not> \\<alpha> a p) then MatchNot MatchAny else MatchNot (Match A)\n    else MatchNot (Match A))\"", "lemmas remove_unknowns_generic_simps2 = remove_unknowns_generic.simps(1) remove_unknowns_generic.simps(2) \n            remove_unknowns_generic_simp_3_4_unfolded\n            remove_unknowns_generic.simps(5) remove_unknowns_generic.simps(6) remove_unknowns_generic.simps(7)", "lemma \"matches (\\<beta>, \\<alpha>) (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A))) a p = matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\"", "lemma remove_unknowns_generic: \"matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a = matches \\<gamma> m a\"", "lemma packet_independent_unknown_match: \"a = Accept \\<or> a = Drop \\<Longrightarrow> packet_independent_\\<alpha> \\<alpha> \\<Longrightarrow> \\<not> unknown_not_match_any \\<alpha> a \\<longleftrightarrow> unknown_match_all \\<alpha> a\"", "lemma remove_unknowns_generic_specification: \"a = Accept \\<or> a = Drop \\<Longrightarrow> packet_independent_\\<alpha> \\<alpha> \\<Longrightarrow>\n  packet_independent_\\<beta>_unknown \\<beta> \\<Longrightarrow>\n   \\<not> has_unknowns \\<beta> (remove_unknowns_generic (\\<beta>, \\<alpha>) a m)\"", "lemma no_primitives_no_unknown: \"\\<not> has_primitive m  \\<Longrightarrow> (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq> TernaryUnknown\"", "lemma no_primitives_matchNot: assumes \"\\<not> has_primitive m\" shows \"matches \\<gamma> (MatchNot m) a p \\<longleftrightarrow> \\<not> matches \\<gamma> m a p\"", "lemma matcheq_matchAny: \"\\<not> has_primitive m \\<Longrightarrow> matcheq_matchAny m \\<longleftrightarrow> matches \\<gamma> m a p\"", "lemma matcheq_matchNone: \"\\<not> has_primitive m \\<Longrightarrow> matcheq_matchNone m \\<longleftrightarrow> \\<not> matches \\<gamma> m a p\"", "lemma matcheq_matchNone_not_matches: \"matcheq_matchNone m \\<Longrightarrow> \\<not> matches \\<gamma> m a p\"", "lemma matches_MatchNot_no_unknowns:\n   assumes \"\\<not> has_unknowns \\<beta> m\"\n   shows \"matches (\\<beta>,\\<alpha>) (MatchNot m) a p \\<longleftrightarrow> \\<not> matches (\\<beta>,\\<alpha>) m a p\"", "lemma MatchNot_ternary_ternary_eval: \"(ternary_ternary_eval (map_match_tac \\<beta> p m')) = (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n    matches (\\<beta>,\\<alpha>) (MatchNot m') a p = matches (\\<beta>,\\<alpha>) (MatchNot m) a p\"", "lemma matches_induction_case_MatchNot:\n      assumes \"\\<alpha> Drop \\<noteq> \\<alpha> Accept\" and \"packet_independent_\\<alpha> \\<alpha>\"\n      and     \"\\<forall> a. matches (\\<beta>,\\<alpha>) m' a p = matches (\\<beta>,\\<alpha>) m a p\"\n      shows   \"matches (\\<beta>,\\<alpha>) (MatchNot m') a p = matches (\\<beta>,\\<alpha>) (MatchNot m) a p\""], "translations": [["", "lemma map_match_tac__does_not_use_TernaryOr: \"\\<not> (ternary_has_or (map_match_tac \\<beta> p m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ternary_has_or (map_match_tac \\<beta> p m)", "by(induction m, simp_all)"], ["", "declare ternary_has_or.simps[simp del]"], ["", "end"], ["", "fun ternary_to_bool_unknown_match_tac :: \"'packet unknown_match_tac \\<Rightarrow> action \\<Rightarrow> 'packet \\<Rightarrow> ternaryvalue \\<Rightarrow> bool\" where\n  \"ternary_to_bool_unknown_match_tac _ _ _ TernaryTrue = True\" |\n  \"ternary_to_bool_unknown_match_tac _ _ _ TernaryFalse = False\" |\n  \"ternary_to_bool_unknown_match_tac \\<alpha> a p TernaryUnknown = \\<alpha> a p\""], ["", "text\\<open>\nMatching a packet and a rule:\n\\begin{enumerate}\n  \\item Translate @{typ \"'a match_expr\"} to ternary formula\n  \\item Evaluate this formula\n  \\item If @{const TernaryTrue}/@{const TernaryFalse}, return this value\n  \\item If @{const TernaryUnknown}, apply the @{typ \"'a unknown_match_tac\"} to get a Boolean result\n\\end{enumerate}\n\\<close>"], ["", "definition matches :: \"('a, 'packet) match_tac \\<Rightarrow> 'a match_expr \\<Rightarrow> action \\<Rightarrow> 'packet \\<Rightarrow> bool\" where\n  \"matches \\<gamma> m a p \\<equiv> ternary_to_bool_unknown_match_tac (snd \\<gamma>) a p (ternary_ternary_eval (map_match_tac (fst \\<gamma>) p m))\""], ["", "text\\<open>Alternative matches definitions, some more or less convenient\\<close>"], ["", "lemma matches_tuple: \"matches (\\<beta>, \\<alpha>) m a p = ternary_to_bool_unknown_match_tac \\<alpha> a p (ternary_ternary_eval (map_match_tac \\<beta> p m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m a p =\n    ternary_to_bool_unknown_match_tac \\<alpha> a p\n     (ternary_ternary_eval (map_match_tac \\<beta> p m))", "unfolding matches_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_to_bool_unknown_match_tac (snd (\\<beta>, \\<alpha>)) a p\n     (ternary_ternary_eval (map_match_tac (fst (\\<beta>, \\<alpha>)) p m)) =\n    ternary_to_bool_unknown_match_tac \\<alpha> a p\n     (ternary_ternary_eval (map_match_tac \\<beta> p m))", "by simp"], ["", "lemma matches_case: \"matches \\<gamma> m a p \\<longleftrightarrow> (case ternary_eval (map_match_tac (fst \\<gamma>) p m) of None \\<Rightarrow> (snd \\<gamma>) a p | Some b \\<Rightarrow> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m a p =\n    (case ternary_eval (map_match_tac (fst \\<gamma>) p m) of\n     None \\<Rightarrow> snd \\<gamma> a p | Some b \\<Rightarrow> b)", "unfolding matches_def ternary_eval_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_to_bool_unknown_match_tac (snd \\<gamma>) a p\n     (ternary_ternary_eval (map_match_tac (fst \\<gamma>) p m)) =\n    (case ternary_to_bool\n           (ternary_ternary_eval (map_match_tac (fst \\<gamma>) p m)) of\n     None \\<Rightarrow> snd \\<gamma> a p | Some b \\<Rightarrow> b)", "by (cases \"(ternary_ternary_eval (map_match_tac (fst \\<gamma>) p m))\") auto"], ["", "lemma matches_case_tuple: \"matches (\\<beta>, \\<alpha>) m a p \\<longleftrightarrow> (case ternary_eval (map_match_tac \\<beta> p m) of None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m a p =\n    (case ternary_eval (map_match_tac \\<beta> p m) of\n     None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b)", "by (auto simp: matches_case split: option.splits)"], ["", "lemma matches_case_ternaryvalue_tuple: \"matches (\\<beta>, \\<alpha>) m a p \\<longleftrightarrow> (case ternary_ternary_eval (map_match_tac \\<beta> p m) of \n        TernaryUnknown \\<Rightarrow> \\<alpha> a p | \n        TernaryTrue \\<Rightarrow> True |\n        TernaryFalse \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m a p =\n    (case ternary_ternary_eval (map_match_tac \\<beta> p m) of\n     TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "by(simp split: option.split ternaryvalue.split add: matches_case ternary_to_bool_None ternary_eval_def)"], ["", "(*use together: matches_case_ternaryvalue_tuple ternaryvalue.split *)"], ["", "lemma matches_casesE:\n  \"matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow> \n    (ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryUnknown \\<Longrightarrow> \\<alpha> a p \\<Longrightarrow> P) \\<Longrightarrow> \n    (ternary_ternary_eval (map_match_tac \\<beta> p m) = TernaryTrue \\<Longrightarrow> P)\n  \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches (\\<beta>, \\<alpha>) m a p;\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) =\n              TernaryUnknown;\n      \\<alpha> a p\\<rbrakk>\n     \\<Longrightarrow> P;\n     ternary_ternary_eval (map_match_tac \\<beta> p m) =\n     TernaryTrue \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>) (Match x) a p;\n        \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) =\n                 TernaryUnknown;\n         \\<alpha> a p\\<rbrakk>\n        \\<Longrightarrow> P;\n        ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) =\n        TernaryTrue \\<Longrightarrow>\n        P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>matches (\\<beta>, \\<alpha>) m a p;\n                 \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m) =\n                          TernaryUnknown;\n                  \\<alpha> a p\\<rbrakk>\n                 \\<Longrightarrow> P;\n                 ternary_ternary_eval (map_match_tac \\<beta> p m) =\n                 TernaryTrue \\<Longrightarrow>\n                 P\\<rbrakk>\n                \\<Longrightarrow> P;\n        matches (\\<beta>, \\<alpha>) (MatchNot m) a p;\n        \\<lbrakk>ternary_ternary_eval\n                  (map_match_tac \\<beta> p (MatchNot m)) =\n                 TernaryUnknown;\n         \\<alpha> a p\\<rbrakk>\n        \\<Longrightarrow> P;\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m)) =\n        TernaryTrue \\<Longrightarrow>\n        P\\<rbrakk>\n       \\<Longrightarrow> P\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>matches (\\<beta>, \\<alpha>) m1 a p;\n                 \\<lbrakk>ternary_ternary_eval\n                           (map_match_tac \\<beta> p m1) =\n                          TernaryUnknown;\n                  \\<alpha> a p\\<rbrakk>\n                 \\<Longrightarrow> P;\n                 ternary_ternary_eval (map_match_tac \\<beta> p m1) =\n                 TernaryTrue \\<Longrightarrow>\n                 P\\<rbrakk>\n                \\<Longrightarrow> P;\n        \\<lbrakk>matches (\\<beta>, \\<alpha>) m2 a p;\n         \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n                  TernaryUnknown;\n          \\<alpha> a p\\<rbrakk>\n         \\<Longrightarrow> P;\n         ternary_ternary_eval (map_match_tac \\<beta> p m2) =\n         TernaryTrue \\<Longrightarrow>\n         P\\<rbrakk>\n        \\<Longrightarrow> P;\n        matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p;\n        \\<lbrakk>ternary_ternary_eval\n                  (map_match_tac \\<beta> p (MatchAnd m1 m2)) =\n                 TernaryUnknown;\n         \\<alpha> a p\\<rbrakk>\n        \\<Longrightarrow> P;\n        ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1 m2)) =\n        TernaryTrue \\<Longrightarrow>\n        P\\<rbrakk>\n       \\<Longrightarrow> P\n 4. \\<lbrakk>matches (\\<beta>, \\<alpha>) MatchAny a p;\n     \\<lbrakk>ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) =\n              TernaryUnknown;\n      \\<alpha> a p\\<rbrakk>\n     \\<Longrightarrow> P;\n     ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) =\n     TernaryTrue \\<Longrightarrow>\n     P\\<rbrakk>\n    \\<Longrightarrow> P", "qed(auto split: option.split_asm simp: matches_case_tuple ternary_eval_def ternary_to_bool_bool_to_ternary elim: ternary_to_bool.elims)"], ["", "text\\<open>\nExample: \\<open>\\<not> Unknown\\<close> is as good as \\<open>Unknown\\<close>\n\\<close>"], ["", "lemma \"\\<lbrakk> ternary_ternary_eval (map_match_tac \\<beta> p expr) = TernaryUnknown \\<rbrakk> \\<Longrightarrow> matches (\\<beta>, \\<alpha>) expr a p \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (MatchNot expr) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p expr) =\n    TernaryUnknown \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>) expr a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot expr) a p", "by(simp add: matches_case_ternaryvalue_tuple)"], ["", "lemma bunch_of_lemmata_about_matches:\n  \"matches \\<gamma> (MatchAnd m1 m2) a p \\<longleftrightarrow> matches \\<gamma> m1 a p \\<and> matches \\<gamma> m2 a p\" (*split AND*)\n  \"matches \\<gamma> MatchAny a p\" (*MatchAny is True*)\n  \"matches \\<gamma> (MatchNot MatchAny) a p \\<longleftrightarrow> False\" (*Not True*)\n  \"matches \\<gamma> (MatchNot (MatchNot m)) a p \\<longleftrightarrow> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches \\<gamma> (MatchAnd m1 m2) a p =\n     (matches \\<gamma> m1 a p \\<and> matches \\<gamma> m2 a p) &&&\n     matches \\<gamma> MatchAny a p) &&&\n    matches \\<gamma> (MatchNot MatchAny) a p = False &&&\n    matches \\<gamma> (MatchNot (MatchNot m)) a p = matches \\<gamma> m a p", "(*idempotence*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches \\<gamma> (MatchAnd m1 m2) a p =\n     (matches \\<gamma> m1 a p \\<and> matches \\<gamma> m2 a p) &&&\n     matches \\<gamma> MatchAny a p) &&&\n    matches \\<gamma> (MatchNot MatchAny) a p = False &&&\n    matches \\<gamma> (MatchNot (MatchNot m)) a p = matches \\<gamma> m a p", "proof(case_tac [!] \\<gamma>)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<gamma> = (aa, b) \\<Longrightarrow>\n       matches \\<gamma> (MatchAnd m1 m2) a p =\n       (matches \\<gamma> m1 a p \\<and> matches \\<gamma> m2 a p)\n 2. \\<And>aa b.\n       \\<gamma> = (aa, b) \\<Longrightarrow> matches \\<gamma> MatchAny a p\n 3. \\<And>aa b.\n       \\<gamma> = (aa, b) \\<Longrightarrow>\n       matches \\<gamma> (MatchNot MatchAny) a p = False\n 4. \\<And>aa b.\n       \\<gamma> = (aa, b) \\<Longrightarrow>\n       matches \\<gamma> (MatchNot (MatchNot m)) a p = matches \\<gamma> m a p", "qed (simp_all split: ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["", "lemma match_raw_bool:\n  \"matches (\\<beta>, \\<alpha>) (Match expr) a p = (case ternary_to_bool (\\<beta> expr p) of Some r \\<Rightarrow> r | None \\<Rightarrow> (\\<alpha> a p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match expr) a p =\n    (case ternary_to_bool (\\<beta> expr p) of\n     None \\<Rightarrow> \\<alpha> a p | Some r \\<Rightarrow> r)", "(*Match raw*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match expr) a p =\n    (case ternary_to_bool (\\<beta> expr p) of\n     None \\<Rightarrow> \\<alpha> a p | Some r \\<Rightarrow> r)", "by(simp_all split: ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["", "lemma match_raw_ternary:\n  \"matches (\\<beta>, \\<alpha>) (Match expr) a p = (case (\\<beta> expr p) of TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False | TernaryUnknown \\<Rightarrow> (\\<alpha> a p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match expr) a p =\n    (case \\<beta> expr p of TernaryTrue \\<Rightarrow> True\n     | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "(*Match raw explicit*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match expr) a p =\n    (case \\<beta> expr p of TernaryTrue \\<Rightarrow> True\n     | TernaryFalse \\<Rightarrow> False\n     | TernaryUnknown \\<Rightarrow> \\<alpha> a p)", "by(simp_all split: ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["", "(*kind of the DeMorgan Rule for matches*)"], ["", "lemma matches_DeMorgan: \"matches \\<gamma> (MatchNot (MatchAnd m1 m2)) a p \\<longleftrightarrow> (matches \\<gamma> (MatchNot m1) a p) \\<or> (matches \\<gamma> (MatchNot m2) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot (MatchAnd m1 m2)) a p =\n    (matches \\<gamma> (MatchNot m1) a p \\<or>\n     matches \\<gamma> (MatchNot m2) a p)", "by (cases \\<gamma>) (simp split: ternaryvalue.split add: matches_case_ternaryvalue_tuple eval_ternary_DeMorgan)"], ["", "subsection\\<open>Ternary Matcher Algebra\\<close>"], ["", "lemma matches_and_comm: \"matches \\<gamma> (MatchAnd m m') a p \\<longleftrightarrow> matches \\<gamma> (MatchAnd m' m) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchAnd m m') a p =\n    matches \\<gamma> (MatchAnd m' m) a p", "apply(cases \\<gamma>, rename_tac \\<beta> \\<alpha>, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<gamma> = (\\<beta>, \\<alpha>) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (MatchAnd m m') a p =\n       matches (\\<beta>, \\<alpha>) (MatchAnd m' m) a p", "by(simp add: matches_case_ternaryvalue_tuple eval_ternary_And_comm)"], ["", "lemma matches_not_idem: \"matches \\<gamma> (MatchNot (MatchNot m)) a p \\<longleftrightarrow> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot (MatchNot m)) a p = matches \\<gamma> m a p", "by (fact bunch_of_lemmata_about_matches)"], ["", "lemma MatchOr: \"matches \\<gamma> (MatchOr m1 m2) a p \\<longleftrightarrow> matches \\<gamma> m1 a p \\<or> matches \\<gamma> m2 a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchOr m1 m2) a p =\n    (matches \\<gamma> m1 a p \\<or> matches \\<gamma> m2 a p)", "by(simp add: MatchOr_def matches_DeMorgan matches_not_idem)"], ["", "lemma MatchOr_MatchNot: \"matches \\<gamma> (MatchNot (MatchOr m1 m2)) a p \\<longleftrightarrow> matches \\<gamma> (MatchNot m1) a p \\<and> matches \\<gamma> (MatchNot m2) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot (MatchOr m1 m2)) a p =\n    (matches \\<gamma> (MatchNot m1) a p \\<and>\n     matches \\<gamma> (MatchNot m2) a p)", "by(simp add: MatchOr_def matches_DeMorgan bunch_of_lemmata_about_matches)"], ["", "lemma \"(TernaryNot (map_match_tac \\<beta> p (m))) = (map_match_tac \\<beta> p (MatchNot m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TernaryNot (map_match_tac \\<beta> p m) =\n    map_match_tac \\<beta> p (MatchNot m)", "by (metis map_match_tac.simps(2))"], ["", "context\nbegin"], ["", "private"], ["", "lemma matches_simp1: \"matches \\<gamma> m a p \\<Longrightarrow> matches \\<gamma> (MatchAnd m m') a p \\<longleftrightarrow> matches \\<gamma> m' a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    matches \\<gamma> (MatchAnd m m') a p = matches \\<gamma> m' a p", "apply(cases \\<gamma>, rename_tac \\<beta> \\<alpha>, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>) m a p;\n        \\<gamma> = (\\<beta>, \\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>) (MatchAnd m m') a p =\n                         matches (\\<beta>, \\<alpha>) m' a p", "apply(simp split: ternaryvalue.split_asm ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma matches_simp11: \"matches \\<gamma> m a p \\<Longrightarrow> matches \\<gamma> (MatchAnd m' m) a p \\<longleftrightarrow> matches \\<gamma> m' a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m a p \\<Longrightarrow>\n    matches \\<gamma> (MatchAnd m' m) a p = matches \\<gamma> m' a p", "by(simp_all add: matches_and_comm matches_simp1)"], ["", "private"], ["", "lemma matches_simp2: \"matches \\<gamma> (MatchAnd m m') a p \\<Longrightarrow> \\<not> matches \\<gamma> m a p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchAnd m m') a p;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> False", "by (simp add: bunch_of_lemmata_about_matches)"], ["", "private"], ["", "lemma matches_simp22: \"matches \\<gamma> (MatchAnd m m') a p \\<Longrightarrow> \\<not> matches \\<gamma> m' a p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchAnd m m') a p;\n     \\<not> matches \\<gamma> m' a p\\<rbrakk>\n    \\<Longrightarrow> False", "by (simp add: bunch_of_lemmata_about_matches)"], ["", "(*m simplifies to MatchUnknown*)\n private"], ["", "lemma matches_simp3: \"matches \\<gamma> (MatchNot m) a p \\<Longrightarrow> matches \\<gamma> m a p \\<Longrightarrow> (snd \\<gamma>) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchNot m) a p;\n     matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> snd \\<gamma> a p", "apply(cases \\<gamma>, rename_tac \\<beta> \\<alpha>, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>) (MatchNot m) a p;\n        matches (\\<beta>, \\<alpha>) m a p;\n        \\<gamma> = (\\<beta>, \\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> snd (\\<beta>, \\<alpha>) a p", "apply(simp split: ternaryvalue.split_asm ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma \"matches \\<gamma> (MatchNot m) a p \\<Longrightarrow> matches \\<gamma> m a p \\<Longrightarrow> (ternary_eval (map_match_tac (fst \\<gamma>) p m)) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchNot m) a p;\n     matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> ternary_eval (map_match_tac (fst \\<gamma>) p m) = None", "apply(cases \\<gamma>, rename_tac \\<beta> \\<alpha>, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>) (MatchNot m) a p;\n        matches (\\<beta>, \\<alpha>) m a p;\n        \\<gamma> = (\\<beta>, \\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> ternary_eval\n                          (map_match_tac (fst (\\<beta>, \\<alpha>)) p m) =\n                         None", "apply(simp split: ternaryvalue.split_asm ternaryvalue.split add: matches_case_ternaryvalue_tuple ternary_eval_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas matches_simps = matches_simp1 matches_simp11"], ["", "lemmas matches_dest = matches_simp2 matches_simp22"], ["", "end"], ["", "lemma matches_iff_apply_f_generic: \"ternary_ternary_eval (map_match_tac \\<beta> p (f (\\<beta>,\\<alpha>) a m)) = ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow> matches (\\<beta>,\\<alpha>) (f (\\<beta>,\\<alpha>) a m) a p \\<longleftrightarrow> matches (\\<beta>,\\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac \\<beta> p (f (\\<beta>, \\<alpha>) a m)) =\n    ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>) (f (\\<beta>, \\<alpha>) a m) a p =\n    matches (\\<beta>, \\<alpha>) m a p", "by(simp split: ternaryvalue.split_asm ternaryvalue.split add: matches_case_ternaryvalue_tuple)"], ["", "lemma matches_iff_apply_f: \"ternary_ternary_eval (map_match_tac \\<beta> p (f m)) = ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow> matches (\\<beta>,\\<alpha>) (f m) a p \\<longleftrightarrow> matches (\\<beta>,\\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p (f m)) =\n    ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>) (f m) a p =\n    matches (\\<beta>, \\<alpha>) m a p", "by(fact matches_iff_apply_f_generic)"], ["", "lemma opt_MatchAny_match_expr_correct: \"matches \\<gamma> (opt_MatchAny_match_expr m) = matches \\<gamma> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (opt_MatchAny_match_expr m) = matches \\<gamma> m", "proof(case_tac \\<gamma>, rename_tac \\<beta> \\<alpha>, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<gamma> = (\\<beta>, \\<alpha>) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n       matches (\\<beta>, \\<alpha>) m", "fix \\<beta> \\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<gamma> = (\\<beta>, \\<alpha>) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n       matches (\\<beta>, \\<alpha>) m", "assume \"\\<gamma> = (\\<beta>, \\<alpha>)\""], ["proof (state)\nthis:\n  \\<gamma> = (\\<beta>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<gamma> = (\\<beta>, \\<alpha>) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n       matches (\\<beta>, \\<alpha>) m", "have \"ternary_ternary_eval (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n          ternary_ternary_eval (map_match_tac \\<beta> p m)\" for p m"], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n    ternary_ternary_eval (map_match_tac \\<beta> p m)", "proof(induction m rule: opt_MatchAny_match_expr_once.induct)"], ["proof (state)\ngoal (71 subgoals):\n 1. ternary_ternary_eval\n     (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once MatchAny)) =\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny)\n 2. \\<And>a.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once (Match a))) =\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match a))\n 3. \\<And>m.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n       ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchNot (MatchNot m)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot (MatchNot m)))\n 4. \\<And>v.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once (Match v))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (Match v)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchNot (Match v)))) =\n       ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot (Match v)))\n 5. \\<And>v va.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchAnd v va))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchAnd v va)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchNot (MatchAnd v va)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot (MatchAnd v va)))\n 6. ternary_ternary_eval\n     (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once MatchAny)) =\n    ternary_ternary_eval\n     (map_match_tac \\<beta> p MatchAny) \\<Longrightarrow>\n    ternary_ternary_eval\n     (map_match_tac \\<beta> p\n       (opt_MatchAny_match_expr_once (MatchNot MatchAny))) =\n    ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot MatchAny))\n 7. ternary_ternary_eval\n     (map_match_tac \\<beta> p\n       (opt_MatchAny_match_expr_once (MatchAnd MatchAny MatchAny))) =\n    ternary_ternary_eval\n     (map_match_tac \\<beta> p (MatchAnd MatchAny MatchAny))\n 8. \\<And>v.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once (Match v))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (Match v)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchAnd MatchAny (Match v)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchAnd MatchAny (Match v)))\n 9. \\<And>v.\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchNot v))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot v)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (opt_MatchAny_match_expr_once (MatchAnd MatchAny (MatchNot v)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchAnd MatchAny (MatchNot v)))\n 10. \\<And>v va.\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p\n           (opt_MatchAny_match_expr_once (MatchAnd v va))) =\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd v va)) \\<Longrightarrow>\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p\n           (opt_MatchAny_match_expr_once\n             (MatchAnd MatchAny (MatchAnd v va)))) =\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (MatchAnd MatchAny (MatchAnd v va)))\nA total of 71 subgoals...", "qed(simp_all add: eval_ternary_simps eval_ternary_idempotence_Not)"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac \\<beta> ?p (opt_MatchAny_match_expr_once ?m)) =\n  ternary_ternary_eval (map_match_tac \\<beta> ?p ?m)\n\ngoal (1 subgoal):\n 1. \\<And>\\<beta> \\<alpha>.\n       \\<gamma> = (\\<beta>, \\<alpha>) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n       matches (\\<beta>, \\<alpha>) m", "thus \"matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) = matches (\\<beta>, \\<alpha>) m\""], ["proof (prove)\nusing this:\n  ternary_ternary_eval\n   (map_match_tac \\<beta> ?p (opt_MatchAny_match_expr_once ?m)) =\n  ternary_ternary_eval (map_match_tac \\<beta> ?p ?m)\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n    matches (\\<beta>, \\<alpha>) m", "apply(simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p m.\n        ternary_ternary_eval\n         (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n        ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n    \\<forall>x xa.\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) x xa =\n       matches (\\<beta>, \\<alpha>) m x xa", "apply(clarify, rename_tac a p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       (\\<And>p m.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) a p =\n       matches (\\<beta>, \\<alpha>) m a p", "apply(rule_tac f=\"opt_MatchAny_match_expr\" in matches_iff_apply_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       (\\<And>p m.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr m)) =\n       ternary_ternary_eval (map_match_tac \\<beta> p m)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (\\<And>p m.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (opt_MatchAny_match_expr m)) =\n       ternary_ternary_eval (map_match_tac \\<beta> p m)", "apply(simp add: opt_MatchAny_match_expr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (\\<And>p m.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (repeat_stabilize 2 opt_MatchAny_match_expr_once m)) =\n       ternary_ternary_eval (map_match_tac \\<beta> p m)", "apply(rule repeat_stabilize_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       (\\<And>p m.\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p (opt_MatchAny_match_expr_once m)) =\n           ternary_ternary_eval\n            (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p m) =\n       ternary_ternary_eval (map_match_tac \\<beta> p m)\n 2. \\<And>p ma.\n       \\<lbrakk>\\<And>p m.\n                   ternary_ternary_eval\n                    (map_match_tac \\<beta> p\n                      (opt_MatchAny_match_expr_once m)) =\n                   ternary_ternary_eval (map_match_tac \\<beta> p m);\n        ternary_ternary_eval (map_match_tac \\<beta> p ma) =\n        ternary_ternary_eval (map_match_tac \\<beta> p m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (opt_MatchAny_match_expr_once ma)) =\n                         ternary_ternary_eval (map_match_tac \\<beta> p m)", "by(simp)+"], ["proof (state)\nthis:\n  matches (\\<beta>, \\<alpha>) (opt_MatchAny_match_expr m) =\n  matches (\\<beta>, \\<alpha>) m\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>An @{typ \"'p unknown_match_tac\"} is wf if it behaves equal for @{const Reject} and @{const Drop}\\<close>"], ["", "definition wf_unknown_match_tac :: \"'p unknown_match_tac \\<Rightarrow> bool\" where\n  \"wf_unknown_match_tac \\<alpha> \\<equiv> (\\<alpha> Drop = \\<alpha> Reject)\""], ["", "lemma wf_unknown_match_tacD_False1: \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) m Reject p \\<Longrightarrow> matches (\\<beta>, \\<alpha>) m Drop p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_unknown_match_tac \\<alpha>;\n     \\<not> matches (\\<beta>, \\<alpha>) m Reject p;\n     matches (\\<beta>, \\<alpha>) m Drop p\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding wf_unknown_match_tac_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> Drop = \\<alpha> Reject;\n     \\<not> matches (\\<beta>, \\<alpha>) m Reject p;\n     matches (\\<beta>, \\<alpha>) m Drop p\\<rbrakk>\n    \\<Longrightarrow> False", "by(simp add: matches_case_ternaryvalue_tuple split: ternaryvalue.split_asm)"], ["", "lemma wf_unknown_match_tacD_False2: \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> matches (\\<beta>, \\<alpha>) m Reject p \\<Longrightarrow> \\<not> matches (\\<beta>, \\<alpha>) m Drop p \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_unknown_match_tac \\<alpha>;\n     matches (\\<beta>, \\<alpha>) m Reject p;\n     \\<not> matches (\\<beta>, \\<alpha>) m Drop p\\<rbrakk>\n    \\<Longrightarrow> False", "unfolding wf_unknown_match_tac_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> Drop = \\<alpha> Reject;\n     matches (\\<beta>, \\<alpha>) m Reject p;\n     \\<not> matches (\\<beta>, \\<alpha>) m Drop p\\<rbrakk>\n    \\<Longrightarrow> False", "by(simp add: matches_case_ternaryvalue_tuple split: ternaryvalue.split_asm)"], ["", "subsection\\<open>Removing Unknown Primitives\\<close>"], ["", "definition unknown_match_all :: \"'a unknown_match_tac \\<Rightarrow> action \\<Rightarrow> bool\" where\n   \"unknown_match_all \\<alpha> a = (\\<forall>p. \\<alpha> a p)\""], ["", "definition unknown_not_match_any :: \"'a unknown_match_tac \\<Rightarrow> action \\<Rightarrow> bool\" where\n   \"unknown_not_match_any \\<alpha> a = (\\<forall>p. \\<not> \\<alpha> a p)\""], ["", "(*see upper_closure_matchexpr*)"], ["", "fun remove_unknowns_generic :: \"('a, 'packet) match_tac \\<Rightarrow> action \\<Rightarrow> 'a match_expr \\<Rightarrow> 'a match_expr\" where\n  \"remove_unknowns_generic _ _ MatchAny = MatchAny\" |\n  \"remove_unknowns_generic _ _ (MatchNot MatchAny) = MatchNot MatchAny\" |\n  \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if unknown_match_all \\<alpha> a then MatchAny else if unknown_not_match_any \\<alpha> a then MatchNot MatchAny else Match A\n    else (Match A))\" |\n  \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if unknown_match_all \\<alpha> a then MatchAny else if unknown_not_match_any \\<alpha> a then MatchNot MatchAny else MatchNot (Match A)\n    else MatchNot (Match A))\" |\n  \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (MatchNot m)) = remove_unknowns_generic (\\<beta>, \\<alpha>) a m\" |\n  \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchAnd m1 m2) = MatchAnd\n      (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1)\n      (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2)\" |\n\n  \\<comment> \\<open>@{text \"\\<not> (a \\<and> b) = \\<not> b \\<or> \\<not> a\"}   and   @{text \"\\<not> Unknown = Unknown\"}\\<close>\n  \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (MatchAnd m1 m2)) = \n    (if (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) = MatchAny \\<or>\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) = MatchAny\n        then MatchAny else \n        (if (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) = MatchNot MatchAny then \n          remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) else\n         if (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) = MatchNot MatchAny then \n          remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) else\n         MatchNot (MatchAnd (MatchNot (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1))) (MatchNot (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)))))\n       )\""], ["", "lemma[code_unfold]: \"remove_unknowns_generic \\<gamma> a (MatchNot (MatchAnd m1 m2)) = \n    (let m1' = remove_unknowns_generic \\<gamma>  a (MatchNot m1); m2' = remove_unknowns_generic \\<gamma>  a (MatchNot m2) in\n    (if m1' = MatchAny \\<or> m2' = MatchAny\n     then MatchAny\n     else \n        if m1' = MatchNot MatchAny then m2' else\n        if m2' = MatchNot MatchAny then m1'\n     else\n        MatchNot (MatchAnd (MatchNot m1') (MatchNot m2')))\n       )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_unknowns_generic \\<gamma> a (MatchNot (MatchAnd m1 m2)) =\n    (let m1' = remove_unknowns_generic \\<gamma> a (MatchNot m1);\n         m2' = remove_unknowns_generic \\<gamma> a (MatchNot m2)\n     in if m1' = MatchAny \\<or> m2' = MatchAny then MatchAny\n        else if m1' = MatchNot MatchAny then m2'\n             else if m2' = MatchNot MatchAny then m1'\n                  else MatchNot (MatchAnd (MatchNot m1') (MatchNot m2')))", "by(cases \\<gamma>)(simp)"], ["", "lemma remove_unknowns_generic_simp_3_4_unfolded: \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if (\\<forall>p. \\<alpha> a p) then MatchAny else if (\\<forall>p. \\<not> \\<alpha> a p) then MatchNot MatchAny else Match A\n    else (Match A))\" \n \"remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)) = (if\n      (\\<forall>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\n    then\n      if (\\<forall>p. \\<alpha> a p) then MatchAny else if (\\<forall>p. \\<not> \\<alpha> a p) then MatchNot MatchAny else MatchNot (Match A)\n    else MatchNot (Match A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A) =\n    (if \\<forall>p.\n           ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) =\n           TernaryUnknown\n     then if \\<forall>p. \\<alpha> a p then MatchAny\n          else if \\<forall>p. \\<not> \\<alpha> a p then MatchNot MatchAny\n               else Match A\n     else Match A) &&&\n    remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)) =\n    (if \\<forall>p.\n           ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) =\n           TernaryUnknown\n     then if \\<forall>p. \\<alpha> a p then MatchAny\n          else if \\<forall>p. \\<not> \\<alpha> a p then MatchNot MatchAny\n               else MatchNot (Match A)\n     else MatchNot (Match A))", "by(auto simp add: unknown_match_all_def unknown_not_match_any_def)"], ["", "declare remove_unknowns_generic.simps[simp del]"], ["", "lemmas remove_unknowns_generic_simps2 = remove_unknowns_generic.simps(1) remove_unknowns_generic.simps(2) \n            remove_unknowns_generic_simp_3_4_unfolded\n            remove_unknowns_generic.simps(5) remove_unknowns_generic.simps(6) remove_unknowns_generic.simps(7)"], ["", "lemma \"matches (\\<beta>, \\<alpha>) (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A))) a p = matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>)\n     (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A))) a\n     p =\n    matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p", "by(simp add: remove_unknowns_generic_simps2 matches_case_ternaryvalue_tuple)"], ["", "lemma remove_unknowns_generic: \"matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a = matches \\<gamma> m a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a =\n    matches \\<gamma> m a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a =\n    matches \\<gamma> m a", "have \"matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a p = matches \\<gamma> m a p\"\n  for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a p =\n    matches \\<gamma> m a p", "proof(induction \\<gamma> a m rule: remove_unknowns_generic.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A)) a p =\n       matches (\\<beta>, \\<alpha>) (Match A) a p\n 4. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\n 5. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 6. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 7. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (Match A)) a p =\n       matches (\\<beta>, \\<alpha>) (Match A) a p\n 4. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\n 5. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 6. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 7. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>_, \\<alpha>_)\n     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (Match A_)) a_ p =\n    matches (\\<beta>_, \\<alpha>_) (Match A_) a_ p", "by(simp add: bunch_of_lemmata_about_matches match_raw_ternary remove_unknowns_generic_simps2)"], ["proof (state)\nthis:\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (Match A_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (Match A_) a_ p\n\ngoal (6 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\n 4. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 6. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\n 4. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 6. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a A.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot (Match A)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match A)) a p\n 4. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 6. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>_, \\<alpha>_)\n     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n       (MatchNot (Match A_)))\n     a_ p =\n    matches (\\<beta>_, \\<alpha>_) (MatchNot (Match A_)) a_ p", "by(simp add: matches_case_ternaryvalue_tuple remove_unknowns_generic_simps2)"], ["proof (state)\nthis:\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot (Match A_)))\n   a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot (Match A_)) a_ p\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 4. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 4. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "case 7"], ["proof (state)\nthis:\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) =\n          MatchAny \\<or>\n          remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) =\n          MatchAny) \\<Longrightarrow>\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) =\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) =\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m1_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m1_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n\ngoal (5 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 4. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p\n 5. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                   (MatchNot m1))\n                 a p =\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m1) =\n                MatchAny \\<or>\n                remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                 (MatchNot m2) =\n                MatchAny) \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1)) a p =\n        matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m1))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m1) a p;\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                           (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                             (MatchNot m2))\n                           a p =\n                          matches (\\<beta>, \\<alpha>) (MatchNot m2) a\n                           p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchNot (MatchAnd m1 m2)))\n                          a p =\n                         matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) =\n          MatchAny \\<or>\n          remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) =\n          MatchAny) \\<Longrightarrow>\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_)) a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) =\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) =\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m1_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m1_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p\n  \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m1_) =\n                   MatchAny \\<or>\n                   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                    (MatchNot m2_) =\n                   MatchAny);\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m1_) \\<noteq>\n   MatchNot MatchAny;\n   remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_) \\<noteq>\n   MatchNot MatchAny\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>_, \\<alpha>_)\n                     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                       (MatchNot m2_))\n                     a_ p =\n                    matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\n\ngoal (1 subgoal):\n 1. matches (\\<beta>_, \\<alpha>_)\n     (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n       (MatchNot (MatchAnd m1_ m2_)))\n     a_ p =\n    matches (\\<beta>_, \\<alpha>_) (MatchNot (MatchAnd m1_ m2_)) a_ p", "apply(simp add: bunch_of_lemmata_about_matches matches_DeMorgan remove_unknowns_generic_simps2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches (\\<beta>_, \\<alpha>_)\n              (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                (MatchNot m1_))\n              a_ p =\n             matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p;\n     matches (\\<beta>_, \\<alpha>_)\n      (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_ (MatchNot m2_)) a_\n      p =\n     matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p\\<rbrakk>\n    \\<Longrightarrow> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                        (MatchNot m2_) =\n                       MatchNot MatchAny \\<longrightarrow>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) =\n                        MatchNot MatchAny \\<longrightarrow>\n                        matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p =\n                        (matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                          p \\<or>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                          p)) \\<and>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) \\<noteq>\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) =\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                          p \\<or>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                          p) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) \\<noteq>\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_ p =\n                         (matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                           p \\<or>\n                          matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                           p)))) \\<and>\n                      (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                        (MatchNot m2_) \\<noteq>\n                       MatchNot MatchAny \\<longrightarrow>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) =\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) =\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                          p \\<or>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                          p) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) \\<noteq>\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_ p =\n                         (matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                           p \\<or>\n                          matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                           p))) \\<and>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) \\<noteq>\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) =\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                          p \\<or>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                          p) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) =\n                         MatchAny \\<longrightarrow>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m1_) a_\n                          p \\<or>\n                         matches (\\<beta>_, \\<alpha>_) (MatchNot m2_) a_\n                          p)))", "apply(simp add: matches_case_ternaryvalue_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(case ternary_ternary_eval\n                    (map_match_tac \\<beta>_ p\n                      (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                        (MatchNot m1_))) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p) =\n             (case eval_ternary_Not\n                    (ternary_ternary_eval (map_match_tac \\<beta>_ p m1_)) of\n              TernaryTrue \\<Rightarrow> True\n              | TernaryFalse \\<Rightarrow> False\n              | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p);\n     (case ternary_ternary_eval\n            (map_match_tac \\<beta>_ p\n              (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                (MatchNot m2_))) of\n      TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n      | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p) =\n     (case eval_ternary_Not\n            (ternary_ternary_eval (map_match_tac \\<beta>_ p m2_)) of\n      TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n      | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p)\\<rbrakk>\n    \\<Longrightarrow> (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                        (MatchNot m2_) =\n                       MatchNot MatchAny \\<longrightarrow>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) =\n                        MatchNot MatchAny \\<longrightarrow>\n                        (case eval_ternary_Not\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta>_ p m2_)) of\n                         TernaryTrue \\<Rightarrow> True\n                         | TernaryFalse \\<Rightarrow> False\n                         | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p) =\n                        ((case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p) \\<or>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p))) \\<and>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) \\<noteq>\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) =\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p) \\<or>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p)) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) \\<noteq>\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p) =\n                         ((case eval_ternary_Not\n                                 (ternary_ternary_eval\n                                   (map_match_tac \\<beta>_ p m1_)) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow>\n                               \\<alpha>_ a_ p) \\<or>\n                          (case eval_ternary_Not\n                                 (ternary_ternary_eval\n                                   (map_match_tac \\<beta>_ p m2_)) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow>\n                               \\<alpha>_ a_ p))))) \\<and>\n                      (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                        (MatchNot m2_) \\<noteq>\n                       MatchNot MatchAny \\<longrightarrow>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) =\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) =\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p) \\<or>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p)) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) \\<noteq>\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p) =\n                         ((case eval_ternary_Not\n                                 (ternary_ternary_eval\n                                   (map_match_tac \\<beta>_ p m1_)) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow>\n                               \\<alpha>_ a_ p) \\<or>\n                          (case eval_ternary_Not\n                                 (ternary_ternary_eval\n                                   (map_match_tac \\<beta>_ p m2_)) of\n                           TernaryTrue \\<Rightarrow> True\n                           | TernaryFalse \\<Rightarrow> False\n                           | TernaryUnknown \\<Rightarrow>\n                               \\<alpha>_ a_ p)))) \\<and>\n                       (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                         (MatchNot m1_) \\<noteq>\n                        MatchNot MatchAny \\<longrightarrow>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m1_) =\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p) \\<or>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p)) \\<and>\n                        (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n                          (MatchNot m2_) =\n                         MatchAny \\<longrightarrow>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m1_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow>\n                              \\<alpha>_ a_ p) \\<or>\n                         (case eval_ternary_Not\n                                (ternary_ternary_eval\n                                  (map_match_tac \\<beta>_ p m2_)) of\n                          TernaryTrue \\<Rightarrow> True\n                          | TernaryFalse \\<Rightarrow> False\n                          | TernaryUnknown \\<Rightarrow> \\<alpha>_ a_ p))))", "by fastforce"], ["proof (state)\nthis:\n  matches (\\<beta>_, \\<alpha>_)\n   (remove_unknowns_generic (\\<beta>_, \\<alpha>_) a_\n     (MatchNot (MatchAnd m1_ m2_)))\n   a_ p =\n  matches (\\<beta>_, \\<alpha>_) (MatchNot (MatchAnd m1_ m2_)) a_ p\n\ngoal (4 subgoals):\n 1. \\<And>uu_ uv_.\n       matches uu_ (remove_unknowns_generic uu_ uv_ MatchAny) uv_ p =\n       matches uu_ MatchAny uv_ p\n 2. \\<And>uw_ ux_.\n       matches uw_ (remove_unknowns_generic uw_ ux_ (MatchNot MatchAny)) ux_\n        p =\n       matches uw_ (MatchNot MatchAny) ux_ p\n 3. \\<And>\\<beta> \\<alpha> a m.\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a m) a p =\n       matches (\\<beta>, \\<alpha>) m a p \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot (MatchNot m)))\n        a p =\n       matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m)) a p\n 4. \\<And>\\<beta> \\<alpha> a m1 m2.\n       \\<lbrakk>matches (\\<beta>, \\<alpha>)\n                 (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1) a p =\n                matches (\\<beta>, \\<alpha>) m1 a p;\n        matches (\\<beta>, \\<alpha>)\n         (remove_unknowns_generic (\\<beta>, \\<alpha>) a m2) a p =\n        matches (\\<beta>, \\<alpha>) m2 a p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                            (MatchAnd m1 m2))\n                          a p =\n                         matches (\\<beta>, \\<alpha>) (MatchAnd m1 m2) a p", "qed(simp_all add: bunch_of_lemmata_about_matches remove_unknowns_generic_simps2)"], ["proof (state)\nthis:\n  matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a ?p =\n  matches \\<gamma> m a ?p\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a =\n    matches \\<gamma> m a", "thus ?thesis"], ["proof (prove)\nusing this:\n  matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a ?p =\n  matches \\<gamma> m a ?p\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a =\n    matches \\<gamma> m a", "by(simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  matches \\<gamma> (remove_unknowns_generic \\<gamma> a m) a =\n  matches \\<gamma> m a\n\ngoal:\nNo subgoals!", "qed"], ["", "fun has_unknowns :: \" ('a, 'p) exact_match_tac \\<Rightarrow> 'a match_expr \\<Rightarrow> bool\" where\n  \"has_unknowns \\<beta> (Match A) = (\\<exists>p. ternary_ternary_eval (map_match_tac \\<beta> p (Match A)) = TernaryUnknown)\" |\n  \"has_unknowns \\<beta> (MatchNot m) = has_unknowns \\<beta> m\" |\n  \"has_unknowns \\<beta> MatchAny = False\" |\n  \"has_unknowns \\<beta> (MatchAnd m1 m2) = (has_unknowns \\<beta> m1 \\<or> has_unknowns \\<beta> m2)\""], ["", "(* assumes simple_ruleset, thus we only care about Accept/Drop *)"], ["", "definition packet_independent_\\<alpha> :: \"'p unknown_match_tac \\<Rightarrow> bool\" where\n  \"packet_independent_\\<alpha> \\<alpha> = (\\<forall>a p1 p2. a = Accept \\<or> a = Drop \\<longrightarrow> \\<alpha> a p1 \\<longleftrightarrow> \\<alpha> a p2)\""], ["", "lemma packet_independent_unknown_match: \"a = Accept \\<or> a = Drop \\<Longrightarrow> packet_independent_\\<alpha> \\<alpha> \\<Longrightarrow> \\<not> unknown_not_match_any \\<alpha> a \\<longleftrightarrow> unknown_match_all \\<alpha> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Accept \\<or> a = Drop;\n     packet_independent_\\<alpha> \\<alpha>\\<rbrakk>\n    \\<Longrightarrow> (\\<not> unknown_not_match_any \\<alpha> a) =\n                      unknown_match_all \\<alpha> a", "by(auto simp add: packet_independent_\\<alpha>_def unknown_match_all_def unknown_not_match_any_def)"], ["", "text\\<open>If for some type the exact matcher returns unknown, then it returns unknown for all these types\\<close>"], ["", "definition packet_independent_\\<beta>_unknown :: \"('a, 'packet) exact_match_tac \\<Rightarrow> bool\" where\n  \"packet_independent_\\<beta>_unknown \\<beta> \\<equiv> \\<forall>A. (\\<exists>p. \\<beta> A p \\<noteq> TernaryUnknown) \\<longrightarrow> (\\<forall>p. \\<beta> A p \\<noteq> TernaryUnknown)\""], ["", "lemma remove_unknowns_generic_specification: \"a = Accept \\<or> a = Drop \\<Longrightarrow> packet_independent_\\<alpha> \\<alpha> \\<Longrightarrow>\n  packet_independent_\\<beta>_unknown \\<beta> \\<Longrightarrow>\n   \\<not> has_unknowns \\<beta> (remove_unknowns_generic (\\<beta>, \\<alpha>) a m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = Accept \\<or> a = Drop;\n     packet_independent_\\<alpha> \\<alpha>;\n     packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                              (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                                m)", "proof(induction \"(\\<beta>, \\<alpha>)\" a m rule: remove_unknowns_generic.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (Match A))\n 4. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (Match A)))\n 5. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 6. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 7. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "case 3"], ["proof (state)\nthis:\n  a_ = Accept \\<or> a_ = Drop\n  packet_independent_\\<alpha> \\<alpha>\n  packet_independent_\\<beta>_unknown \\<beta>\n\ngoal (7 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (Match A))\n 4. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (Match A)))\n 5. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 6. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 7. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "thus ?case"], ["proof (prove)\nusing this:\n  a_ = Accept \\<or> a_ = Drop\n  packet_independent_\\<alpha> \\<alpha>\n  packet_independent_\\<beta>_unknown \\<beta>\n\ngoal (1 subgoal):\n 1. \\<not> has_unknowns \\<beta>\n            (remove_unknowns_generic (\\<beta>, \\<alpha>) a_ (Match A_))", "by(simp add: packet_independent_unknown_match packet_independent_\\<beta>_unknown_def remove_unknowns_generic.simps)"], ["proof (state)\nthis:\n  \\<not> has_unknowns \\<beta>\n          (remove_unknowns_generic (\\<beta>, \\<alpha>) a_ (Match A_))\n\ngoal (6 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (Match A)))\n 4. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 5. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 6. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (Match A)))\n 4. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 5. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 6. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "case 4"], ["proof (state)\nthis:\n  a_ = Accept \\<or> a_ = Drop\n  packet_independent_\\<alpha> \\<alpha>\n  packet_independent_\\<beta>_unknown \\<beta>\n\ngoal (6 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a A.\n       \\<lbrakk>a = Accept \\<or> a = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (Match A)))\n 4. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 5. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 6. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "thus ?case"], ["proof (prove)\nusing this:\n  a_ = Accept \\<or> a_ = Drop\n  packet_independent_\\<alpha> \\<alpha>\n  packet_independent_\\<beta>_unknown \\<beta>\n\ngoal (1 subgoal):\n 1. \\<not> has_unknowns \\<beta>\n            (remove_unknowns_generic (\\<beta>, \\<alpha>) a_\n              (MatchNot (Match A_)))", "by(simp add: packet_independent_unknown_match packet_independent_\\<beta>_unknown_def remove_unknowns_generic.simps)"], ["proof (state)\nthis:\n  \\<not> has_unknowns \\<beta>\n          (remove_unknowns_generic (\\<beta>, \\<alpha>) a_\n            (MatchNot (Match A_)))\n\ngoal (5 subgoals):\n 1. \\<And>uv_.\n       \\<lbrakk>uv_ = Accept \\<or> uv_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) uv_ MatchAny)\n 2. \\<And>ux_.\n       \\<lbrakk>ux_ = Accept \\<or> ux_ = Drop;\n        packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) ux_\n                                   (MatchNot MatchAny))\n 3. \\<And>a m.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchNot m)))\n 4. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a m1);\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a m2);\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a (MatchAnd m1 m2))\n 5. \\<And>a m1 m2.\n       \\<lbrakk>\\<lbrakk>a = Accept \\<or> a = Drop;\n                 packet_independent_\\<alpha> \\<alpha>;\n                 packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n                \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n    (remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>a = Accept \\<or> a = Drop;\n         packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m1) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a (MatchNot m2) =\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m1));\n        \\<lbrakk>\\<not> (remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m1) =\n                         MatchAny \\<or>\n                         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n                          (MatchNot m2) =\n                         MatchAny);\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m1) \\<noteq>\n         MatchNot MatchAny;\n         remove_unknowns_generic (\\<beta>, \\<alpha>) a\n          (MatchNot m2) \\<noteq>\n         MatchNot MatchAny;\n         a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n         packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                  (remove_unknowns_generic\n                                    (\\<beta>, \\<alpha>) a (MatchNot m2));\n        a = Accept \\<or> a = Drop; packet_independent_\\<alpha> \\<alpha>;\n        packet_independent_\\<beta>_unknown \\<beta>\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_unknowns \\<beta>\n                                 (remove_unknowns_generic\n                                   (\\<beta>, \\<alpha>) a\n                                   (MatchNot (MatchAnd m1 m2)))", "qed(simp_all add: remove_unknowns_generic.simps)"], ["", "text\\<open>Checking is something matches unconditionally\\<close>"], ["", "context\nbegin"], ["", "private"], ["", "lemma no_primitives_no_unknown: \"\\<not> has_primitive m  \\<Longrightarrow> (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq> TernaryUnknown\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_primitive m \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq> TernaryUnknown", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "case Match"], ["proof (state)\nthis:\n  \\<not> has_primitive (Match x_)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) \\<noteq>\n       TernaryUnknown\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive (Match x_)\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) \\<noteq>\n    TernaryUnknown", "by auto"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p (Match x_)) \\<noteq>\n  TernaryUnknown\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "case MatchAny"], ["proof (state)\nthis:\n  \\<not> has_primitive MatchAny\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive MatchAny\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n    TernaryUnknown", "by simp"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p MatchAny) \\<noteq>\n  TernaryUnknown\n\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown", "case MatchAnd"], ["proof (state)\nthis:\n  \\<not> has_primitive m1_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m1_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive m2_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m2_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive (MatchAnd m1_ m2_)\n\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m1) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        ternary_ternary_eval (map_match_tac \\<beta> p m2) \\<noteq>\n        TernaryUnknown;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchAnd m1 m2)) \\<noteq>\n                         TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive m1_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m1_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive m2_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m2_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive (MatchAnd m1_ m2_)\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac \\<beta> p (MatchAnd m1_ m2_)) \\<noteq>\n    TernaryUnknown", "by(auto elim: eval_ternary_And.elims)"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchAnd m1_ m2_)) \\<noteq>\n  TernaryUnknown\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown", "case MatchNot"], ["proof (state)\nthis:\n  \\<not> has_primitive m_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive (MatchNot m_)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                ternary_ternary_eval (map_match_tac \\<beta> p m) \\<noteq>\n                TernaryUnknown;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p (MatchNot m)) \\<noteq>\n                         TernaryUnknown", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive m_ \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m_) \\<noteq> TernaryUnknown\n  \\<not> has_primitive (MatchNot m_)\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m_)) \\<noteq>\n    TernaryUnknown", "by(auto dest: eval_ternary_Not_UnknownD)"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p (MatchNot m_)) \\<noteq>\n  TernaryUnknown\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma no_primitives_matchNot: assumes \"\\<not> has_primitive m\" shows \"matches \\<gamma> (MatchNot m) a p \\<longleftrightarrow> \\<not> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "obtain \\<beta> \\<alpha> where \"(\\<beta>, \\<alpha>) = \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<beta> \\<alpha>.\n        (\\<beta>, \\<alpha>) = \\<gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \\<gamma>, simp)"], ["proof (state)\nthis:\n  (\\<beta>, \\<alpha>) = \\<gamma>\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "thm no_primitives_no_unknown"], ["proof (state)\nthis:\n  (\\<beta>, \\<alpha>) = \\<gamma>\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "from assms"], ["proof (chain)\npicking this:\n  \\<not> has_primitive m", "have \"matches (\\<beta>, \\<alpha>) (MatchNot m) a p \\<longleftrightarrow> \\<not> matches (\\<beta>, \\<alpha>) m a p\""], ["proof (prove)\nusing this:\n  \\<not> has_primitive m\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "apply(induction m)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match x)) a p =\n       (\\<not> matches (\\<beta>, \\<alpha>) (Match x) a p)\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n                (\\<not> matches (\\<beta>, \\<alpha>) m a p);\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>) (MatchNot (MatchNot m))\n                          a p =\n                         (\\<not> matches (\\<beta>, \\<alpha>) (MatchNot m) a\n                                  p)\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matches (\\<beta>, \\<alpha>) (MatchNot m1) a p =\n                (\\<not> matches (\\<beta>, \\<alpha>) m1 a p);\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matches (\\<beta>, \\<alpha>) (MatchNot m2) a p =\n        (\\<not> matches (\\<beta>, \\<alpha>) m2 a p);\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, \\<alpha>)\n                          (MatchNot (MatchAnd m1 m2)) a p =\n                         (\\<not> matches (\\<beta>, \\<alpha>)\n                                  (MatchAnd m1 m2) a p)\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>) (MatchNot MatchAny) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) MatchAny a p)", "apply(simp_all add: matches_case_ternaryvalue_tuple split: ternaryvalue.split )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>(case eval_ternary_Not\n                       (ternary_ternary_eval\n                         (map_match_tac \\<beta> p m1)) of\n                 TernaryTrue \\<Rightarrow> True\n                 | TernaryFalse \\<Rightarrow> False\n                 | TernaryUnknown \\<Rightarrow> \\<alpha> a p) =\n                (\\<not> (case ternary_ternary_eval\n                               (map_match_tac \\<beta> p m1) of\n                         TernaryTrue \\<Rightarrow> True\n                         | TernaryFalse \\<Rightarrow> False\n                         | TernaryUnknown \\<Rightarrow> \\<alpha> a p));\n        (case eval_ternary_Not\n               (ternary_ternary_eval (map_match_tac \\<beta> p m2)) of\n         TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n         | TernaryUnknown \\<Rightarrow> \\<alpha> a p) =\n        (\\<not> (case ternary_ternary_eval (map_match_tac \\<beta> p m2) of\n                 TernaryTrue \\<Rightarrow> True\n                 | TernaryFalse \\<Rightarrow> False\n                 | TernaryUnknown \\<Rightarrow> \\<alpha> a p));\n        \\<not> has_primitive m1 \\<and> \\<not> has_primitive m2\\<rbrakk>\n       \\<Longrightarrow> eval_ternary_And\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p m1))\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p m2)) \\<noteq>\n                         TernaryUnknown", "apply(rename_tac m1 m2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>(case eval_ternary_Not\n                       (ternary_ternary_eval\n                         (map_match_tac \\<beta> p m1)) of\n                 TernaryTrue \\<Rightarrow> True\n                 | TernaryFalse \\<Rightarrow> False\n                 | TernaryUnknown \\<Rightarrow> \\<alpha> a p) =\n                (\\<not> (case ternary_ternary_eval\n                               (map_match_tac \\<beta> p m1) of\n                         TernaryTrue \\<Rightarrow> True\n                         | TernaryFalse \\<Rightarrow> False\n                         | TernaryUnknown \\<Rightarrow> \\<alpha> a p));\n        (case eval_ternary_Not\n               (ternary_ternary_eval (map_match_tac \\<beta> p m2)) of\n         TernaryTrue \\<Rightarrow> True | TernaryFalse \\<Rightarrow> False\n         | TernaryUnknown \\<Rightarrow> \\<alpha> a p) =\n        (\\<not> (case ternary_ternary_eval (map_match_tac \\<beta> p m2) of\n                 TernaryTrue \\<Rightarrow> True\n                 | TernaryFalse \\<Rightarrow> False\n                 | TernaryUnknown \\<Rightarrow> \\<alpha> a p));\n        \\<not> has_primitive m1 \\<and> \\<not> has_primitive m2\\<rbrakk>\n       \\<Longrightarrow> eval_ternary_And\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p m1))\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p m2)) \\<noteq>\n                         TernaryUnknown", "by(simp split: ternaryvalue.split_asm)"], ["proof (state)\nthis:\n  matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n  (\\<not> matches (\\<beta>, \\<alpha>) m a p)\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "with \\<open>(\\<beta>, \\<alpha>) = \\<gamma>\\<close> assms"], ["proof (chain)\npicking this:\n  (\\<beta>, \\<alpha>) = \\<gamma>\n  \\<not> has_primitive m\n  matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n  (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<beta>, \\<alpha>) = \\<gamma>\n  \\<not> has_primitive m\n  matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n  (\\<not> matches (\\<beta>, \\<alpha>) m a p)\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "by simp"], ["proof (state)\nthis:\n  matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matcheq_matchAny: \"\\<not> has_primitive m \\<Longrightarrow> matcheq_matchAny m \\<longleftrightarrow> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_primitive m \\<Longrightarrow>\n    matcheq_matchAny m = matches \\<gamma> m a p", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       matcheq_matchAny (Match x) = matches \\<gamma> (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "case Match"], ["proof (state)\nthis:\n  \\<not> has_primitive (Match x_)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       matcheq_matchAny (Match x) = matches \\<gamma> (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "hence False"], ["proof (prove)\nusing this:\n  \\<not> has_primitive (Match x_)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_primitive (Match x) \\<Longrightarrow>\n       matcheq_matchAny (Match x) = matches \\<gamma> (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. matcheq_matchAny (Match x_) = matches \\<gamma> (Match x_) a p", ".."], ["proof (state)\nthis:\n  matcheq_matchAny (Match x_) = matches \\<gamma> (Match x_) a p\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "case (MatchNot m)"], ["proof (state)\nthis:\n  \\<not> has_primitive m \\<Longrightarrow>\n  matcheq_matchAny m = matches \\<gamma> m a p\n  \\<not> has_primitive (MatchNot m)\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "from MatchNot.prems"], ["proof (chain)\npicking this:\n  \\<not> has_primitive (MatchNot m)", "have \"\\<not> has_primitive m\""], ["proof (prove)\nusing this:\n  \\<not> has_primitive (MatchNot m)\n\ngoal (1 subgoal):\n 1. \\<not> has_primitive m", "by simp"], ["proof (state)\nthis:\n  \\<not> has_primitive m\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "with no_primitives_matchNot"], ["proof (chain)\npicking this:\n  \\<not> has_primitive ?m \\<Longrightarrow>\n  matches ?\\<gamma> (MatchNot ?m) ?a ?p =\n  (\\<not> matches ?\\<gamma> ?m ?a ?p)\n  \\<not> has_primitive m", "have \"matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)\""], ["proof (prove)\nusing this:\n  \\<not> has_primitive ?m \\<Longrightarrow>\n  matches ?\\<gamma> (MatchNot ?m) ?a ?p =\n  (\\<not> matches ?\\<gamma> ?m ?a ?p)\n  \\<not> has_primitive m\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "by metis"], ["proof (state)\nthis:\n  matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<not> has_primitive m \\<Longrightarrow>\n                matcheq_matchAny m = matches \\<gamma> m a p;\n        \\<not> has_primitive (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchNot m) =\n                         matches \\<gamma> (MatchNot m) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 3. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "with MatchNot"], ["proof (chain)\npicking this:\n  \\<not> has_primitive m \\<Longrightarrow>\n  matcheq_matchAny m = matches \\<gamma> m a p\n  \\<not> has_primitive (MatchNot m)\n  matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive m \\<Longrightarrow>\n  matcheq_matchAny m = matches \\<gamma> m a p\n  \\<not> has_primitive (MatchNot m)\n  matches \\<gamma> (MatchNot m) a p = (\\<not> matches \\<gamma> m a p)\n\ngoal (1 subgoal):\n 1. matcheq_matchAny (MatchNot m) = matches \\<gamma> (MatchNot m) a p", "by(simp)"], ["proof (state)\nthis:\n  matcheq_matchAny (MatchNot m) = matches \\<gamma> (MatchNot m) a p\n\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 2. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 2. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "case (MatchAnd m1 m2)"], ["proof (state)\nthis:\n  \\<not> has_primitive m1 \\<Longrightarrow>\n  matcheq_matchAny m1 = matches \\<gamma> m1 a p\n  \\<not> has_primitive m2 \\<Longrightarrow>\n  matcheq_matchAny m2 = matches \\<gamma> m2 a p\n  \\<not> has_primitive (MatchAnd m1 m2)\n\ngoal (2 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_primitive m1 \\<Longrightarrow>\n                matcheq_matchAny m1 = matches \\<gamma> m1 a p;\n        \\<not> has_primitive m2 \\<Longrightarrow>\n        matcheq_matchAny m2 = matches \\<gamma> m2 a p;\n        \\<not> has_primitive (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> matcheq_matchAny (MatchAnd m1 m2) =\n                         matches \\<gamma> (MatchAnd m1 m2) a p\n 2. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> has_primitive m1 \\<Longrightarrow>\n  matcheq_matchAny m1 = matches \\<gamma> m1 a p\n  \\<not> has_primitive m2 \\<Longrightarrow>\n  matcheq_matchAny m2 = matches \\<gamma> m2 a p\n  \\<not> has_primitive (MatchAnd m1 m2)\n\ngoal (1 subgoal):\n 1. matcheq_matchAny (MatchAnd m1 m2) =\n    matches \\<gamma> (MatchAnd m1 m2) a p", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matcheq_matchAny (MatchAnd m1 m2) = matches \\<gamma> (MatchAnd m1 m2) a p\n\ngoal (1 subgoal):\n 1. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "case MatchAny"], ["proof (state)\nthis:\n  \\<not> has_primitive MatchAny\n\ngoal (1 subgoal):\n 1. \\<not> has_primitive MatchAny \\<Longrightarrow>\n    matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p", "by(simp add: Matching_Ternary.bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matcheq_matchAny MatchAny = matches \\<gamma> MatchAny a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matcheq_matchNone: \"\\<not> has_primitive m \\<Longrightarrow> matcheq_matchNone m \\<longleftrightarrow> \\<not> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_primitive m \\<Longrightarrow>\n    matcheq_matchNone m = (\\<not> matches \\<gamma> m a p)", "by(auto dest: matcheq_matchAny matachAny_matchNone)"], ["", "lemma matcheq_matchNone_not_matches: \"matcheq_matchNone m \\<Longrightarrow> \\<not> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matcheq_matchNone m \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "proof(induction m rule: matcheq_matchNone.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. matcheq_matchNone MatchAny \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>uu_.\n       matcheq_matchNone (Match uu_) \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match uu_) a p\n 3. matcheq_matchNone (MatchNot MatchAny) \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 4. \\<And>uv_.\n       matcheq_matchNone (MatchNot (Match uv_)) \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match uv_)) a p\n 5. \\<And>m.\n       \\<lbrakk>matcheq_matchNone m \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        matcheq_matchNone (MatchNot (MatchNot m))\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 6. \\<And>m1 m2.\n       \\<lbrakk>matcheq_matchNone (MatchNot m1) \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        matcheq_matchNone (MatchNot m2) \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        matcheq_matchNone (MatchNot (MatchAnd m1 m2))\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 7. \\<And>m1 m2.\n       \\<lbrakk>matcheq_matchNone m1 \\<Longrightarrow>\n                \\<not> matches \\<gamma> m1 a p;\n        matcheq_matchNone m2 \\<Longrightarrow>\n        \\<not> matches \\<gamma> m2 a p;\n        matcheq_matchNone (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd m1 m2) a p", "qed(auto simp add: bunch_of_lemmata_about_matches matches_DeMorgan)"], ["", "end"], ["", "text\\<open>Lemmas about @{const MatchNot} in ternary logic.\\<close>"], ["", "lemma matches_MatchNot_no_unknowns:\n   assumes \"\\<not> has_unknowns \\<beta> m\"\n   shows \"matches (\\<beta>,\\<alpha>) (MatchNot m) a p \\<longleftrightarrow> \\<not> matches (\\<beta>,\\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "have \"\\<not> has_unknowns \\<beta> m \\<Longrightarrow>\n       ternary_to_bool (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_unknowns \\<beta> m \\<Longrightarrow>\n    ternary_to_bool\n     (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n    None", "apply(induction m)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<not> has_unknowns \\<beta> (Match x) \\<Longrightarrow>\n       ternary_to_bool\n        (ternary_ternary_eval (map_match_tac \\<beta> p (Match x))) \\<noteq>\n       None\n 2. \\<And>m.\n       \\<lbrakk>\\<not> has_unknowns \\<beta> m \\<Longrightarrow>\n                ternary_to_bool\n                 (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n                None;\n        \\<not> has_unknowns \\<beta> (MatchNot m)\\<rbrakk>\n       \\<Longrightarrow> ternary_to_bool\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p (MatchNot m))) \\<noteq>\n                         None\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<not> has_unknowns \\<beta> m1 \\<Longrightarrow>\n                ternary_to_bool\n                 (ternary_ternary_eval\n                   (map_match_tac \\<beta> p m1)) \\<noteq>\n                None;\n        \\<not> has_unknowns \\<beta> m2 \\<Longrightarrow>\n        ternary_to_bool\n         (ternary_ternary_eval (map_match_tac \\<beta> p m2)) \\<noteq>\n        None;\n        \\<not> has_unknowns \\<beta> (MatchAnd m1 m2)\\<rbrakk>\n       \\<Longrightarrow> ternary_to_bool\n                          (ternary_ternary_eval\n                            (map_match_tac \\<beta> p\n                              (MatchAnd m1 m2))) \\<noteq>\n                         None\n 4. \\<not> has_unknowns \\<beta> MatchAny \\<Longrightarrow>\n    ternary_to_bool\n     (ternary_ternary_eval (map_match_tac \\<beta> p MatchAny)) \\<noteq>\n    None", "apply(simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>p. \\<beta> x p \\<noteq> TernaryUnknown \\<Longrightarrow>\n       \\<exists>y. ternary_to_bool (\\<beta> x p) = Some y\n 2. \\<And>m.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                   Some y;\n        \\<not> has_unknowns \\<beta> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_Not\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m))) =\n                            Some y\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "using ternary_to_bool.elims"], ["proof (prove)\nusing this:\n  \\<lbrakk>ternary_to_bool ?x = ?y;\n   \\<lbrakk>?x = TernaryTrue; ?y = Some True\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryFalse; ?y = Some False\\<rbrakk>\n   \\<Longrightarrow> ?P;\n   \\<lbrakk>?x = TernaryUnknown; ?y = None\\<rbrakk>\n   \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<forall>p. \\<beta> x p \\<noteq> TernaryUnknown \\<Longrightarrow>\n       \\<exists>y. ternary_to_bool (\\<beta> x p) = Some y\n 2. \\<And>m.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                   Some y;\n        \\<not> has_unknowns \\<beta> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_Not\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m))) =\n                            Some y\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                   Some y;\n        \\<not> has_unknowns \\<beta> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_Not\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m))) =\n                            Some y\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "using ternary_to_bool_Some"], ["proof (prove)\nusing this:\n  (ternary_to_bool ?t = Some ?X) =\n  (?t = TernaryTrue \\<and> ?X = True \\<or>\n   ?t = TernaryFalse \\<and> ?X = False)\n\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m)) =\n                   Some y;\n        \\<not> has_unknowns \\<beta> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_Not\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m))) =\n                            Some y\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "using ternary_lift(6) ternary_to_bool_Some"], ["proof (prove)\nusing this:\n  (eval_ternary_And ?t1.0 ?t2.0 = TernaryFalse) =\n  (?t1.0 = TernaryFalse \\<or> ?t2.0 = TernaryFalse)\n  (ternary_to_bool ?t = Some ?X) =\n  (?t = TernaryTrue \\<and> ?X = True \\<or>\n   ?t = TernaryFalse \\<and> ?X = False)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<exists>y.\n                   ternary_to_bool\n                    (ternary_ternary_eval (map_match_tac \\<beta> p m1)) =\n                   Some y;\n        \\<exists>y.\n           ternary_to_bool\n            (ternary_ternary_eval (map_match_tac \\<beta> p m2)) =\n           Some y;\n        \\<not> has_unknowns \\<beta> m1 \\<and>\n        \\<not> has_unknowns \\<beta> m2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            ternary_to_bool\n                             (eval_ternary_And\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m1))\n                               (ternary_ternary_eval\n                                 (map_match_tac \\<beta> p m2))) =\n                            Some y", "by auto"], ["proof (state)\nthis:\n  \\<not> has_unknowns \\<beta> m \\<Longrightarrow>\n  ternary_to_bool\n   (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "}"], ["proof (state)\nthis:\n  \\<not> has_unknowns \\<beta> ?ma2 \\<Longrightarrow>\n  ternary_to_bool\n   (ternary_ternary_eval (map_match_tac \\<beta> p ?ma2)) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "note no_unknowns_ternary_to_bool_Some=this"], ["proof (state)\nthis:\n  \\<not> has_unknowns \\<beta> ?ma2 \\<Longrightarrow>\n  ternary_to_bool\n   (ternary_ternary_eval (map_match_tac \\<beta> p ?ma2)) \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "from assms"], ["proof (chain)\npicking this:\n  \\<not> has_unknowns \\<beta> m", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> has_unknowns \\<beta> m\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n    (\\<not> matches (\\<beta>, \\<alpha>) m a p)", "by(auto split: option.split_asm\n              simp: matches_case_tuple no_unknowns_ternary_to_bool_Some ternary_to_bool_Some  ternary_eval_def ternary_to_bool_bool_to_ternary\n              elim: ternary_to_bool.elims)"], ["proof (state)\nthis:\n  matches (\\<beta>, \\<alpha>) (MatchNot m) a p =\n  (\\<not> matches (\\<beta>, \\<alpha>) m a p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MatchNot_ternary_ternary_eval: \"(ternary_ternary_eval (map_match_tac \\<beta> p m')) = (ternary_ternary_eval (map_match_tac \\<beta> p m)) \\<Longrightarrow>\n    matches (\\<beta>,\\<alpha>) (MatchNot m') a p = matches (\\<beta>,\\<alpha>) (MatchNot m) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p m') =\n    ternary_ternary_eval (map_match_tac \\<beta> p m) \\<Longrightarrow>\n    matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "by(simp add: matches_tuple)"], ["", "text\\<open>For our @{typ \"'p unknown_match_tac\"}s \\<open>in_doubt_allow\\<close> and \\<open>in_doubt_deny\\<close>,\n      when doing an induction over some function that modifies @{term \"m::'a match_expr\"},\n      we get the @{const MatchNot} case for free (if we can set arbitrary @{term \"p::'p\"}).\n      This does not hold for arbitrary @{typ \"'p unknown_match_tac\"}s.\\<close>"], ["", "lemma matches_induction_case_MatchNot:\n      assumes \"\\<alpha> Drop \\<noteq> \\<alpha> Accept\" and \"packet_independent_\\<alpha> \\<alpha>\"\n      and     \"\\<forall> a. matches (\\<beta>,\\<alpha>) m' a p = matches (\\<beta>,\\<alpha>) m a p\"\n      shows   \"matches (\\<beta>,\\<alpha>) (MatchNot m') a p = matches (\\<beta>,\\<alpha>) (MatchNot m) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "from assms(1) assms(2)"], ["proof (chain)\npicking this:\n  \\<alpha> Drop \\<noteq> \\<alpha> Accept\n  packet_independent_\\<alpha> \\<alpha>", "have xxxx_xxX: \"\\<And>b. \\<forall>a. \\<alpha> a p = (\\<not> b) \\<Longrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<alpha> Drop \\<noteq> \\<alpha> Accept\n  packet_independent_\\<alpha> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>b. \\<forall>a. \\<alpha> a p = (\\<not> b) \\<Longrightarrow> False", "apply(simp add: packet_independent_\\<alpha>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p = (\\<not> b);\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow>\n            \\<alpha> Drop p1 = \\<alpha> Drop p2)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"\\<alpha> Accept p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p = (\\<not> b);\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<alpha> Accept p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p = (\\<not> b);\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<not> \\<alpha> Accept p\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<not> b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<not> \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        b\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac [!] \"\\<alpha> Drop p\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<not> b; \\<alpha> Drop p\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<not> b; \\<not> \\<alpha> Drop p\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<not> \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        b; \\<alpha> Drop p\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<not> \\<alpha> a p;\n        \\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        b; \\<not> \\<alpha> Drop p\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add: fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<alpha> a p;\n        \\<exists>x. \\<alpha> Drop x = (\\<not> \\<alpha> Accept x);\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        \\<not> b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>b.\n       \\<lbrakk>\\<forall>a. \\<not> \\<alpha> a p;\n        \\<exists>x. \\<alpha> Drop x = (\\<not> \\<alpha> Accept x);\n        \\<forall>a p1 p2.\n           (a = Accept \\<longrightarrow>\n            \\<alpha> Accept p1 = \\<alpha> Accept p2) \\<and>\n           (a = Drop \\<longrightarrow> \\<alpha> Drop p1 = \\<alpha> Drop p2);\n        b\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>a. \\<alpha> a p = (\\<not> ?b) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "have xx2: \"\\<And>t. ternary_eval (TernaryNot t) = None \\<Longrightarrow> ternary_eval t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       ternary_eval (TernaryNot t) = None \\<Longrightarrow>\n       ternary_eval t = None", "by (simp add: eval_ternary_Not_UnknownD ternary_eval_def ternary_to_bool_None)"], ["proof (state)\nthis:\n  ternary_eval (TernaryNot ?t) = None \\<Longrightarrow>\n  ternary_eval ?t = None\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "have xx3: \"\\<And>t b. ternary_eval (TernaryNot t) = Some b \\<Longrightarrow>  ternary_eval t = Some (\\<not> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t b.\n       ternary_eval (TernaryNot t) = Some b \\<Longrightarrow>\n       ternary_eval t = Some (\\<not> b)", "by (metis eval_ternary_Not.simps(1) eval_ternary_Not.simps(2) ternary_eval_def ternary_ternary_eval.simps(3) ternary_ternary_eval_idempotence_Not ternary_to_bool_Some)"], ["proof (state)\nthis:\n  ternary_eval (TernaryNot ?t) = Some ?b \\<Longrightarrow>\n  ternary_eval ?t = Some (\\<not> ?b)\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "from assms"], ["proof (chain)\npicking this:\n  \\<alpha> Drop \\<noteq> \\<alpha> Accept\n  packet_independent_\\<alpha> \\<alpha>\n  \\<forall>a.\n     matches (\\<beta>, \\<alpha>) m' a p = matches (\\<beta>, \\<alpha>) m a p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> Drop \\<noteq> \\<alpha> Accept\n  packet_independent_\\<alpha> \\<alpha>\n  \\<forall>a.\n     matches (\\<beta>, \\<alpha>) m' a p = matches (\\<beta>, \\<alpha>) m a p\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n    matches (\\<beta>, \\<alpha>) (MatchNot m) a p", "apply(simp add: matches_case_tuple)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n     packet_independent_\\<alpha> \\<alpha>;\n     \\<forall>a.\n        (case ternary_eval (map_match_tac \\<beta> p m') of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n        (case ternary_eval (map_match_tac \\<beta> p m) of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b)\\<rbrakk>\n    \\<Longrightarrow> (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m')) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b) =\n                      (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m)) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b)", "apply(case_tac \"ternary_eval (TernaryNot (map_match_tac \\<beta> p m'))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n     packet_independent_\\<alpha> \\<alpha>;\n     \\<forall>a.\n        (case ternary_eval (map_match_tac \\<beta> p m') of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n        (case ternary_eval (map_match_tac \\<beta> p m) of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n     ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = None\\<rbrakk>\n    \\<Longrightarrow> (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m')) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b) =\n                      (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m)) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b)\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m')) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b) =\n                         (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m)) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b)", "apply(case_tac [!] \"ternary_eval (TernaryNot (map_match_tac \\<beta> p m))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n     packet_independent_\\<alpha> \\<alpha>;\n     \\<forall>a.\n        (case ternary_eval (map_match_tac \\<beta> p m') of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n        (case ternary_eval (map_match_tac \\<beta> p m) of\n         None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n     ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = None;\n     ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) = None\\<rbrakk>\n    \\<Longrightarrow> (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m')) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b) =\n                      (case ternary_eval\n                             (TernaryNot (map_match_tac \\<beta> p m)) of\n                       None \\<Rightarrow> \\<alpha> a p\n                       | Some b \\<Rightarrow> b)\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = None;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m')) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b) =\n                         (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m)) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b)\n 3. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m')) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b) =\n                         (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m)) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b)\n 4. \\<And>aa aaa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aaa\\<rbrakk>\n       \\<Longrightarrow> (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m')) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b) =\n                         (case ternary_eval\n                                (TernaryNot (map_match_tac \\<beta> p m)) of\n                          None \\<Rightarrow> \\<alpha> a p\n                          | Some b \\<Rightarrow> b)", "apply(simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = None;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> a p = aa\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 3. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(drule xx2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) = Some aa;\n        ternary_eval (map_match_tac \\<beta> p m') = None\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> a p = aa\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 3. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(drule xx3)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (map_match_tac \\<beta> p m') = None;\n        ternary_eval (map_match_tac \\<beta> p m) = Some (\\<not> aa)\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> a p = aa\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 3. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>aa. \\<alpha> aa p = (\\<not> a);\n        ternary_eval (map_match_tac \\<beta> p m') = None;\n        ternary_eval (map_match_tac \\<beta> p m) = Some (\\<not> a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 3. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "using xxxx_xxX"], ["proof (prove)\nusing this:\n  \\<forall>a. \\<alpha> a p = (\\<not> ?b) \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>aa. \\<alpha> aa p = (\\<not> a);\n        ternary_eval (map_match_tac \\<beta> p m') = None;\n        ternary_eval (map_match_tac \\<beta> p m) = Some (\\<not> a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 3. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply metis"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 2. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(drule xx2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some aa;\n        ternary_eval (map_match_tac \\<beta> p m) = None\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 2. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(drule xx3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (map_match_tac \\<beta> p m) = None;\n        ternary_eval (map_match_tac \\<beta> p m') =\n        Some (\\<not> aa)\\<rbrakk>\n       \\<Longrightarrow> aa = \\<alpha> a p\n 2. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>aa. (\\<not> a) = \\<alpha> aa p;\n        ternary_eval (map_match_tac \\<beta> p m) = None;\n        ternary_eval (map_match_tac \\<beta> p m') = Some (\\<not> a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "using xxxx_xxX"], ["proof (prove)\nusing this:\n  \\<forall>a. \\<alpha> a p = (\\<not> ?b) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>aa. (\\<not> a) = \\<alpha> aa p;\n        ternary_eval (map_match_tac \\<beta> p m) = None;\n        ternary_eval (map_match_tac \\<beta> p m') = Some (\\<not> a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m')) = Some a;\n        ternary_eval (TernaryNot (map_match_tac \\<beta> p m)) =\n        Some aa\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(drule xx3)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>\\<alpha> Drop \\<noteq> \\<alpha> Accept;\n        packet_independent_\\<alpha> \\<alpha>;\n        \\<forall>a.\n           (case ternary_eval (map_match_tac \\<beta> p m') of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b) =\n           (case ternary_eval (map_match_tac \\<beta> p m) of\n            None \\<Rightarrow> \\<alpha> a p | Some b \\<Rightarrow> b);\n        ternary_eval (map_match_tac \\<beta> p m') = Some (\\<not> a);\n        ternary_eval (map_match_tac \\<beta> p m) = Some (\\<not> aa)\\<rbrakk>\n       \\<Longrightarrow> a = aa", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  matches (\\<beta>, \\<alpha>) (MatchNot m') a p =\n  matches (\\<beta>, \\<alpha>) (MatchNot m) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}