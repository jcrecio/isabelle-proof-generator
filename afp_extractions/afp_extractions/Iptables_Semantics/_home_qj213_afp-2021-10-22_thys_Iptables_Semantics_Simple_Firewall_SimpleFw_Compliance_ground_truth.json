{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Simple_Firewall/SimpleFw_Compliance.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma ports_to_set_singleton_simple_match_port: \"p \\<in> ports_to_set [a] \\<longleftrightarrow> simple_match_port a p\"", "theorem simple_match_to_ipportiface_match_correct:\n  assumes valid: \"simple_match_valid sm\"\n  shows \"matches (common_matcher, \\<alpha>) (simple_match_to_ipportiface_match sm) a p \\<longleftrightarrow> simple_matches sm p\"", "lemma match_iface_simple_match_any_simps:\n     \"match_iface (iiface simple_match_any) (p_iiface p)\"\n     \"match_iface (oiface simple_match_any) (p_oiface p)\"\n     \"simple_match_ip (src simple_match_any) (p_src p)\"\n     \"simple_match_ip (dst simple_match_any) (p_dst p)\"\n     \"match_proto (proto simple_match_any) (p_proto p)\"\n     \"simple_match_port (sports simple_match_any) (p_sport p)\"\n     \"simple_match_port (dports simple_match_any) (p_dport p)\"", "theorem common_primitive_match_to_simple_match:\n  assumes \"normalized_src_ports m\" \n      and \"normalized_dst_ports m\"\n      and \"normalized_src_ips m\"\n      and \"normalized_dst_ips m\"\n      and \"normalized_ifaces m\"\n      and \"normalized_protocols m\"\n      and \"\\<not> has_disc is_L4_Flags m\"\n      and \"\\<not> has_disc is_CT_State m\"\n      and \"\\<not> has_disc is_MultiportPorts m\"\n      and \"\\<not> has_disc is_Extra m\"\n  shows \"(Some sm = common_primitive_match_to_simple_match m \\<longrightarrow> matches (common_matcher, \\<alpha>) m a p \\<longleftrightarrow> simple_matches sm p) \\<and>\n         (common_primitive_match_to_simple_match m = None \\<longrightarrow> \\<not> matches (common_matcher, \\<alpha>) m a p)\"", "lemma simple_fw_remdups_Rev: \"simple_fw (remdups_rev rs) p = simple_fw rs p\"", "lemma \"normalized_src_ports m \\<Longrightarrow> normalized_nnf_match m\"", "lemma \"\\<not> matcheq_matchNone m \\<Longrightarrow> normalized_src_ports m \\<Longrightarrow> normalized_nnf_match m\"", "lemma to_simple_firewall_simps:\n      \"to_simple_firewall [] = []\"\n      \"check_simple_fw_preconditions ((Rule m a)#rs) \\<Longrightarrow> to_simple_firewall ((Rule m a)#rs) = (case common_primitive_match_to_simple_match m of\n          None \\<Rightarrow> to_simple_firewall rs\n          | Some sm \\<Rightarrow> (SimpleRule sm (action_to_simple_action a)) # to_simple_firewall rs)\"\n      \"\\<not> check_simple_fw_preconditions rs' \\<Longrightarrow> to_simple_firewall rs' = undefined\"", "lemma \"check_simple_fw_preconditions\n     [Rule (MatchAnd (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n                          (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n                                    (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n                Drop]\"", "lemma \"to_simple_firewall\n     [Rule (MatchAnd (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n                          (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n                                    (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n                Drop] =\n[SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0x7F000000, 8), dst = (0, 0), proto = Proto 6, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\"", "lemma \"check_simple_fw_preconditions [Rule (MatchAnd MatchAny MatchAny) Drop]\"", "lemma \"to_simple_firewall [Rule (MatchAnd MatchAny (MatchAny::32 common_primitive match_expr)) Drop] =\n  [SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0, 0), dst = (0, 0), proto = ProtoAny, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\"", "lemma \"to_simple_firewall [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8))) Drop] =\n[SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0x7F000000, 8), dst = (0, 0), proto = ProtoAny, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\"", "theorem to_simple_firewall: \"check_simple_fw_preconditions rs \\<Longrightarrow> approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided = simple_fw (to_simple_firewall rs) p\"", "lemma ctstate_assume_new_not_has_CT_State:\n  \"r \\<in> set (ctstate_assume_new rs) \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)\"", "theorem transform_simple_fw_upper:\n  defines \"preprocess rs \\<equiv> upper_closure (optimize_matches abstract_for_simple_firewall (upper_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n  \\<comment> \\<open>the preconditions for the simple firewall are fulfilled, definitely no runtime failure\\<close>\n  shows \"check_simple_fw_preconditions (preprocess rs)\"\n  \\<comment> \\<open>the set of new packets, which are accepted is an overapproximations\\<close>\n  and \"{p. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p}\"\n  \\<comment> \\<open>Fun fact: The theorem holds for a tagged packet. The simple firewall just ignores the tag. \n     You may explicitly untag, if you wish to, but a @{typ \"'i tagged_packet\"} is just an extension of the\n     @{typ \"'i simple_packet\"} used by the simple firewall\\<close>", "theorem transform_simple_fw_lower:\n  defines \"preprocess rs \\<equiv> lower_closure (optimize_matches abstract_for_simple_firewall (lower_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n  \\<comment> \\<open>the preconditions for the simple firewall are fulfilled, definitely no runtime failure\\<close>\n  shows \"check_simple_fw_preconditions (preprocess rs)\"\n  \\<comment> \\<open>the set of new packets, which are accepted is an underapproximation\\<close>\n  and \"{p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. (common_matcher, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\"", "theorem to_simple_firewall_without_interfaces:\n  defines \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n\n      \\<comment> \\<open>well-formed ipassmt\\<close>\n      and wf_ipassmt1: \"ipassmt_sanity_nowildcards (map_of ipassmt)\" and wf_ipassmt2: \"distinct (map fst ipassmt)\"\n      \\<comment> \\<open>There are no spoofed packets (probably by kernel's reverse path filter or our checker).\n         This assumption implies that ipassmt lists ALL interfaces (!!).\\<close>\n      and nospoofing: \"\\<forall>(p::('i::len, 'a) tagged_packet_scheme).\n            \\<exists>ips. (map_of ipassmt) (Iface (p_iiface p)) = Some ips \\<and> p_src p \\<in> ipcidr_union_set (set ips)\"\n      \\<comment> \\<open>If a routing table was passed, the output interface for any packet we consider is decided based on it.\\<close>\n      and routing_decided: \"\\<And>rtbl (p::('i,'a) tagged_packet_scheme). rtblo = Some rtbl \\<Longrightarrow> output_iface (routing_table_semantics rtbl (p_dst p)) = p_oiface p\"\n      \\<comment> \\<open>A passed routing table is wellformed\\<close>\n      and correct_routing: \"\\<And>rtbl. rtblo = Some rtbl \\<Longrightarrow> correct_routing rtbl\"\n      \\<comment> \\<open>A passed routing table contains no interfaces with wildcard names\\<close>\n      and routing_no_wildcards: \"\\<And>rtbl. rtblo = Some rtbl \\<Longrightarrow> ipassmt_sanity_nowildcards (map_of (routing_ipassmt rtbl))\"\n\n  \\<comment> \\<open>the set of new packets, which are accepted is an overapproximations\\<close>\n  shows \"{p::('i,'a) tagged_packet_scheme. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n         {p::('i,'a) tagged_packet_scheme. simple_fw (to_simple_firewall_without_interfaces ipassmt rtblo rs) p = Decision FinalAllow \\<and> newpkt p}\"\n\n  and \"\\<forall>r \\<in> set (to_simple_firewall_without_interfaces ipassmt rtblo rs).\n          iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\""], "translations": [["", "lemma ports_to_set_singleton_simple_match_port: \"p \\<in> ports_to_set [a] \\<longleftrightarrow> simple_match_port a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> ports_to_set [a]) = simple_match_port a p", "by(cases a, simp)"], ["", "theorem simple_match_to_ipportiface_match_correct:\n  assumes valid: \"simple_match_valid sm\"\n  shows \"matches (common_matcher, \\<alpha>) (simple_match_to_ipportiface_match sm) a p \\<longleftrightarrow> simple_matches sm p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "obtain iif oif sip dip pro sps dps where\n    sm: \"sm = \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro, sports = sps, dports = dps\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>iif oif sip dip pro sps dps.\n        sm =\n        \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n           proto = pro, sports = sps, dports = dps\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases sm)"], ["proof (state)\nthis:\n  sm =\n  \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n     sports = sps, dports = dps\\<rparr>\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "{"], ["proof (state)\nthis:\n  sm =\n  \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n     sports = sps, dports = dps\\<rparr>\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "fix ip"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "have \"p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip) \\<longleftrightarrow> simple_match_ip ip (p_src p)\"\n    and  \"p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip) \\<longleftrightarrow> simple_match_ip ip (p_dst p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip)) =\n    simple_match_ip ip (p_src p) &&&\n    (p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip)) =\n    simple_match_ip ip (p_dst p)", "by(simp split: uncurry_split)+"], ["proof (state)\nthis:\n  (p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip)) =\n  simple_match_ip ip (p_src p)\n  (p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ip)) =\n  simple_match_ip ip (p_dst p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "}"], ["proof (state)\nthis:\n  (p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_src p)\n  (p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_dst p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "note simple_match_ips=this"], ["proof (state)\nthis:\n  (p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_src p)\n  (p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_dst p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "{"], ["proof (state)\nthis:\n  (p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_src p)\n  (p_dst p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask ?ip2)) =\n  simple_match_ip ?ip2 (p_dst p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "fix ps"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "have \"p_sport p \\<in> ports_to_set [ps] \\<longleftrightarrow> simple_match_port ps (p_sport p)\"\n    and  \"p_dport p \\<in> ports_to_set [ps] \\<longleftrightarrow> simple_match_port ps (p_dport p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_sport p \\<in> ports_to_set [ps]) =\n    simple_match_port ps (p_sport p) &&&\n    (p_dport p \\<in> ports_to_set [ps]) = simple_match_port ps (p_dport p)", "apply(case_tac [!] ps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ps = (a, b) \\<Longrightarrow>\n       (p_sport p \\<in> ports_to_set [ps]) =\n       simple_match_port ps (p_sport p)\n 2. \\<And>a b.\n       ps = (a, b) \\<Longrightarrow>\n       (p_dport p \\<in> ports_to_set [ps]) =\n       simple_match_port ps (p_dport p)", "by(simp_all)"], ["proof (state)\nthis:\n  (p_sport p \\<in> ports_to_set [ps]) = simple_match_port ps (p_sport p)\n  (p_dport p \\<in> ports_to_set [ps]) = simple_match_port ps (p_dport p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "}"], ["proof (state)\nthis:\n  (p_sport p \\<in> ports_to_set [?ps2]) = simple_match_port ?ps2 (p_sport p)\n  (p_dport p \\<in> ports_to_set [?ps2]) = simple_match_port ?ps2 (p_dport p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "note simple_match_ports=this"], ["proof (state)\nthis:\n  (p_sport p \\<in> ports_to_set [?ps2]) = simple_match_port ?ps2 (p_sport p)\n  (p_dport p \\<in> ports_to_set [?ps2]) = simple_match_port ?ps2 (p_dport p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "from valid sm"], ["proof (chain)\npicking this:\n  simple_match_valid sm\n  sm =\n  \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n     sports = sps, dports = dps\\<rparr>", "have valid':\"pro = ProtoAny \\<Longrightarrow> simple_match_port sps (p_sport p) \\<and> simple_match_port dps (p_dport p)\""], ["proof (prove)\nusing this:\n  simple_match_valid sm\n  sm =\n  \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n     sports = sps, dports = dps\\<rparr>\n\ngoal (1 subgoal):\n 1. pro = ProtoAny \\<Longrightarrow>\n    simple_match_port sps (p_sport p) \\<and>\n    simple_match_port dps (p_dport p)", "apply(simp add: simple_match_valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pro = ProtoAny;\n     Collect (simple_match_port sps) = UNIV \\<and>\n     Collect (simple_match_port dps) = UNIV \\<and>\n     valid_prefix_fw sip \\<and> valid_prefix_fw dip;\n     sm =\n     \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n        proto = ProtoAny, sports = sps, dports = dps\\<rparr>\\<rbrakk>\n    \\<Longrightarrow> simple_match_port sps (p_sport p) \\<and>\n                      simple_match_port dps (p_dport p)", "by blast"], ["proof (state)\nthis:\n  pro = ProtoAny \\<Longrightarrow>\n  simple_match_port sps (p_sport p) \\<and> simple_match_port dps (p_dport p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match sm) a p =\n    simple_matches sm p", "unfolding sm"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match\n       \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n          proto = pro, sports = sps, dports = dps\\<rparr>)\n     a p =\n    simple_matches\n     \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n        sports = sps, dports = dps\\<rparr>\n     p", "apply(cases pro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. pro = ProtoAny \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match\n       \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n          proto = pro, sports = sps, dports = dps\\<rparr>)\n     a p =\n    simple_matches\n     \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n        sports = sps, dports = dps\\<rparr>\n     p\n 2. \\<And>x2.\n       pro = Proto x2 \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (simple_match_to_ipportiface_match\n          \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n             proto = pro, sports = sps, dports = dps\\<rparr>)\n        a p =\n       simple_matches\n        \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n           proto = pro, sports = sps, dports = dps\\<rparr>\n        p", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. pro = ProtoAny \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (simple_match_to_ipportiface_match\n       \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n          proto = pro, sports = sps, dports = dps\\<rparr>)\n     a p =\n    simple_matches\n     \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip, proto = pro,\n        sports = sps, dports = dps\\<rparr>\n     p", "apply(simp add: bunch_of_lemmata_about_matches simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pro = ProtoAny \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>) (Match (IIface iif)) a p \\<and>\n     matches (common_matcher, \\<alpha>) (Match (OIface oif)) a p \\<and>\n     matches (common_matcher, \\<alpha>)\n      (Match (Src (uncurry IpAddrNetmask sip))) a p \\<and>\n     matches (common_matcher, \\<alpha>)\n      (Match (Dst (uncurry IpAddrNetmask dip))) a p) =\n    (match_iface iif (p_iiface p) \\<and>\n     match_iface oif (p_oiface p) \\<and>\n     simple_match_ip sip (p_src p) \\<and>\n     simple_match_ip dip (p_dst p) \\<and>\n     simple_match_port sps (p_sport p) \\<and>\n     simple_match_port dps (p_dport p))", "apply(simp add: match_raw_bool ternary_to_bool_bool_to_ternary simple_match_ips simple_match_ports simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pro = ProtoAny \\<Longrightarrow>\n    (match_iface iif (p_iiface p) \\<and>\n     match_iface oif (p_oiface p) \\<and>\n     simple_match_ip sip (p_src p) \\<and> simple_match_ip dip (p_dst p)) =\n    (match_iface iif (p_iiface p) \\<and>\n     match_iface oif (p_oiface p) \\<and>\n     simple_match_ip sip (p_src p) \\<and>\n     simple_match_ip dip (p_dst p) \\<and>\n     simple_match_port sps (p_sport p) \\<and>\n     simple_match_port dps (p_dport p))", "using valid'"], ["proof (prove)\nusing this:\n  pro = ProtoAny \\<Longrightarrow>\n  simple_match_port sps (p_sport p) \\<and> simple_match_port dps (p_dport p)\n\ngoal (1 subgoal):\n 1. pro = ProtoAny \\<Longrightarrow>\n    (match_iface iif (p_iiface p) \\<and>\n     match_iface oif (p_oiface p) \\<and>\n     simple_match_ip sip (p_src p) \\<and> simple_match_ip dip (p_dst p)) =\n    (match_iface iif (p_iiface p) \\<and>\n     match_iface oif (p_oiface p) \\<and>\n     simple_match_ip sip (p_src p) \\<and>\n     simple_match_ip dip (p_dst p) \\<and>\n     simple_match_port sps (p_sport p) \\<and>\n     simple_match_port dps (p_dport p))", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       pro = Proto x2 \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (simple_match_to_ipportiface_match\n          \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n             proto = pro, sports = sps, dports = dps\\<rparr>)\n        a p =\n       simple_matches\n        \\<lparr>iiface = iif, oiface = oif, src = sip, dst = dip,\n           proto = pro, sports = sps, dports = dps\\<rparr>\n        p", "apply(simp add: bunch_of_lemmata_about_matches simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       pro = Proto x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>) (Match (IIface iif)) a p \\<and>\n        matches (common_matcher, \\<alpha>) (Match (OIface oif)) a p \\<and>\n        matches (common_matcher, \\<alpha>)\n         (Match (Src (uncurry IpAddrNetmask sip))) a p \\<and>\n        matches (common_matcher, \\<alpha>)\n         (Match (Dst (uncurry IpAddrNetmask dip))) a p \\<and>\n        matches (common_matcher, \\<alpha>) (Match (Prot (Proto x2))) a\n         p \\<and>\n        matches (common_matcher, \\<alpha>)\n         (Match (Src_Ports (L4Ports x2 [sps]))) a p \\<and>\n        matches (common_matcher, \\<alpha>)\n         (Match (Dst_Ports (L4Ports x2 [dps]))) a p) =\n       (match_iface iif (p_iiface p) \\<and>\n        match_iface oif (p_oiface p) \\<and>\n        simple_match_ip sip (p_src p) \\<and>\n        simple_match_ip dip (p_dst p) \\<and>\n        p_proto p = x2 \\<and>\n        simple_match_port sps (p_sport p) \\<and>\n        simple_match_port dps (p_dport p))", "apply(simp add: match_raw_bool ternary_to_bool_bool_to_ternary simple_match_ips simple_match_ports simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       pro = Proto x2 \\<Longrightarrow>\n       (match_iface iif (p_iiface p) \\<and>\n        match_iface oif (p_oiface p) \\<and>\n        simple_match_ip sip (p_src p) \\<and>\n        simple_match_ip dip (p_dst p) \\<and>\n        p_proto p = x2 \\<and>\n        x2 = p_proto p \\<and>\n        simple_match_port sps (p_sport p) \\<and>\n        x2 = p_proto p \\<and> simple_match_port dps (p_dport p)) =\n       (match_iface iif (p_iiface p) \\<and>\n        match_iface oif (p_oiface p) \\<and>\n        simple_match_ip sip (p_src p) \\<and>\n        simple_match_ip dip (p_dst p) \\<and>\n        p_proto p = x2 \\<and>\n        simple_match_port sps (p_sport p) \\<and>\n        simple_match_port dps (p_dport p))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (simple_match_to_ipportiface_match sm)\n   a p =\n  simple_matches sm p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>MatchExpr to Simple Match\\<close>"], ["", "fun common_primitive_match_to_simple_match :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i simple_match option\" where\n  \"common_primitive_match_to_simple_match MatchAny = Some (simple_match_any)\" |\n  \"common_primitive_match_to_simple_match (MatchNot MatchAny) = None\" |\n  \"common_primitive_match_to_simple_match (Match (IIface iif)) = Some (simple_match_any\\<lparr> iiface := iif \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (OIface oif)) = Some (simple_match_any\\<lparr> oiface := oif \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (Src (IpAddrNetmask pre len))) = Some (simple_match_any\\<lparr> src := (pre, len) \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (Dst (IpAddrNetmask pre len))) = Some (simple_match_any\\<lparr> dst := (pre, len) \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (Prot p)) = Some (simple_match_any\\<lparr> proto := p \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (Src_Ports (L4Ports p []))) = None\" |\n  \"common_primitive_match_to_simple_match (Match (Src_Ports (L4Ports p [(s,e)]))) = Some (simple_match_any\\<lparr> proto := Proto p, sports := (s,e) \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (Match (Dst_Ports (L4Ports p []))) = None\" |\n  \"common_primitive_match_to_simple_match (Match (Dst_Ports (L4Ports p [(s,e)]))) = Some (simple_match_any\\<lparr> proto := Proto p, dports := (s,e) \\<rparr>)\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Prot ProtoAny))) = None\" |\n  \"common_primitive_match_to_simple_match (MatchAnd m1 m2) = (case (common_primitive_match_to_simple_match m1, common_primitive_match_to_simple_match m2) of \n      (None, _) \\<Rightarrow> None\n    | (_, None) \\<Rightarrow> None\n    | (Some m1', Some m2') \\<Rightarrow> simple_match_and m1' m2')\" |\n  \\<comment> \\<open>undefined cases, normalize before!\\<close>\n  \"common_primitive_match_to_simple_match (Match (Src (IpAddr _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Src (IpAddrRange _ _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Dst (IpAddr _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Dst (IpAddrRange _ _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Prot _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (IIface _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (OIface _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Src _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Dst _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (MatchAnd _ _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (MatchNot _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Src_Ports _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Dst_Ports _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Src_Ports _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Dst_Ports _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (CT_State _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (L4_Flags _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (L4_Flags _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (Match (Extra _)) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (Extra _))) = undefined\" |\n  \"common_primitive_match_to_simple_match (MatchNot (Match (CT_State _))) = undefined\""], ["", "subsubsection\\<open>Normalizing Interfaces\\<close>"], ["", "text\\<open>As for now, negated interfaces are simply not allowed\\<close>"], ["", "definition normalized_ifaces :: \"'i::len common_primitive match_expr \\<Rightarrow> bool\" where\n    \"normalized_ifaces m \\<equiv> \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False m\""], ["", "subsubsection\\<open>Normalizing Protocols\\<close>"], ["", "text\\<open>As for now, negated protocols are simply not allowed\\<close>"], ["", "definition normalized_protocols :: \"'i::len common_primitive match_expr \\<Rightarrow> bool\" where\n    \"normalized_protocols m \\<equiv> \\<not> has_disc_negated is_Prot False m\""], ["", "lemma match_iface_simple_match_any_simps:\n     \"match_iface (iiface simple_match_any) (p_iiface p)\"\n     \"match_iface (oiface simple_match_any) (p_oiface p)\"\n     \"simple_match_ip (src simple_match_any) (p_src p)\"\n     \"simple_match_ip (dst simple_match_any) (p_dst p)\"\n     \"match_proto (proto simple_match_any) (p_proto p)\"\n     \"simple_match_port (sports simple_match_any) (p_sport p)\"\n     \"simple_match_port (dports simple_match_any) (p_dport p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_iface (iiface simple_match_any) (p_iiface p) &&&\n     match_iface (oiface simple_match_any) (p_oiface p) &&&\n     simple_match_ip (src simple_match_any) (p_src p)) &&&\n    (simple_match_ip (dst simple_match_any) (p_dst p) &&&\n     match_proto (proto simple_match_any) (p_proto p)) &&&\n    simple_match_port (sports simple_match_any) (p_sport p) &&&\n    simple_match_port (dports simple_match_any) (p_dport p)", "apply (simp_all add: simple_match_any_def match_ifaceAny ipset_from_cidr_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. p_sport p \\<le> 65535\n 2. p_dport p \\<le> 65535", "apply (subgoal_tac [!] \"(65535::16 word) = max_word\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. 65535 = - 1 \\<Longrightarrow> p_sport p \\<le> 65535\n 2. 65535 = - 1\n 3. 65535 = - 1 \\<Longrightarrow> p_dport p \\<le> 65535\n 4. 65535 = - 1", "apply (simp_all only:)"], ["proof (prove)\ngoal (4 subgoals):\n 1. 65535 = - 1 \\<Longrightarrow> p_sport p \\<le> - 1\n 2. 65535 = - 1\n 3. 65535 = - 1 \\<Longrightarrow> p_dport p \\<le> - 1\n 4. 65535 = - 1", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem common_primitive_match_to_simple_match:\n  assumes \"normalized_src_ports m\" \n      and \"normalized_dst_ports m\"\n      and \"normalized_src_ips m\"\n      and \"normalized_dst_ips m\"\n      and \"normalized_ifaces m\"\n      and \"normalized_protocols m\"\n      and \"\\<not> has_disc is_L4_Flags m\"\n      and \"\\<not> has_disc is_CT_State m\"\n      and \"\\<not> has_disc is_MultiportPorts m\"\n      and \"\\<not> has_disc is_Extra m\"\n  shows \"(Some sm = common_primitive_match_to_simple_match m \\<longrightarrow> matches (common_matcher, \\<alpha>) m a p \\<longleftrightarrow> simple_matches sm p) \\<and>\n         (common_primitive_match_to_simple_match m = None \\<longrightarrow> \\<not> matches (common_matcher, \\<alpha>) m a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some sm = common_primitive_match_to_simple_match m \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match m = None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Some sm = common_primitive_match_to_simple_match m \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match m = None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some sm = common_primitive_match_to_simple_match m \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match m = None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "using assms"], ["proof (prove)\nusing this:\n  normalized_src_ports m\n  normalized_dst_ports m\n  normalized_src_ips m\n  normalized_dst_ips m\n  normalized_ifaces m\n  normalized_protocols m\n  \\<not> has_disc is_L4_Flags m\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_MultiportPorts m\n  \\<not> has_disc is_Extra m\n\ngoal (1 subgoal):\n 1. (Some sm = common_primitive_match_to_simple_match m \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match m = None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "proof(induction m arbitrary: sm rule: common_primitive_match_to_simple_match.induct)"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports MatchAny;\n        normalized_dst_ports MatchAny; normalized_src_ips MatchAny;\n        normalized_dst_ips MatchAny; normalized_ifaces MatchAny;\n        normalized_protocols MatchAny; \\<not> has_disc is_L4_Flags MatchAny;\n        \\<not> has_disc is_CT_State MatchAny;\n        \\<not> has_disc is_MultiportPorts MatchAny;\n        \\<not> has_disc is_Extra MatchAny\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           MatchAny \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>) MatchAny a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match MatchAny =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>) MatchAny\n                                  a p)\n 2. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 3. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 4. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 6. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 9. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 10. \\<And>pa sm.\n        \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n         normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n         normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n         normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n         normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n         normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_MultiportPorts\n                 (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_Extra\n                 (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match\n                              (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Dst_Ports (L4Ports pa []))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Dst_Ports (L4Ports pa []))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Dst_Ports (L4Ports pa []))) a p)\nA total of 36 subgoals...", "case 1"], ["proof (state)\nthis:\n  normalized_src_ports MatchAny\n  normalized_dst_ports MatchAny\n  normalized_src_ips MatchAny\n  normalized_dst_ips MatchAny\n  normalized_ifaces MatchAny\n  normalized_protocols MatchAny\n  \\<not> has_disc is_L4_Flags MatchAny\n  \\<not> has_disc is_CT_State MatchAny\n  \\<not> has_disc is_MultiportPorts MatchAny\n  \\<not> has_disc is_Extra MatchAny\n\ngoal (36 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports MatchAny;\n        normalized_dst_ports MatchAny; normalized_src_ips MatchAny;\n        normalized_dst_ips MatchAny; normalized_ifaces MatchAny;\n        normalized_protocols MatchAny; \\<not> has_disc is_L4_Flags MatchAny;\n        \\<not> has_disc is_CT_State MatchAny;\n        \\<not> has_disc is_MultiportPorts MatchAny;\n        \\<not> has_disc is_Extra MatchAny\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           MatchAny \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>) MatchAny a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match MatchAny =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>) MatchAny\n                                  a p)\n 2. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 3. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 4. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 6. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 9. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 10. \\<And>pa sm.\n        \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n         normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n         normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n         normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n         normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n         normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_MultiportPorts\n                 (Match (Dst_Ports (L4Ports pa [])));\n         \\<not> has_disc is_Extra\n                 (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match\n                              (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Dst_Ports (L4Ports pa []))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Dst_Ports (L4Ports pa []))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Dst_Ports (L4Ports pa []))) a p)\nA total of 36 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_src_ports MatchAny\n  normalized_dst_ports MatchAny\n  normalized_src_ips MatchAny\n  normalized_dst_ips MatchAny\n  normalized_ifaces MatchAny\n  normalized_protocols MatchAny\n  \\<not> has_disc is_L4_Flags MatchAny\n  \\<not> has_disc is_CT_State MatchAny\n  \\<not> has_disc is_MultiportPorts MatchAny\n  \\<not> has_disc is_Extra MatchAny\n\ngoal (1 subgoal):\n 1. (Some sm =\n     common_primitive_match_to_simple_match MatchAny \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) MatchAny a p =\n     simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match MatchAny =\n     None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) MatchAny a p)", "by(simp add: match_iface_simple_match_any_simps bunch_of_lemmata_about_matches simple_matches.simps)"], ["proof (state)\nthis:\n  (Some sm =\n   common_primitive_match_to_simple_match MatchAny \\<longrightarrow>\n   matches (common_matcher, \\<alpha>) MatchAny a p =\n   simple_matches sm p) \\<and>\n  (common_primitive_match_to_simple_match MatchAny = None \\<longrightarrow>\n   \\<not> matches (common_matcher, \\<alpha>) MatchAny a p)\n\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 9. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 10. \\<And>pa s e sm.\n        \\<lbrakk>normalized_src_ports\n                  (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_L4_Flags\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_CT_State\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_MultiportPorts\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_Extra\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match\n                              (Dst_Ports\n                                (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                   a p)\nA total of 35 subgoals...", "next"], ["proof (state)\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 9. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 10. \\<And>pa s e sm.\n        \\<lbrakk>normalized_src_ports\n                  (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_L4_Flags\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_CT_State\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_MultiportPorts\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_Extra\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match\n                              (Dst_Ports\n                                (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                   a p)\nA total of 35 subgoals...", "case (9 p s e)"], ["proof (state)\nthis:\n  normalized_src_ports (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_dst_ports (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_src_ips (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_dst_ips (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_ifaces (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_protocols (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_MultiportPorts (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_Extra (Match (Src_Ports (L4Ports p [(s, e)])))\n\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 9. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 10. \\<And>pa s e sm.\n        \\<lbrakk>normalized_src_ports\n                  (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_L4_Flags\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_CT_State\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_MultiportPorts\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n         \\<not> has_disc is_Extra\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match\n                              (Dst_Ports\n                                (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                   a p)\nA total of 35 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_src_ports (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_dst_ports (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_src_ips (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_dst_ips (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_ifaces (Match (Src_Ports (L4Ports p [(s, e)])))\n  normalized_protocols (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_MultiportPorts (Match (Src_Ports (L4Ports p [(s, e)])))\n  \\<not> has_disc is_Extra (Match (Src_Ports (L4Ports p [(s, e)])))\n\ngoal (1 subgoal):\n 1. (Some sm =\n     common_primitive_match_to_simple_match\n      (Match (Src_Ports (L4Ports p [(s, e)]))) \\<longrightarrow>\n     matches (common_matcher, \\<alpha>)\n      (Match (Src_Ports (L4Ports p [(s, e)]))) a p =\n     simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match\n      (Match (Src_Ports (L4Ports p [(s, e)]))) =\n     None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>)\n             (Match (Src_Ports (L4Ports p [(s, e)]))) a p)", "apply(simp add: match_iface_simple_match_any_simps simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_ifaces (Match (Src_Ports (L4Ports p [(s, e)])));\n     normalized_protocols (Match (Src_Ports (L4Ports p [(s, e)])))\\<rbrakk>\n    \\<Longrightarrow> sm = simple_match_any\n                      \\<lparr>proto := Proto p,\n                         sports := (s, e)\\<rparr> \\<longrightarrow>\n                      matches (common_matcher, \\<alpha>)\n                       (Match (Src_Ports (L4Ports p [(s, e)]))) a p =\n                      (p_proto p = p \\<and>\n                       s \\<le> p_sport p \\<and> p_sport p \\<le> e)", "apply(simp add: match_raw_bool ternary_to_bool_bool_to_ternary)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_ifaces (Match (Src_Ports (L4Ports p [(s, e)])));\n     normalized_protocols (Match (Src_Ports (L4Ports p [(s, e)])))\\<rbrakk>\n    \\<Longrightarrow> sm = simple_match_any\n                      \\<lparr>proto := Proto p,\n                         sports := (s, e)\\<rparr> \\<longrightarrow>\n                      (p = p_proto p \\<and>\n                       s \\<le> p_sport p \\<and> p_sport p \\<le> e) =\n                      (p_proto p = p \\<and>\n                       s \\<le> p_sport p \\<and> p_sport p \\<le> e)", "by fastforce"], ["proof (state)\nthis:\n  (Some sm =\n   common_primitive_match_to_simple_match\n    (Match (Src_Ports (L4Ports p [(s, e)]))) \\<longrightarrow>\n   matches (common_matcher, \\<alpha>)\n    (Match (Src_Ports (L4Ports p [(s, e)]))) a p =\n   simple_matches sm p) \\<and>\n  (common_primitive_match_to_simple_match\n    (Match (Src_Ports (L4Ports p [(s, e)]))) =\n   None \\<longrightarrow>\n   \\<not> matches (common_matcher, \\<alpha>)\n           (Match (Src_Ports (L4Ports p [(s, e)]))) a p)\n\ngoal (34 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 10. \\<And>sm.\n        \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n         normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_MultiportPorts\n                 (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_Extra\n                 (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchNot\n                              (Match (Prot ProtoAny))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchNot (Match (Prot ProtoAny))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchNot (Match (Prot ProtoAny))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchNot (Match (Prot ProtoAny))) a p)\nA total of 34 subgoals...", "next"], ["proof (state)\ngoal (34 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 10. \\<And>sm.\n        \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n         normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_MultiportPorts\n                 (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_Extra\n                 (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchNot\n                              (Match (Prot ProtoAny))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchNot (Match (Prot ProtoAny))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchNot (Match (Prot ProtoAny))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchNot (Match (Prot ProtoAny))) a p)\nA total of 34 subgoals...", "case 11"], ["proof (state)\nthis:\n  normalized_src_ports (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_dst_ports (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_src_ips (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_dst_ips (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_ifaces (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_protocols (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_MultiportPorts\n          (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_Extra (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n\ngoal (34 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>pa s e sm.\n       \\<lbrakk>normalized_src_ports\n                 (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_L4_Flags\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_CT_State\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [(s, e)])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [(s, e)])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports\n                               (L4Ports pa [(s, e)]))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa [(s, e)]))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa [(s, e)])))\n                                  a p)\n 10. \\<And>sm.\n        \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n         normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n         normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n         normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_MultiportPorts\n                 (MatchNot (Match (Prot ProtoAny)));\n         \\<not> has_disc is_Extra\n                 (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchNot\n                              (Match (Prot ProtoAny))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchNot (Match (Prot ProtoAny))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchNot (Match (Prot ProtoAny))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchNot (Match (Prot ProtoAny))) a p)\nA total of 34 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_src_ports (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_dst_ports (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_src_ips (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_dst_ips (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_ifaces (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  normalized_protocols (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_MultiportPorts\n          (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n  \\<not> has_disc is_Extra (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\n\ngoal (1 subgoal):\n 1. (Some sm =\n     common_primitive_match_to_simple_match\n      (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) \\<longrightarrow>\n     matches (common_matcher, \\<alpha>)\n      (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) a p =\n     simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match\n      (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) =\n     None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>)\n             (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) a p)", "apply(simp add: match_iface_simple_match_any_simps simple_matches.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_ifaces (Match (Dst_Ports (L4Ports p_ [(s_, e_)])));\n     normalized_protocols\n      (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\\<rbrakk>\n    \\<Longrightarrow> sm = simple_match_any\n                      \\<lparr>proto := Proto p_,\n                         dports := (s_, e_)\\<rparr> \\<longrightarrow>\n                      matches (common_matcher, \\<alpha>)\n                       (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) a p =\n                      (p_proto p = p_ \\<and>\n                       s_ \\<le> p_dport p \\<and> p_dport p \\<le> e_)", "apply(simp add: match_raw_bool ternary_to_bool_bool_to_ternary)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_ifaces (Match (Dst_Ports (L4Ports p_ [(s_, e_)])));\n     normalized_protocols\n      (Match (Dst_Ports (L4Ports p_ [(s_, e_)])))\\<rbrakk>\n    \\<Longrightarrow> sm = simple_match_any\n                      \\<lparr>proto := Proto p_,\n                         dports := (s_, e_)\\<rparr> \\<longrightarrow>\n                      (p_ = p_proto p \\<and>\n                       s_ \\<le> p_dport p \\<and> p_dport p \\<le> e_) =\n                      (p_proto p = p_ \\<and>\n                       s_ \\<le> p_dport p \\<and> p_dport p \\<le> e_)", "by fastforce"], ["proof (state)\nthis:\n  (Some sm =\n   common_primitive_match_to_simple_match\n    (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) \\<longrightarrow>\n   matches (common_matcher, \\<alpha>)\n    (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) a p =\n   simple_matches sm p) \\<and>\n  (common_primitive_match_to_simple_match\n    (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) =\n   None \\<longrightarrow>\n   \\<not> matches (common_matcher, \\<alpha>)\n           (Match (Dst_Ports (L4Ports p_ [(s_, e_)]))) a p)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "next"], ["proof (state)\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "case (13 m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports (MatchAnd m1 m2)\n  normalized_dst_ports (MatchAnd m1 m2)\n  normalized_src_ips (MatchAnd m1 m2)\n  normalized_dst_ips (MatchAnd m1 m2)\n  normalized_ifaces (MatchAnd m1 m2)\n  normalized_protocols (MatchAnd m1 m2)\n  \\<not> has_disc is_L4_Flags (MatchAnd m1 m2)\n  \\<not> has_disc is_CT_State (MatchAnd m1 m2)\n  \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2)\n  \\<not> has_disc is_Extra (MatchAnd m1 m2)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "let ?caseSome=\"Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\""], ["proof (state)\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "let ?caseNone=\"common_primitive_match_to_simple_match (MatchAnd m1 m2) = None\""], ["proof (state)\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "let ?goal=\"(?caseSome \\<longrightarrow> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p = simple_matches sm p) \\<and> \n               (?caseNone \\<longrightarrow> \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p)\""], ["proof (state)\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from 13"], ["proof (chain)\npicking this:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports (MatchAnd m1 m2)\n  normalized_dst_ports (MatchAnd m1 m2)\n  normalized_src_ips (MatchAnd m1 m2)\n  normalized_dst_ips (MatchAnd m1 m2)\n  normalized_ifaces (MatchAnd m1 m2)\n  normalized_protocols (MatchAnd m1 m2)\n  \\<not> has_disc is_L4_Flags (MatchAnd m1 m2)\n  \\<not> has_disc is_CT_State (MatchAnd m1 m2)\n  \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2)\n  \\<not> has_disc is_Extra (MatchAnd m1 m2)", "have normalized:\n      \"normalized_src_ports m1\" \"normalized_src_ports m2\"\n      \"normalized_dst_ports m1\" \"normalized_dst_ports m2\"\n      \"normalized_src_ips m1\" \"normalized_src_ips m2\"\n      \"normalized_dst_ips m1\" \"normalized_dst_ips m2\"\n      \"normalized_ifaces m1\" \"normalized_ifaces m2\"\n      \"\\<not> has_disc is_L4_Flags m1\" \"\\<not> has_disc is_L4_Flags m2\"\n      \"\\<not> has_disc is_CT_State m1\" \"\\<not> has_disc is_CT_State m2\"\n      \"\\<not> has_disc is_MultiportPorts m1\" \"\\<not> has_disc is_MultiportPorts m2\"\n      \"\\<not> has_disc is_Extra m1\" \"\\<not> has_disc is_Extra m2\"\n      \"normalized_protocols m1\" \"normalized_protocols m2\""], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports (MatchAnd m1 m2)\n  normalized_dst_ports (MatchAnd m1 m2)\n  normalized_src_ips (MatchAnd m1 m2)\n  normalized_dst_ips (MatchAnd m1 m2)\n  normalized_ifaces (MatchAnd m1 m2)\n  normalized_protocols (MatchAnd m1 m2)\n  \\<not> has_disc is_L4_Flags (MatchAnd m1 m2)\n  \\<not> has_disc is_CT_State (MatchAnd m1 m2)\n  \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2)\n  \\<not> has_disc is_Extra (MatchAnd m1 m2)\n\ngoal (1 subgoal):\n 1. (((normalized_src_ports m1 &&& normalized_src_ports m2) &&&\n      normalized_dst_ports m1 &&&\n      normalized_dst_ports m2 &&& normalized_src_ips m1) &&&\n     (normalized_src_ips m2 &&& normalized_dst_ips m1) &&&\n     normalized_dst_ips m2 &&&\n     normalized_ifaces m1 &&& normalized_ifaces m2) &&&\n    ((\\<not> has_disc is_L4_Flags m1 &&& \\<not> has_disc is_L4_Flags m2) &&&\n     \\<not> has_disc is_CT_State m1 &&&\n     \\<not> has_disc is_CT_State m2 &&&\n     \\<not> has_disc is_MultiportPorts m1) &&&\n    (\\<not> has_disc is_MultiportPorts m2 &&&\n     \\<not> has_disc is_Extra m1) &&&\n    \\<not> has_disc is_Extra m2 &&&\n    normalized_protocols m1 &&& normalized_protocols m2", "by(simp_all add: normalized_protocols_def normalized_ifaces_def)"], ["proof (state)\nthis:\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "{"], ["proof (state)\nthis:\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "assume caseNone: ?caseNone"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) = None\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "{"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) = None\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "fix sm1 sm2"], ["proof (state)\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "assume sm1: \"common_primitive_match_to_simple_match m1 = Some sm1\"\n           and sm2: \"common_primitive_match_to_simple_match m2 = Some sm2\"\n           and sma: \"simple_match_and sm1 sm2 = None\""], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match m1 = Some sm1\n  common_primitive_match_to_simple_match m2 = Some sm2\n  simple_match_and sm1 sm2 = None\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from sma"], ["proof (chain)\npicking this:\n  simple_match_and sm1 sm2 = None", "have 1: \"\\<not> (simple_matches sm1 p \\<and> simple_matches sm2 p)\""], ["proof (prove)\nusing this:\n  simple_match_and sm1 sm2 = None\n\ngoal (1 subgoal):\n 1. \\<not> (simple_matches sm1 p \\<and> simple_matches sm2 p)", "by (simp add: simple_match_and_correct)"], ["proof (state)\nthis:\n  \\<not> (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from normalized sm1 sm2 \"13.IH\""], ["proof (chain)\npicking this:\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n  common_primitive_match_to_simple_match m1 = Some sm1\n  common_primitive_match_to_simple_match m2 = Some sm2\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)", "have 2: \"(matches (common_matcher, \\<alpha>) m1 a p \\<longleftrightarrow> simple_matches sm1 p) \\<and> \n                              (matches (common_matcher, \\<alpha>) m2 a p \\<longleftrightarrow> simple_matches sm2 p)\""], ["proof (prove)\nusing this:\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n  common_primitive_match_to_simple_match m1 = Some sm1\n  common_primitive_match_to_simple_match m2 = Some sm2\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n    matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p", "by force"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n  matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "hence 2: \"matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p \\<longleftrightarrow> simple_matches sm1 p \\<and> simple_matches sm2 p\""], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n  matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n    (simple_matches sm1 p \\<and> simple_matches sm2 p)", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from 1 2"], ["proof (chain)\npicking this:\n  \\<not> (simple_matches sm1 p \\<and> simple_matches sm2 p)\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)", "have \"\\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\""], ["proof (prove)\nusing this:\n  \\<not> (simple_matches sm1 p \\<and> simple_matches sm2 p)\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (1 subgoal):\n 1. \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "by blast"], ["proof (state)\nthis:\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "}"], ["proof (state)\nthis:\n  \\<lbrakk>common_primitive_match_to_simple_match m1 = Some ?sm1.2;\n   common_primitive_match_to_simple_match m2 = Some ?sm2.2;\n   simple_match_and ?sm1.2 ?sm2.2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "with caseNone"], ["proof (chain)\npicking this:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) = None\n  \\<lbrakk>common_primitive_match_to_simple_match m1 = Some ?sm1.2;\n   common_primitive_match_to_simple_match m2 = Some ?sm2.2;\n   simple_match_and ?sm1.2 ?sm2.2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p", "have \"common_primitive_match_to_simple_match m1 = None \\<or>\n                          common_primitive_match_to_simple_match m2 = None \\<or>\n                          \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\""], ["proof (prove)\nusing this:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) = None\n  \\<lbrakk>common_primitive_match_to_simple_match m1 = Some ?sm1.2;\n   common_primitive_match_to_simple_match m2 = Some ?sm2.2;\n   simple_match_and ?sm1.2 ?sm2.2 = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p\n\ngoal (1 subgoal):\n 1. common_primitive_match_to_simple_match m1 = None \\<or>\n    common_primitive_match_to_simple_match m2 = None \\<or>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "by(simp split:option.split_asm)"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match m1 = None \\<or>\n  common_primitive_match_to_simple_match m2 = None \\<or>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "hence \"\\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\""], ["proof (prove)\nusing this:\n  common_primitive_match_to_simple_match m1 = None \\<or>\n  common_primitive_match_to_simple_match m2 = None \\<or>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (1 subgoal):\n 1. \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "apply(elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. common_primitive_match_to_simple_match m1 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n 2. common_primitive_match_to_simple_match m2 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n 3. \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a\n            p \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. common_primitive_match_to_simple_match m1 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n 2. common_primitive_match_to_simple_match m2 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "using \"13.IH\" normalized"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n\ngoal (2 subgoals):\n 1. common_primitive_match_to_simple_match m1 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n 2. common_primitive_match_to_simple_match m2 = None \\<Longrightarrow>\n    \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "by(simp add: bunch_of_lemmata_about_matches)+"], ["proof (state)\nthis:\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "}"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n  None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "note caseNone=this"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n  None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "{"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n  None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "assume caseSome: ?caseSome"], ["proof (state)\nthis:\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "hence \"\\<exists> sm1. common_primitive_match_to_simple_match m1 = Some sm1\" and\n            \"\\<exists> sm2. common_primitive_match_to_simple_match m2 = Some sm2\""], ["proof (prove)\nusing this:\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n\ngoal (1 subgoal):\n 1. \\<exists>sm1. common_primitive_match_to_simple_match m1 = Some sm1 &&&\n    \\<exists>sm2. common_primitive_match_to_simple_match m2 = Some sm2", "by(simp_all split: option.split_asm)"], ["proof (state)\nthis:\n  \\<exists>sm1. common_primitive_match_to_simple_match m1 = Some sm1\n  \\<exists>sm2. common_primitive_match_to_simple_match m2 = Some sm2\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<exists>sm1. common_primitive_match_to_simple_match m1 = Some sm1\n  \\<exists>sm2. common_primitive_match_to_simple_match m2 = Some sm2", "obtain sm1 sm2 where sm1: \"Some sm1 = common_primitive_match_to_simple_match m1\"\n                                 and sm2: \"Some sm2 = common_primitive_match_to_simple_match m2\""], ["proof (prove)\nusing this:\n  \\<exists>sm1. common_primitive_match_to_simple_match m1 = Some sm1\n  \\<exists>sm2. common_primitive_match_to_simple_match m2 = Some sm2\n\ngoal (1 subgoal):\n 1. (\\<And>sm1 sm2.\n        \\<lbrakk>Some sm1 = common_primitive_match_to_simple_match m1;\n         Some sm2 = common_primitive_match_to_simple_match m2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  Some sm1 = common_primitive_match_to_simple_match m1\n  Some sm2 = common_primitive_match_to_simple_match m2\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "with \"13.IH\" normalized"], ["proof (chain)\npicking this:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n  Some sm1 = common_primitive_match_to_simple_match m1\n  Some sm2 = common_primitive_match_to_simple_match m2", "have \"matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n                    matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_src_ports m1; normalized_dst_ports m1;\n   normalized_src_ips m1; normalized_dst_ips m1; normalized_ifaces m1;\n   normalized_protocols m1; \\<not> has_disc is_L4_Flags m1;\n   \\<not> has_disc is_CT_State m1; \\<not> has_disc is_MultiportPorts m1;\n   \\<not> has_disc is_Extra m1\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m1 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m1 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m1 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m1 a p)\n  \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n   normalized_src_ips m2; normalized_dst_ips m2; normalized_ifaces m2;\n   normalized_protocols m2; \\<not> has_disc is_L4_Flags m2;\n   \\<not> has_disc is_CT_State m2; \\<not> has_disc is_MultiportPorts m2;\n   \\<not> has_disc is_Extra m2\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      m2 \\<longrightarrow>\n                     matches (common_matcher, \\<alpha>) m2 a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match m2 =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, \\<alpha>) m2 a p)\n  normalized_src_ports m1\n  normalized_src_ports m2\n  normalized_dst_ports m1\n  normalized_dst_ports m2\n  normalized_src_ips m1\n  normalized_src_ips m2\n  normalized_dst_ips m1\n  normalized_dst_ips m2\n  normalized_ifaces m1\n  normalized_ifaces m2\n  \\<not> has_disc is_L4_Flags m1\n  \\<not> has_disc is_L4_Flags m2\n  \\<not> has_disc is_CT_State m1\n  \\<not> has_disc is_CT_State m2\n  \\<not> has_disc is_MultiportPorts m1\n  \\<not> has_disc is_MultiportPorts m2\n  \\<not> has_disc is_Extra m1\n  \\<not> has_disc is_Extra m2\n  normalized_protocols m1\n  normalized_protocols m2\n  Some sm1 = common_primitive_match_to_simple_match m1\n  Some sm2 = common_primitive_match_to_simple_match m2\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n    matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p", "by simp"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n  matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "hence 1: \"matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p \\<longleftrightarrow> simple_matches sm1 p \\<and> simple_matches sm2 p\""], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm1 p \\<and>\n  matches (common_matcher, \\<alpha>) m2 a p = simple_matches sm2 p\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n    (simple_matches sm1 p \\<and> simple_matches sm2 p)", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from caseSome sm1 sm2"], ["proof (chain)\npicking this:\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n  Some sm1 = common_primitive_match_to_simple_match m1\n  Some sm2 = common_primitive_match_to_simple_match m2", "have \"simple_match_and sm1 sm2 = Some sm\""], ["proof (prove)\nusing this:\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n  Some sm1 = common_primitive_match_to_simple_match m1\n  Some sm2 = common_primitive_match_to_simple_match m2\n\ngoal (1 subgoal):\n 1. simple_match_and sm1 sm2 = Some sm", "by(simp split: option.split_asm)"], ["proof (state)\nthis:\n  simple_match_and sm1 sm2 = Some sm\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "hence 2: \"simple_matches sm p \\<longleftrightarrow> simple_matches sm1 p \\<and> simple_matches sm2 p\""], ["proof (prove)\nusing this:\n  simple_match_and sm1 sm2 = Some sm\n\ngoal (1 subgoal):\n 1. simple_matches sm p = (simple_matches sm1 p \\<and> simple_matches sm2 p)", "by(simp add: simple_match_and_correct)"], ["proof (state)\nthis:\n  simple_matches sm p = (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from 1 2"], ["proof (chain)\npicking this:\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)\n  simple_matches sm p = (simple_matches sm1 p \\<and> simple_matches sm2 p)", "have \"matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p = simple_matches sm p\""], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  (simple_matches sm1 p \\<and> simple_matches sm2 p)\n  simple_matches sm p = (simple_matches sm1 p \\<and> simple_matches sm2 p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n    simple_matches sm p", "by simp"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  simple_matches sm p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "}"], ["proof (state)\nthis:\n  Some sm =\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  simple_matches sm p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "note caseSome=this"], ["proof (state)\nthis:\n  Some sm =\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  simple_matches sm p\n\ngoal (33 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>m1 m2 sm.\n        \\<lbrakk>\\<And>sm.\n                    \\<lbrakk>normalized_src_ports m1;\n                     normalized_dst_ports m1; normalized_src_ips m1;\n                     normalized_dst_ips m1; normalized_ifaces m1;\n                     normalized_protocols m1;\n                     \\<not> has_disc is_L4_Flags m1;\n                     \\<not> has_disc is_CT_State m1;\n                     \\<not> has_disc is_MultiportPorts m1;\n                     \\<not> has_disc is_Extra m1\\<rbrakk>\n                    \\<Longrightarrow> (Some sm =\n common_primitive_match_to_simple_match m1 \\<longrightarrow>\n matches (common_matcher, \\<alpha>) m1 a p = simple_matches sm p) \\<and>\n(common_primitive_match_to_simple_match m1 = None \\<longrightarrow>\n \\<not> matches (common_matcher, \\<alpha>) m1 a p);\n         \\<And>sm.\n            \\<lbrakk>normalized_src_ports m2; normalized_dst_ports m2;\n             normalized_src_ips m2; normalized_dst_ips m2;\n             normalized_ifaces m2; normalized_protocols m2;\n             \\<not> has_disc is_L4_Flags m2; \\<not> has_disc is_CT_State m2;\n             \\<not> has_disc is_MultiportPorts m2;\n             \\<not> has_disc is_Extra m2\\<rbrakk>\n            \\<Longrightarrow> (Some sm =\n                               common_primitive_match_to_simple_match\n                                m2 \\<longrightarrow>\n                               matches (common_matcher, \\<alpha>) m2 a p =\n                               simple_matches sm p) \\<and>\n                              (common_primitive_match_to_simple_match m2 =\n                               None \\<longrightarrow>\n                               \\<not> matches (common_matcher, \\<alpha>) m2\n a p);\n         normalized_src_ports (MatchAnd m1 m2);\n         normalized_dst_ports (MatchAnd m1 m2);\n         normalized_src_ips (MatchAnd m1 m2);\n         normalized_dst_ips (MatchAnd m1 m2);\n         normalized_ifaces (MatchAnd m1 m2);\n         normalized_protocols (MatchAnd m1 m2);\n         \\<not> has_disc is_L4_Flags (MatchAnd m1 m2);\n         \\<not> has_disc is_CT_State (MatchAnd m1 m2);\n         \\<not> has_disc is_MultiportPorts (MatchAnd m1 m2);\n         \\<not> has_disc is_Extra (MatchAnd m1 m2)\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (MatchAnd m1 m2) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (MatchAnd m1 m2) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (MatchAnd m1 m2) a p)\nA total of 33 subgoals...", "from caseNone caseSome"], ["proof (chain)\npicking this:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n  None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n  Some sm =\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  simple_matches sm p", "show ?goal"], ["proof (prove)\nusing this:\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n  None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n  Some sm =\n  common_primitive_match_to_simple_match (MatchAnd m1 m2) \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n  simple_matches sm p\n\ngoal (1 subgoal):\n 1. (Some sm =\n     common_primitive_match_to_simple_match\n      (MatchAnd m1 m2) \\<longrightarrow>\n     matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n     simple_matches sm p) \\<and>\n    (common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n     None \\<longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p)", "by blast"], ["proof (state)\nthis:\n  (Some sm =\n   common_primitive_match_to_simple_match (MatchAnd m1 m2) \\<longrightarrow>\n   matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p =\n   simple_matches sm p) \\<and>\n  (common_primitive_match_to_simple_match (MatchAnd m1 m2) =\n   None \\<longrightarrow>\n   \\<not> matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p)\n\ngoal (32 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot MatchAny);\n        normalized_dst_ports (MatchNot MatchAny);\n        normalized_src_ips (MatchNot MatchAny);\n        normalized_dst_ips (MatchNot MatchAny);\n        normalized_ifaces (MatchNot MatchAny);\n        normalized_protocols (MatchNot MatchAny);\n        \\<not> has_disc is_L4_Flags (MatchNot MatchAny);\n        \\<not> has_disc is_CT_State (MatchNot MatchAny);\n        \\<not> has_disc is_MultiportPorts (MatchNot MatchAny);\n        \\<not> has_disc is_Extra (MatchNot MatchAny)\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot MatchAny) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot MatchAny) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot MatchAny) a p)\n 2. \\<And>iif sm.\n       \\<lbrakk>normalized_src_ports (Match (IIface iif));\n        normalized_dst_ports (Match (IIface iif));\n        normalized_src_ips (Match (IIface iif));\n        normalized_dst_ips (Match (IIface iif));\n        normalized_ifaces (Match (IIface iif));\n        normalized_protocols (Match (IIface iif));\n        \\<not> has_disc is_L4_Flags (Match (IIface iif));\n        \\<not> has_disc is_CT_State (Match (IIface iif));\n        \\<not> has_disc is_MultiportPorts (Match (IIface iif));\n        \\<not> has_disc is_Extra (Match (IIface iif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (IIface iif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (IIface iif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (IIface iif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (IIface iif)) a p)\n 3. \\<And>oif sm.\n       \\<lbrakk>normalized_src_ports (Match (OIface oif));\n        normalized_dst_ports (Match (OIface oif));\n        normalized_src_ips (Match (OIface oif));\n        normalized_dst_ips (Match (OIface oif));\n        normalized_ifaces (Match (OIface oif));\n        normalized_protocols (Match (OIface oif));\n        \\<not> has_disc is_L4_Flags (Match (OIface oif));\n        \\<not> has_disc is_CT_State (Match (OIface oif));\n        \\<not> has_disc is_MultiportPorts (Match (OIface oif));\n        \\<not> has_disc is_Extra (Match (OIface oif))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (OIface oif)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (OIface oif)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (OIface oif)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (OIface oif)) a p)\n 4. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Src (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Src (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Src (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Src (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src (IpAddrNetmask pre len))) a p)\n 5. \\<And>pre len sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ports (Match (Dst (IpAddrNetmask pre len)));\n        normalized_src_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_dst_ips (Match (Dst (IpAddrNetmask pre len)));\n        normalized_ifaces (Match (Dst (IpAddrNetmask pre len)));\n        normalized_protocols (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_L4_Flags (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_CT_State (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Extra\n                (Match (Dst (IpAddrNetmask pre len)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst (IpAddrNetmask pre\n                                    len))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst (IpAddrNetmask pre len))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst (IpAddrNetmask pre len))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst (IpAddrNetmask pre len))) a p)\n 6. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Prot pa));\n        normalized_dst_ports (Match (Prot pa));\n        normalized_src_ips (Match (Prot pa));\n        normalized_dst_ips (Match (Prot pa));\n        normalized_ifaces (Match (Prot pa));\n        normalized_protocols (Match (Prot pa));\n        \\<not> has_disc is_L4_Flags (Match (Prot pa));\n        \\<not> has_disc is_CT_State (Match (Prot pa));\n        \\<not> has_disc is_MultiportPorts (Match (Prot pa));\n        \\<not> has_disc is_Extra (Match (Prot pa))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match (Prot pa)) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Prot pa)) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Prot pa)) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Prot pa)) a p)\n 7. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Src_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Src_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Src_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Src_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Src_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Src_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Src_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Src_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Src_Ports (L4Ports pa []))) a p)\n 8. \\<And>pa sm.\n       \\<lbrakk>normalized_src_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ports (Match (Dst_Ports (L4Ports pa [])));\n        normalized_src_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_dst_ips (Match (Dst_Ports (L4Ports pa [])));\n        normalized_ifaces (Match (Dst_Ports (L4Ports pa [])));\n        normalized_protocols (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_L4_Flags (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_CT_State (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_MultiportPorts\n                (Match (Dst_Ports (L4Ports pa [])));\n        \\<not> has_disc is_Extra\n                (Match (Dst_Ports (L4Ports pa [])))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (Match\n                             (Dst_Ports (L4Ports pa []))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (Match (Dst_Ports (L4Ports pa []))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (Match (Dst_Ports (L4Ports pa []))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (Match (Dst_Ports (L4Ports pa []))) a p)\n 9. \\<And>sm.\n       \\<lbrakk>normalized_src_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ports (MatchNot (Match (Prot ProtoAny)));\n        normalized_src_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_dst_ips (MatchNot (Match (Prot ProtoAny)));\n        normalized_ifaces (MatchNot (Match (Prot ProtoAny)));\n        normalized_protocols (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_L4_Flags (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_CT_State (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_MultiportPorts\n                (MatchNot (Match (Prot ProtoAny)));\n        \\<not> has_disc is_Extra (MatchNot (Match (Prot ProtoAny)))\\<rbrakk>\n       \\<Longrightarrow> (Some sm =\n                          common_primitive_match_to_simple_match\n                           (MatchNot\n                             (Match (Prot ProtoAny))) \\<longrightarrow>\n                          matches (common_matcher, \\<alpha>)\n                           (MatchNot (Match (Prot ProtoAny))) a p =\n                          simple_matches sm p) \\<and>\n                         (common_primitive_match_to_simple_match\n                           (MatchNot (Match (Prot ProtoAny))) =\n                          None \\<longrightarrow>\n                          \\<not> matches (common_matcher, \\<alpha>)\n                                  (MatchNot (Match (Prot ProtoAny))) a p)\n 10. \\<And>uu_ sm.\n        \\<lbrakk>normalized_src_ports (Match (Src (IpAddr uu_)));\n         normalized_dst_ports (Match (Src (IpAddr uu_)));\n         normalized_src_ips (Match (Src (IpAddr uu_)));\n         normalized_dst_ips (Match (Src (IpAddr uu_)));\n         normalized_ifaces (Match (Src (IpAddr uu_)));\n         normalized_protocols (Match (Src (IpAddr uu_)));\n         \\<not> has_disc is_L4_Flags (Match (Src (IpAddr uu_)));\n         \\<not> has_disc is_CT_State (Match (Src (IpAddr uu_)));\n         \\<not> has_disc is_MultiportPorts (Match (Src (IpAddr uu_)));\n         \\<not> has_disc is_Extra (Match (Src (IpAddr uu_)))\\<rbrakk>\n        \\<Longrightarrow> (Some sm =\n                           common_primitive_match_to_simple_match\n                            (Match (Src (IpAddr uu_))) \\<longrightarrow>\n                           matches (common_matcher, \\<alpha>)\n                            (Match (Src (IpAddr uu_))) a p =\n                           simple_matches sm p) \\<and>\n                          (common_primitive_match_to_simple_match\n                            (Match (Src (IpAddr uu_))) =\n                           None \\<longrightarrow>\n                           \\<not> matches (common_matcher, \\<alpha>)\n                                   (Match (Src (IpAddr uu_))) a p)\nA total of 32 subgoals...", "qed(simp_all add: match_iface_simple_match_any_simps simple_matches.simps normalized_protocols_def normalized_ifaces_def, \n      simp_all add: bunch_of_lemmata_about_matches, \n      simp_all add: match_raw_bool ternary_to_bool_bool_to_ternary)"], ["proof (state)\nthis:\n  (Some sm = common_primitive_match_to_simple_match m \\<longrightarrow>\n   matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) \\<and>\n  (common_primitive_match_to_simple_match m = None \\<longrightarrow>\n   \\<not> matches (common_matcher, \\<alpha>) m a p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simple_fw_remdups_Rev: \"simple_fw (remdups_rev rs) p = simple_fw rs p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_fw (remdups_rev rs) p = simple_fw rs p", "apply(induction rs p rule: simple_fw.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uu_. simple_fw (remdups_rev []) uu_ = simple_fw [] uu_\n 2. \\<And>m rs p.\n       (\\<not> simple_matches m p \\<Longrightarrow>\n        simple_fw (remdups_rev rs) p = simple_fw rs p) \\<Longrightarrow>\n       simple_fw (remdups_rev (SimpleRule m simple_action.Accept # rs)) p =\n       simple_fw (SimpleRule m simple_action.Accept # rs) p\n 3. \\<And>m rs p.\n       (\\<not> simple_matches m p \\<Longrightarrow>\n        simple_fw (remdups_rev rs) p = simple_fw rs p) \\<Longrightarrow>\n       simple_fw (remdups_rev (SimpleRule m simple_action.Drop # rs)) p =\n       simple_fw (SimpleRule m simple_action.Drop # rs) p", "apply(simp add: remdups_rev_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m rs p.\n       (\\<not> simple_matches m p \\<Longrightarrow>\n        simple_fw (remdups_rev rs) p = simple_fw rs p) \\<Longrightarrow>\n       simple_fw (remdups_rev (SimpleRule m simple_action.Accept # rs)) p =\n       simple_fw (SimpleRule m simple_action.Accept # rs) p\n 2. \\<And>m rs p.\n       (\\<not> simple_matches m p \\<Longrightarrow>\n        simple_fw (remdups_rev rs) p = simple_fw rs p) \\<Longrightarrow>\n       simple_fw (remdups_rev (SimpleRule m simple_action.Drop # rs)) p =\n       simple_fw (SimpleRule m simple_action.Drop # rs) p", "apply(simp_all add: remdups_rev_fst remdups_rev_removeAll simple_fw_not_matches_removeAll)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun action_to_simple_action :: \"action \\<Rightarrow> simple_action\" where\n  \"action_to_simple_action action.Accept = simple_action.Accept\" |\n  \"action_to_simple_action action.Drop   = simple_action.Drop\" |\n  \"action_to_simple_action _ = undefined\""], ["", "definition check_simple_fw_preconditions :: \"'i::len common_primitive rule list \\<Rightarrow> bool\" where\n  \"check_simple_fw_preconditions rs \\<equiv> \\<forall>r \\<in> set rs. (case r of (Rule m a) \\<Rightarrow>\n      normalized_src_ports m \\<and>\n      normalized_dst_ports m \\<and>\n      normalized_src_ips m \\<and>\n      normalized_dst_ips m \\<and>\n      normalized_ifaces m \\<and> \n      normalized_protocols m \\<and>\n      \\<not> has_disc is_L4_Flags m \\<and>\n      \\<not> has_disc is_CT_State m \\<and>\n      \\<not> has_disc is_MultiportPorts m \\<and>\n      \\<not> has_disc is_Extra m \\<and>\n      (a = action.Accept \\<or> a = action.Drop))\""], ["", "(*apart from MatchNot MatchAny, the normalizations imply nnf*)"], ["", "lemma \"normalized_src_ports m \\<Longrightarrow> normalized_nnf_match m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<Longrightarrow> normalized_nnf_match m", "apply(induction m rule: normalized_src_ports.induct)"], ["proof (prove)\ngoal (29 subgoals):\n 1. normalized_src_ports MatchAny \\<Longrightarrow>\n    normalized_nnf_match MatchAny\n 2. \\<And>uu_.\n       normalized_src_ports\n        (Match (Src_Ports (L4Ports uu_ []))) \\<Longrightarrow>\n       normalized_nnf_match (Match (Src_Ports (L4Ports uu_ [])))\n 3. \\<And>uv_ uw_.\n       normalized_src_ports\n        (Match (Src_Ports (L4Ports uv_ [uw_]))) \\<Longrightarrow>\n       normalized_nnf_match (Match (Src_Ports (L4Ports uv_ [uw_])))\n 4. \\<And>v vb va vd.\n       normalized_src_ports\n        (Match (Src_Ports (L4Ports v (vb # va # vd)))) \\<Longrightarrow>\n       normalized_nnf_match (Match (Src_Ports (L4Ports v (vb # va # vd))))\n 5. \\<And>v.\n       normalized_src_ports (Match (Src v)) \\<Longrightarrow>\n       normalized_nnf_match (Match (Src v))\n 6. \\<And>v.\n       normalized_src_ports (Match (Dst v)) \\<Longrightarrow>\n       normalized_nnf_match (Match (Dst v))\n 7. \\<And>v.\n       normalized_src_ports (Match (IIface v)) \\<Longrightarrow>\n       normalized_nnf_match (Match (IIface v))\n 8. \\<And>v.\n       normalized_src_ports (Match (OIface v)) \\<Longrightarrow>\n       normalized_nnf_match (Match (OIface v))\n 9. \\<And>v.\n       normalized_src_ports (Match (Prot v)) \\<Longrightarrow>\n       normalized_nnf_match (Match (Prot v))\n 10. \\<And>v.\n        normalized_src_ports (Match (Dst_Ports v)) \\<Longrightarrow>\n        normalized_nnf_match (Match (Dst_Ports v))\nA total of 29 subgoals...", "apply(simp_all)[15]"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>v.\n       normalized_src_ports (MatchNot (Match (Src v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (Src v)))\n 2. \\<And>v.\n       normalized_src_ports (MatchNot (Match (Dst v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (Dst v)))\n 3. \\<And>v.\n       normalized_src_ports (MatchNot (Match (IIface v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (IIface v)))\n 4. \\<And>v.\n       normalized_src_ports (MatchNot (Match (OIface v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (OIface v)))\n 5. \\<And>v.\n       normalized_src_ports (MatchNot (Match (Prot v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (Prot v)))\n 6. \\<And>v.\n       normalized_src_ports\n        (MatchNot (Match (Dst_Ports v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (Dst_Ports v)))\n 7. \\<And>v.\n       normalized_src_ports\n        (MatchNot (Match (MultiportPorts v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (MultiportPorts v)))\n 8. \\<And>v.\n       normalized_src_ports\n        (MatchNot (Match (L4_Flags v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (L4_Flags v)))\n 9. \\<And>v.\n       normalized_src_ports\n        (MatchNot (Match (CT_State v))) \\<Longrightarrow>\n       normalized_nnf_match (MatchNot (Match (CT_State v)))\n 10. \\<And>v.\n        normalized_src_ports (MatchNot (Match (Extra v))) \\<Longrightarrow>\n        normalized_nnf_match (MatchNot (Match (Extra v)))\nA total of 14 subgoals...", "oops"], ["", "lemma \"\\<not> matcheq_matchNone m \\<Longrightarrow> normalized_src_ports m \\<Longrightarrow> normalized_nnf_match m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matcheq_matchNone m; normalized_src_ports m\\<rbrakk>\n    \\<Longrightarrow> normalized_nnf_match m", "by(induction m rule: normalized_src_ports.induct) (simp_all)"], ["", "value \"check_simple_fw_preconditions [Rule (MatchNot (MatchNot (MatchNot (Match (Src a))))) action.Accept]\""], ["", "definition to_simple_firewall :: \"'i::len common_primitive rule list \\<Rightarrow> 'i simple_rule list\" where\n  \"to_simple_firewall rs \\<equiv> if check_simple_fw_preconditions rs then\n      List.map_filter (\\<lambda>r. case r of Rule m a \\<Rightarrow> \n        (case (common_primitive_match_to_simple_match m) of None \\<Rightarrow> None |\n                    Some sm \\<Rightarrow> Some (SimpleRule sm (action_to_simple_action a)))) rs\n    else undefined\""], ["", "lemma to_simple_firewall_simps:\n      \"to_simple_firewall [] = []\"\n      \"check_simple_fw_preconditions ((Rule m a)#rs) \\<Longrightarrow> to_simple_firewall ((Rule m a)#rs) = (case common_primitive_match_to_simple_match m of\n          None \\<Rightarrow> to_simple_firewall rs\n          | Some sm \\<Rightarrow> (SimpleRule sm (action_to_simple_action a)) # to_simple_firewall rs)\"\n      \"\\<not> check_simple_fw_preconditions rs' \\<Longrightarrow> to_simple_firewall rs' = undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_simple_firewall [] = [] &&&\n    (check_simple_fw_preconditions (Rule m a # rs) \\<Longrightarrow>\n     to_simple_firewall (Rule m a # rs) =\n     (case common_primitive_match_to_simple_match m of\n      None \\<Rightarrow> to_simple_firewall rs\n      | Some sm \\<Rightarrow>\n          SimpleRule sm (action_to_simple_action a) #\n          to_simple_firewall rs)) &&&\n    (\\<not> check_simple_fw_preconditions rs' \\<Longrightarrow>\n     to_simple_firewall rs' = undefined)", "by(auto simp add: to_simple_firewall_def List.map_filter_simps check_simple_fw_preconditions_def split: option.split)"], ["", "lemma \"check_simple_fw_preconditions\n     [Rule (MatchAnd (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n                          (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n                                    (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n                Drop]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions\n     [Rule\n       (MatchAnd\n         (Match\n           (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n         (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n           (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n       action.Drop]", "by eval"], ["", "lemma \"to_simple_firewall\n     [Rule (MatchAnd (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n                          (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n                                    (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n                Drop] =\n[SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0x7F000000, 8), dst = (0, 0), proto = Proto 6, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_simple_firewall\n     [Rule\n       (MatchAnd\n         (Match\n           (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n         (MatchAnd (Match (Dst_Ports (L4Ports TCP [(0, 65535)])))\n           (Match (Src_Ports (L4Ports TCP [(0, 65535)])))))\n       action.Drop] =\n    [SimpleRule\n      \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'',\n         src = (2130706432, 8), dst = (0, 0), proto = Proto 6,\n         sports = (0, 65535), dports = (0, 65535)\\<rparr>\n      simple_action.Drop]", "by eval"], ["", "lemma \"check_simple_fw_preconditions [Rule (MatchAnd MatchAny MatchAny) Drop]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions\n     [Rule (MatchAnd MatchAny MatchAny) action.Drop]", "by(simp add: check_simple_fw_preconditions_def normalized_ifaces_def normalized_protocols_def)"], ["", "lemma \"to_simple_firewall [Rule (MatchAnd MatchAny (MatchAny::32 common_primitive match_expr)) Drop] =\n  [SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0, 0), dst = (0, 0), proto = ProtoAny, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_simple_firewall [Rule (MatchAnd MatchAny MatchAny) action.Drop] =\n    [SimpleRule\n      \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0, 0),\n         dst = (0, 0), proto = ProtoAny, sports = (0, 65535),\n         dports = (0, 65535)\\<rparr>\n      simple_action.Drop]", "by eval"], ["", "lemma \"to_simple_firewall [Rule (Match (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8))) Drop] =\n[SimpleRule\n   \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'', src = (0x7F000000, 8), dst = (0, 0), proto = ProtoAny, sports = (0, 0xFFFF),\n      dports = (0, 0xFFFF)\\<rparr>\n   simple_action.Drop]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_simple_firewall\n     [Rule\n       (Match\n         (Src (IpAddrNetmask (ipv4addr_of_dotdecimal (127, 0, 0, 0)) 8)))\n       action.Drop] =\n    [SimpleRule\n      \\<lparr>iiface = Iface ''+'', oiface = Iface ''+'',\n         src = (2130706432, 8), dst = (0, 0), proto = ProtoAny,\n         sports = (0, 65535), dports = (0, 65535)\\<rparr>\n      simple_action.Drop]", "by eval"], ["", "theorem to_simple_firewall: \"check_simple_fw_preconditions rs \\<Longrightarrow> approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided = simple_fw (to_simple_firewall rs) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions rs \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n    simple_fw (to_simple_firewall rs) p", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. check_simple_fw_preconditions [] \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p [] Undecided =\n    simple_fw (to_simple_firewall []) p\n 2. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "case Nil"], ["proof (state)\nthis:\n  check_simple_fw_preconditions []\n\ngoal (2 subgoals):\n 1. check_simple_fw_preconditions [] \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p [] Undecided =\n    simple_fw (to_simple_firewall []) p\n 2. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "thus ?case"], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions []\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (common_matcher, \\<alpha>) p [] Undecided =\n    simple_fw (to_simple_firewall []) p", "by(simp add: to_simple_firewall_simps)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p [] Undecided =\n  simple_fw (to_simple_firewall []) p\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "case (Cons r rs)"], ["proof (state)\nthis:\n  check_simple_fw_preconditions rs \\<Longrightarrow>\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n  simple_fw (to_simple_firewall rs) p\n  check_simple_fw_preconditions (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "from Cons"], ["proof (chain)\npicking this:\n  check_simple_fw_preconditions rs \\<Longrightarrow>\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n  simple_fw (to_simple_firewall rs) p\n  check_simple_fw_preconditions (r # rs)", "have IH: \"approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided = simple_fw (to_simple_firewall rs) p\""], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions rs \\<Longrightarrow>\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n  simple_fw (to_simple_firewall rs) p\n  check_simple_fw_preconditions (r # rs)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n    simple_fw (to_simple_firewall rs) p", "by(simp add: check_simple_fw_preconditions_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p rs Undecided =\n  simple_fw (to_simple_firewall rs) p\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "obtain m a where r: \"r = Rule m a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m a. r = Rule m a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases r, simp)"], ["proof (state)\nthis:\n  r = Rule m a\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "from Cons.prems"], ["proof (chain)\npicking this:\n  check_simple_fw_preconditions (r # rs)", "have \"check_simple_fw_preconditions [r]\""], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions (r # rs)\n\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions [r]", "by(simp add: check_simple_fw_preconditions_def)"], ["proof (state)\nthis:\n  check_simple_fw_preconditions [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "with r common_primitive_match_to_simple_match[where p = p]"], ["proof (chain)\npicking this:\n  r = Rule m a\n  \\<lbrakk>normalized_src_ports ?m; normalized_dst_ports ?m;\n   normalized_src_ips ?m; normalized_dst_ips ?m; normalized_ifaces ?m;\n   normalized_protocols ?m; \\<not> has_disc is_L4_Flags ?m;\n   \\<not> has_disc is_CT_State ?m; \\<not> has_disc is_MultiportPorts ?m;\n   \\<not> has_disc is_Extra ?m\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      ?m \\<longrightarrow>\n                     matches (common_matcher, ?\\<alpha>) ?m ?a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match ?m =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, ?\\<alpha>) ?m ?a p)\n  check_simple_fw_preconditions [r]", "have match: \"\\<And> sm. common_primitive_match_to_simple_match m = Some sm \\<Longrightarrow> matches (common_matcher, \\<alpha>) m a p = simple_matches sm p\" and\n         nomatch: \"common_primitive_match_to_simple_match m = None \\<Longrightarrow> \\<not> matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\nusing this:\n  r = Rule m a\n  \\<lbrakk>normalized_src_ports ?m; normalized_dst_ports ?m;\n   normalized_src_ips ?m; normalized_dst_ips ?m; normalized_ifaces ?m;\n   normalized_protocols ?m; \\<not> has_disc is_L4_Flags ?m;\n   \\<not> has_disc is_CT_State ?m; \\<not> has_disc is_MultiportPorts ?m;\n   \\<not> has_disc is_Extra ?m\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      ?m \\<longrightarrow>\n                     matches (common_matcher, ?\\<alpha>) ?m ?a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match ?m =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, ?\\<alpha>) ?m ?a p)\n  check_simple_fw_preconditions [r]\n\ngoal (1 subgoal):\n 1. (\\<And>sm.\n        common_primitive_match_to_simple_match m = Some sm \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) &&&\n    (common_primitive_match_to_simple_match m = None \\<Longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "unfolding check_simple_fw_preconditions_def"], ["proof (prove)\nusing this:\n  r = Rule m a\n  \\<lbrakk>normalized_src_ports ?m; normalized_dst_ports ?m;\n   normalized_src_ips ?m; normalized_dst_ips ?m; normalized_ifaces ?m;\n   normalized_protocols ?m; \\<not> has_disc is_L4_Flags ?m;\n   \\<not> has_disc is_CT_State ?m; \\<not> has_disc is_MultiportPorts ?m;\n   \\<not> has_disc is_Extra ?m\\<rbrakk>\n  \\<Longrightarrow> (Some ?sm =\n                     common_primitive_match_to_simple_match\n                      ?m \\<longrightarrow>\n                     matches (common_matcher, ?\\<alpha>) ?m ?a p =\n                     simple_matches ?sm p) \\<and>\n                    (common_primitive_match_to_simple_match ?m =\n                     None \\<longrightarrow>\n                     \\<not> matches (common_matcher, ?\\<alpha>) ?m ?a p)\n  \\<forall>r\\<in>set [r].\n     case r of\n     Rule m a \\<Rightarrow>\n       normalized_src_ports m \\<and>\n       normalized_dst_ports m \\<and>\n       normalized_src_ips m \\<and>\n       normalized_dst_ips m \\<and>\n       normalized_ifaces m \\<and>\n       normalized_protocols m \\<and>\n       \\<not> has_disc is_L4_Flags m \\<and>\n       \\<not> has_disc is_CT_State m \\<and>\n       \\<not> has_disc is_MultiportPorts m \\<and>\n       \\<not> has_disc is_Extra m \\<and>\n       (a = action.Accept \\<or> a = action.Drop)\n\ngoal (1 subgoal):\n 1. (\\<And>sm.\n        common_primitive_match_to_simple_match m = Some sm \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) m a p = simple_matches sm p) &&&\n    (common_primitive_match_to_simple_match m = None \\<Longrightarrow>\n     \\<not> matches (common_matcher, \\<alpha>) m a p)", "by simp_all"], ["proof (state)\nthis:\n  common_primitive_match_to_simple_match m = Some ?sm \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) m a p = simple_matches ?sm p\n  common_primitive_match_to_simple_match m = None \\<Longrightarrow>\n  \\<not> matches (common_matcher, \\<alpha>) m a p\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "from to_simple_firewall_simps r Cons.prems"], ["proof (chain)\npicking this:\n  to_simple_firewall [] = []\n  check_simple_fw_preconditions (Rule ?m ?a # ?rs) \\<Longrightarrow>\n  to_simple_firewall (Rule ?m ?a # ?rs) =\n  (case common_primitive_match_to_simple_match ?m of\n   None \\<Rightarrow> to_simple_firewall ?rs\n   | Some sm \\<Rightarrow>\n       SimpleRule sm (action_to_simple_action ?a) # to_simple_firewall ?rs)\n  \\<not> check_simple_fw_preconditions ?rs' \\<Longrightarrow>\n  to_simple_firewall ?rs' = undefined\n  r = Rule m a\n  check_simple_fw_preconditions (r # rs)", "have to_simple_firewall_simps': \"to_simple_firewall (Rule m a # rs) =\n        (case common_primitive_match_to_simple_match m of None \\<Rightarrow> to_simple_firewall rs\n                       | Some sm \\<Rightarrow> SimpleRule sm (action_to_simple_action a) # to_simple_firewall rs)\""], ["proof (prove)\nusing this:\n  to_simple_firewall [] = []\n  check_simple_fw_preconditions (Rule ?m ?a # ?rs) \\<Longrightarrow>\n  to_simple_firewall (Rule ?m ?a # ?rs) =\n  (case common_primitive_match_to_simple_match ?m of\n   None \\<Rightarrow> to_simple_firewall ?rs\n   | Some sm \\<Rightarrow>\n       SimpleRule sm (action_to_simple_action ?a) # to_simple_firewall ?rs)\n  \\<not> check_simple_fw_preconditions ?rs' \\<Longrightarrow>\n  to_simple_firewall ?rs' = undefined\n  r = Rule m a\n  check_simple_fw_preconditions (r # rs)\n\ngoal (1 subgoal):\n 1. to_simple_firewall (Rule m a # rs) =\n    (case common_primitive_match_to_simple_match m of\n     None \\<Rightarrow> to_simple_firewall rs\n     | Some sm \\<Rightarrow>\n         SimpleRule sm (action_to_simple_action a) # to_simple_firewall rs)", "by simp"], ["proof (state)\nthis:\n  to_simple_firewall (Rule m a # rs) =\n  (case common_primitive_match_to_simple_match m of\n   None \\<Rightarrow> to_simple_firewall rs\n   | Some sm \\<Rightarrow>\n       SimpleRule sm (action_to_simple_action a) # to_simple_firewall rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "from \\<open>check_simple_fw_preconditions [r]\\<close>"], ["proof (chain)\npicking this:\n  check_simple_fw_preconditions [r]", "have \"a = action.Accept \\<or> a = action.Drop\""], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions [r]\n\ngoal (1 subgoal):\n 1. a = action.Accept \\<or> a = action.Drop", "by(simp add: r check_simple_fw_preconditions_def)"], ["proof (state)\nthis:\n  a = action.Accept \\<or> a = action.Drop\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>check_simple_fw_preconditions rs \\<Longrightarrow>\n                approximating_bigstep_fun (common_matcher, \\<alpha>) p rs\n                 Undecided =\n                simple_fw (to_simple_firewall rs) p;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun\n                          (common_matcher, \\<alpha>) p (a # rs) Undecided =\n                         simple_fw (to_simple_firewall (a # rs)) p", "thus ?case"], ["proof (prove)\nusing this:\n  a = action.Accept \\<or> a = action.Drop\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (common_matcher, \\<alpha>) p (r # rs)\n     Undecided =\n    simple_fw (to_simple_firewall (r # rs)) p", "by(auto simp add: r to_simple_firewall_simps' IH match nomatch split: option.split action.split)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p (r # rs)\n   Undecided =\n  simple_fw (to_simple_firewall (r # rs)) p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ctstate_assume_new_not_has_CT_State:\n  \"r \\<in> set (ctstate_assume_new rs) \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (ctstate_assume_new rs) \\<Longrightarrow>\n    \\<not> has_disc is_CT_State (get_match r)", "apply(simp add: ctstate_assume_new_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                  rs) \\<Longrightarrow>\n    \\<not> has_disc is_CT_State (get_match r)", "apply(induction rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                  []) \\<Longrightarrow>\n    \\<not> has_disc is_CT_State (get_match r)\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                              rs) \\<Longrightarrow>\n                \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                      (a # rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)", "apply(simp add: optimize_matches_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                              rs) \\<Longrightarrow>\n                \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches (ctstate_assume_state CT_New)\n                      (a # rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)", "apply(simp add: optimize_matches_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches_option\n                      (\\<lambda>m.\n                          if matcheq_matchNone\n                              (ctstate_assume_state CT_New m)\n                          then None\n                          else Some (ctstate_assume_state CT_New m))\n                      (a # rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)", "apply(rename_tac r' rs, case_tac r')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r' rs x1 x2.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches_option\n                      (\\<lambda>m.\n                          if matcheq_matchNone\n                              (ctstate_assume_state CT_New m)\n                          then None\n                          else Some (ctstate_assume_state CT_New m))\n                      (r' # rs));\n        r' = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r' rs x1 x2.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches_option\n                      (\\<lambda>m.\n                          if matcheq_matchNone\n                              (ctstate_assume_state CT_New m)\n                          then None\n                          else Some (ctstate_assume_state CT_New m))\n                      (Rule x1 x2 # rs));\n        has_disc is_CT_State (get_match r)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add:  split:if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs x1 x2.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                False;\n        has_disc is_CT_State (get_match r);\n        \\<not> matcheq_matchNone (ctstate_assume_state CT_New x1);\n        r = Rule (ctstate_assume_state CT_New x1) x2 \\<or>\n        r \\<in> set (optimize_matches_option\n                      (\\<lambda>m.\n                          if matcheq_matchNone\n                              (ctstate_assume_state CT_New m)\n                          then None\n                          else Some (ctstate_assume_state CT_New m))\n                      rs)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs x1 x2.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                False;\n        has_disc is_CT_State (get_match r);\n        \\<not> matcheq_matchNone (ctstate_assume_state CT_New x1);\n        r = Rule (ctstate_assume_state CT_New x1) x2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>rs x1 x2.\n       \\<lbrakk>r \\<in> set (optimize_matches_option\n                              (\\<lambda>m.\n                                  if matcheq_matchNone\n(ctstate_assume_state CT_New m)\n                                  then None\n                                  else Some (ctstate_assume_state CT_New m))\n                              rs) \\<Longrightarrow>\n                False;\n        has_disc is_CT_State (get_match r);\n        \\<not> matcheq_matchNone (ctstate_assume_state CT_New x1);\n        r \\<in> set (optimize_matches_option\n                      (\\<lambda>m.\n                          if matcheq_matchNone\n                              (ctstate_assume_state CT_New m)\n                          then None\n                          else Some (ctstate_assume_state CT_New m))\n                      rs)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add: not_hasdisc_ctstate_assume_state split:if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>The precondition for the simple firewall can be easily fulfilled.\n      The subset relation is due to abstracting over some primitives (e.g., negated primitives, l4 flags)\\<close>"], ["", "theorem transform_simple_fw_upper:\n  defines \"preprocess rs \\<equiv> upper_closure (optimize_matches abstract_for_simple_firewall (upper_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n  \\<comment> \\<open>the preconditions for the simple firewall are fulfilled, definitely no runtime failure\\<close>\n  shows \"check_simple_fw_preconditions (preprocess rs)\"\n  \\<comment> \\<open>the set of new packets, which are accepted is an overapproximations\\<close>\n  and \"{p. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p}\"\n  \\<comment> \\<open>Fun fact: The theorem holds for a tagged packet. The simple firewall just ignores the tag. \n     You may explicitly untag, if you wish to, but a @{typ \"'i tagged_packet\"} is just an extension of the\n     @{typ \"'i simple_packet\"} used by the simple firewall\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions (preprocess rs) &&&\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw (to_simple_firewall (preprocess rs)) p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "unfolding check_simple_fw_preconditions_def preprocess_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       case r of\n       Rule m a \\<Rightarrow>\n         normalized_src_ports m \\<and>\n         normalized_dst_ports m \\<and>\n         normalized_src_ips m \\<and>\n         normalized_dst_ips m \\<and>\n         normalized_ifaces m \\<and>\n         normalized_protocols m \\<and>\n         \\<not> has_disc is_L4_Flags m \\<and>\n         \\<not> has_disc is_CT_State m \\<and>\n         \\<not> has_disc is_MultiportPorts m \\<and>\n         \\<not> has_disc is_Extra m \\<and>\n         (a = action.Accept \\<or> a = action.Drop) &&&\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "apply(clarify, rename_tac r, case_tac r, rename_tac m a, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "let ?rs2=\"upper_closure (packet_assume_new rs)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "let ?rs3=\"optimize_matches abstract_for_simple_firewall ?rs2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "let ?rs'=\"upper_closure ?rs3\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "let ?\\<gamma>=\"(common_matcher, in_doubt_allow)\n            :: ('i::len common_primitive, ('i, 'a) tagged_packet_scheme) match_tac\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "let ?fw=\"\\<lambda>rs p. approximating_bigstep_fun ?\\<gamma> p rs Undecided\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from packet_assume_new_simple_ruleset[OF simplers]"], ["proof (chain)\npicking this:\n  simple_ruleset (packet_assume_new rs)", "have s1: \"simple_ruleset (packet_assume_new rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset (packet_assume_new rs)", "."], ["proof (state)\nthis:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(2)[OF s1]"], ["proof (chain)\npicking this:\n  simple_ruleset (upper_closure (packet_assume_new rs))", "have s2: \"simple_ruleset ?rs2\""], ["proof (prove)\nusing this:\n  simple_ruleset (upper_closure (packet_assume_new rs))\n\ngoal (1 subgoal):\n 1. simple_ruleset (upper_closure (packet_assume_new rs))", "."], ["proof (state)\nthis:\n  simple_ruleset (upper_closure (packet_assume_new rs))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from s2"], ["proof (chain)\npicking this:\n  simple_ruleset (upper_closure (packet_assume_new rs))", "have s3: \"simple_ruleset ?rs3\""], ["proof (prove)\nusing this:\n  simple_ruleset (upper_closure (packet_assume_new rs))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs)))", "by (simp add: optimize_matches_simple_ruleset)"], ["proof (state)\nthis:\n  simple_ruleset\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(2)[OF s3]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))", "have s4: \"simple_ruleset ?rs'\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (upper_closure\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure (packet_assume_new rs))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(3)[OF s1]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have nnf2:\n      \"\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)). normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "{"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "fix m a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "assume r: \"Rule m a \\<in> set ?rs'\""], ["proof (state)\nthis:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from s4 r"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))", "have a: \"(a = action.Accept \\<or> a = action.Drop)\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. a = action.Accept \\<or> a = action.Drop", "by(auto simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = action.Accept \\<or> a = action.Drop\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "have \"r \\<in> set (packet_assume_new rs) \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)\" for r"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n    \\<not> has_disc is_CT_State (get_match r)", "by(simp add: packet_assume_new_def ctstate_assume_new_not_has_CT_State)"], ["proof (state)\nthis:\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with transform_upper_closure(4)[OF s1, where disc=is_CT_State]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (packet_assume_new rs).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (packet_assume_new rs)).\n                       \\<not> has_disc is_CT_State (get_match r)\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)", "have\n      \"\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)). \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (packet_assume_new rs).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (packet_assume_new rs)).\n                       \\<not> has_disc is_CT_State (get_match r)\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n       \\<not> has_disc is_CT_State (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with abstract_primitive_preserves_nodisc[where disc'=\"is_CT_State\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)", "have \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc is_CT_State (get_match r)", "apply(intro optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<And>m disc.\n                   \\<lbrakk>\\<not> has_disc is_CT_State m;\n                    \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> has_disc is_CT_State\n       (abstract_primitive disc m);\n        \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n           \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with transform_upper_closure(4)[OF s3, where disc=is_CT_State]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)", "have\n      \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc is_CT_State (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)", "have no_CT: \"\\<not> has_disc is_CT_State m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_CT_State m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from abstract_for_simple_firewall_hasdisc"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)", "have \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by(intro optimize_matches_preserves, auto)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with transform_upper_closure(4)[OF s3, where disc=is_L4_Flags]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have\n      \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have no_L4_Flags: \"\\<not> has_disc is_L4_Flags m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_L4_Flags m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_L4_Flags m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from nnf2 abstract_for_simple_firewall_negated_ifaces_prots"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          (abstract_for_simple_firewall ?m)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)", "have\n      ifaces: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False (get_match r)\" and\n      protocols_rs3: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          (abstract_for_simple_firewall ?m)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by(intro optimize_matches_preserves, blast)+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from ifaces"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)", "have iface_in:  \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Iiface False (get_match r)\" and\n                     iface_out: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Oiface False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "using has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n  has_disc_negated (\\<lambda>a. ?P a \\<or> ?Q a) ?neg ?m =\n  (has_disc_negated ?P ?neg ?m \\<or> has_disc_negated ?Q ?neg ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "by blast+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(3)[OF s3]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have \"\\<forall>r\\<in>set ?rs'.\n     normalized_nnf_match (get_match r) \\<and> normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and> normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and> \n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and> \\<not> has_disc is_Extra (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       normalized_nnf_match (get_match r) \\<and>\n       normalized_src_ports (get_match r) \\<and>\n       normalized_dst_ports (get_match r) \\<and>\n       normalized_src_ips (get_match r) \\<and>\n       normalized_dst_ips (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n       \\<not> has_disc is_Extra (get_match r)", "."], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have normalized:\n      \"normalized_src_ports m \\<and> normalized_dst_ports m \\<and>\n      normalized_src_ips m \\<and> normalized_dst_ips m \\<and> \n      \\<not> has_disc is_MultiportPorts m & \\<not> has_disc is_Extra m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m", "by fastforce"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "(*things are complicated because upper closure could introduce negated protocols.\n      should not happen if we don't have negated ports in it *)"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(5)[OF s3] iface_in iface_out"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> ?disc (Src_Ports a);\n   \\<forall>a. \\<not> ?disc (Dst_Ports a); \\<forall>a. \\<not> ?disc (Src a);\n   \\<forall>a. \\<not> ?disc (Dst a);\n   \\<forall>a. \\<not> ?disc (IIface a) \\<or> ?disc = is_Iiface;\n   \\<forall>a. \\<not> ?disc (OIface a) \\<or> ?disc = is_Oiface;\n   (\\<forall>a. \\<not> ?disc (Prot a)) \\<or>\n   ?disc = is_Prot \\<and>\n   (\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r));\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated ?disc False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated ?disc False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)", "have \"\\<forall>r\\<in>set ?rs'.\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and> \\<not> has_disc_negated is_Oiface False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> ?disc (Src_Ports a);\n   \\<forall>a. \\<not> ?disc (Dst_Ports a); \\<forall>a. \\<not> ?disc (Src a);\n   \\<forall>a. \\<not> ?disc (Dst a);\n   \\<forall>a. \\<not> ?disc (IIface a) \\<or> ?disc = is_Iiface;\n   \\<forall>a. \\<not> ?disc (OIface a) \\<or> ?disc = is_Oiface;\n   (\\<forall>a. \\<not> ?disc (Prot a)) \\<or>\n   ?disc = is_Prot \\<and>\n   (\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r));\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated ?disc False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated ?disc False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "(*500ms*)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)", "have abstracted_ifaces: \"normalized_ifaces m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_ifaces m", "unfolding normalized_ifaces_def has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> (has_disc_negated is_Iiface False m \\<or>\n            has_disc_negated is_Oiface False m)", "by fastforce"], ["proof (state)\nthis:\n  normalized_ifaces m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from transform_upper_closure(3)[OF s1]\n      normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(1)]\n      normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(2)]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m", "have \"\\<forall>r\\<in> set ?rs2. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                        \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                        \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(simp add: normalized_src_ports_def2 normalized_dst_ports_def2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                normalized_nnf_match (get_match r) \\<and>\n                normalized_n_primitive (is_Src_Ports, src_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_n_primitive (is_Dst_Ports, dst_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_src_ips (get_match r) \\<and>\n                normalized_dst_ips (get_match r) \\<and>\n                \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n                \\<not> has_disc is_Extra (get_match r);\n     \\<And>f m.\n        normalized_n_primitive (is_Src_Ports, src_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Src_Ports False m;\n     \\<And>f m.\n        normalized_n_primitive (is_Dst_Ports, dst_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Dst_Ports False m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set\n(upper_closure (packet_assume_new rs)).\n                         \\<not> has_disc_negated is_Src_Ports False\n                                 (get_match r) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (get_match r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from this"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)", "have \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                                 \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                                 \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(rule optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 2. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 3. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro abstract_for_simple_firewall_preserves_nodisc_negated, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "by (simp add: abstract_for_simple_firewall_def abstract_primitive_preserves_nodisc)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from this protocols_rs3 transform_upper_closure(5)[OF s3, where disc=is_Prot, simplified]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n  \\<lbrakk>\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                                (upper_closure (packet_assume_new rs))).\n              \\<not> has_disc_negated is_Src_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc_negated is_Dst_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc is_MultiportPorts (get_match r);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated is_Prot False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated is_Prot False (get_match r)", "have \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n  \\<lbrakk>\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                                (upper_closure (packet_assume_new rs))).\n              \\<not> has_disc_negated is_Src_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc_negated is_Dst_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc is_MultiportPorts (get_match r);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (upper_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated is_Prot False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)", "have abstracted_prots: \"normalized_protocols m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_protocols m", "unfolding normalized_protocols_def has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc_negated is_Prot False m", "by fastforce"], ["proof (state)\nthis:\n  normalized_protocols m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (upper_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from no_CT no_L4_Flags s4 normalized a abstracted_ifaces abstracted_prots"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m", "show \"normalized_src_ports m \\<and>\n             normalized_dst_ports m \\<and>\n             normalized_src_ips m \\<and>\n             normalized_dst_ips m \\<and>\n             normalized_ifaces m \\<and>\n             normalized_protocols m \\<and>\n             \\<not> has_disc is_L4_Flags m \\<and>\n             \\<not> has_disc is_CT_State m \\<and>\n             \\<not> has_disc is_MultiportPorts m \\<and>\n             \\<not> has_disc is_Extra m \\<and> (a = action.Accept \\<or> a = action.Drop)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  simple_ruleset\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    normalized_ifaces m \\<and>\n    normalized_protocols m \\<and>\n    \\<not> has_disc is_L4_Flags m \\<and>\n    \\<not> has_disc is_CT_State m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and>\n    \\<not> has_disc is_Extra m \\<and>\n    (a = action.Accept \\<or> a = action.Drop)", "by(simp)"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  normalized_ifaces m \\<and>\n  normalized_protocols m \\<and>\n  \\<not> has_disc is_L4_Flags m \\<and>\n  \\<not> has_disc is_CT_State m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and>\n  \\<not> has_disc is_Extra m \\<and>\n  (a = action.Accept \\<or> a = action.Drop)\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "}"], ["proof (state)\nthis:\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "hence simple_fw_preconditions: \"check_simple_fw_preconditions ?rs'\""], ["proof (prove)\nusing this:\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions\n     (upper_closure\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure (packet_assume_new rs))))", "unfolding check_simple_fw_preconditions_def"], ["proof (prove)\nusing this:\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches abstract_for_simple_firewall\n                (upper_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))).\n       case r of\n       Rule m a \\<Rightarrow>\n         normalized_src_ports m \\<and>\n         normalized_dst_ports m \\<and>\n         normalized_src_ips m \\<and>\n         normalized_dst_ips m \\<and>\n         normalized_ifaces m \\<and>\n         normalized_protocols m \\<and>\n         \\<not> has_disc is_L4_Flags m \\<and>\n         \\<not> has_disc is_CT_State m \\<and>\n         \\<not> has_disc is_MultiportPorts m \\<and>\n         \\<not> has_disc is_Extra m \\<and>\n         (a = action.Accept \\<or> a = action.Drop)", "by(clarify, rename_tac r, case_tac r, rename_tac m a, simp)"], ["proof (state)\nthis:\n  check_simple_fw_preconditions\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "have 1: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (packet_assume_new\n                 rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           abstract_for_simple_firewall\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_upper_closure(1)[OF s3])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           abstract_for_simple_firewall\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           abstract_for_simple_firewall\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p}", "by simp"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (packet_assume_new\n             rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "from abstract_primitive_in_doubt_allow_generic(2)[OF primitive_matcher_generic_common_matcher nnf2 s2]"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (upper_closure\n                       (packet_assume_new\n                         rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow}", "have 2:\n         \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>upper_closure (packet_assume_new rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (upper_closure\n                       (packet_assume_new\n                         rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow \\<and>\n                    newpkt p}", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     abstract_for_simple_firewall\n                     (upper_closure\n                       (packet_assume_new\n                         rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "have 3: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>upper_closure (packet_assume_new rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_upper_closure(1)[OF s1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF simplers]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "using packet_assume_new newpkt_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p);\n   p_tag_ctstate ?p = CT_New\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (common_matcher, ?\\<alpha>) ?p\n                     (packet_assume_new ?rs) ?s =\n                    approximating_bigstep_fun (common_matcher, ?\\<alpha>) ?p\n                     ?rs ?s\n  newpkt ?p \\<equiv>\n  match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p) \\<and>\n  p_tag_ctstate ?p = CT_New\n\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "by fastforce"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "have 4: \"\\<And>p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<longleftrightarrow> ?fw ?rs' p = Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n          (optimize_matches abstract_for_simple_firewall\n            (upper_closure\n              (packet_assume_new\n                rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (upper_closure\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure (packet_assume_new rs))))\n         Undecided =\n        Decision FinalAllow)", "using approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s4]]"], ["proof (prove)\nusing this:\n  ?\\<gamma>,?p\\<turnstile> \\<langle>upper_closure\n                                     (optimize_matches\n abstract_for_simple_firewall\n (upper_closure\n   (packet_assume_new rs))), ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p\n    (upper_closure\n      (optimize_matches abstract_for_simple_firewall\n        (upper_closure (packet_assume_new rs))))\n    ?s =\n   ?t)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n          (optimize_matches abstract_for_simple_firewall\n            (upper_closure\n              (packet_assume_new\n                rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (upper_closure\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure (packet_assume_new rs))))\n         Undecided =\n        Decision FinalAllow)", "by fast"], ["proof (state)\nthis:\n  (common_matcher,\n   in_doubt_allow),?p\\<turnstile> \\<langle>upper_closure\n      (optimize_matches abstract_for_simple_firewall\n        (upper_closure\n          (packet_assume_new\n            rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_allow) ?p\n    (upper_closure\n      (optimize_matches abstract_for_simple_firewall\n        (upper_closure (packet_assume_new rs))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "have \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (packet_assume_new\n                             rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n         FinalAllow \\<and>\n                    newpkt p}", "apply(subst 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow \\<and>\n                    newpkt p}", "apply(subst 3[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow \\<and>\n                    newpkt p}", "using 2"], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     abstract_for_simple_firewall\n                     (upper_closure\n                       (packet_assume_new\n                         rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow \\<and>\n                    newpkt p}", "by blast"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n       FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "thus \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. simple_fw (to_simple_firewall ?rs') p = Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (packet_assume_new\n                           rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n       FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure (packet_assume_new rs)))))\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalAllow \\<and>\n                    newpkt p}\n                \\<subseteq> {p. (common_matcher,\n                                 in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                   (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (packet_assume_new\n   rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                     FinalAllow \\<and>\n                                newpkt p};\n        (common_matcher,\n         in_doubt_allow),x\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        newpkt x\\<rbrakk>\n       \\<Longrightarrow> simple_fw\n                          (to_simple_firewall\n                            (upper_closure\n                              (optimize_matches abstract_for_simple_firewall\n                                (upper_closure (packet_assume_new rs)))))\n                          x =\n                         Decision FinalAllow", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                (optimize_matches\n                                  abstract_for_simple_firewall\n                                  (upper_closure\n                                    (packet_assume_new\nrs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                  FinalAllow \\<and>\n                             newpkt p};\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> simple_fw\n                       (to_simple_firewall\n                         (upper_closure\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure (packet_assume_new rs)))))\n                       p =\n                      Decision FinalAllow", "using to_simple_firewall[OF simple_fw_preconditions, where p = p] 4"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (common_matcher, ?\\<alpha>) p\n   (upper_closure\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure (packet_assume_new rs))))\n   Undecided =\n  simple_fw\n   (to_simple_firewall\n     (upper_closure\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure (packet_assume_new rs)))))\n   p\n  (common_matcher,\n   in_doubt_allow),?p\\<turnstile> \\<langle>upper_closure\n      (optimize_matches abstract_for_simple_firewall\n        (upper_closure\n          (packet_assume_new\n            rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_allow) ?p\n    (upper_closure\n      (optimize_matches abstract_for_simple_firewall\n        (upper_closure (packet_assume_new rs))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                (optimize_matches\n                                  abstract_for_simple_firewall\n                                  (upper_closure\n                                    (packet_assume_new\nrs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                  FinalAllow \\<and>\n                             newpkt p};\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> simple_fw\n                       (to_simple_firewall\n                         (upper_closure\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure (packet_assume_new rs)))))\n                       p =\n                      Decision FinalAllow", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. simple_fw\n                   (to_simple_firewall\n                     (upper_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure (packet_assume_new rs)))))\n                   p =\n                  Decision FinalAllow \\<and>\n                  newpkt p}\n\ngoal:\nNo subgoals!", "qed"], ["", "(*Copy&paste from transform_simple_fw_upper*)"], ["", "theorem transform_simple_fw_lower:\n  defines \"preprocess rs \\<equiv> lower_closure (optimize_matches abstract_for_simple_firewall (lower_closure (packet_assume_new rs)))\"\n  and \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n  \\<comment> \\<open>the preconditions for the simple firewall are fulfilled, definitely no runtime failure\\<close>\n  shows \"check_simple_fw_preconditions (preprocess rs)\"\n  \\<comment> \\<open>the set of new packets, which are accepted is an underapproximation\\<close>\n  and \"{p. simple_fw (to_simple_firewall (preprocess rs)) p = Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. (common_matcher, in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions (preprocess rs) &&&\n    {p. simple_fw (to_simple_firewall (preprocess rs)) p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "unfolding check_simple_fw_preconditions_def preprocess_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       case r of\n       Rule m a \\<Rightarrow>\n         normalized_src_ports m \\<and>\n         normalized_dst_ports m \\<and>\n         normalized_src_ips m \\<and>\n         normalized_dst_ips m \\<and>\n         normalized_ifaces m \\<and>\n         normalized_protocols m \\<and>\n         \\<not> has_disc is_L4_Flags m \\<and>\n         \\<not> has_disc is_CT_State m \\<and>\n         \\<not> has_disc is_MultiportPorts m \\<and>\n         \\<not> has_disc is_Extra m \\<and>\n         (a = action.Accept \\<or> a = action.Drop) &&&\n    {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "apply(clarify, rename_tac r, case_tac r, rename_tac m a, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "let ?rs2=\"lower_closure (packet_assume_new rs)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "let ?rs3=\"optimize_matches abstract_for_simple_firewall ?rs2\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "let ?rs'=\"lower_closure ?rs3\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "let ?\\<gamma>=\"(common_matcher, in_doubt_deny)\n            :: ('i::len common_primitive, ('i, 'a) tagged_packet_scheme) match_tac\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "let ?fw=\"\\<lambda>rs p. approximating_bigstep_fun ?\\<gamma> p rs Undecided\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from packet_assume_new_simple_ruleset[OF simplers]"], ["proof (chain)\npicking this:\n  simple_ruleset (packet_assume_new rs)", "have s1: \"simple_ruleset (packet_assume_new rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset (packet_assume_new rs)", "."], ["proof (state)\nthis:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(2)[OF s1]"], ["proof (chain)\npicking this:\n  simple_ruleset (lower_closure (packet_assume_new rs))", "have s2: \"simple_ruleset (lower_closure (packet_assume_new rs))\""], ["proof (prove)\nusing this:\n  simple_ruleset (lower_closure (packet_assume_new rs))\n\ngoal (1 subgoal):\n 1. simple_ruleset (lower_closure (packet_assume_new rs))", "."], ["proof (state)\nthis:\n  simple_ruleset (lower_closure (packet_assume_new rs))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from s2"], ["proof (chain)\npicking this:\n  simple_ruleset (lower_closure (packet_assume_new rs))", "have s3: \"simple_ruleset ?rs3\""], ["proof (prove)\nusing this:\n  simple_ruleset (lower_closure (packet_assume_new rs))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs)))", "by (simp add: optimize_matches_simple_ruleset)"], ["proof (state)\nthis:\n  simple_ruleset\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(2)[OF s3]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))", "have s4: \"simple_ruleset ?rs'\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (lower_closure\n       (optimize_matches abstract_for_simple_firewall\n         (lower_closure (packet_assume_new rs))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(3)[OF s1]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have nnf2:\n      \"\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)). normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "{"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "fix m a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "assume r: \"Rule m a \\<in> set ?rs'\""], ["proof (state)\nthis:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from s4 r"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))", "have a: \"(a = action.Accept \\<or> a = action.Drop)\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. a = action.Accept \\<or> a = action.Drop", "by(auto simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = action.Accept \\<or> a = action.Drop\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "have \"r \\<in> set (packet_assume_new rs) \\<Longrightarrow> \\<not> has_disc is_CT_State (get_match r)\" for r"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n    \\<not> has_disc is_CT_State (get_match r)", "by(simp add: packet_assume_new_def ctstate_assume_new_not_has_CT_State)"], ["proof (state)\nthis:\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with transform_lower_closure(4)[OF s1, where disc=is_CT_State]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (packet_assume_new rs).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (packet_assume_new rs)).\n                       \\<not> has_disc is_CT_State (get_match r)\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)", "have\n      \"\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)). \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (packet_assume_new rs).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (packet_assume_new rs)).\n                       \\<not> has_disc is_CT_State (get_match r)\n  ?r \\<in> set (packet_assume_new rs) \\<Longrightarrow>\n  \\<not> has_disc is_CT_State (get_match ?r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n       \\<not> has_disc is_CT_State (get_match r)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with abstract_primitive_preserves_nodisc[where disc'=\"is_CT_State\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)", "have\n      \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc is_CT_State (get_match r)", "apply(intro optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<And>m disc.\n                   \\<lbrakk>\\<not> has_disc is_CT_State m;\n                    \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> has_disc is_CT_State\n       (abstract_primitive disc m);\n        \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n           \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with transform_lower_closure(4)[OF s3, where disc=is_CT_State]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)", "have\n      \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       \\<not> has_disc is_CT_State (get_match r)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)", "have no_CT: \"\\<not> has_disc is_CT_State m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_CT_State m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from abstract_for_simple_firewall_hasdisc"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)", "have \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by(intro optimize_matches_preserves, blast)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with transform_lower_closure(4)[OF s3, where disc=is_L4_Flags]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have\n      \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have no_L4_Flags: \"\\<not> has_disc is_L4_Flags m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_L4_Flags m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_L4_Flags m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from nnf2 abstract_for_simple_firewall_negated_ifaces_prots"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          (abstract_for_simple_firewall ?m)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)", "have\n      ifaces: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False (get_match r)\" and\n      protocols_rs3: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          (abstract_for_simple_firewall ?m)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by(intro optimize_matches_preserves, blast)+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from ifaces"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)", "have iface_in:  \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Iiface False (get_match r)\" and\n                     iface_out: \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Oiface False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "using has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (get_match r)\n  has_disc_negated (\\<lambda>a. ?P a \\<or> ?Q a) ?neg ?m =\n  (has_disc_negated ?P ?neg ?m \\<or> has_disc_negated ?Q ?neg ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) &&&\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "by blast+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(3)[OF s3]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have \"\\<forall>r\\<in>set ?rs'.\n     normalized_nnf_match (get_match r) \\<and> normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and> normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and> \n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and> \\<not> has_disc is_Extra (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       normalized_nnf_match (get_match r) \\<and>\n       normalized_src_ports (get_match r) \\<and>\n       normalized_dst_ports (get_match r) \\<and>\n       normalized_src_ips (get_match r) \\<and>\n       normalized_dst_ips (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n       \\<not> has_disc is_Extra (get_match r)", "."], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have normalized: \"normalized_src_ports m \\<and> normalized_dst_ports m \\<and> normalized_src_ips m \\<and>\n      normalized_dst_ips m \\<and> \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m", "by fastforce"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(5)[OF s3] iface_in iface_out"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> ?disc (Src_Ports a);\n   \\<forall>a. \\<not> ?disc (Dst_Ports a); \\<forall>a. \\<not> ?disc (Src a);\n   \\<forall>a. \\<not> ?disc (Dst a);\n   \\<forall>a. \\<not> ?disc (IIface a) \\<or> ?disc = is_Iiface;\n   \\<forall>a. \\<not> ?disc (OIface a) \\<or> ?disc = is_Oiface;\n   (\\<forall>a. \\<not> ?disc (Prot a)) \\<or>\n   ?disc = is_Prot \\<and>\n   (\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r));\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated ?disc False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated ?disc False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)", "have \"\\<forall>r\\<in>set ?rs'.\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and> \\<not> has_disc_negated is_Oiface False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> ?disc (Src_Ports a);\n   \\<forall>a. \\<not> ?disc (Dst_Ports a); \\<forall>a. \\<not> ?disc (Src a);\n   \\<forall>a. \\<not> ?disc (Dst a);\n   \\<forall>a. \\<not> ?disc (IIface a) \\<or> ?disc = is_Iiface;\n   \\<forall>a. \\<not> ?disc (OIface a) \\<or> ?disc = is_Oiface;\n   (\\<forall>a. \\<not> ?disc (Prot a)) \\<or>\n   ?disc = is_Prot \\<and>\n   (\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r));\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated ?disc False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated ?disc False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Iiface False (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Oiface False (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "(*500ms*)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)", "have abstracted_ifaces: \"normalized_ifaces m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_ifaces m", "unfolding normalized_ifaces_def has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Iiface False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Oiface False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> (has_disc_negated is_Iiface False m \\<or>\n            has_disc_negated is_Oiface False m)", "by fastforce"], ["proof (state)\nthis:\n  normalized_ifaces m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from transform_lower_closure(3)[OF s1]\n      normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(1)]\n      normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(2)]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m", "have \"\\<forall>r\\<in>set ?rs2. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                       \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(simp add: normalized_src_ports_def2 normalized_dst_ports_def2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                normalized_nnf_match (get_match r) \\<and>\n                normalized_n_primitive (is_Src_Ports, src_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_n_primitive (is_Dst_Ports, dst_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_src_ips (get_match r) \\<and>\n                normalized_dst_ips (get_match r) \\<and>\n                \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n                \\<not> has_disc is_Extra (get_match r);\n     \\<And>f m.\n        normalized_n_primitive (is_Src_Ports, src_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Src_Ports False m;\n     \\<And>f m.\n        normalized_n_primitive (is_Dst_Ports, dst_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Dst_Ports False m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set\n(lower_closure (packet_assume_new rs)).\n                         \\<not> has_disc_negated is_Src_Ports False\n                                 (get_match r) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (get_match r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from this"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)", "have \"\\<forall>r\\<in>set ?rs3. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                                 \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                                 \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(rule optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 2. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 3. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro abstract_for_simple_firewall_preserves_nodisc_negated, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (lower_closure (packet_assume_new rs)).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (lower_closure (packet_assume_new rs))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "by (simp add: abstract_for_simple_firewall_def abstract_primitive_preserves_nodisc)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from this protocols_rs3 transform_lower_closure(5)[OF s3, where disc=is_Prot, simplified]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n  \\<lbrakk>\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                                (lower_closure (packet_assume_new rs))).\n              \\<not> has_disc_negated is_Src_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc_negated is_Dst_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc is_MultiportPorts (get_match r);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated is_Prot False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated is_Prot False (get_match r)", "have \"\\<forall>r\\<in>set ?rs'. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (lower_closure (packet_assume_new rs))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n  \\<lbrakk>\\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                                (lower_closure (packet_assume_new rs))).\n              \\<not> has_disc_negated is_Src_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc_negated is_Dst_Ports False\n                      (get_match r) \\<and>\n              \\<not> has_disc is_MultiportPorts (get_match r);\n   \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                        (lower_closure (packet_assume_new rs))).\n      \\<not> has_disc_negated is_Prot False (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (lower_closure\n   (optimize_matches abstract_for_simple_firewall\n     (lower_closure (packet_assume_new rs)))).\n                       \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)", "have abstracted_prots: \"normalized_protocols m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_protocols m", "unfolding normalized_protocols_def has_disc_negated_disj_split"], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs))))\n  \\<forall>r\\<in>set (lower_closure\n                       (optimize_matches abstract_for_simple_firewall\n                         (lower_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc_negated is_Prot False m", "by fastforce"], ["proof (state)\nthis:\n  normalized_protocols m\n\ngoal (2 subgoals):\n 1. \\<And>r m a.\n       \\<lbrakk>Rule m a\n                \\<in> set (lower_closure\n                            (optimize_matches abstract_for_simple_firewall\n                              (lower_closure (packet_assume_new rs))));\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> normalized_src_ports m \\<and>\n                         normalized_dst_ports m \\<and>\n                         normalized_src_ips m \\<and>\n                         normalized_dst_ips m \\<and>\n                         normalized_ifaces m \\<and>\n                         normalized_protocols m \\<and>\n                         \\<not> has_disc is_L4_Flags m \\<and>\n                         \\<not> has_disc is_CT_State m \\<and>\n                         \\<not> has_disc is_MultiportPorts m \\<and>\n                         \\<not> has_disc is_Extra m \\<and>\n                         (a = action.Accept \\<or> a = action.Drop)\n 2. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from no_CT no_L4_Flags s4 normalized a abstracted_ifaces abstracted_prots"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m", "show \"normalized_src_ports m \\<and>\n             normalized_dst_ports m \\<and>\n             normalized_src_ips m \\<and>\n             normalized_dst_ips m \\<and>\n             normalized_ifaces m \\<and>\n             normalized_protocols m \\<and> \\<not> has_disc is_L4_Flags m \\<and> \\<not> has_disc is_CT_State m \\<and> \n             \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m \\<and> (a = action.Accept \\<or> a = action.Drop)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  simple_ruleset\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    normalized_ifaces m \\<and>\n    normalized_protocols m \\<and>\n    \\<not> has_disc is_L4_Flags m \\<and>\n    \\<not> has_disc is_CT_State m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and>\n    \\<not> has_disc is_Extra m \\<and>\n    (a = action.Accept \\<or> a = action.Drop)", "by(simp)"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  normalized_ifaces m \\<and>\n  normalized_protocols m \\<and>\n  \\<not> has_disc is_L4_Flags m \\<and>\n  \\<not> has_disc is_CT_State m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and>\n  \\<not> has_disc is_Extra m \\<and>\n  (a = action.Accept \\<or> a = action.Drop)\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "}"], ["proof (state)\nthis:\n  Rule ?m2 ?a2\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "hence simple_fw_preconditions: \"check_simple_fw_preconditions ?rs'\""], ["proof (prove)\nusing this:\n  Rule ?m2 ?a2\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions\n     (lower_closure\n       (optimize_matches abstract_for_simple_firewall\n         (lower_closure (packet_assume_new rs))))", "unfolding check_simple_fw_preconditions_def"], ["proof (prove)\nusing this:\n  Rule ?m2 ?a2\n  \\<in> set (lower_closure\n              (optimize_matches abstract_for_simple_firewall\n                (lower_closure (packet_assume_new rs)))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (lower_closure\n                         (optimize_matches abstract_for_simple_firewall\n                           (lower_closure (packet_assume_new rs)))).\n       case r of\n       Rule m a \\<Rightarrow>\n         normalized_src_ports m \\<and>\n         normalized_dst_ports m \\<and>\n         normalized_src_ips m \\<and>\n         normalized_dst_ips m \\<and>\n         normalized_ifaces m \\<and>\n         normalized_protocols m \\<and>\n         \\<not> has_disc is_L4_Flags m \\<and>\n         \\<not> has_disc is_CT_State m \\<and>\n         \\<not> has_disc is_MultiportPorts m \\<and>\n         \\<not> has_disc is_Extra m \\<and>\n         (a = action.Accept \\<or> a = action.Drop)", "by(clarify, rename_tac r, case_tac r, rename_tac m a, simp)"], ["proof (state)\nthis:\n  check_simple_fw_preconditions\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "have 1: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n          (optimize_matches abstract_for_simple_firewall\n            (lower_closure\n              (packet_assume_new\n                rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_lower_closure(1)[OF s3])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}", "by simp"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n        (optimize_matches abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n        abstract_for_simple_firewall\n        (lower_closure\n          (packet_assume_new\n            rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "from abstract_primitive_in_doubt_deny_generic(1)[OF primitive_matcher_generic_common_matcher nnf2 s2]"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n        (abstract_primitive ?disc)\n        (lower_closure\n          (packet_assume_new\n            rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                    (packet_assume_new\n                      rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow}", "have 2:\n         \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>lower_closure (packet_assume_new rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n        (abstract_primitive ?disc)\n        (lower_closure\n          (packet_assume_new\n            rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                    (packet_assume_new\n                      rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                      (packet_assume_new\n                        rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n  FinalAllow \\<and>\n                    newpkt p}", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n        abstract_for_simple_firewall\n        (lower_closure\n          (packet_assume_new\n            rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                    (packet_assume_new\n                      rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "have 3: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>lower_closure (packet_assume_new rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n          (packet_assume_new\n            rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                            FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_lower_closure(1)[OF s1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>packet_assume_new\n          rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_deny) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF simplers]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_deny) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_deny) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "using packet_assume_new newpkt_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p);\n   p_tag_ctstate ?p = CT_New\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (common_matcher, ?\\<alpha>) ?p\n                     (packet_assume_new ?rs) ?s =\n                    approximating_bigstep_fun (common_matcher, ?\\<alpha>) ?p\n                     ?rs ?s\n  newpkt ?p \\<equiv>\n  match_tcp_flags ipt_tcp_syn (p_tcp_flags ?p) \\<and>\n  p_tag_ctstate ?p = CT_New\n\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_deny) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_deny) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "by fastforce"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n        (packet_assume_new\n          rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "have 4: \"\\<And>p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<longleftrightarrow> ?fw ?rs' p = Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n         (optimize_matches abstract_for_simple_firewall\n           (lower_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_deny) p\n         (lower_closure\n           (optimize_matches abstract_for_simple_firewall\n             (lower_closure (packet_assume_new rs))))\n         Undecided =\n        Decision FinalAllow)", "using approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s4]]"], ["proof (prove)\nusing this:\n  ?\\<gamma>,?p\\<turnstile> \\<langle>lower_closure\n                                     (optimize_matches\n abstract_for_simple_firewall\n (lower_closure\n   (packet_assume_new rs))), ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p\n    (lower_closure\n      (optimize_matches abstract_for_simple_firewall\n        (lower_closure (packet_assume_new rs))))\n    ?s =\n   ?t)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n         (optimize_matches abstract_for_simple_firewall\n           (lower_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_deny) p\n         (lower_closure\n           (optimize_matches abstract_for_simple_firewall\n             (lower_closure (packet_assume_new rs))))\n         Undecided =\n        Decision FinalAllow)", "by fast"], ["proof (state)\nthis:\n  (common_matcher,\n   in_doubt_deny),?p\\<turnstile> \\<langle>lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure\n         (packet_assume_new\n           rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_deny) ?p\n    (lower_closure\n      (optimize_matches abstract_for_simple_firewall\n        (lower_closure (packet_assume_new rs))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "have \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n          (optimize_matches abstract_for_simple_firewall\n            (lower_closure\n              (packet_assume_new\n                rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "apply(subst 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "apply(subst 3[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                      (packet_assume_new\n                        rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n  FinalAllow \\<and>\n                    newpkt p}", "using 2"], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n        abstract_for_simple_firewall\n        (lower_closure\n          (packet_assume_new\n            rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                    (packet_assume_new\n                      rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_deny),p\\<turnstile> \\<langle>optimize_matches\n          abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                      (packet_assume_new\n                        rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n  FinalAllow \\<and>\n                    newpkt p}", "by blast"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n        (optimize_matches abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "thus \"{p. simple_fw (to_simple_firewall ?rs') p = Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n        (optimize_matches abstract_for_simple_firewall\n          (lower_closure\n            (packet_assume_new\n              rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         p =\n        Decision FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n                    newpkt p}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{p. (common_matcher,\n                     in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                      (optimize_matches abstract_for_simple_firewall\n                        (lower_closure\n                          (packet_assume_new\n                            rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n        FinalAllow \\<and>\n                    newpkt p}\n                \\<subseteq> {p. (common_matcher,\n                                 in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow \\<and>\n                                newpkt p};\n        simple_fw\n         (to_simple_firewall\n           (lower_closure\n             (optimize_matches abstract_for_simple_firewall\n               (lower_closure (packet_assume_new rs)))))\n         x =\n        Decision FinalAllow;\n        newpkt x\\<rbrakk>\n       \\<Longrightarrow> (common_matcher,\n                          in_doubt_deny),x\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalAllow", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                   (optimize_matches abstract_for_simple_firewall\n                     (lower_closure\n                       (packet_assume_new\n                         rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n       FinalAllow \\<and>\n                             newpkt p};\n     simple_fw\n      (to_simple_firewall\n        (lower_closure\n          (optimize_matches abstract_for_simple_firewall\n            (lower_closure (packet_assume_new rs)))))\n      p =\n     Decision FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> (common_matcher,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow", "using to_simple_firewall[OF simple_fw_preconditions, where p = p] 4"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (common_matcher, ?\\<alpha>) p\n   (lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure (packet_assume_new rs))))\n   Undecided =\n  simple_fw\n   (to_simple_firewall\n     (lower_closure\n       (optimize_matches abstract_for_simple_firewall\n         (lower_closure (packet_assume_new rs)))))\n   p\n  (common_matcher,\n   in_doubt_deny),?p\\<turnstile> \\<langle>lower_closure\n     (optimize_matches abstract_for_simple_firewall\n       (lower_closure\n         (packet_assume_new\n           rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_deny) ?p\n    (lower_closure\n      (optimize_matches abstract_for_simple_firewall\n        (lower_closure (packet_assume_new rs))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_deny),p\\<turnstile> \\<langle>lower_closure\n                   (optimize_matches abstract_for_simple_firewall\n                     (lower_closure\n                       (packet_assume_new\n                         rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n       FinalAllow \\<and>\n                             newpkt p};\n     simple_fw\n      (to_simple_firewall\n        (lower_closure\n          (optimize_matches abstract_for_simple_firewall\n            (lower_closure (packet_assume_new rs)))))\n      p =\n     Decision FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> (common_matcher,\n                       in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {p. simple_fw\n       (to_simple_firewall\n         (lower_closure\n           (optimize_matches abstract_for_simple_firewall\n             (lower_closure (packet_assume_new rs)))))\n       p =\n      Decision FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_deny),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                  newpkt p}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"to_simple_firewall_without_interfaces ipassmt rtblo rs \\<equiv>\n    to_simple_firewall\n    (upper_closure\n    (optimize_matches (abstract_primitive (\\<lambda>r. case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n    (optimize_matches abstract_for_simple_firewall\n    (upper_closure\n    (iface_try_rewrite ipassmt rtblo\n    (upper_closure\n    (packet_assume_new rs)))))))\""], ["", "(*basically a copy&paste from transform_simple_fw_upper. but this one is way cleaner! refactor the other using this!*)"], ["", "theorem to_simple_firewall_without_interfaces:\n  defines \"newpkt p \\<equiv> match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and> p_tag_ctstate p = CT_New\"\n  assumes simplers: \"simple_ruleset (rs:: 'i::len common_primitive rule list)\"\n\n      \\<comment> \\<open>well-formed ipassmt\\<close>\n      and wf_ipassmt1: \"ipassmt_sanity_nowildcards (map_of ipassmt)\" and wf_ipassmt2: \"distinct (map fst ipassmt)\"\n      \\<comment> \\<open>There are no spoofed packets (probably by kernel's reverse path filter or our checker).\n         This assumption implies that ipassmt lists ALL interfaces (!!).\\<close>\n      and nospoofing: \"\\<forall>(p::('i::len, 'a) tagged_packet_scheme).\n            \\<exists>ips. (map_of ipassmt) (Iface (p_iiface p)) = Some ips \\<and> p_src p \\<in> ipcidr_union_set (set ips)\"\n      \\<comment> \\<open>If a routing table was passed, the output interface for any packet we consider is decided based on it.\\<close>\n      and routing_decided: \"\\<And>rtbl (p::('i,'a) tagged_packet_scheme). rtblo = Some rtbl \\<Longrightarrow> output_iface (routing_table_semantics rtbl (p_dst p)) = p_oiface p\"\n      \\<comment> \\<open>A passed routing table is wellformed\\<close>\n      and correct_routing: \"\\<And>rtbl. rtblo = Some rtbl \\<Longrightarrow> correct_routing rtbl\"\n      \\<comment> \\<open>A passed routing table contains no interfaces with wildcard names\\<close>\n      and routing_no_wildcards: \"\\<And>rtbl. rtblo = Some rtbl \\<Longrightarrow> ipassmt_sanity_nowildcards (map_of (routing_ipassmt rtbl))\"\n\n  \\<comment> \\<open>the set of new packets, which are accepted is an overapproximations\\<close>\n  shows \"{p::('i,'a) tagged_packet_scheme. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n         {p::('i,'a) tagged_packet_scheme. simple_fw (to_simple_firewall_without_interfaces ipassmt rtblo rs) p = Decision FinalAllow \\<and> newpkt p}\"\n\n  and \"\\<forall>r \\<in> set (to_simple_firewall_without_interfaces ipassmt rtblo rs).\n          iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p} &&&\n    \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs1=\"packet_assume_new rs\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs2=\"upper_closure ?rs1\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs3=\"iface_try_rewrite ipassmt rtblo ?rs2\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs4=\"upper_closure ?rs3\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs5=\"optimize_matches abstract_for_simple_firewall ?rs4\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs6=\"optimize_matches (abstract_primitive (\\<lambda>r. case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)) ?rs5\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?rs7=\"upper_closure ?rs6\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?\\<gamma>=\"(common_matcher, in_doubt_allow)\n          :: ('i::len common_primitive, ('i, 'a) tagged_packet_scheme) match_tac\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"to_simple_firewall_without_interfaces ipassmt rtblo rs = to_simple_firewall ?rs7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. to_simple_firewall_without_interfaces ipassmt rtblo rs =\n    to_simple_firewall\n     (upper_closure\n       (optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure (packet_assume_new rs)))))))", "by(simp add: to_simple_firewall_without_interfaces_def)"], ["proof (state)\nthis:\n  to_simple_firewall_without_interfaces ipassmt rtblo rs =\n  to_simple_firewall\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from packet_assume_new_simple_ruleset[OF simplers]"], ["proof (chain)\npicking this:\n  simple_ruleset (packet_assume_new rs)", "have s1: \"simple_ruleset ?rs1\""], ["proof (prove)\nusing this:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset (packet_assume_new rs)", "."], ["proof (state)\nthis:\n  simple_ruleset (packet_assume_new rs)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(2)[OF s1]"], ["proof (chain)\npicking this:\n  simple_ruleset (upper_closure (packet_assume_new rs))", "have s2: \"simple_ruleset ?rs2\""], ["proof (prove)\nusing this:\n  simple_ruleset (upper_closure (packet_assume_new rs))\n\ngoal (1 subgoal):\n 1. simple_ruleset (upper_closure (packet_assume_new rs))", "."], ["proof (state)\nthis:\n  simple_ruleset (upper_closure (packet_assume_new rs))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from iface_try_rewrite_simplers[OF s2]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (iface_try_rewrite ?ipassmt ?rtblo\n     (upper_closure (packet_assume_new rs)))", "have s3: \"simple_ruleset ?rs3\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (iface_try_rewrite ?ipassmt ?rtblo\n     (upper_closure (packet_assume_new rs)))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (iface_try_rewrite ipassmt rtblo\n       (upper_closure (packet_assume_new rs)))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs)))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(2)[OF s3]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (upper_closure\n     (iface_try_rewrite ipassmt rtblo\n       (upper_closure (packet_assume_new rs))))", "have s4: \"simple_ruleset ?rs4\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (upper_closure\n     (iface_try_rewrite ipassmt rtblo\n       (upper_closure (packet_assume_new rs))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (upper_closure\n       (iface_try_rewrite ipassmt rtblo\n         (upper_closure (packet_assume_new rs))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (upper_closure\n     (iface_try_rewrite ipassmt rtblo\n       (upper_closure (packet_assume_new rs))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from optimize_matches_simple_ruleset[OF s4]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (optimize_matches ?f\n     (upper_closure\n       (iface_try_rewrite ipassmt rtblo\n         (upper_closure (packet_assume_new rs)))))", "have s5: \"simple_ruleset ?rs5\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (optimize_matches ?f\n     (upper_closure\n       (iface_try_rewrite ipassmt rtblo\n         (upper_closure (packet_assume_new rs)))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs)))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (optimize_matches abstract_for_simple_firewall\n     (upper_closure\n       (iface_try_rewrite ipassmt rtblo\n         (upper_closure (packet_assume_new rs)))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from optimize_matches_simple_ruleset[OF s5]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (optimize_matches ?f\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))", "have s6: \"simple_ruleset ?rs6\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (optimize_matches ?f\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs))))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(2)[OF s6]"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))", "have s7: \"simple_ruleset ?rs7\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n\ngoal (1 subgoal):\n 1. simple_ruleset\n     (upper_closure\n       (optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure (packet_assume_new rs)))))))", "."], ["proof (state)\nthis:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(3)[OF s1]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have nnf2: \"\\<forall>r\\<in>set ?rs2. normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure (packet_assume_new rs)).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(3)[OF s3]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have nnf4: \"\\<forall>r\\<in>set ?rs4. normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs)))).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have nnf5: \"\\<forall>r\\<in>set ?rs5. normalized_nnf_match (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       normalized_nnf_match (get_match r)", "apply(intro optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (upper_closure\n                     (iface_try_rewrite ipassmt rtblo\n                       (upper_closure\n                         (packet_assume_new rs)))) \\<Longrightarrow>\n       normalized_nnf_match (abstract_for_simple_firewall (get_match r))", "apply(simp add: abstract_for_simple_firewall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (upper_closure\n                     (iface_try_rewrite ipassmt rtblo\n                       (upper_closure\n                         (packet_assume_new rs)))) \\<Longrightarrow>\n       normalized_nnf_match\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of\n              Pos a \\<Rightarrow> is_CT_State a \\<or> is_L4_Flags a\n              | Neg a \\<Rightarrow>\n                  is_Iiface a \\<or>\n                  is_Oiface a \\<or>\n                  is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n          (get_match r))", "apply(rule abstract_primitive_preserves_normalized(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (upper_closure\n                     (iface_try_rewrite ipassmt rtblo\n                       (upper_closure\n                         (packet_assume_new rs)))) \\<Longrightarrow>\n       normalized_nnf_match (get_match r)", "using nnf4"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (upper_closure\n                     (iface_try_rewrite ipassmt rtblo\n                       (upper_closure\n                         (packet_assume_new rs)))) \\<Longrightarrow>\n       normalized_nnf_match (get_match r)", "by(simp)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have nnf6: \"\\<forall>r\\<in>set ?rs6. normalized_nnf_match (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       normalized_nnf_match (get_match r)", "apply(intro optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (optimize_matches abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new rs))))) \\<Longrightarrow>\n       normalized_nnf_match\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n              | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n          (get_match r))", "apply(rule abstract_primitive_preserves_normalized(5))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (optimize_matches abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new rs))))) \\<Longrightarrow>\n       normalized_nnf_match (get_match r)", "using nnf5"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (optimize_matches abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new rs))))) \\<Longrightarrow>\n       normalized_nnf_match (get_match r)", "by(simp)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(3)[OF s6]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)", "have nnf7: \"\\<forall>r\\<in>set ?rs7. normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "(*subgoal @{term \"check_simple_fw_preconditions ?rs7\"}*)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "{"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "fix m a"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "assume r: \"Rule m a \\<in> set ?rs7\""], ["proof (state)\nthis:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from s7 r"], ["proof (chain)\npicking this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))", "have a: \"(a = action.Accept \\<or> a = action.Drop)\""], ["proof (prove)\nusing this:\n  simple_ruleset\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n\ngoal (1 subgoal):\n 1. a = action.Accept \\<or> a = action.Drop", "by(auto simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = action.Accept \\<or> a = action.Drop\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from abstract_for_simple_firewall_hasdisc"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)", "have \"\\<forall>r\\<in>set ?rs5. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc is_CT_State (get_match r)", "by(intro optimize_matches_preserves, blast)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with abstract_primitive_preserves_nodisc[where disc'=\"is_CT_State\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_CT_State (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs6. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc is_CT_State ?m;\n   \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_CT_State\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc is_CT_State (get_match r)", "apply(intro optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<And>m disc.\n                   \\<lbrakk>\\<not> has_disc is_CT_State m;\n                    \\<forall>str. \\<not> is_CT_State (Extra str)\\<rbrakk>\n                   \\<Longrightarrow> \\<not> has_disc is_CT_State\n       (abstract_primitive disc m);\n        \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure (packet_assume_new rs))))).\n           \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<And>m disc.\n                   \\<not> has_disc is_CT_State m \\<Longrightarrow>\n                   \\<not> has_disc is_CT_State (abstract_primitive disc m);\n        \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure (packet_assume_new rs))))).\n           \\<not> has_disc is_CT_State (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with transform_upper_closure(4)[OF s6, where disc=is_CT_State]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_CT_State (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs7. \\<not> has_disc is_CT_State (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_CT_State (Src_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Dst_Ports a);\n   \\<forall>a. \\<not> is_CT_State (Src a);\n   \\<forall>a. \\<not> is_CT_State (Dst a);\n   \\<forall>a. \\<not> is_CT_State (IIface a) \\<or> is_CT_State = is_Iiface;\n   \\<forall>a. \\<not> is_CT_State (OIface a) \\<or> is_CT_State = is_Oiface;\n   \\<forall>a. \\<not> is_CT_State (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_CT_State (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_CT_State (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       \\<not> has_disc is_CT_State (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_CT_State (get_match r)", "have no_CT: \"\\<not> has_disc is_CT_State m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_CT_State (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_CT_State m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from abstract_for_simple_firewall_hasdisc"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)", "have \"\\<forall>r\\<in>set ?rs5. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State (abstract_for_simple_firewall ?m)\n  \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by(intro optimize_matches_preserves, blast)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with abstract_primitive_preserves_nodisc[where disc'=\"is_L4_Flags\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<not> has_disc is_L4_Flags ?m;\n   \\<forall>str. \\<not> is_L4_Flags (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_L4_Flags\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs6. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc is_L4_Flags ?m;\n   \\<forall>str. \\<not> is_L4_Flags (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc is_L4_Flags\n                            (abstract_primitive ?disc ?m)\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by(intro optimize_matches_preserves) auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with transform_upper_closure(4)[OF s6, where disc=is_L4_Flags]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs7. \\<not> has_disc is_L4_Flags (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_L4_Flags (Src_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst_Ports a);\n   \\<forall>a. \\<not> is_L4_Flags (Src a);\n   \\<forall>a. \\<not> is_L4_Flags (Dst a);\n   \\<forall>a. \\<not> is_L4_Flags (IIface a) \\<or> is_L4_Flags = is_Iiface;\n   \\<forall>a. \\<not> is_L4_Flags (OIface a) \\<or> is_L4_Flags = is_Oiface;\n   \\<forall>a. \\<not> is_L4_Flags (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_L4_Flags (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_L4_Flags (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       \\<not> has_disc is_L4_Flags (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_L4_Flags (get_match r)", "have no_L4_Flags: \"\\<not> has_disc is_L4_Flags m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_L4_Flags (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_L4_Flags m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_L4_Flags m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"\\<forall>r\\<in>set ?rs6. \\<not> has_disc is_Iiface (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc is_Iiface (get_match r)", "by(intro optimize_matches_preserves abstract_primitive_nodisc) simp+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Iiface (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with transform_upper_closure(4)[OF s6, where disc=is_Iiface]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_Iiface (Src_Ports a);\n   \\<forall>a. \\<not> is_Iiface (Dst_Ports a);\n   \\<forall>a. \\<not> is_Iiface (Src a);\n   \\<forall>a. \\<not> is_Iiface (Dst a);\n   \\<forall>a. \\<not> is_Iiface (IIface a) \\<or> is_Iiface = is_Iiface;\n   \\<forall>a. \\<not> is_Iiface (OIface a) \\<or> is_Iiface = is_Oiface;\n   \\<forall>a. \\<not> is_Iiface (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_Iiface (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_Iiface (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Iiface (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs7. \\<not> has_disc is_Iiface (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_Iiface (Src_Ports a);\n   \\<forall>a. \\<not> is_Iiface (Dst_Ports a);\n   \\<forall>a. \\<not> is_Iiface (Src a);\n   \\<forall>a. \\<not> is_Iiface (Dst a);\n   \\<forall>a. \\<not> is_Iiface (IIface a) \\<or> is_Iiface = is_Iiface;\n   \\<forall>a. \\<not> is_Iiface (OIface a) \\<or> is_Iiface = is_Oiface;\n   \\<forall>a. \\<not> is_Iiface (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_Iiface (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_Iiface (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Iiface (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       \\<not> has_disc is_Iiface (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Iiface (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Iiface (get_match r)", "have no_Iiface: \"\\<not> has_disc is_Iiface m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Iiface (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_Iiface m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_Iiface m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"\\<forall>r\\<in>set ?rs6. \\<not> has_disc is_Oiface (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc is_Oiface (get_match r)", "by(intro optimize_matches_preserves abstract_primitive_nodisc) simp+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Oiface (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with transform_upper_closure(4)[OF s6, where disc=is_Oiface]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>a. \\<not> is_Oiface (Src_Ports a);\n   \\<forall>a. \\<not> is_Oiface (Dst_Ports a);\n   \\<forall>a. \\<not> is_Oiface (Src a);\n   \\<forall>a. \\<not> is_Oiface (Dst a);\n   \\<forall>a. \\<not> is_Oiface (IIface a) \\<or> is_Oiface = is_Iiface;\n   \\<forall>a. \\<not> is_Oiface (OIface a) \\<or> is_Oiface = is_Oiface;\n   \\<forall>a. \\<not> is_Oiface (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_Oiface (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_Oiface (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Oiface (get_match r)", "have\n        \"\\<forall>r\\<in>set ?rs7. \\<not> has_disc is_Oiface (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>a. \\<not> is_Oiface (Src_Ports a);\n   \\<forall>a. \\<not> is_Oiface (Dst_Ports a);\n   \\<forall>a. \\<not> is_Oiface (Src a);\n   \\<forall>a. \\<not> is_Oiface (Dst a);\n   \\<forall>a. \\<not> is_Oiface (IIface a) \\<or> is_Oiface = is_Iiface;\n   \\<forall>a. \\<not> is_Oiface (OIface a) \\<or> is_Oiface = is_Oiface;\n   \\<forall>a. \\<not> is_Oiface (Prot a);\n   \\<forall>r\\<in>set (optimize_matches\n                        (abstract_primitive\n                          (\\<lambda>r.\n                              case r of\n                              Pos a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a\n                              | Neg a \\<Rightarrow>\n                                  is_Iiface a \\<or> is_Oiface a))\n                        (optimize_matches abstract_for_simple_firewall\n                          (upper_closure\n                            (iface_try_rewrite ipassmt rtblo\n                              (upper_closure (packet_assume_new rs)))))).\n      \\<not> has_disc is_Oiface (get_match r)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (upper_closure\n   (optimize_matches\n     (abstract_primitive\n       (\\<lambda>r.\n           case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n           | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n     (optimize_matches abstract_for_simple_firewall\n       (upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure (packet_assume_new rs))))))).\n                       \\<not> has_disc is_Oiface (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc is_Oiface (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       \\<not> has_disc is_Oiface (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Oiface (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Oiface (get_match r)", "have no_Oiface: \"\\<not> has_disc is_Oiface m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc is_Oiface (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc is_Oiface m", "by fastforce"], ["proof (state)\nthis:\n  \\<not> has_disc is_Oiface m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from no_Iiface no_Oiface"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m", "have normalized_ifaces: \"normalized_ifaces m\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m\n\ngoal (1 subgoal):\n 1. normalized_ifaces m", "using has_disc_negated_disj_split has_disc_negated_has_disc normalized_ifaces_def"], ["proof (prove)\nusing this:\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m\n  has_disc_negated (\\<lambda>a. ?P a \\<or> ?Q a) ?neg ?m =\n  (has_disc_negated ?P ?neg ?m \\<or> has_disc_negated ?Q ?neg ?m)\n  has_disc_negated ?disc ?neg ?m \\<Longrightarrow> has_disc ?disc ?m\n  normalized_ifaces ?m \\<equiv>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          ?m\n\ngoal (1 subgoal):\n 1. normalized_ifaces m", "by blast"], ["proof (state)\nthis:\n  normalized_ifaces m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(3)[OF s6] r"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))", "have normalized:\n        \"normalized_src_ports m \\<and> normalized_dst_ports m \\<and>\n         normalized_src_ips m \\<and> normalized_dst_ips m \\<and>\n         \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m", "by fastforce"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from transform_upper_closure(3)[OF s3, simplified]\n        normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(1)]\n        normalized_n_primitive_imp_not_disc_negated[OF wf_disc_sel_common_primitive(2)]"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m", "have \"\\<forall>r \\<in> set ?rs4. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                           \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                           \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r) \\<and>\n     normalized_src_ports (get_match r) \\<and>\n     normalized_dst_ports (get_match r) \\<and>\n     normalized_src_ips (get_match r) \\<and>\n     normalized_dst_ips (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n     \\<not> has_disc is_Extra (get_match r)\n  normalized_n_primitive (is_Src_Ports, src_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Src_Ports False ?m\n  normalized_n_primitive (is_Dst_Ports, dst_ports_sel) ?f\n   ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Dst_Ports False ?m\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(simp add: normalized_src_ports_def2 normalized_dst_ports_def2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                  (iface_try_rewrite ipassmt rtblo\n                                    (upper_closure\n(packet_assume_new rs)))).\n                normalized_nnf_match (get_match r) \\<and>\n                normalized_n_primitive (is_Src_Ports, src_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_n_primitive (is_Dst_Ports, dst_ports_sel)\n                 (\\<lambda>ps.\n                     case ps of\n                     L4Ports x pts \\<Rightarrow> length pts \\<le> 1)\n                 (get_match r) \\<and>\n                normalized_src_ips (get_match r) \\<and>\n                normalized_dst_ips (get_match r) \\<and>\n                \\<not> has_disc is_MultiportPorts (get_match r) \\<and>\n                \\<not> has_disc is_Extra (get_match r);\n     \\<And>f m.\n        normalized_n_primitive (is_Src_Ports, src_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Src_Ports False m;\n     \\<And>f m.\n        normalized_n_primitive (is_Dst_Ports, dst_ports_sel) f\n         m \\<Longrightarrow>\n        \\<not> has_disc_negated is_Dst_Ports False m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set\n(upper_closure\n  (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs)))).\n                         \\<not> has_disc_negated is_Src_Ports False\n                                 (get_match r) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (get_match r)", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "hence \"\\<forall>r \\<in> set ?rs5. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                            \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                            \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs)))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(rule optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                     (iface_try_rewrite ipassmt rtblo\n (upper_closure (packet_assume_new rs)))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure\n                      (iface_try_rewrite ipassmt rtblo\n                        (upper_closure (packet_assume_new rs))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                     (iface_try_rewrite ipassmt rtblo\n (upper_closure (packet_assume_new rs)))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure\n                      (iface_try_rewrite ipassmt rtblo\n                        (upper_closure (packet_assume_new rs))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 2. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                     (iface_try_rewrite ipassmt rtblo\n (upper_closure (packet_assume_new rs)))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure\n                      (iface_try_rewrite ipassmt rtblo\n                        (upper_closure (packet_assume_new rs))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_for_simple_firewall\n                                   (get_match r))\n 3. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                     (iface_try_rewrite ipassmt rtblo\n (upper_closure (packet_assume_new rs)))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure\n                      (iface_try_rewrite ipassmt rtblo\n                        (upper_closure (packet_assume_new rs))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "apply(intro abstract_for_simple_firewall_preserves_nodisc_negated, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (upper_closure\n                                     (iface_try_rewrite ipassmt rtblo\n (upper_closure (packet_assume_new rs)))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (upper_closure\n                      (iface_try_rewrite ipassmt rtblo\n                        (upper_closure (packet_assume_new rs))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_for_simple_firewall\n                                   (get_match r))", "by (simp add: abstract_for_simple_firewall_def abstract_primitive_preserves_nodisc)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from this"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)", "have no_ports_rs6: \n            \"\\<forall>r \\<in> set ?rs6. \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n                            \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n                            \\<not> has_disc is_MultiportPorts (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r) \\<Longrightarrow>\n    \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n       \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n       \\<not> has_disc is_MultiportPorts (get_match r)", "apply(rule optimize_matches_preserves)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs))))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r)) \\<and>\n                         \\<not> has_disc is_MultiportPorts\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))", "apply(intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs))))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Src_Ports False\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))\n 2. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs))))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Dst_Ports False\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))\n 3. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs))))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))", "apply(intro abstract_primitive_preserves_nodisc_nedgated, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set (optimize_matches\n                                     abstract_for_simple_firewall\n                                     (upper_closure\n (iface_try_rewrite ipassmt rtblo (upper_closure (packet_assume_new rs))))).\n                   \\<not> has_disc_negated is_Src_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc_negated is_Dst_Ports False\n                           (get_match r) \\<and>\n                   \\<not> has_disc is_MultiportPorts (get_match r);\n        r \\<in> set (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure (packet_assume_new rs)))))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_MultiportPorts\n                                 (abstract_primitive\n                                   (\\<lambda>r.\n case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a)\n                                   (get_match r))", "by (simp add: abstract_for_simple_firewall_def abstract_primitive_preserves_nodisc)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from nnf4 abstract_for_simple_firewall_negated_ifaces_prots(2)"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)", "have \n        \"\\<forall>r\\<in>set ?rs5. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure (packet_assume_new rs)))).\n     normalized_nnf_match (get_match r)\n  normalized_nnf_match ?m \\<Longrightarrow>\n  \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall ?m)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs))))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by(intro optimize_matches_preserves) blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "hence \"\\<forall>r\\<in>set ?rs6. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure (packet_assume_new rs))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs)))))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by(intro optimize_matches_preserves abstract_primitive_preserves_nodisc_nedgated) simp+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with no_ports_rs6"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)", "have \"\\<forall>r\\<in>set ?rs7. \\<not> has_disc_negated is_Prot False (get_match r)\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Src_Ports False (get_match r) \\<and>\n     \\<not> has_disc_negated is_Dst_Ports False (get_match r) \\<and>\n     \\<not> has_disc is_MultiportPorts (get_match r)\n  \\<forall>r\\<in>set (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure (packet_assume_new rs)))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs))))))).\n       \\<not> has_disc_negated is_Prot False (get_match r)", "by(intro transform_upper_closure(5)[OF s6]) simp+"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "with r"], ["proof (chain)\npicking this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)", "have protocols: \"normalized_protocols m\""], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. normalized_protocols m", "unfolding normalized_protocols_def"], ["proof (prove)\nusing this:\n  Rule m a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure (packet_assume_new rs)))))))\n  \\<forall>r\\<in>set (upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure (packet_assume_new rs))))))).\n     \\<not> has_disc_negated is_Prot False (get_match r)\n\ngoal (1 subgoal):\n 1. \\<not> has_disc_negated is_Prot False m", "by fastforce"], ["proof (state)\nthis:\n  normalized_protocols m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from no_CT no_L4_Flags normalized a normalized_ifaces protocols no_Iiface no_Oiface"], ["proof (chain)\npicking this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m", "have \"normalized_src_ports m \\<and>\n               normalized_dst_ports m \\<and>\n               normalized_src_ips m \\<and>\n               normalized_dst_ips m \\<and>\n               normalized_ifaces m \\<and>\n               normalized_protocols m \\<and>\n               \\<not> has_disc is_L4_Flags m \\<and>\n               \\<not> has_disc is_CT_State m \\<and>\n               \\<not> has_disc is_MultiportPorts m \\<and>\n               \\<not> has_disc is_Extra m \\<and> (a = action.Accept \\<or> a = action.Drop)\"\n        and \"\\<not> has_disc is_Iiface m\" and \"\\<not> has_disc is_Oiface m\""], ["proof (prove)\nusing this:\n  \\<not> has_disc is_CT_State m\n  \\<not> has_disc is_L4_Flags m\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m\n  a = action.Accept \\<or> a = action.Drop\n  normalized_ifaces m\n  normalized_protocols m\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m\n\ngoal (1 subgoal):\n 1. normalized_src_ports m \\<and>\n    normalized_dst_ports m \\<and>\n    normalized_src_ips m \\<and>\n    normalized_dst_ips m \\<and>\n    normalized_ifaces m \\<and>\n    normalized_protocols m \\<and>\n    \\<not> has_disc is_L4_Flags m \\<and>\n    \\<not> has_disc is_CT_State m \\<and>\n    \\<not> has_disc is_MultiportPorts m \\<and>\n    \\<not> has_disc is_Extra m \\<and>\n    (a = action.Accept \\<or> a = action.Drop) &&&\n    \\<not> has_disc is_Iiface m &&& \\<not> has_disc is_Oiface m", "apply -"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> has_disc is_CT_State m; \\<not> has_disc is_L4_Flags m;\n     normalized_src_ports m \\<and>\n     normalized_dst_ports m \\<and>\n     normalized_src_ips m \\<and>\n     normalized_dst_ips m \\<and>\n     \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m;\n     a = action.Accept \\<or> a = action.Drop; normalized_ifaces m;\n     normalized_protocols m; \\<not> has_disc is_Iiface m;\n     \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> normalized_src_ports m \\<and>\n                      normalized_dst_ports m \\<and>\n                      normalized_src_ips m \\<and>\n                      normalized_dst_ips m \\<and>\n                      normalized_ifaces m \\<and>\n                      normalized_protocols m \\<and>\n                      \\<not> has_disc is_L4_Flags m \\<and>\n                      \\<not> has_disc is_CT_State m \\<and>\n                      \\<not> has_disc is_MultiportPorts m \\<and>\n                      \\<not> has_disc is_Extra m \\<and>\n                      (a = action.Accept \\<or> a = action.Drop)\n 2. \\<lbrakk>\\<not> has_disc is_CT_State m; \\<not> has_disc is_L4_Flags m;\n     normalized_src_ports m \\<and>\n     normalized_dst_ports m \\<and>\n     normalized_src_ips m \\<and>\n     normalized_dst_ips m \\<and>\n     \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m;\n     a = action.Accept \\<or> a = action.Drop; normalized_ifaces m;\n     normalized_protocols m; \\<not> has_disc is_Iiface m;\n     \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m\n 3. \\<lbrakk>\\<not> has_disc is_CT_State m; \\<not> has_disc is_L4_Flags m;\n     normalized_src_ports m \\<and>\n     normalized_dst_ports m \\<and>\n     normalized_src_ips m \\<and>\n     normalized_dst_ips m \\<and>\n     \\<not> has_disc is_MultiportPorts m \\<and> \\<not> has_disc is_Extra m;\n     a = action.Accept \\<or> a = action.Drop; normalized_ifaces m;\n     normalized_protocols m; \\<not> has_disc is_Iiface m;\n     \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Oiface m", "by(simp)+"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  normalized_ifaces m \\<and>\n  normalized_protocols m \\<and>\n  \\<not> has_disc is_L4_Flags m \\<and>\n  \\<not> has_disc is_CT_State m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and>\n  \\<not> has_disc is_Extra m \\<and>\n  (a = action.Accept \\<or> a = action.Drop)\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "(*fails due to is_MultiportPorts*)"], ["proof (state)\nthis:\n  normalized_src_ports m \\<and>\n  normalized_dst_ports m \\<and>\n  normalized_src_ips m \\<and>\n  normalized_dst_ips m \\<and>\n  normalized_ifaces m \\<and>\n  normalized_protocols m \\<and>\n  \\<not> has_disc is_L4_Flags m \\<and>\n  \\<not> has_disc is_CT_State m \\<and>\n  \\<not> has_disc is_MultiportPorts m \\<and>\n  \\<not> has_disc is_Extra m \\<and>\n  (a = action.Accept \\<or> a = action.Drop)\n  \\<not> has_disc is_Iiface m\n  \\<not> has_disc is_Oiface m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "}"], ["proof (state)\nthis:\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  \\<not> has_disc is_Iiface ?m2\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  \\<not> has_disc is_Oiface ?m2\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "hence simple_fw_preconditions: \"check_simple_fw_preconditions ?rs7\"\n      and no_interfaces: \"Rule m a \\<in> set ?rs7 \\<Longrightarrow> \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m\" for m a"], ["proof (prove)\nusing this:\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  normalized_src_ports ?m2 \\<and>\n  normalized_dst_ports ?m2 \\<and>\n  normalized_src_ips ?m2 \\<and>\n  normalized_dst_ips ?m2 \\<and>\n  normalized_ifaces ?m2 \\<and>\n  normalized_protocols ?m2 \\<and>\n  \\<not> has_disc is_L4_Flags ?m2 \\<and>\n  \\<not> has_disc is_CT_State ?m2 \\<and>\n  \\<not> has_disc is_MultiportPorts ?m2 \\<and>\n  \\<not> has_disc is_Extra ?m2 \\<and>\n  (?a2 = action.Accept \\<or> ?a2 = action.Drop)\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  \\<not> has_disc is_Iiface ?m2\n  Rule ?m2 ?a2\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  \\<not> has_disc is_Oiface ?m2\n\ngoal (1 subgoal):\n 1. check_simple_fw_preconditions\n     (upper_closure\n       (optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure (packet_assume_new rs))))))) &&&\n    (Rule m a\n     \\<in> set (upper_closure\n                 (optimize_matches\n                   (abstract_primitive\n                     (\\<lambda>r.\n                         case r of\n                         Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                         | Neg a \\<Rightarrow>\n                             is_Iiface a \\<or> is_Oiface a))\n                   (optimize_matches abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new rs))))))) \\<Longrightarrow>\n     \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m)", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>m a.\n                Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches\n                              (abstract_primitive\n                                (\\<lambda>r.\n                                    case r of\n                                    Pos a \\<Rightarrow>\nis_Iiface a \\<or> is_Oiface a\n                                    | Neg a \\<Rightarrow>\n  is_Iiface a \\<or> is_Oiface a))\n                              (optimize_matches abstract_for_simple_firewall\n                                (upper_closure\n                                  (iface_try_rewrite ipassmt rtblo\n                                    (upper_closure\n(packet_assume_new rs))))))) \\<Longrightarrow>\n                normalized_src_ports m \\<and>\n                normalized_dst_ports m \\<and>\n                normalized_src_ips m \\<and>\n                normalized_dst_ips m \\<and>\n                normalized_ifaces m \\<and>\n                normalized_protocols m \\<and>\n                \\<not> has_disc is_L4_Flags m \\<and>\n                \\<not> has_disc is_CT_State m \\<and>\n                \\<not> has_disc is_MultiportPorts m \\<and>\n                \\<not> has_disc is_Extra m \\<and>\n                (a = action.Accept \\<or> a = action.Drop);\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m;\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> check_simple_fw_preconditions\n                       (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure (packet_assume_new rs)))))))\n 2. \\<lbrakk>Rule m a\n             \\<in> set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs)))))));\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        normalized_src_ports m \\<and>\n        normalized_dst_ports m \\<and>\n        normalized_src_ips m \\<and>\n        normalized_dst_ips m \\<and>\n        normalized_ifaces m \\<and>\n        normalized_protocols m \\<and>\n        \\<not> has_disc is_L4_Flags m \\<and>\n        \\<not> has_disc is_CT_State m \\<and>\n        \\<not> has_disc is_MultiportPorts m \\<and>\n        \\<not> has_disc is_Extra m \\<and>\n        (a = action.Accept \\<or> a = action.Drop);\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m;\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m \\<and>\n                      \\<not> has_disc is_Oiface m", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m a.\n                Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches\n                              (abstract_primitive\n                                (\\<lambda>r.\n                                    case r of\n                                    Pos a \\<Rightarrow>\nis_Iiface a \\<or> is_Oiface a\n                                    | Neg a \\<Rightarrow>\n  is_Iiface a \\<or> is_Oiface a))\n                              (optimize_matches abstract_for_simple_firewall\n                                (upper_closure\n                                  (iface_try_rewrite ipassmt rtblo\n                                    (upper_closure\n(packet_assume_new rs))))))) \\<Longrightarrow>\n                normalized_src_ports m \\<and>\n                normalized_dst_ports m \\<and>\n                normalized_src_ips m \\<and>\n                normalized_dst_ips m \\<and>\n                normalized_ifaces m \\<and>\n                normalized_protocols m \\<and>\n                \\<not> has_disc is_L4_Flags m \\<and>\n                \\<not> has_disc is_CT_State m \\<and>\n                \\<not> has_disc is_MultiportPorts m \\<and>\n                \\<not> has_disc is_Extra m \\<and>\n                (a = action.Accept \\<or> a = action.Drop);\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m;\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> check_simple_fw_preconditions\n                       (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure (packet_assume_new rs)))))))", "unfolding check_simple_fw_preconditions_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m a.\n                Rule m a\n                \\<in> set (upper_closure\n                            (optimize_matches\n                              (abstract_primitive\n                                (\\<lambda>r.\n                                    case r of\n                                    Pos a \\<Rightarrow>\nis_Iiface a \\<or> is_Oiface a\n                                    | Neg a \\<Rightarrow>\n  is_Iiface a \\<or> is_Oiface a))\n                              (optimize_matches abstract_for_simple_firewall\n                                (upper_closure\n                                  (iface_try_rewrite ipassmt rtblo\n                                    (upper_closure\n(packet_assume_new rs))))))) \\<Longrightarrow>\n                normalized_src_ports m \\<and>\n                normalized_dst_ports m \\<and>\n                normalized_src_ips m \\<and>\n                normalized_dst_ips m \\<and>\n                normalized_ifaces m \\<and>\n                normalized_protocols m \\<and>\n                \\<not> has_disc is_L4_Flags m \\<and>\n                \\<not> has_disc is_CT_State m \\<and>\n                \\<not> has_disc is_MultiportPorts m \\<and>\n                \\<not> has_disc is_Extra m \\<and>\n                (a = action.Accept \\<or> a = action.Drop);\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m;\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set\n(upper_closure\n  (optimize_matches\n    (abstract_primitive\n      (case_negation_type (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n        (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)))\n    (optimize_matches abstract_for_simple_firewall\n      (upper_closure\n        (iface_try_rewrite ipassmt rtblo\n          (upper_closure (packet_assume_new rs))))))).\n                         case r of\n                         Rule m a \\<Rightarrow>\n                           normalized_src_ports m \\<and>\n                           normalized_dst_ports m \\<and>\n                           normalized_src_ips m \\<and>\n                           normalized_dst_ips m \\<and>\n                           normalized_ifaces m \\<and>\n                           normalized_protocols m \\<and>\n                           \\<not> has_disc is_L4_Flags m \\<and>\n                           \\<not> has_disc is_CT_State m \\<and>\n                           \\<not> has_disc is_MultiportPorts m \\<and>\n                           \\<not> has_disc is_Extra m \\<and>\n                           (a = action.Accept \\<or> a = action.Drop)", "by(clarify, rename_tac r, case_tac r, rename_tac m a, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rule m a\n             \\<in> set (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs)))))));\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        normalized_src_ports m \\<and>\n        normalized_dst_ports m \\<and>\n        normalized_src_ips m \\<and>\n        normalized_dst_ips m \\<and>\n        normalized_ifaces m \\<and>\n        normalized_protocols m \\<and>\n        \\<not> has_disc is_L4_Flags m \\<and>\n        \\<not> has_disc is_CT_State m \\<and>\n        \\<not> has_disc is_MultiportPorts m \\<and>\n        \\<not> has_disc is_Extra m \\<and>\n        (a = action.Accept \\<or> a = action.Drop);\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m;\n     \\<And>m a.\n        Rule m a\n        \\<in> set (upper_closure\n                    (optimize_matches\n                      (abstract_primitive\n                        (\\<lambda>r.\n                            case r of\n                            Pos a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a\n                            | Neg a \\<Rightarrow>\n                                is_Iiface a \\<or> is_Oiface a))\n                      (optimize_matches abstract_for_simple_firewall\n                        (upper_closure\n                          (iface_try_rewrite ipassmt rtblo\n                            (upper_closure\n                              (packet_assume_new rs))))))) \\<Longrightarrow>\n        \\<not> has_disc is_Oiface m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m \\<and>\n                      \\<not> has_disc is_Oiface m", "by simp"], ["proof (state)\nthis:\n  check_simple_fw_preconditions\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n  Rule ?m ?a\n  \\<in> set (upper_closure\n              (optimize_matches\n                (abstract_primitive\n                  (\\<lambda>r.\n                      case r of\n                      Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                      | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                (optimize_matches abstract_for_simple_firewall\n                  (upper_closure\n                    (iface_try_rewrite ipassmt rtblo\n                      (upper_closure\n                        (packet_assume_new rs))))))) \\<Longrightarrow>\n  \\<not> has_disc is_Iiface ?m \\<and> \\<not> has_disc is_Oiface ?m\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"{p :: ('i,'a) tagged_packet_scheme. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p :: ('i,'a) tagged_packet_scheme. ?\\<gamma>,p\\<turnstile> \\<langle>?rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "apply(subst approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF simplers]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p} =\n    {p. approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p}", "apply(rule Collect_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n         Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p) =\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (packet_assume_new rs) Undecided =\n        Decision FinalAllow \\<and>\n        newpkt p)", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n      Undecided =\n     Decision FinalAllow \\<and>\n     newpkt p) =\n    (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n      (packet_assume_new rs) Undecided =\n     Decision FinalAllow \\<and>\n     newpkt p)", "using packet_assume_new[where p = p] newpkt_def[where p = p]"], ["proof (prove)\nusing this:\n  \\<lbrakk>match_tcp_flags ipt_tcp_syn (p_tcp_flags p);\n   p_tag_ctstate p = CT_New\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (common_matcher, ?\\<alpha>) p\n                     (packet_assume_new ?rs) ?s =\n                    approximating_bigstep_fun (common_matcher, ?\\<alpha>) p\n                     ?rs ?s\n  newpkt p \\<equiv>\n  match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<and>\n  p_tag_ctstate p = CT_New\n\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun (common_matcher, in_doubt_allow) p rs\n      Undecided =\n     Decision FinalAllow \\<and>\n     newpkt p) =\n    (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n      (packet_assume_new rs) Undecided =\n     Decision FinalAllow \\<and>\n     newpkt p)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n         rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "also"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n         rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_upper_closure(1)[OF s1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalAllow \\<and>\n        newpkt p}", "by simp"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n         rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "also"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>packet_assume_new\n         rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"\\<dots> = {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs3, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n           rtblo\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p}", "apply(cases rtblo; simp; (subst iface_try_rewrite_rtbl[OF s2 nnf2] | subst iface_try_rewrite_no_rtbl[OF s2 nnf2]))"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>p.\n       rtblo = None \\<Longrightarrow>\n       ipassmt_sanity_nowildcards (map_of ipassmt)\n 2. \\<And>p. rtblo = None \\<Longrightarrow> distinct (map fst ipassmt)\n 3. \\<And>p.\n       rtblo = None \\<Longrightarrow>\n       \\<exists>ips.\n          map_of ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n          p_src p \\<in> ipcidr_union_set (set ips)\n 4. rtblo = None \\<Longrightarrow>\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}\n 5. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       ipassmt_sanity_nowildcards (map_of ipassmt)\n 6. \\<And>a p. rtblo = Some a \\<Longrightarrow> distinct (map fst ipassmt)\n 7. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       \\<exists>ips.\n          map_of ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n          p_src p \\<in> ipcidr_union_set (set ips)\n 8. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       output_iface (routing_table_semantics a (p_dst p)) = p_oiface p\n 9. \\<And>a p. rtblo = Some a \\<Longrightarrow> correct_routing a\n 10. \\<And>a p.\n        rtblo = Some a \\<Longrightarrow>\n        ipassmt_sanity_nowildcards (map_of (routing_ipassmt a))\nA total of 12 subgoals...", "using wf_ipassmt1 wf_ipassmt2 nospoofing wf_in_doubt_allow routing_no_wildcards correct_routing routing_decided"], ["proof (prove)\nusing this:\n  ipassmt_sanity_nowildcards (map_of ipassmt)\n  distinct (map fst ipassmt)\n  \\<forall>p.\n     \\<exists>ips.\n        map_of ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set ips)\n  wf_unknown_match_tac in_doubt_allow\n  rtblo = Some ?rtbl \\<Longrightarrow>\n  ipassmt_sanity_nowildcards (map_of (routing_ipassmt ?rtbl))\n  rtblo = Some ?rtbl \\<Longrightarrow> correct_routing ?rtbl\n  rtblo = Some ?rtbl \\<Longrightarrow>\n  output_iface (routing_table_semantics ?rtbl (p_dst ?p)) = p_oiface ?p\n\ngoal (12 subgoals):\n 1. \\<And>p.\n       rtblo = None \\<Longrightarrow>\n       ipassmt_sanity_nowildcards (map_of ipassmt)\n 2. \\<And>p. rtblo = None \\<Longrightarrow> distinct (map fst ipassmt)\n 3. \\<And>p.\n       rtblo = None \\<Longrightarrow>\n       \\<exists>ips.\n          map_of ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n          p_src p \\<in> ipcidr_union_set (set ips)\n 4. rtblo = None \\<Longrightarrow>\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (packet_assume_new\n             rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow \\<and>\n        newpkt p}\n 5. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       ipassmt_sanity_nowildcards (map_of ipassmt)\n 6. \\<And>a p. rtblo = Some a \\<Longrightarrow> distinct (map fst ipassmt)\n 7. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       \\<exists>ips.\n          map_of ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n          p_src p \\<in> ipcidr_union_set (set ips)\n 8. \\<And>a p.\n       rtblo = Some a \\<Longrightarrow>\n       output_iface (routing_table_semantics a (p_dst p)) = p_oiface p\n 9. \\<And>a p. rtblo = Some a \\<Longrightarrow> correct_routing a\n 10. \\<And>a p.\n        rtblo = Some a \\<Longrightarrow>\n        ipassmt_sanity_nowildcards (map_of (routing_ipassmt a))\nA total of 12 subgoals...", "by simp_all"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n         rtblo\n         (upper_closure\n           (packet_assume_new\n             rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "also"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (packet_assume_new\n           rs), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n         rtblo\n         (upper_closure\n           (packet_assume_new\n             rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have \"\\<dots> = {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs4, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n           rtblo\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_upper_closure(1)[OF s3])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n           rtblo\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n           rtblo\n           (upper_closure\n             (packet_assume_new\n               rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                FinalAllow \\<and>\n        newpkt p}", "by simp"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>iface_try_rewrite ipassmt\n         rtblo\n         (upper_closure\n           (packet_assume_new\n             rs)), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "finally"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}", "have 1: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n                  {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs4, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n        newpkt p}", "."], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from abstract_primitive_in_doubt_allow_generic(2)[OF primitive_matcher_generic_common_matcher nnf4 s4]"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new\n                             rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow}", "have 2:\n         \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs4, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs5, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new\n                             rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                   FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n            FinalAllow \\<and>\n                    newpkt p}", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new\n                             rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow \\<and>\n                  newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from abstract_primitive_in_doubt_allow_generic(2)[OF primitive_matcher_generic_common_matcher nnf5 s5]"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow}", "have 3:\n         \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs5, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n          {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs6, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive ?disc)\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure\n                 (packet_assume_new\n                   rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure\n                               (packet_assume_new\n                                 rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n               FinalAllow \\<and>\n                    newpkt p}", "by(auto simp add: abstract_for_simple_firewall_def)"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive\n                       (\\<lambda>r.\n                           case r of\n                           Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                           | Neg a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a))\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow \\<and>\n                  newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have 4: \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs6, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} =\n             {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs7, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           (abstract_primitive\n             (\\<lambda>r.\n                 case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                 | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n           (optimize_matches\n             (abstract_primitive\n               (\\<lambda>r.\n                   case r of\n                   Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                   | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n             (optimize_matches abstract_for_simple_firewall\n               (upper_closure\n                 (iface_try_rewrite ipassmt rtblo\n                   (upper_closure\n                     (packet_assume_new\n                       rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n      FinalAllow \\<and>\n        newpkt p}", "apply(subst transform_upper_closure(1)[OF s6])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           (abstract_primitive\n             (case_negation_type (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalAllow \\<and>\n        newpkt p} =\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           (abstract_primitive\n             (case_negation_type (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n   FinalAllow \\<and>\n        newpkt p}", "by simp"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure\n                 (packet_assume_new\n                   rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (optimize_matches\n           (abstract_primitive\n             (\\<lambda>r.\n                 case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                 | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<and>\n      newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "let ?fw=\"\\<lambda>rs p. approximating_bigstep_fun ?\\<gamma> p rs Undecided\""], ["proof (state)\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have approximating_rule: \"\\<And>p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs7, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<longleftrightarrow> ?fw ?rs7 p = Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n          (optimize_matches\n            (abstract_primitive\n              (\\<lambda>r.\n                  case r of\n                  Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                  | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n            (optimize_matches abstract_for_simple_firewall\n              (upper_closure\n                (iface_try_rewrite ipassmt rtblo\n                  (upper_closure\n                    (packet_assume_new\n                      rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (upper_closure\n           (optimize_matches\n             (abstract_primitive\n               (\\<lambda>r.\n                   case r of\n                   Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                   | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n             (optimize_matches abstract_for_simple_firewall\n               (upper_closure\n                 (iface_try_rewrite ipassmt rtblo\n                   (upper_closure (packet_assume_new rs)))))))\n         Undecided =\n        Decision FinalAllow)", "using approximating_semantics_iff_fun_good_ruleset[OF simple_imp_good_ruleset[OF s7]]"], ["proof (prove)\nusing this:\n  ?\\<gamma>,?p\\<turnstile> \\<langle>upper_closure\n                                     (optimize_matches\n (abstract_primitive\n   (\\<lambda>r.\n       case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n       | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n (optimize_matches abstract_for_simple_firewall\n   (upper_closure\n     (iface_try_rewrite ipassmt rtblo\n       (upper_closure\n         (packet_assume_new\n           rs)))))), ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p\n    (upper_closure\n      (optimize_matches\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n              | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n        (optimize_matches abstract_for_simple_firewall\n          (upper_closure\n            (iface_try_rewrite ipassmt rtblo\n              (upper_closure (packet_assume_new rs)))))))\n    ?s =\n   ?t)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (common_matcher,\n        in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n          (optimize_matches\n            (abstract_primitive\n              (\\<lambda>r.\n                  case r of\n                  Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                  | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n            (optimize_matches abstract_for_simple_firewall\n              (upper_closure\n                (iface_try_rewrite ipassmt rtblo\n                  (upper_closure\n                    (packet_assume_new\n                      rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalAllow =\n       (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n         (upper_closure\n           (optimize_matches\n             (abstract_primitive\n               (\\<lambda>r.\n                   case r of\n                   Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                   | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n             (optimize_matches abstract_for_simple_firewall\n               (upper_closure\n                 (iface_try_rewrite ipassmt rtblo\n                   (upper_closure (packet_assume_new rs)))))))\n         Undecided =\n        Decision FinalAllow)", "by fast"], ["proof (state)\nthis:\n  (common_matcher,\n   in_doubt_allow),?p\\<turnstile> \\<langle>upper_closure\n      (optimize_matches\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n              | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n        (optimize_matches abstract_for_simple_firewall\n          (upper_closure\n            (iface_try_rewrite ipassmt rtblo\n              (upper_closure\n                (packet_assume_new\n                  rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_allow) ?p\n    (upper_closure\n      (optimize_matches\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n              | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n        (optimize_matches abstract_for_simple_firewall\n          (upper_closure\n            (iface_try_rewrite ipassmt rtblo\n              (upper_closure (packet_assume_new rs)))))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from 1 2 3 4"], ["proof (chain)\npicking this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new\n                             rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow \\<and>\n                  newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive\n                       (\\<lambda>r.\n                           case r of\n                           Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                           | Neg a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a))\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow \\<and>\n                  newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure\n                 (packet_assume_new\n                   rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (optimize_matches\n           (abstract_primitive\n             (\\<lambda>r.\n                 case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                 | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<and>\n      newpkt p}", "have \"{p. ?\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n       {p. ?\\<gamma>,p\\<turnstile> \\<langle>?rs7, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (iface_try_rewrite ipassmt rtblo\n           (upper_closure\n             (packet_assume_new\n               rs))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     abstract_for_simple_firewall\n                     (upper_closure\n                       (iface_try_rewrite ipassmt rtblo\n                         (upper_closure\n                           (packet_assume_new\n                             rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n          FinalAllow \\<and>\n                  newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                    FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                     (abstract_primitive\n                       (\\<lambda>r.\n                           case r of\n                           Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                           | Neg a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a))\n                     (optimize_matches abstract_for_simple_firewall\n                       (upper_closure\n                         (iface_try_rewrite ipassmt rtblo\n                           (upper_closure\n                             (packet_assume_new\n                               rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n             FinalAllow \\<and>\n                  newpkt p}\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure\n                 (packet_assume_new\n                   rs))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n FinalAllow \\<and>\n      newpkt p} =\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n         (optimize_matches\n           (abstract_primitive\n             (\\<lambda>r.\n                 case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                 | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n           (optimize_matches abstract_for_simple_firewall\n             (upper_closure\n               (iface_try_rewrite ipassmt rtblo\n                 (upper_closure\n                   (packet_assume_new\n                     rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<and>\n      newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                       (optimize_matches\n                         (abstract_primitive\n                           (\\<lambda>r.\n                               case r of\n                               Pos a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a\n                               | Neg a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a))\n                         (optimize_matches abstract_for_simple_firewall\n                           (upper_closure\n                             (iface_try_rewrite ipassmt rtblo\n                               (upper_closure\n                                 (packet_assume_new\n                                   rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                  FinalAllow \\<and>\n                    newpkt p}", "by blast"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                     (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure\n                               (packet_assume_new\n                                 rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                FinalAllow \\<and>\n                  newpkt p}\n\ngoal (2 subgoals):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}\n 2. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "thus \"{p. (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<and> newpkt p} \\<subseteq>\n         {p. simple_fw (to_simple_firewall_without_interfaces ipassmt rtblo rs) p = Decision FinalAllow \\<and> newpkt p}\""], ["proof (prove)\nusing this:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. (common_matcher,\n                   in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                     (optimize_matches\n                       (abstract_primitive\n                         (\\<lambda>r.\n                             case r of\n                             Pos a \\<Rightarrow>\n                               is_Iiface a \\<or> is_Oiface a\n                             | Neg a \\<Rightarrow>\n                                 is_Iiface a \\<or> is_Oiface a))\n                       (optimize_matches abstract_for_simple_firewall\n                         (upper_closure\n                           (iface_try_rewrite ipassmt rtblo\n                             (upper_closure\n                               (packet_assume_new\n                                 rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow \\<and>\n        newpkt p}\n    \\<subseteq> {p. simple_fw\n                     (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs)\n                     p =\n                    Decision FinalAllow \\<and>\n                    newpkt p}", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>{p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalAllow \\<and>\n                    newpkt p}\n                \\<subseteq> {p. (common_matcher,\n                                 in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                   (optimize_matches\n                                     (abstract_primitive\n (\\<lambda>r.\n     case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n     | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                                     (optimize_matches\n abstract_for_simple_firewall\n (upper_closure\n   (iface_try_rewrite ipassmt rtblo\n     (upper_closure\n       (packet_assume_new\n         rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow \\<and>\n                                newpkt p};\n        (common_matcher,\n         in_doubt_allow),x\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow;\n        newpkt x\\<rbrakk>\n       \\<Longrightarrow> simple_fw\n                          (to_simple_firewall_without_interfaces ipassmt\n                            rtblo rs)\n                          x =\n                         Decision FinalAllow", "subgoal for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                (optimize_matches\n                                  (abstract_primitive\n                                    (\\<lambda>r.\n  case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n  | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                                  (optimize_matches\n                                    abstract_for_simple_firewall\n                                    (upper_closure\n(iface_try_rewrite ipassmt rtblo\n  (upper_closure\n    (packet_assume_new\n      rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n                             newpkt p};\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> simple_fw\n                       (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs)\n                       p =\n                      Decision FinalAllow", "unfolding to_simple_firewall_without_interfaces_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                (optimize_matches\n                                  (abstract_primitive\n                                    (\\<lambda>r.\n  case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n  | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                                  (optimize_matches\n                                    abstract_for_simple_firewall\n                                    (upper_closure\n(iface_try_rewrite ipassmt rtblo\n  (upper_closure\n    (packet_assume_new\n      rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n                             newpkt p};\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> simple_fw\n                       (to_simple_firewall\n                         (upper_closure\n                           (optimize_matches\n                             (abstract_primitive\n                               (\\<lambda>r.\n                                   case r of\n                                   Pos a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a\n                                   | Neg a \\<Rightarrow>\n is_Iiface a \\<or> is_Oiface a))\n                             (optimize_matches abstract_for_simple_firewall\n                               (upper_closure\n                                 (iface_try_rewrite ipassmt rtblo\n                                   (upper_closure\n                                     (packet_assume_new rs))))))))\n                       p =\n                      Decision FinalAllow", "using to_simple_firewall[OF simple_fw_preconditions, where p = p] approximating_rule[where p = p]"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (common_matcher, ?\\<alpha>) p\n   (upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure (packet_assume_new rs)))))))\n   Undecided =\n  simple_fw\n   (to_simple_firewall\n     (upper_closure\n       (optimize_matches\n         (abstract_primitive\n           (\\<lambda>r.\n               case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n               | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n         (optimize_matches abstract_for_simple_firewall\n           (upper_closure\n             (iface_try_rewrite ipassmt rtblo\n               (upper_closure (packet_assume_new rs))))))))\n   p\n  (common_matcher,\n   in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n     (optimize_matches\n       (abstract_primitive\n         (\\<lambda>r.\n             case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n             | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n       (optimize_matches abstract_for_simple_firewall\n         (upper_closure\n           (iface_try_rewrite ipassmt rtblo\n             (upper_closure\n               (packet_assume_new\n                 rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow =\n  (approximating_bigstep_fun (common_matcher, in_doubt_allow) p\n    (upper_closure\n      (optimize_matches\n        (abstract_primitive\n          (\\<lambda>r.\n              case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n              | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n        (optimize_matches abstract_for_simple_firewall\n          (upper_closure\n            (iface_try_rewrite ipassmt rtblo\n              (upper_closure (packet_assume_new rs)))))))\n    Undecided =\n   Decision FinalAllow)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>{p. (common_matcher,\n                  in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                  FinalAllow \\<and>\n                 newpkt p}\n             \\<subseteq> {p. (common_matcher,\n                              in_doubt_allow),p\\<turnstile> \\<langle>upper_closure\n                                (optimize_matches\n                                  (abstract_primitive\n                                    (\\<lambda>r.\n  case r of Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n  | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a))\n                                  (optimize_matches\n                                    abstract_for_simple_firewall\n                                    (upper_closure\n(iface_try_rewrite ipassmt rtblo\n  (upper_closure\n    (packet_assume_new\n      rs)))))), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<and>\n                             newpkt p};\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     newpkt p\\<rbrakk>\n    \\<Longrightarrow> simple_fw\n                       (to_simple_firewall\n                         (upper_closure\n                           (optimize_matches\n                             (abstract_primitive\n                               (\\<lambda>r.\n                                   case r of\n                                   Pos a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a\n                                   | Neg a \\<Rightarrow>\n is_Iiface a \\<or> is_Oiface a))\n                             (optimize_matches abstract_for_simple_firewall\n                               (upper_closure\n                                 (iface_try_rewrite ipassmt rtblo\n                                   (upper_closure\n                                     (packet_assume_new rs))))))))\n                       p =\n                      Decision FinalAllow", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. simple_fw\n                   (to_simple_firewall_without_interfaces ipassmt rtblo rs)\n                   p =\n                  Decision FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "(*the following proof to show that we don't have interfaces left is MADNESS*)"], ["proof (state)\nthis:\n  {p. (common_matcher,\n       in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                       FinalAllow \\<and>\n      newpkt p}\n  \\<subseteq> {p. simple_fw\n                   (to_simple_firewall_without_interfaces ipassmt rtblo rs)\n                   p =\n                  Decision FinalAllow \\<and>\n                  newpkt p}\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have common_primitive_match_to_simple_match_nodisc: \n      \"Some sm = common_primitive_match_to_simple_match m' \\<Longrightarrow>\n       \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m' \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\"\n    if prems: \"check_simple_fw_preconditions [Rule m' a']\"\n    for m' :: \"'i common_primitive match_expr\" and a' sm"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Some sm = common_primitive_match_to_simple_match m';\n     \\<not> has_disc is_Iiface m' \\<and>\n     \\<not> has_disc is_Oiface m'\\<rbrakk>\n    \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "using prems"], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions [Rule m' a']\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Some sm = common_primitive_match_to_simple_match m';\n     \\<not> has_disc is_Iiface m' \\<and>\n     \\<not> has_disc is_Oiface m'\\<rbrakk>\n    \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "proof(induction m' arbitrary: sm rule: common_primitive_match_to_simple_match.induct)"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 36 subgoals...", "case 18"], ["proof (state)\nthis:\n  Some sm =\n  common_primitive_match_to_simple_match\n   (MatchNot (Match (Prot (Proto v_))))\n  \\<not> has_disc is_Iiface (MatchNot (Match (Prot (Proto v_)))) \\<and>\n  \\<not> has_disc is_Oiface (MatchNot (Match (Prot (Proto v_))))\n  check_simple_fw_preconditions\n   [Rule (MatchNot (Match (Prot (Proto v_)))) a']\n\ngoal (36 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 36 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  Some sm =\n  common_primitive_match_to_simple_match\n   (MatchNot (Match (Prot (Proto v_))))\n  \\<not> has_disc is_Iiface (MatchNot (Match (Prot (Proto v_)))) \\<and>\n  \\<not> has_disc is_Oiface (MatchNot (Match (Prot (Proto v_))))\n  check_simple_fw_preconditions\n   [Rule (MatchNot (Match (Prot (Proto v_)))) a']\n\ngoal (1 subgoal):\n 1. iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "by(simp add: check_simple_fw_preconditions_def normalized_protocols_def)"], ["proof (state)\nthis:\n  iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 35 subgoals...", "next"], ["proof (state)\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 35 subgoals...", "case (13 m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m1;\n   \\<not> has_disc is_Iiface m1 \\<and> \\<not> has_disc is_Oiface m1;\n   check_simple_fw_preconditions [Rule m1 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m2;\n   \\<not> has_disc is_Iiface m2 \\<and> \\<not> has_disc is_Oiface m2;\n   check_simple_fw_preconditions [Rule m2 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n  \\<not> has_disc is_Iiface (MatchAnd m1 m2) \\<and>\n  \\<not> has_disc is_Oiface (MatchAnd m1 m2)\n  check_simple_fw_preconditions [Rule (MatchAnd m1 m2) a']\n\ngoal (35 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 35 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m1;\n   \\<not> has_disc is_Iiface m1 \\<and> \\<not> has_disc is_Oiface m1;\n   check_simple_fw_preconditions [Rule m1 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m2;\n   \\<not> has_disc is_Iiface m2 \\<and> \\<not> has_disc is_Oiface m2;\n   check_simple_fw_preconditions [Rule m2 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n  \\<not> has_disc is_Iiface (MatchAnd m1 m2) \\<and>\n  \\<not> has_disc is_Oiface (MatchAnd m1 m2)\n  check_simple_fw_preconditions [Rule (MatchAnd m1 m2) a']\n\ngoal (1 subgoal):\n 1. iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "(*This is madness!!*)"], ["proof (prove)\nusing this:\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m1;\n   \\<not> has_disc is_Iiface m1 \\<and> \\<not> has_disc is_Oiface m1;\n   check_simple_fw_preconditions [Rule m1 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  \\<lbrakk>Some ?sm = common_primitive_match_to_simple_match m2;\n   \\<not> has_disc is_Iiface m2 \\<and> \\<not> has_disc is_Oiface m2;\n   check_simple_fw_preconditions [Rule m2 a']\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n  Some sm = common_primitive_match_to_simple_match (MatchAnd m1 m2)\n  \\<not> has_disc is_Iiface (MatchAnd m1 m2) \\<and>\n  \\<not> has_disc is_Oiface (MatchAnd m1 m2)\n  check_simple_fw_preconditions [Rule (MatchAnd m1 m2) a']\n\ngoal (1 subgoal):\n 1. iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp add: check_simple_fw_preconditions_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>sm.\n                \\<lbrakk>Some sm =\n                         common_primitive_match_to_simple_match m1;\n                 normalized_ifaces m1 \\<and>\n                 normalized_protocols m1\\<rbrakk>\n                \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                  oiface sm = ifaceAny;\n     \\<And>sm.\n        \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n         normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny;\n     Some sm =\n     (case common_primitive_match_to_simple_match m1 of\n      None \\<Rightarrow> None\n      | Some a \\<Rightarrow>\n          case common_primitive_match_to_simple_match m2 of\n          None \\<Rightarrow> None\n          | Some x \\<Rightarrow> simple_match_and a x);\n     \\<not> has_disc is_Iiface m1 \\<and>\n     \\<not> has_disc is_Iiface m2 \\<and>\n     \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n     normalized_src_ports m1 \\<and>\n     normalized_src_ports m2 \\<and>\n     normalized_dst_ports m1 \\<and>\n     normalized_dst_ports m2 \\<and>\n     normalized_src_ips m1 \\<and>\n     normalized_src_ips m2 \\<and>\n     normalized_dst_ips m1 \\<and>\n     normalized_dst_ips m2 \\<and>\n     normalized_ifaces (MatchAnd m1 m2) \\<and>\n     normalized_protocols (MatchAnd m1 m2) \\<and>\n     \\<not> has_disc is_L4_Flags m1 \\<and>\n     \\<not> has_disc is_L4_Flags m2 \\<and>\n     \\<not> has_disc is_CT_State m1 \\<and>\n     \\<not> has_disc is_CT_State m2 \\<and>\n     \\<not> has_disc is_MultiportPorts m1 \\<and>\n     \\<not> has_disc is_MultiportPorts m2 \\<and>\n     \\<not> has_disc is_Extra m1 \\<and>\n     \\<not> has_disc is_Extra m2 \\<and>\n     (a' = action.Accept \\<or> a' = action.Drop)\\<rbrakk>\n    \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(case_tac \"common_primitive_match_to_simple_match m1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>sm.\n                \\<lbrakk>Some sm =\n                         common_primitive_match_to_simple_match m1;\n                 normalized_ifaces m1 \\<and>\n                 normalized_protocols m1\\<rbrakk>\n                \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                  oiface sm = ifaceAny;\n     \\<And>sm.\n        \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n         normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny;\n     Some sm =\n     (case common_primitive_match_to_simple_match m1 of\n      None \\<Rightarrow> None\n      | Some a \\<Rightarrow>\n          case common_primitive_match_to_simple_match m2 of\n          None \\<Rightarrow> None\n          | Some x \\<Rightarrow> simple_match_and a x);\n     \\<not> has_disc is_Iiface m1 \\<and>\n     \\<not> has_disc is_Iiface m2 \\<and>\n     \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n     normalized_src_ports m1 \\<and>\n     normalized_src_ports m2 \\<and>\n     normalized_dst_ports m1 \\<and>\n     normalized_dst_ports m2 \\<and>\n     normalized_src_ips m1 \\<and>\n     normalized_src_ips m2 \\<and>\n     normalized_dst_ips m1 \\<and>\n     normalized_dst_ips m2 \\<and>\n     normalized_ifaces (MatchAnd m1 m2) \\<and>\n     normalized_protocols (MatchAnd m1 m2) \\<and>\n     \\<not> has_disc is_L4_Flags m1 \\<and>\n     \\<not> has_disc is_L4_Flags m2 \\<and>\n     \\<not> has_disc is_CT_State m1 \\<and>\n     \\<not> has_disc is_CT_State m2 \\<and>\n     \\<not> has_disc is_MultiportPorts m1 \\<and>\n     \\<not> has_disc is_MultiportPorts m2 \\<and>\n     \\<not> has_disc is_Extra m1 \\<and>\n     \\<not> has_disc is_Extra m2 \\<and>\n     (a' = action.Accept \\<or> a' = action.Drop);\n     common_primitive_match_to_simple_match m1 = None\\<rbrakk>\n    \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>a.\n       \\<lbrakk>\\<And>sm.\n                   \\<lbrakk>Some sm =\n                            common_primitive_match_to_simple_match m1;\n                    normalized_ifaces m1 \\<and>\n                    normalized_protocols m1\\<rbrakk>\n                   \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                     oiface sm = ifaceAny;\n        \\<And>sm.\n           \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n            normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n           \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                             oiface sm = ifaceAny;\n        Some sm =\n        (case common_primitive_match_to_simple_match m1 of\n         None \\<Rightarrow> None\n         | Some a \\<Rightarrow>\n             case common_primitive_match_to_simple_match m2 of\n             None \\<Rightarrow> None\n             | Some x \\<Rightarrow> simple_match_and a x);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>sm.\n                   \\<lbrakk>Some sm =\n                            common_primitive_match_to_simple_match m1;\n                    normalized_ifaces m1 \\<and>\n                    normalized_protocols m1\\<rbrakk>\n                   \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                     oiface sm = ifaceAny;\n        \\<And>sm.\n           \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n            normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n           \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                             oiface sm = ifaceAny;\n        Some sm =\n        (case common_primitive_match_to_simple_match m1 of\n         None \\<Rightarrow> None\n         | Some a \\<Rightarrow>\n             case common_primitive_match_to_simple_match m2 of\n             None \\<Rightarrow> None\n             | Some x \\<Rightarrow> simple_match_and a x);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(case_tac \"common_primitive_match_to_simple_match m2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>sm.\n                   \\<lbrakk>Some sm =\n                            common_primitive_match_to_simple_match m1;\n                    normalized_ifaces m1 \\<and>\n                    normalized_protocols m1\\<rbrakk>\n                   \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                     oiface sm = ifaceAny;\n        \\<And>sm.\n           \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n            normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n           \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                             oiface sm = ifaceAny;\n        Some sm =\n        (case common_primitive_match_to_simple_match m1 of\n         None \\<Rightarrow> None\n         | Some a \\<Rightarrow>\n             case common_primitive_match_to_simple_match m2 of\n             None \\<Rightarrow> None\n             | Some x \\<Rightarrow> simple_match_and a x);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = None\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>a aa.\n       \\<lbrakk>\\<And>sm.\n                   \\<lbrakk>Some sm =\n                            common_primitive_match_to_simple_match m1;\n                    normalized_ifaces m1 \\<and>\n                    normalized_protocols m1\\<rbrakk>\n                   \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                     oiface sm = ifaceAny;\n        \\<And>sm.\n           \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n            normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n           \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                             oiface sm = ifaceAny;\n        Some sm =\n        (case common_primitive_match_to_simple_match m1 of\n         None \\<Rightarrow> None\n         | Some a \\<Rightarrow>\n             case common_primitive_match_to_simple_match m2 of\n             None \\<Rightarrow> None\n             | Some x \\<Rightarrow> simple_match_and a x);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>\\<And>sm.\n                   \\<lbrakk>Some sm =\n                            common_primitive_match_to_simple_match m1;\n                    normalized_ifaces m1 \\<and>\n                    normalized_protocols m1\\<rbrakk>\n                   \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                                     oiface sm = ifaceAny;\n        \\<And>sm.\n           \\<lbrakk>Some sm = common_primitive_match_to_simple_match m2;\n            normalized_ifaces m2 \\<and> normalized_protocols m2\\<rbrakk>\n           \\<Longrightarrow> iiface sm = ifaceAny \\<and>\n                             oiface sm = ifaceAny;\n        Some sm =\n        (case common_primitive_match_to_simple_match m1 of\n         None \\<Rightarrow> None\n         | Some a \\<Rightarrow>\n             case common_primitive_match_to_simple_match m2 of\n             None \\<Rightarrow> None\n             | Some x \\<Rightarrow> simple_match_and a x);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>normalized_ifaces m1 \\<and>\n                normalized_protocols m1 \\<Longrightarrow>\n                iiface a = ifaceAny \\<and> oiface a = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iiface aa = ifaceAny \\<and> oiface aa = ifaceAny;\n        Some sm = simple_match_and a aa;\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(rename_tac a aa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>normalized_ifaces m1 \\<and>\n                normalized_protocols m1 \\<Longrightarrow>\n                iiface a = ifaceAny \\<and> oiface a = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iiface aa = ifaceAny \\<and> oiface aa = ifaceAny;\n        Some sm = simple_match_and a aa;\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa iifacea oifacea src dst proto sports dports.\n       \\<lbrakk>normalized_ifaces m1 \\<and>\n                normalized_protocols m1 \\<Longrightarrow>\n                iiface a = ifaceAny \\<and> oiface a = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iiface aa = ifaceAny \\<and> oiface aa = ifaceAny;\n        Some sm = simple_match_and a aa;\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa;\n        a =\n        \\<lparr>iiface = iifacea, oiface = oifacea, src = src, dst = dst,\n           proto = proto, sports = sports, dports = dports\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(case_tac aa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa iifacea oifacea src dst proto sports dports iifaceaa oifaceaa\n       srca dsta protoa sportsa dportsa.\n       \\<lbrakk>normalized_ifaces m1 \\<and>\n                normalized_protocols m1 \\<Longrightarrow>\n                iiface a = ifaceAny \\<and> oiface a = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iiface aa = ifaceAny \\<and> oiface aa = ifaceAny;\n        Some sm = simple_match_and a aa;\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 = Some a;\n        common_primitive_match_to_simple_match m2 = Some aa;\n        a =\n        \\<lparr>iiface = iifacea, oiface = oifacea, src = src, dst = dst,\n           proto = proto, sports = sports, dports = dports\\<rparr>;\n        aa =\n        \\<lparr>iiface = iifaceaa, oiface = oifaceaa, src = srca,\n           dst = dsta, proto = protoa, sports = sportsa,\n           dports = dportsa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa iifacea oifacea src dst proto sports dports iifaceaa oifaceaa\n       srca dsta protoa sportsa dportsa.\n       \\<lbrakk>normalized_ifaces m1 \\<and>\n                normalized_protocols m1 \\<Longrightarrow>\n                iifacea = ifaceAny \\<and> oifacea = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iifaceaa = ifaceAny \\<and> oifaceaa = ifaceAny;\n        Some sm =\n        (case ipcidr_conjunct src srca of None \\<Rightarrow> None\n         | Some sip \\<Rightarrow>\n             case ipcidr_conjunct dst dsta of None \\<Rightarrow> None\n             | Some dip \\<Rightarrow>\n                 case iface_conjunct iifacea iifaceaa of\n                 None \\<Rightarrow> None\n                 | Some iif \\<Rightarrow>\n                     case iface_conjunct oifacea oifaceaa of\n                     None \\<Rightarrow> None\n                     | Some oif \\<Rightarrow>\n                         case simple_proto_conjunct proto protoa of\n                         None \\<Rightarrow> None\n                         | Some p \\<Rightarrow>\n                             Some\n                              \\<lparr>iiface = iif, oiface = oif, src = sip,\n                                 dst = dip, proto = p,\n                                 sports =\n                                   simpl_ports_conjunct sports sportsa,\n                                 dports =\n                                   simpl_ports_conjunct dports\n                                    dportsa\\<rparr>);\n        \\<not> has_disc is_Iiface m1 \\<and>\n        \\<not> has_disc is_Iiface m2 \\<and>\n        \\<not> has_disc is_Oiface m1 \\<and> \\<not> has_disc is_Oiface m2;\n        normalized_src_ports m1 \\<and>\n        normalized_src_ports m2 \\<and>\n        normalized_dst_ports m1 \\<and>\n        normalized_dst_ports m2 \\<and>\n        normalized_src_ips m1 \\<and>\n        normalized_src_ips m2 \\<and>\n        normalized_dst_ips m1 \\<and>\n        normalized_dst_ips m2 \\<and>\n        normalized_ifaces (MatchAnd m1 m2) \\<and>\n        normalized_protocols (MatchAnd m1 m2) \\<and>\n        \\<not> has_disc is_L4_Flags m1 \\<and>\n        \\<not> has_disc is_L4_Flags m2 \\<and>\n        \\<not> has_disc is_CT_State m1 \\<and>\n        \\<not> has_disc is_CT_State m2 \\<and>\n        \\<not> has_disc is_MultiportPorts m1 \\<and>\n        \\<not> has_disc is_MultiportPorts m2 \\<and>\n        \\<not> has_disc is_Extra m1 \\<and>\n        \\<not> has_disc is_Extra m2 \\<and>\n        (a' = action.Accept \\<or> a' = action.Drop);\n        common_primitive_match_to_simple_match m1 =\n        Some\n         \\<lparr>iiface = iifacea, oiface = oifacea, src = src, dst = dst,\n            proto = proto, sports = sports, dports = dports\\<rparr>;\n        common_primitive_match_to_simple_match m2 =\n        Some\n         \\<lparr>iiface = iifaceaa, oiface = oifaceaa, src = srca,\n            dst = dsta, proto = protoa, sports = sportsa,\n            dports = dportsa\\<rparr>;\n        a =\n        \\<lparr>iiface = iifacea, oiface = oifacea, src = src, dst = dst,\n           proto = proto, sports = sports, dports = dports\\<rparr>;\n        aa =\n        \\<lparr>iiface = iifaceaa, oiface = oifaceaa, src = srca,\n           dst = dsta, proto = protoa, sports = sportsa,\n           dports = dportsa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp split: option.split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa iiface oiface src dst proto sports dports iifacea oifacea\n       srca dsta protoa sportsa dportsa x2 x2a x2b x2c x2d.\n       \\<lbrakk>common_primitive_match_to_simple_match m1 =\n                Some\n                 \\<lparr>iiface = iiface, oiface = oiface, src = src,\n                    dst = dst, proto = proto, sports = sports,\n                    dports = dports\\<rparr>;\n        common_primitive_match_to_simple_match m2 =\n        Some\n         \\<lparr>iiface = iifacea, oiface = oifacea, src = srca, dst = dsta,\n            proto = protoa, sports = sportsa, dports = dportsa\\<rparr>;\n        a =\n        \\<lparr>iiface = iiface, oiface = oiface, src = src, dst = dst,\n           proto = proto, sports = sports, dports = dports\\<rparr>;\n        aa =\n        \\<lparr>iiface = iifacea, oiface = oifacea, src = srca, dst = dsta,\n           proto = protoa, sports = sportsa, dports = dportsa\\<rparr>;\n        normalized_ifaces m1 \\<and>\n        normalized_protocols m1 \\<Longrightarrow>\n        iiface = ifaceAny \\<and> oiface = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iifacea = ifaceAny \\<and> oifacea = ifaceAny;\n        \\<not> has_disc is_Iiface m1; normalized_src_ports m1;\n        \\<not> has_disc is_Iiface m2; normalized_src_ports m2;\n        \\<not> has_disc is_Oiface m1; \\<not> has_disc is_Oiface m2;\n        normalized_dst_ports m1; normalized_dst_ports m2;\n        normalized_src_ips m1; normalized_src_ips m2; normalized_dst_ips m1;\n        normalized_dst_ips m2; normalized_ifaces (MatchAnd m1 m2);\n        normalized_protocols (MatchAnd m1 m2);\n        \\<not> has_disc is_L4_Flags m1; \\<not> has_disc is_L4_Flags m2;\n        \\<not> has_disc is_CT_State m1; \\<not> has_disc is_CT_State m2;\n        \\<not> has_disc is_MultiportPorts m1;\n        \\<not> has_disc is_MultiportPorts m2; \\<not> has_disc is_Extra m1;\n        \\<not> has_disc is_Extra m2;\n        a' = action.Accept \\<or> a' = action.Drop;\n        ipcidr_conjunct src srca = Some x2;\n        ipcidr_conjunct dst dsta = Some x2a;\n        iface_conjunct iiface iifacea = Some x2b;\n        iface_conjunct oiface oifacea = Some x2c;\n        simple_proto_conjunct proto protoa = Some x2d;\n        sm =\n        \\<lparr>iiface = x2b, oiface = x2c, src = x2, dst = x2a,\n           proto = x2d, sports = simpl_ports_conjunct sports sportsa,\n           dports = simpl_ports_conjunct dports dportsa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x2b = ifaceAny \\<and> x2c = ifaceAny", "using iface_conjunct_ifaceAny normalized_ifaces_def normalized_protocols_def"], ["proof (prove)\nusing this:\n  iface_conjunct ifaceAny ?i = Some ?i\n  normalized_ifaces ?m \\<equiv>\n  \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n          ?m\n  normalized_protocols ?m \\<equiv> \\<not> has_disc_negated is_Prot False ?m\n\ngoal (1 subgoal):\n 1. \\<And>a aa iiface oiface src dst proto sports dports iifacea oifacea\n       srca dsta protoa sportsa dportsa x2 x2a x2b x2c x2d.\n       \\<lbrakk>common_primitive_match_to_simple_match m1 =\n                Some\n                 \\<lparr>iiface = iiface, oiface = oiface, src = src,\n                    dst = dst, proto = proto, sports = sports,\n                    dports = dports\\<rparr>;\n        common_primitive_match_to_simple_match m2 =\n        Some\n         \\<lparr>iiface = iifacea, oiface = oifacea, src = srca, dst = dsta,\n            proto = protoa, sports = sportsa, dports = dportsa\\<rparr>;\n        a =\n        \\<lparr>iiface = iiface, oiface = oiface, src = src, dst = dst,\n           proto = proto, sports = sports, dports = dports\\<rparr>;\n        aa =\n        \\<lparr>iiface = iifacea, oiface = oifacea, src = srca, dst = dsta,\n           proto = protoa, sports = sportsa, dports = dportsa\\<rparr>;\n        normalized_ifaces m1 \\<and>\n        normalized_protocols m1 \\<Longrightarrow>\n        iiface = ifaceAny \\<and> oiface = ifaceAny;\n        normalized_ifaces m2 \\<and>\n        normalized_protocols m2 \\<Longrightarrow>\n        iifacea = ifaceAny \\<and> oifacea = ifaceAny;\n        \\<not> has_disc is_Iiface m1; normalized_src_ports m1;\n        \\<not> has_disc is_Iiface m2; normalized_src_ports m2;\n        \\<not> has_disc is_Oiface m1; \\<not> has_disc is_Oiface m2;\n        normalized_dst_ports m1; normalized_dst_ports m2;\n        normalized_src_ips m1; normalized_src_ips m2; normalized_dst_ips m1;\n        normalized_dst_ips m2; normalized_ifaces (MatchAnd m1 m2);\n        normalized_protocols (MatchAnd m1 m2);\n        \\<not> has_disc is_L4_Flags m1; \\<not> has_disc is_L4_Flags m2;\n        \\<not> has_disc is_CT_State m1; \\<not> has_disc is_CT_State m2;\n        \\<not> has_disc is_MultiportPorts m1;\n        \\<not> has_disc is_MultiportPorts m2; \\<not> has_disc is_Extra m1;\n        \\<not> has_disc is_Extra m2;\n        a' = action.Accept \\<or> a' = action.Drop;\n        ipcidr_conjunct src srca = Some x2;\n        ipcidr_conjunct dst dsta = Some x2a;\n        iface_conjunct iiface iifacea = Some x2b;\n        iface_conjunct oiface oifacea = Some x2c;\n        simple_proto_conjunct proto protoa = Some x2d;\n        sm =\n        \\<lparr>iiface = x2b, oiface = x2c, src = x2, dst = x2a,\n           proto = x2d, sports = simpl_ports_conjunct sports sportsa,\n           dports = simpl_ports_conjunct dports dportsa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x2b = ifaceAny \\<and> x2c = ifaceAny", "by (metis has_disc_negated.simps(4) option.inject)"], ["proof (state)\nthis:\n  iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n\ngoal (34 subgoals):\n 1. \\<And>sm.\n       \\<lbrakk>Some sm = common_primitive_match_to_simple_match MatchAny;\n        \\<not> has_disc is_Iiface MatchAny \\<and>\n        \\<not> has_disc is_Oiface MatchAny;\n        check_simple_fw_preconditions [Rule MatchAny a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (MatchNot MatchAny);\n        \\<not> has_disc is_Iiface (MatchNot MatchAny) \\<and>\n        \\<not> has_disc is_Oiface (MatchNot MatchAny);\n        check_simple_fw_preconditions [Rule (MatchNot MatchAny) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 3. \\<And>iif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (IIface iif));\n        \\<not> has_disc is_Iiface (Match (IIface iif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (IIface iif));\n        check_simple_fw_preconditions\n         [Rule (Match (IIface iif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 4. \\<And>oif sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (OIface oif));\n        \\<not> has_disc is_Iiface (Match (OIface oif)) \\<and>\n        \\<not> has_disc is_Oiface (Match (OIface oif));\n        check_simple_fw_preconditions\n         [Rule (Match (OIface oif)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 5. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Src (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Src (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 6. \\<And>pre len sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Dst (IpAddrNetmask pre len)));\n        \\<not> has_disc is_Iiface\n                (Match (Dst (IpAddrNetmask pre len))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Dst (IpAddrNetmask pre len)));\n        check_simple_fw_preconditions\n         [Rule (Match (Dst (IpAddrNetmask pre len))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 7. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match (Match (Prot p));\n        \\<not> has_disc is_Iiface (Match (Prot p)) \\<and>\n        \\<not> has_disc is_Oiface (Match (Prot p));\n        check_simple_fw_preconditions [Rule (Match (Prot p)) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 8. \\<And>p sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [])));\n        \\<not> has_disc is_Iiface (Match (Src_Ports (L4Ports p []))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p []))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 9. \\<And>p s e sm.\n       \\<lbrakk>Some sm =\n                common_primitive_match_to_simple_match\n                 (Match (Src_Ports (L4Ports p [(s, e)])));\n        \\<not> has_disc is_Iiface\n                (Match (Src_Ports (L4Ports p [(s, e)]))) \\<and>\n        \\<not> has_disc is_Oiface (Match (Src_Ports (L4Ports p [(s, e)])));\n        check_simple_fw_preconditions\n         [Rule (Match (Src_Ports (L4Ports p [(s, e)]))) a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 10. \\<And>p sm.\n        \\<lbrakk>Some sm =\n                 common_primitive_match_to_simple_match\n                  (Match (Dst_Ports (L4Ports p [])));\n         \\<not> has_disc is_Iiface (Match (Dst_Ports (L4Ports p []))) \\<and>\n         \\<not> has_disc is_Oiface (Match (Dst_Ports (L4Ports p [])));\n         check_simple_fw_preconditions\n          [Rule (Match (Dst_Ports (L4Ports p []))) a']\\<rbrakk>\n        \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\nA total of 34 subgoals...", "qed(simp_all add: check_simple_fw_preconditions_def simple_match_any_def)"], ["proof (state)\nthis:\n  \\<lbrakk>check_simple_fw_preconditions [Rule ?m' ?a'];\n   Some ?sm = common_primitive_match_to_simple_match ?m';\n   \\<not> has_disc is_Iiface ?m' \\<and>\n   \\<not> has_disc is_Oiface ?m'\\<rbrakk>\n  \\<Longrightarrow> iiface ?sm = ifaceAny \\<and> oiface ?sm = ifaceAny\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "have to_simple_firewall_no_ifaces: \"(\\<And>m a. Rule m a \\<in> set rs \\<Longrightarrow> \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m) \\<Longrightarrow> \n        \\<forall>r\\<in>set (to_simple_firewall rs). iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\"\n      if pre1: \"check_simple_fw_preconditions rs\" for rs :: \"'i common_primitive rule list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m a.\n        Rule m a \\<in> set rs \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m \\<and>\n        \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n    \\<forall>r\\<in>set (to_simple_firewall rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "using pre1"], ["proof (prove)\nusing this:\n  check_simple_fw_preconditions rs\n\ngoal (1 subgoal):\n 1. (\\<And>m a.\n        Rule m a \\<in> set rs \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m \\<and>\n        \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n    \\<forall>r\\<in>set (to_simple_firewall rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "apply(induction rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>m a.\n                Rule m a \\<in> set [] \\<Longrightarrow>\n                \\<not> has_disc is_Iiface m \\<and>\n                \\<not> has_disc is_Oiface m;\n     check_simple_fw_preconditions []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall []).\n                         iiface (match_sel r) = ifaceAny \\<and>\n                         oiface (match_sel r) = ifaceAny\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa \\<in> set (a # rs) \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply(simp add: to_simple_firewall_simps; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa \\<in> set (a # rs) \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply(subgoal_tac \"check_simple_fw_preconditions rs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs);\n        check_simple_fw_preconditions rs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> check_simple_fw_preconditions rs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs)\\<rbrakk>\n       \\<Longrightarrow> check_simple_fw_preconditions rs\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs);\n        check_simple_fw_preconditions rs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<And>m a.\n                         Rule m a \\<in> set rs_ \\<Longrightarrow>\n                         \\<not> has_disc is_Iiface m \\<and>\n                         \\<not> has_disc is_Oiface m;\n              check_simple_fw_preconditions rs_\\<rbrakk>\n             \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall rs_).\n                                  iiface (match_sel r) = ifaceAny \\<and>\n                                  oiface (match_sel r) = ifaceAny;\n     \\<And>m aa.\n        Rule m aa = a_ \\<or> Rule m aa \\<in> set rs_ \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n     check_simple_fw_preconditions (a_ # rs_)\\<rbrakk>\n    \\<Longrightarrow> check_simple_fw_preconditions rs_", "by(simp add: check_simple_fw_preconditions_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m aa.\n           Rule m aa = a \\<or> Rule m aa \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (a # rs);\n        check_simple_fw_preconditions rs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (a # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply(rename_tac r rs, case_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>\\<lbrakk>\\<And>m a.\n                            Rule m a \\<in> set rs \\<Longrightarrow>\n                            \\<not> has_disc is_Iiface m \\<and>\n                            \\<not> has_disc is_Oiface m;\n                 check_simple_fw_preconditions rs\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (to_simple_firewall rs).\n                                     iiface (match_sel r) = ifaceAny \\<and>\n                                     oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           Rule m a = r \\<or> Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (r # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall (r # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (to_simple_firewall (Rule x1 x2 # rs)).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply(simp add: to_simple_firewall_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (case common_primitive_match_to_simple_match x1 of\n    None \\<Rightarrow> to_simple_firewall rs\n    | Some sm \\<Rightarrow>\n        SimpleRule sm (action_to_simple_action x2) # to_simple_firewall rs).\n                            iiface (match_sel r) = ifaceAny \\<and>\n                            oiface (match_sel r) = ifaceAny", "apply(simp split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> (common_primitive_match_to_simple_match x1 =\n                          None \\<longrightarrow>\n                          (\\<forall>r\\<in>set (to_simple_firewall rs).\n                              iiface (match_sel r) = ifaceAny \\<and>\n                              oiface (match_sel r) = ifaceAny)) \\<and>\n                         (\\<forall>x2.\n                             common_primitive_match_to_simple_match x1 =\n                             Some x2 \\<longrightarrow>\n                             iiface x2 = ifaceAny \\<and>\n                             oiface x2 = ifaceAny \\<and>\n                             (\\<forall>r\\<in>set (to_simple_firewall rs).\n                                 iiface (match_sel r) = ifaceAny \\<and>\n                                 oiface (match_sel r) = ifaceAny))", "apply(intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> common_primitive_match_to_simple_match x1 =\n                         None \\<longrightarrow>\n                         (\\<forall>r\\<in>set (to_simple_firewall rs).\n                             iiface (match_sel r) = ifaceAny \\<and>\n                             oiface (match_sel r) = ifaceAny)\n 2. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            common_primitive_match_to_simple_match x1 =\n                            Some x2 \\<longrightarrow>\n                            iiface x2 = ifaceAny \\<and>\n                            oiface x2 = ifaceAny \\<and>\n                            (\\<forall>r\\<in>set (to_simple_firewall rs).\n                                iiface (match_sel r) = ifaceAny \\<and>\n                                oiface (match_sel r) = ifaceAny)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            common_primitive_match_to_simple_match x1 =\n                            Some x2 \\<longrightarrow>\n                            iiface x2 = ifaceAny \\<and>\n                            oiface x2 = ifaceAny \\<and>\n                            (\\<forall>r\\<in>set (to_simple_firewall rs).\n                                iiface (match_sel r) = ifaceAny \\<and>\n                                oiface (match_sel r) = ifaceAny)", "apply(intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a\\<rbrakk>\n       \\<Longrightarrow> iiface x2a = ifaceAny \\<and>\n                         oiface x2a = ifaceAny \\<and>\n                         (\\<forall>r\\<in>set (to_simple_firewall rs).\n                             iiface (match_sel r) = ifaceAny \\<and>\n                             oiface (match_sel r) = ifaceAny)", "apply(subgoal_tac \"(\\<forall>m\\<in>set (to_simple_firewall rs). iiface (match_sel m) = ifaceAny \\<and> oiface (match_sel m) = ifaceAny)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface x2a = ifaceAny \\<and>\n                         oiface x2a = ifaceAny \\<and>\n                         (\\<forall>r\\<in>set (to_simple_firewall rs).\n                             iiface (match_sel r) = ifaceAny \\<and>\n                             oiface (match_sel r) = ifaceAny)\n 2. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>set (to_simple_firewall rs).\n                            iiface (match_sel m) = ifaceAny \\<and>\n                            oiface (match_sel m) = ifaceAny", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<in>set (to_simple_firewall rs).\n                            iiface (match_sel m) = ifaceAny \\<and>\n                            oiface (match_sel m) = ifaceAny\n 2. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface x2a = ifaceAny \\<and>\n                         oiface x2a = ifaceAny \\<and>\n                         (\\<forall>r\\<in>set (to_simple_firewall rs).\n                             iiface (match_sel r) = ifaceAny \\<and>\n                             oiface (match_sel r) = ifaceAny)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<And>m a.\n                 Rule m a \\<in> set rs_ \\<Longrightarrow>\n                 \\<not> has_disc is_Iiface m \\<and>\n                 \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n             \\<forall>r\\<in>set (to_simple_firewall rs_).\n                iiface (match_sel r) = ifaceAny \\<and>\n                oiface (match_sel r) = ifaceAny;\n     \\<And>m a.\n        m = x1_ \\<and> a = x2_ \\<or>\n        Rule m a \\<in> set rs_ \\<Longrightarrow>\n        \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n     check_simple_fw_preconditions (Rule x1_ x2_ # rs_);\n     check_simple_fw_preconditions rs_; r_ = Rule x1_ x2_;\n     common_primitive_match_to_simple_match x1_ = Some x2a_\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m\\<in>set (to_simple_firewall rs_).\n                         iiface (match_sel m) = ifaceAny \\<and>\n                         oiface (match_sel m) = ifaceAny", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>(\\<And>m a.\n                    Rule m a \\<in> set rs \\<Longrightarrow>\n                    \\<not> has_disc is_Iiface m \\<and>\n                    \\<not> has_disc is_Oiface m) \\<Longrightarrow>\n                \\<forall>r\\<in>set (to_simple_firewall rs).\n                   iiface (match_sel r) = ifaceAny \\<and>\n                   oiface (match_sel r) = ifaceAny;\n        \\<And>m a.\n           m = x1 \\<and> a = x2 \\<or>\n           Rule m a \\<in> set rs \\<Longrightarrow>\n           \\<not> has_disc is_Iiface m \\<and> \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface x2a = ifaceAny \\<and>\n                         oiface x2a = ifaceAny \\<and>\n                         (\\<forall>r\\<in>set (to_simple_firewall rs).\n                             iiface (match_sel r) = ifaceAny \\<and>\n                             oiface (match_sel r) = ifaceAny)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2 x2a.\n       \\<lbrakk>\\<And>m a.\n                   m = x1 \\<and> a = x2 \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule x1 x2 # rs);\n        check_simple_fw_preconditions rs; r = Rule x1 x2;\n        common_primitive_match_to_simple_match x1 = Some x2a;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface x2a = ifaceAny \\<and> oiface x2a = ifaceAny", "apply(rename_tac m' a' sm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(subgoal_tac \" \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_Iiface m' \\<and>\n                         \\<not> has_disc is_Oiface m'", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_Iiface m' \\<and>\n                         \\<not> has_disc is_Oiface m'\n 2. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m a.\n                m = m'_ \\<and> a = a'_ \\<or>\n                Rule m a \\<in> set rs_ \\<Longrightarrow>\n                \\<not> has_disc is_Iiface m \\<and>\n                \\<not> has_disc is_Oiface m;\n     check_simple_fw_preconditions (Rule m'_ a'_ # rs_);\n     check_simple_fw_preconditions rs_; r_ = Rule m'_ a'_;\n     common_primitive_match_to_simple_match m'_ = Some sm_;\n     \\<forall>m\\<in>set (to_simple_firewall rs_).\n        iiface (match_sel m) = ifaceAny \\<and>\n        oiface (match_sel m) = ifaceAny\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc is_Iiface m'_ \\<and>\n                      \\<not> has_disc is_Oiface m'_", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(subgoal_tac \"check_simple_fw_preconditions [Rule m' a']\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m';\n        check_simple_fw_preconditions [Rule m' a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny\n 2. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> check_simple_fw_preconditions [Rule m' a']", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> check_simple_fw_preconditions [Rule m' a']\n 2. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m';\n        check_simple_fw_preconditions [Rule m' a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m a.\n                m = m'_ \\<and> a = a'_ \\<or>\n                Rule m a \\<in> set rs_ \\<Longrightarrow>\n                \\<not> has_disc is_Iiface m \\<and>\n                \\<not> has_disc is_Oiface m;\n     check_simple_fw_preconditions (Rule m'_ a'_ # rs_);\n     check_simple_fw_preconditions rs_; r_ = Rule m'_ a'_;\n     common_primitive_match_to_simple_match m'_ = Some sm_;\n     \\<forall>m\\<in>set (to_simple_firewall rs_).\n        iiface (match_sel m) = ifaceAny \\<and>\n        oiface (match_sel m) = ifaceAny;\n     \\<not> has_disc is_Iiface m'_ \\<and>\n     \\<not> has_disc is_Oiface m'_\\<rbrakk>\n    \\<Longrightarrow> check_simple_fw_preconditions [Rule m'_ a'_]", "by(simp add: check_simple_fw_preconditions_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m';\n        check_simple_fw_preconditions [Rule m' a']\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(drule common_primitive_match_to_simple_match_nodisc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> Some (?sm204 r rs m' a' sm) =\n                         common_primitive_match_to_simple_match m'\n 2. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and>\n        \\<not> has_disc is_Oiface m'\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_Iiface m' \\<and>\n                         \\<not> has_disc is_Oiface m'\n 3. \\<And>r rs m' a' sm.\n       \\<lbrakk>\\<And>m a.\n                   m = m' \\<and> a = a' \\<or>\n                   Rule m a \\<in> set rs \\<Longrightarrow>\n                   \\<not> has_disc is_Iiface m \\<and>\n                   \\<not> has_disc is_Oiface m;\n        check_simple_fw_preconditions (Rule m' a' # rs);\n        check_simple_fw_preconditions rs; r = Rule m' a';\n        common_primitive_match_to_simple_match m' = Some sm;\n        \\<forall>m\\<in>set (to_simple_firewall rs).\n           iiface (match_sel m) = ifaceAny \\<and>\n           oiface (match_sel m) = ifaceAny;\n        \\<not> has_disc is_Iiface m' \\<and> \\<not> has_disc is_Oiface m';\n        iiface (?sm204 r rs m' a' sm) = ifaceAny \\<and>\n        oiface (?sm204 r rs m' a' sm) = ifaceAny\\<rbrakk>\n       \\<Longrightarrow> iiface sm = ifaceAny \\<and> oiface sm = ifaceAny", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>check_simple_fw_preconditions ?rs;\n   \\<And>m a.\n      Rule m a \\<in> set ?rs \\<Longrightarrow>\n      \\<not> has_disc is_Iiface m \\<and>\n      \\<not> has_disc is_Oiface m\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (to_simple_firewall ?rs).\n                       iiface (match_sel r) = ifaceAny \\<and>\n                       oiface (match_sel r) = ifaceAny\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "from to_simple_firewall_no_ifaces[OF simple_fw_preconditions no_interfaces]"], ["proof (chain)\npicking this:\n  (\\<And>m a.\n      Rule m a\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs))))))) \\<Longrightarrow>\n      Rule m (?a1 m a)\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs)))))))) \\<Longrightarrow>\n  \\<forall>r\\<in>set (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs)))))))).\n     iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny", "show \n      \"\\<forall>r \\<in> set (to_simple_firewall_without_interfaces ipassmt rtblo rs). iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\""], ["proof (prove)\nusing this:\n  (\\<And>m a.\n      Rule m a\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs))))))) \\<Longrightarrow>\n      Rule m (?a1 m a)\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs)))))))) \\<Longrightarrow>\n  \\<forall>r\\<in>set (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs)))))))).\n     iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                         rs).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "unfolding to_simple_firewall_without_interfaces_def"], ["proof (prove)\nusing this:\n  (\\<And>m a.\n      Rule m a\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs))))))) \\<Longrightarrow>\n      Rule m (?a1 m a)\n      \\<in> set (upper_closure\n                  (optimize_matches\n                    (abstract_primitive\n                      (\\<lambda>r.\n                          case r of\n                          Pos a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a\n                          | Neg a \\<Rightarrow>\n                              is_Iiface a \\<or> is_Oiface a))\n                    (optimize_matches abstract_for_simple_firewall\n                      (upper_closure\n                        (iface_try_rewrite ipassmt rtblo\n                          (upper_closure\n                            (packet_assume_new rs)))))))) \\<Longrightarrow>\n  \\<forall>r\\<in>set (to_simple_firewall\n                       (upper_closure\n                         (optimize_matches\n                           (abstract_primitive\n                             (\\<lambda>r.\n                                 case r of\n                                 Pos a \\<Rightarrow>\n                                   is_Iiface a \\<or> is_Oiface a\n                                 | Neg a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a))\n                           (optimize_matches abstract_for_simple_firewall\n                             (upper_closure\n                               (iface_try_rewrite ipassmt rtblo\n                                 (upper_closure\n                                   (packet_assume_new rs)))))))).\n     iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (to_simple_firewall\n                         (upper_closure\n                           (optimize_matches\n                             (abstract_primitive\n                               (\\<lambda>r.\n                                   case r of\n                                   Pos a \\<Rightarrow>\n                                     is_Iiface a \\<or> is_Oiface a\n                                   | Neg a \\<Rightarrow>\n is_Iiface a \\<or> is_Oiface a))\n                             (optimize_matches abstract_for_simple_firewall\n                               (upper_closure\n                                 (iface_try_rewrite ipassmt rtblo\n                                   (upper_closure\n                                     (packet_assume_new rs)))))))).\n       iiface (match_sel r) = ifaceAny \\<and>\n       oiface (match_sel r) = ifaceAny", "by(simp add: to_simple_firewall_def simple_fw_preconditions)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (to_simple_firewall_without_interfaces ipassmt rtblo\n                       rs).\n     iiface (match_sel r) = ifaceAny \\<and> oiface (match_sel r) = ifaceAny\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}