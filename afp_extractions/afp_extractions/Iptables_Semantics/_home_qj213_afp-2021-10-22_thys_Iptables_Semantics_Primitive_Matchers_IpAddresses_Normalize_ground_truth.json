{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/IpAddresses_Normalize.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma normalized_src_ips_def2: \"normalized_src_ips ms = normalized_n_primitive (is_Src, src_sel) normalized_cidr_ip ms\"", "lemma normalized_dst_ips_def2: \"normalized_dst_ips ms = normalized_n_primitive (is_Dst, dst_sel) normalized_cidr_ip ms\"", "lemma ipt_iprange_compress_src_matching: \"match_list (common_matcher, \\<alpha>) (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p \\<longleftrightarrow>\n         matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p\"", "lemma normalize_src_ips: \"normalized_nnf_match m \\<Longrightarrow> \n      match_list (common_matcher, \\<alpha>) (normalize_src_ips m) a p = matches (common_matcher, \\<alpha>) m a p\"", "lemma normalize_src_ips_normalized_n_primitive: \"normalized_nnf_match m \\<Longrightarrow> \n      \\<forall>m' \\<in> set (normalize_src_ips m). normalized_src_ips m'\"", "lemma ipt_iprange_compress_dst_matching: \"match_list (common_matcher, \\<alpha>) (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p \\<longleftrightarrow>\n         matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p\"", "lemma normalize_dst_ips: \"normalized_nnf_match m \\<Longrightarrow> \n      match_list (common_matcher, \\<alpha>) (normalize_dst_ips m) a p = matches (common_matcher, \\<alpha>) m a p\"", "lemma \"normalized_nnf_match m \\<Longrightarrow> normalized_src_ips m \\<Longrightarrow> \\<forall>mn\\<in>set (normalize_dst_ips m). normalized_src_ips mn\"", "lemma normalize_dst_ips_normalized_n_primitive: \"normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m' \\<in> set (normalize_dst_ips m). normalized_dst_ips m'\""], "translations": [["", "lemma normalized_src_ips_def2: \"normalized_src_ips ms = normalized_n_primitive (is_Src, src_sel) normalized_cidr_ip ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_src_ips ms =\n    normalized_n_primitive (is_Src, src_sel) normalized_cidr_ip ms", "by(induction ms rule: normalized_src_ips.induct, simp_all add: normalized_cidr_ip_def)"], ["", "fun normalized_dst_ips :: \"'i::len common_primitive match_expr \\<Rightarrow> bool\" where\n    \"normalized_dst_ips MatchAny = True\" |\n    \"normalized_dst_ips (Match (Dst (IpAddrRange _ _))) = False\" |\n    \"normalized_dst_ips (Match (Dst (IpAddr _))) = False\" |\n    \"normalized_dst_ips (Match (Dst (IpAddrNetmask _ _))) = True\" |\n    \"normalized_dst_ips (Match _) = True\" |\n    \"normalized_dst_ips (MatchNot (Match (Dst _))) = False\" |\n    \"normalized_dst_ips (MatchNot (Match _)) = True\" |\n    \"normalized_dst_ips (MatchAnd m1 m2) = (normalized_dst_ips m1 \\<and> normalized_dst_ips m2)\" |\n    \"normalized_dst_ips (MatchNot (MatchAnd _ _)) = False\" |\n    \"normalized_dst_ips (MatchNot (MatchNot _)) = False\" |\n    \"normalized_dst_ips (MatchNot MatchAny) = True\""], ["", "lemma normalized_dst_ips_def2: \"normalized_dst_ips ms = normalized_n_primitive (is_Dst, dst_sel) normalized_cidr_ip ms\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_dst_ips ms =\n    normalized_n_primitive (is_Dst, dst_sel) normalized_cidr_ip ms", "by(induction ms rule: normalized_dst_ips.induct, simp_all add: normalized_cidr_ip_def)"], ["", "(*possible optimizations: remove the UNIV match on ip here!*)"], ["", "value \"normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n      (MatchAnd (MatchNot (Match ((Src_Ports (L4Ports TCP [(1,2)])):: 32 common_primitive))) (Match (Src_Ports (L4Ports TCP [(1,2)]))))\""], ["", "value \"normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n      (MatchAnd (MatchNot (Match (Src (IpAddrNetmask (10::ipv4addr) 2)))) (Match (Src_Ports (L4Ports TCP [(1,2)]))))\""], ["", "value \"normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n      (MatchAnd (Match (Src (IpAddrNetmask (10::ipv4addr) 2))) (MatchAnd (Match (Src (IpAddrNetmask 10 8))) (Match (Src_Ports (L4Ports TCP [(1,2)])))))\""], ["", "(*too many MatchAny*)"], ["", "value \"normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n      (MatchAnd (Match (Src (IpAddrNetmask (10::ipv4addr) 2))) (MatchAnd (Match (Src (IpAddrNetmask 192 8))) (Match (Src_Ports (L4Ports TCP [(1,2)])))))\""], ["", "definition normalize_src_ips :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr list\" where\n    \"normalize_src_ips = normalize_primitive_extract (common_primitive.is_Src, src_sel)\n                                      common_primitive.Src ipt_iprange_compress\""], ["", "lemma ipt_iprange_compress_src_matching: \"match_list (common_matcher, \\<alpha>) (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p \\<longleftrightarrow>\n         matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "have \"matches (common_matcher, \\<alpha>) (alist_and (NegPos_map common_primitive.Src ml)) a p \\<longleftrightarrow>\n            (\\<forall>m \\<in> set (getPos ml). matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n            (\\<forall>m \\<in> set (getNeg ml). matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n    ((\\<forall>m\\<in>set (getPos ml).\n         matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg ml).\n         matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p))", "by(induction ml rule: alist_and.induct) (auto simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "also"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "have \"\\<dots> \\<longleftrightarrow>  p_src p \\<in>  (\\<Inter> ip \\<in> set (getPos ml). ipt_iprange_to_set ip) - (\\<Union> ip \\<in> set (getNeg ml). ipt_iprange_to_set ip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>m\\<in>set (getPos ml).\n         matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg ml).\n         matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a\n          p)) =\n    (p_src p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))", "by(simp add: match_simplematcher_SrcDst match_simplematcher_SrcDst_not)"], ["proof (state)\nthis:\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p)) =\n  (p_src p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "also"], ["proof (state)\nthis:\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Src m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Src m))) a p)) =\n  (p_src p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "have \"\\<dots> \\<longleftrightarrow> p_src p \\<in> (\\<Union> ip \\<in> set (ipt_iprange_compress ml). ipt_iprange_to_set ip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_src p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n    (p_src p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))", "using ipt_iprange_compress"], ["proof (prove)\nusing this:\n  \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ?l)) =\n  \\<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -\n  \\<Union> (ipt_iprange_to_set ` set (getNeg ?l))\n\ngoal (1 subgoal):\n 1. (p_src p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n    (p_src p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))", "by blast"], ["proof (state)\nthis:\n  (p_src p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n  (p_src p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "also"], ["proof (state)\nthis:\n  (p_src p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n  (p_src p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "have \"\\<dots> \\<longleftrightarrow> (\\<exists>ip \\<in> set (ipt_iprange_compress ml). matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_src p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml))) =\n    (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n        matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)", "by(simp add: match_simplematcher_SrcDst)"], ["proof (state)\nthis:\n  (p_src p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml))) =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "finally"], ["proof (chain)\npicking this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)", "show ?thesis"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "using match_list_matches"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Src ip)) a p)\n  match_list ?\\<gamma> ?ms ?a ?p =\n  (\\<exists>m\\<in>set ?ms. matches ?\\<gamma> m ?a ?p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p", "by fastforce"], ["proof (state)\nthis:\n  match_list (common_matcher, \\<alpha>)\n   (map (Match \\<circ> Src) (ipt_iprange_compress ml)) a p =\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normalize_src_ips: \"normalized_nnf_match m \\<Longrightarrow> \n      match_list (common_matcher, \\<alpha>) (normalize_src_ips m) a p = matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>) (normalize_src_ips m) a p =\n    matches (common_matcher, \\<alpha>) m a p", "unfolding normalize_src_ips_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>)\n     (normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n       m)\n     a p =\n    matches (common_matcher, \\<alpha>) m a p", "using normalize_primitive_extract[OF _ wf_disc_sel_common_primitive(3), where f=ipt_iprange_compress and \\<gamma>=\"(common_matcher, \\<alpha>)\"]\n      ipt_iprange_compress_src_matching"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<forall>ml.\n      match_list (common_matcher, \\<alpha>)\n       (map (Match \\<circ> Src) (ipt_iprange_compress ml)) ?a ?p =\n      matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Src ml)) ?a\n       ?p\\<rbrakk>\n  \\<Longrightarrow> match_list (common_matcher, \\<alpha>)\n                     (normalize_primitive_extract (is_Src, src_sel) Src\n                       ipt_iprange_compress ?m)\n                     ?a ?p =\n                    matches (common_matcher, \\<alpha>) ?m ?a ?p\n  match_list (common_matcher, ?\\<alpha>)\n   (map (Match \\<circ> Src) (ipt_iprange_compress ?ml)) ?a ?p =\n  matches (common_matcher, ?\\<alpha>) (alist_and (NegPos_map Src ?ml)) ?a ?p\n\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>)\n     (normalize_primitive_extract (is_Src, src_sel) Src ipt_iprange_compress\n       m)\n     a p =\n    matches (common_matcher, \\<alpha>) m a p", "by blast"], ["", "lemma normalize_src_ips_normalized_n_primitive: \"normalized_nnf_match m \\<Longrightarrow> \n      \\<forall>m' \\<in> set (normalize_src_ips m). normalized_src_ips m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m'\\<in>set (normalize_src_ips m). normalized_src_ips m'", "unfolding normalize_src_ips_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m'\\<in>set (normalize_primitive_extract (is_Src, src_sel) Src\n                          ipt_iprange_compress m).\n       normalized_src_ips m'", "unfolding normalized_src_ips_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m'\\<in>set (normalize_primitive_extract (is_Src, src_sel) Src\n                          ipt_iprange_compress m).\n       normalized_n_primitive (is_Src, src_sel) normalized_cidr_ip m'", "apply(rule normalize_primitive_extract_normalizes_n_primitive[OF _ wf_disc_sel_common_primitive(3)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. normalized_nnf_match m \\<Longrightarrow> normalized_nnf_match m\n 2. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>as.\n       \\<forall>a'\\<in>set (ipt_iprange_compress as). normalized_cidr_ip a'", "by(simp_all add: ipt_iprange_compress_normalized_IpAddrNetmask)"], ["", "definition normalize_dst_ips :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr list\" where\n    \"normalize_dst_ips = normalize_primitive_extract (common_primitive.is_Dst, dst_sel)\n                                common_primitive.Dst ipt_iprange_compress\""], ["", "lemma ipt_iprange_compress_dst_matching: \"match_list (common_matcher, \\<alpha>) (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p \\<longleftrightarrow>\n         matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "have \"matches (common_matcher, \\<alpha>) (alist_and (NegPos_map common_primitive.Dst ml)) a p \\<longleftrightarrow>\n            (\\<forall>m \\<in> set (getPos ml). matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n            (\\<forall>m \\<in> set (getNeg ml). matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n    ((\\<forall>m\\<in>set (getPos ml).\n         matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg ml).\n         matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p))", "by(induction ml rule: alist_and.induct) (auto simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "also"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "have \"\\<dots> \\<longleftrightarrow>  p_dst p \\<in>  (\\<Inter> ip \\<in> set (getPos ml). ipt_iprange_to_set ip) - (\\<Union> ip \\<in> set (getNeg ml). ipt_iprange_to_set ip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>m\\<in>set (getPos ml).\n         matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg ml).\n         matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a\n          p)) =\n    (p_dst p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))", "by(simp add: match_simplematcher_SrcDst match_simplematcher_SrcDst_not)"], ["proof (state)\nthis:\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p)) =\n  (p_dst p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "also"], ["proof (state)\nthis:\n  ((\\<forall>m\\<in>set (getPos ml).\n       matches (common_matcher, \\<alpha>) (Match (Dst m)) a p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ml).\n       matches (common_matcher, \\<alpha>) (MatchNot (Match (Dst m))) a p)) =\n  (p_dst p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "have \"\\<dots> \\<longleftrightarrow> p_dst p \\<in> (\\<Union> ip \\<in> set (ipt_iprange_compress ml). ipt_iprange_to_set ip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_dst p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n    (p_dst p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))", "using ipt_iprange_compress"], ["proof (prove)\nusing this:\n  \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ?l)) =\n  \\<Inter> (ipt_iprange_to_set ` set (getPos ?l)) -\n  \\<Union> (ipt_iprange_to_set ` set (getNeg ?l))\n\ngoal (1 subgoal):\n 1. (p_dst p\n     \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n           \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n    (p_dst p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))", "by blast"], ["proof (state)\nthis:\n  (p_dst p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n  (p_dst p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "also"], ["proof (state)\nthis:\n  (p_dst p\n   \\<in> \\<Inter> (ipt_iprange_to_set ` set (getPos ml)) -\n         \\<Union> (ipt_iprange_to_set ` set (getNeg ml))) =\n  (p_dst p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml)))\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "have \"\\<dots> \\<longleftrightarrow> (\\<exists>ip \\<in> set (ipt_iprange_compress ml). matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p_dst p\n     \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml))) =\n    (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n        matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)", "by(simp add: match_simplematcher_SrcDst)"], ["proof (state)\nthis:\n  (p_dst p\n   \\<in> \\<Union> (ipt_iprange_to_set ` set (ipt_iprange_compress ml))) =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "finally"], ["proof (chain)\npicking this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)", "show ?thesis"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "using match_list_matches"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p =\n  (\\<exists>ip\\<in>set (ipt_iprange_compress ml).\n      matches (common_matcher, \\<alpha>) (Match (Dst ip)) a p)\n  match_list ?\\<gamma> ?ms ?a ?p =\n  (\\<exists>m\\<in>set ?ms. matches ?\\<gamma> m ?a ?p)\n\ngoal (1 subgoal):\n 1. match_list (common_matcher, \\<alpha>)\n     (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n    matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p", "by fastforce"], ["proof (state)\nthis:\n  match_list (common_matcher, \\<alpha>)\n   (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) a p =\n  matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normalize_dst_ips: \"normalized_nnf_match m \\<Longrightarrow> \n      match_list (common_matcher, \\<alpha>) (normalize_dst_ips m) a p = matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>) (normalize_dst_ips m) a p =\n    matches (common_matcher, \\<alpha>) m a p", "unfolding normalize_dst_ips_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>)\n     (normalize_primitive_extract (is_Dst, dst_sel) Dst ipt_iprange_compress\n       m)\n     a p =\n    matches (common_matcher, \\<alpha>) m a p", "using normalize_primitive_extract[OF _ wf_disc_sel_common_primitive(4), where f=ipt_iprange_compress and \\<gamma>=\"(common_matcher, \\<alpha>)\"]\n      ipt_iprange_compress_dst_matching"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<forall>ml.\n      match_list (common_matcher, \\<alpha>)\n       (map (Match \\<circ> Dst) (ipt_iprange_compress ml)) ?a ?p =\n      matches (common_matcher, \\<alpha>) (alist_and (NegPos_map Dst ml)) ?a\n       ?p\\<rbrakk>\n  \\<Longrightarrow> match_list (common_matcher, \\<alpha>)\n                     (normalize_primitive_extract (is_Dst, dst_sel) Dst\n                       ipt_iprange_compress ?m)\n                     ?a ?p =\n                    matches (common_matcher, \\<alpha>) ?m ?a ?p\n  match_list (common_matcher, ?\\<alpha>)\n   (map (Match \\<circ> Dst) (ipt_iprange_compress ?ml)) ?a ?p =\n  matches (common_matcher, ?\\<alpha>) (alist_and (NegPos_map Dst ?ml)) ?a ?p\n\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    match_list (common_matcher, \\<alpha>)\n     (normalize_primitive_extract (is_Dst, dst_sel) Dst ipt_iprange_compress\n       m)\n     a p =\n    matches (common_matcher, \\<alpha>) m a p", "by blast"], ["", "text\\<open>Normalizing the dst ips preserves the normalized src ips\\<close>"], ["", "lemma \"normalized_nnf_match m \\<Longrightarrow> normalized_src_ips m \\<Longrightarrow> \\<forall>mn\\<in>set (normalize_dst_ips m). normalized_src_ips mn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m; normalized_src_ips m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mn\\<in>set (normalize_dst_ips m).\n                         normalized_src_ips mn", "unfolding normalize_dst_ips_def normalized_src_ips_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m;\n     normalized_n_primitive (is_Src, src_sel) normalized_cidr_ip m\\<rbrakk>\n    \\<Longrightarrow> \\<forall>mn\\<in>set\n (normalize_primitive_extract (is_Dst, dst_sel) Dst ipt_iprange_compress m).\n                         normalized_n_primitive (is_Src, src_sel)\n                          normalized_cidr_ip mn", "by(rule normalize_primitive_extract_preserves_unrelated_normalized_n_primitive)(simp_all add: wf_disc_sel_common_primitive)"], ["", "lemma normalize_dst_ips_normalized_n_primitive: \"normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m' \\<in> set (normalize_dst_ips m). normalized_dst_ips m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m'\\<in>set (normalize_dst_ips m). normalized_dst_ips m'", "unfolding normalize_dst_ips_def normalized_dst_ips_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    \\<forall>m'\\<in>set (normalize_primitive_extract (is_Dst, dst_sel) Dst\n                          ipt_iprange_compress m).\n       normalized_n_primitive (is_Dst, dst_sel) normalized_cidr_ip m'", "by(rule normalize_primitive_extract_normalizes_n_primitive[OF _ wf_disc_sel_common_primitive(4)]) (simp_all add: ipt_iprange_compress_normalized_IpAddrNetmask)"], ["", "end"]]}