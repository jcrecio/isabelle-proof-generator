{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Primitive_Abstract.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma abstract_primitive_preserves_normalized:\n  \"normalized_src_ports m \\<Longrightarrow> normalized_src_ports (abstract_primitive disc m)\"\n  \"normalized_dst_ports m \\<Longrightarrow> normalized_dst_ports (abstract_primitive disc m)\"\n  \"normalized_src_ips m \\<Longrightarrow> normalized_src_ips (abstract_primitive disc m)\"\n  \"normalized_dst_ips m \\<Longrightarrow> normalized_dst_ips (abstract_primitive disc m)\"\n  \"normalized_nnf_match m \\<Longrightarrow> normalized_nnf_match (abstract_primitive disc m)\"", "lemma abstract_primitive_preserves_nodisc:\n  \"\\<not> has_disc disc' m \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)\"", "lemma abstract_primitive_preserves_nodisc_nedgated:\n  \"\\<not> has_disc_negated disc' neg m \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc_negated disc' neg (abstract_primitive disc m)\"", "lemma abstract_primitive_nodisc:\n  \"\\<forall>x. disc' x \\<longrightarrow> disc (Pos x) \\<and> disc (Neg x)  \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)\"", "lemma abstract_primitive_preserves_not_has_disc_negated:\n  \"\\<forall>a. \\<not> disc (Extra a)\\<Longrightarrow> \\<not> has_disc_negated disc neg m \\<Longrightarrow> \\<not> has_disc_negated disc neg (abstract_primitive sel_f m)\"", "lemma abstract_for_simple_firewall_preserves_nodisc_negated:\n  \"\\<forall>a. \\<not> disc (Extra a)\\<Longrightarrow> \\<not> has_disc_negated disc False m \\<Longrightarrow> \\<not> has_disc_negated disc False (abstract_for_simple_firewall m)\"", "lemma not_hasdisc_ctstate_assume_state: \"\\<not> has_disc is_CT_State (ctstate_assume_state s m)\"", "lemma abstract_for_simple_firewall_hasdisc: fixes m :: \"'i::len common_primitive match_expr\"\n  shows \"\\<not> has_disc is_CT_State (abstract_for_simple_firewall m)\"\n  and   \"\\<not> has_disc is_L4_Flags (abstract_for_simple_firewall m)\"", "lemma abstract_for_simple_firewall_negated_ifaces_prots: fixes m :: \"'i::len common_primitive match_expr\"\n  shows  \"normalized_nnf_match m \\<Longrightarrow> \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False (abstract_for_simple_firewall m)\"\n  and \"normalized_nnf_match m \\<Longrightarrow> \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall m)\"", "lemma abstract_primitive_in_doubt_allow_Allow: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      matches (\\<beta>, in_doubt_allow) m action.Accept p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Accept p\"", "lemma abstract_primitive_in_doubt_allow_Allow2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_allow) m action.Drop p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Drop p\"", "lemma abstract_primitive_in_doubt_allow_Deny: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Drop p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) m action.Drop p\"", "lemma abstract_primitive_in_doubt_allow_Deny2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Accept p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_allow) m action.Accept p\"", "theorem abstract_primitive_in_doubt_allow_generic:\n    fixes \\<beta>::\"('i::len common_primitive, ('i, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n       and n: \"\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r)\"\n       and simple: \"simple_ruleset rs\"\n    defines \"\\<gamma> \\<equiv> (\\<beta>, in_doubt_allow)\" and \"abstract disc \\<equiv> optimize_matches (abstract_primitive disc)\"\n    shows   \"{p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"\n                (is ?deny)\n      and   \"{p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\"\n                (is ?allow)", "lemma abstract_primitive_in_doubt_deny_Deny:\n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      matches (\\<beta>, in_doubt_deny) m action.Drop p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Drop p\"", "lemma abstract_primitive_in_doubt_deny_Deny2:\n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_deny) m action.Accept p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Accept p\"", "lemma abstract_primitive_in_doubt_deny_Allow: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Accept p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) m action.Accept p\"", "lemma abstract_primitive_in_doubt_deny_Allow2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Drop p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_deny) m action.Drop p\"", "theorem abstract_primitive_in_doubt_deny_generic:\n    fixes \\<beta>::\"('i::len common_primitive, ('i, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n        and n: \"\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r)\"\n        and simple: \"simple_ruleset rs\"\n    defines \"\\<gamma> \\<equiv> (\\<beta>, in_doubt_deny)\" and \"abstract disc \\<equiv> optimize_matches (abstract_primitive disc)\"\n    shows   \"{p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\"\n             (is ?allow)\n    and     \"{p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"\n             (is ?deny)"], "translations": [["", "lemma abstract_primitive_preserves_normalized:\n  \"normalized_src_ports m \\<Longrightarrow> normalized_src_ports (abstract_primitive disc m)\"\n  \"normalized_dst_ports m \\<Longrightarrow> normalized_dst_ports (abstract_primitive disc m)\"\n  \"normalized_src_ips m \\<Longrightarrow> normalized_src_ips (abstract_primitive disc m)\"\n  \"normalized_dst_ips m \\<Longrightarrow> normalized_dst_ips (abstract_primitive disc m)\"\n  \"normalized_nnf_match m \\<Longrightarrow> normalized_nnf_match (abstract_primitive disc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((normalized_src_ports m \\<Longrightarrow>\n      normalized_src_ports (abstract_primitive disc m)) &&&\n     (normalized_dst_ports m \\<Longrightarrow>\n      normalized_dst_ports (abstract_primitive disc m))) &&&\n    (normalized_src_ips m \\<Longrightarrow>\n     normalized_src_ips (abstract_primitive disc m)) &&&\n    (normalized_dst_ips m \\<Longrightarrow>\n     normalized_dst_ips (abstract_primitive disc m)) &&&\n    (normalized_nnf_match m \\<Longrightarrow>\n     normalized_nnf_match (abstract_primitive disc m))", "by(induction disc m rule: abstract_primitive.induct) (simp_all)"], ["", "lemma abstract_primitive_preserves_nodisc:\n  \"\\<not> has_disc disc' m \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc disc' m;\n     \\<forall>str. \\<not> disc' (Extra str)\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)", "by(induction disc m rule: abstract_primitive.induct)(simp_all)"], ["", "lemma abstract_primitive_preserves_nodisc_nedgated:\n  \"\\<not> has_disc_negated disc' neg m \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc_negated disc' neg (abstract_primitive disc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> has_disc_negated disc' neg m;\n     \\<forall>str. \\<not> disc' (Extra str)\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc_negated disc' neg\n                              (abstract_primitive disc m)", "by(induction disc m arbitrary: neg rule: abstract_primitive.induct) simp+"], ["", "lemma abstract_primitive_nodisc:\n  \"\\<forall>x. disc' x \\<longrightarrow> disc (Pos x) \\<and> disc (Neg x)  \\<Longrightarrow> (\\<forall>str. \\<not> disc' (Extra str)) \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                disc' x \\<longrightarrow> disc (Pos x) \\<and> disc (Neg x);\n     \\<forall>str. \\<not> disc' (Extra str)\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc disc' (abstract_primitive disc m)", "by(induction disc m rule: abstract_primitive.induct) auto"], ["", "lemma abstract_primitive_preserves_not_has_disc_negated:\n  \"\\<forall>a. \\<not> disc (Extra a)\\<Longrightarrow> \\<not> has_disc_negated disc neg m \\<Longrightarrow> \\<not> has_disc_negated disc neg (abstract_primitive sel_f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a. \\<not> disc (Extra a);\n     \\<not> has_disc_negated disc neg m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc_negated disc neg\n                              (abstract_primitive sel_f m)", "by(induction sel_f m arbitrary: neg rule: abstract_primitive.induct) simp+"], ["", "lemma abstract_for_simple_firewall_preserves_nodisc_negated:\n  \"\\<forall>a. \\<not> disc (Extra a)\\<Longrightarrow> \\<not> has_disc_negated disc False m \\<Longrightarrow> \\<not> has_disc_negated disc False (abstract_for_simple_firewall m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a. \\<not> disc (Extra a);\n     \\<not> has_disc_negated disc False m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc_negated disc False\n                              (abstract_for_simple_firewall m)", "unfolding abstract_for_simple_firewall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a. \\<not> disc (Extra a);\n     \\<not> has_disc_negated disc False m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc_negated disc False\n                              (abstract_primitive\n                                (\\<lambda>r.\n                                    case r of\n                                    Pos a \\<Rightarrow>\nis_CT_State a \\<or> is_L4_Flags a\n                                    | Neg a \\<Rightarrow>\n  is_Iiface a \\<or>\n  is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n                                m)", "using abstract_primitive_preserves_nodisc_nedgated"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> has_disc_negated ?disc' ?neg ?m;\n   \\<forall>str. \\<not> ?disc' (Extra str)\\<rbrakk>\n  \\<Longrightarrow> \\<not> has_disc_negated ?disc' ?neg\n                            (abstract_primitive ?disc ?m)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a. \\<not> disc (Extra a);\n     \\<not> has_disc_negated disc False m\\<rbrakk>\n    \\<Longrightarrow> \\<not> has_disc_negated disc False\n                              (abstract_primitive\n                                (\\<lambda>r.\n                                    case r of\n                                    Pos a \\<Rightarrow>\nis_CT_State a \\<or> is_L4_Flags a\n                                    | Neg a \\<Rightarrow>\n  is_Iiface a \\<or>\n  is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n                                m)", "by blast"], ["", "text\\<open>The function @{const ctstate_assume_state} can be used to fix a state and hence remove all state matches from the ruleset.\n      It is therefore advisable to create a simple firewall for a fixed state, e.g. with @{const ctstate_assume_new} before\n      calling to @{const abstract_for_simple_firewall}.\\<close>"], ["", "lemma not_hasdisc_ctstate_assume_state: \"\\<not> has_disc is_CT_State (ctstate_assume_state s m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State (ctstate_assume_state s m)", "by(induction m rule: ctstate_assume_state.induct) (simp_all)"], ["", "lemma abstract_for_simple_firewall_hasdisc: fixes m :: \"'i::len common_primitive match_expr\"\n  shows \"\\<not> has_disc is_CT_State (abstract_for_simple_firewall m)\"\n  and   \"\\<not> has_disc is_L4_Flags (abstract_for_simple_firewall m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State (abstract_for_simple_firewall m) &&&\n    \\<not> has_disc is_L4_Flags (abstract_for_simple_firewall m)", "unfolding abstract_for_simple_firewall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has_disc is_CT_State\n            (abstract_primitive\n              (\\<lambda>r.\n                  case r of\n                  Pos a \\<Rightarrow> is_CT_State a \\<or> is_L4_Flags a\n                  | Neg a \\<Rightarrow>\n                      is_Iiface a \\<or>\n                      is_Oiface a \\<or>\n                      is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n              m) &&&\n    \\<not> has_disc is_L4_Flags\n            (abstract_primitive\n              (\\<lambda>r.\n                  case r of\n                  Pos a \\<Rightarrow> is_CT_State a \\<or> is_L4_Flags a\n                  | Neg a \\<Rightarrow>\n                      is_Iiface a \\<or>\n                      is_Oiface a \\<or>\n                      is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n              m)", "apply(induction \"(\\<lambda>r:: 'i common_primitive negation_type. case r of Pos a \\<Rightarrow> is_CT_State a | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a)\" m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<not> has_disc is_CT_State\n            (abstract_primitive\n              (case_negation_type\n                (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                (\\<lambda>a.\n                    is_Iiface a \\<or>\n                    is_Oiface a \\<or>\n                    is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n              MatchAny)\n 2. \\<not> has_disc is_L4_Flags\n            (abstract_primitive\n              (case_negation_type\n                (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                (\\<lambda>a.\n                    is_Iiface a \\<or>\n                    is_Oiface a \\<or>\n                    is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n              MatchAny)\n 3. \\<And>a.\n       \\<not> has_disc is_CT_State\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (Match a))\n 4. \\<And>a.\n       \\<not> has_disc is_L4_Flags\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (Match a))\n 5. \\<And>a.\n       \\<not> has_disc is_CT_State\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (MatchNot (Match a)))\n 6. \\<And>a.\n       \\<not> has_disc is_L4_Flags\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (MatchNot (Match a)))\n 7. \\<And>v.\n       \\<lbrakk>\\<not> has_disc is_CT_State\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchNot v));\n        \\<not> has_disc is_L4_Flags\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchNot v))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchNot v)))\n 8. \\<And>v.\n       \\<lbrakk>\\<not> has_disc is_CT_State\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchNot v));\n        \\<not> has_disc is_L4_Flags\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchNot v))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_L4_Flags\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchNot v)))\n 9. \\<And>v va.\n       \\<lbrakk>\\<not> has_disc is_CT_State\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchAnd v va));\n        \\<not> has_disc is_L4_Flags\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchAnd v va))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc is_CT_State\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchAnd v va)))\n 10. \\<And>v va.\n        \\<lbrakk>\\<not> has_disc is_CT_State\n                         (abstract_primitive\n                           (case_negation_type\n                             (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                             (\\<lambda>a.\n                                 is_Iiface a \\<or>\n                                 is_Oiface a \\<or>\n                                 is_Prot a \\<or>\n                                 is_CT_State a \\<or> is_L4_Flags a))\n                           (MatchAnd v va));\n         \\<not> has_disc is_L4_Flags\n                 (abstract_primitive\n                   (case_negation_type\n                     (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                     (\\<lambda>a.\n                         is_Iiface a \\<or>\n                         is_Oiface a \\<or>\n                         is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                   (MatchAnd v va))\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_disc is_L4_Flags\n                                  (abstract_primitive\n                                    (case_negation_type\n(\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n(\\<lambda>a.\n    is_Iiface a \\<or>\n    is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                    (MatchNot (MatchAnd v va)))\nA total of 14 subgoals...", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma abstract_for_simple_firewall_negated_ifaces_prots: fixes m :: \"'i::len common_primitive match_expr\"\n  shows  \"normalized_nnf_match m \\<Longrightarrow> \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False (abstract_for_simple_firewall m)\"\n  and \"normalized_nnf_match m \\<Longrightarrow> \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (normalized_nnf_match m \\<Longrightarrow>\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False (abstract_for_simple_firewall m)) &&&\n    (normalized_nnf_match m \\<Longrightarrow>\n     \\<not> has_disc_negated is_Prot False (abstract_for_simple_firewall m))", "unfolding abstract_for_simple_firewall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (normalized_nnf_match m \\<Longrightarrow>\n     \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n             False\n             (abstract_primitive\n               (\\<lambda>r.\n                   case r of\n                   Pos a \\<Rightarrow> is_CT_State a \\<or> is_L4_Flags a\n                   | Neg a \\<Rightarrow>\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n               m)) &&&\n    (normalized_nnf_match m \\<Longrightarrow>\n     \\<not> has_disc_negated is_Prot False\n             (abstract_primitive\n               (\\<lambda>r.\n                   case r of\n                   Pos a \\<Rightarrow> is_CT_State a \\<or> is_L4_Flags a\n                   | Neg a \\<Rightarrow>\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a)\n               m))", "apply(induction \"(\\<lambda>r:: 'i common_primitive negation_type. case r of Pos a \\<Rightarrow> is_CT_State a | Neg a \\<Rightarrow> is_Iiface a \\<or> is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a)\" m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (14 subgoals):\n 1. normalized_nnf_match MatchAny \\<Longrightarrow>\n    \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n            False\n            (abstract_primitive\n              (case_negation_type\n                (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                (\\<lambda>a.\n                    is_Iiface a \\<or>\n                    is_Oiface a \\<or>\n                    is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n              MatchAny)\n 2. normalized_nnf_match MatchAny \\<Longrightarrow>\n    \\<not> has_disc_negated is_Prot False\n            (abstract_primitive\n              (case_negation_type\n                (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                (\\<lambda>a.\n                    is_Iiface a \\<or>\n                    is_Oiface a \\<or>\n                    is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n              MatchAny)\n 3. \\<And>a.\n       normalized_nnf_match (Match a) \\<Longrightarrow>\n       \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               False\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (Match a))\n 4. \\<And>a.\n       normalized_nnf_match (Match a) \\<Longrightarrow>\n       \\<not> has_disc_negated is_Prot False\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (Match a))\n 5. \\<And>a.\n       normalized_nnf_match (MatchNot (Match a)) \\<Longrightarrow>\n       \\<not> has_disc_negated (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n               False\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (MatchNot (Match a)))\n 6. \\<And>a.\n       normalized_nnf_match (MatchNot (Match a)) \\<Longrightarrow>\n       \\<not> has_disc_negated is_Prot False\n               (abstract_primitive\n                 (case_negation_type\n                   (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                   (\\<lambda>a.\n                       is_Iiface a \\<or>\n                       is_Oiface a \\<or>\n                       is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                 (MatchNot (Match a)))\n 7. \\<And>v.\n       \\<lbrakk>normalized_nnf_match (MatchNot v) \\<Longrightarrow>\n                \\<not> has_disc_negated\n                        (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchNot v));\n        normalized_nnf_match (MatchNot v) \\<Longrightarrow>\n        \\<not> has_disc_negated is_Prot False\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchNot v));\n        normalized_nnf_match (MatchNot (MatchNot v))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated\n                                 (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n                                 False\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchNot v)))\n 8. \\<And>v.\n       \\<lbrakk>normalized_nnf_match (MatchNot v) \\<Longrightarrow>\n                \\<not> has_disc_negated\n                        (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchNot v));\n        normalized_nnf_match (MatchNot v) \\<Longrightarrow>\n        \\<not> has_disc_negated is_Prot False\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchNot v));\n        normalized_nnf_match (MatchNot (MatchNot v))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated is_Prot False\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchNot v)))\n 9. \\<And>v va.\n       \\<lbrakk>normalized_nnf_match (MatchAnd v va) \\<Longrightarrow>\n                \\<not> has_disc_negated\n                        (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n                        (abstract_primitive\n                          (case_negation_type\n                            (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                            (\\<lambda>a.\n                                is_Iiface a \\<or>\n                                is_Oiface a \\<or>\n                                is_Prot a \\<or>\n                                is_CT_State a \\<or> is_L4_Flags a))\n                          (MatchAnd v va));\n        normalized_nnf_match (MatchAnd v va) \\<Longrightarrow>\n        \\<not> has_disc_negated is_Prot False\n                (abstract_primitive\n                  (case_negation_type\n                    (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                    (\\<lambda>a.\n                        is_Iiface a \\<or>\n                        is_Oiface a \\<or>\n                        is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                  (MatchAnd v va));\n        normalized_nnf_match (MatchNot (MatchAnd v va))\\<rbrakk>\n       \\<Longrightarrow> \\<not> has_disc_negated\n                                 (\\<lambda>a. is_Iiface a \\<or> is_Oiface a)\n                                 False\n                                 (abstract_primitive\n                                   (case_negation_type\n                                     (\\<lambda>a.\n   is_CT_State a \\<or> is_L4_Flags a)\n                                     (\\<lambda>a.\n   is_Iiface a \\<or>\n   is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                   (MatchNot (MatchAnd v va)))\n 10. \\<And>v va.\n        \\<lbrakk>normalized_nnf_match (MatchAnd v va) \\<Longrightarrow>\n                 \\<not> has_disc_negated\n                         (\\<lambda>a. is_Iiface a \\<or> is_Oiface a) False\n                         (abstract_primitive\n                           (case_negation_type\n                             (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                             (\\<lambda>a.\n                                 is_Iiface a \\<or>\n                                 is_Oiface a \\<or>\n                                 is_Prot a \\<or>\n                                 is_CT_State a \\<or> is_L4_Flags a))\n                           (MatchAnd v va));\n         normalized_nnf_match (MatchAnd v va) \\<Longrightarrow>\n         \\<not> has_disc_negated is_Prot False\n                 (abstract_primitive\n                   (case_negation_type\n                     (\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n                     (\\<lambda>a.\n                         is_Iiface a \\<or>\n                         is_Oiface a \\<or>\n                         is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                   (MatchAnd v va));\n         normalized_nnf_match (MatchNot (MatchAnd v va))\\<rbrakk>\n        \\<Longrightarrow> \\<not> has_disc_negated is_Prot False\n                                  (abstract_primitive\n                                    (case_negation_type\n(\\<lambda>a. is_CT_State a \\<or> is_L4_Flags a)\n(\\<lambda>a.\n    is_Iiface a \\<or>\n    is_Oiface a \\<or> is_Prot a \\<or> is_CT_State a \\<or> is_L4_Flags a))\n                                    (MatchNot (MatchAnd v va)))\nA total of 14 subgoals...", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context\nbegin"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_allow_Allow: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      matches (\\<beta>, in_doubt_allow) m action.Accept p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     matches (\\<beta>, in_doubt_allow) m Accept p\\<rbrakk>\n    \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                       (abstract_primitive disc m) Accept p", "by(induction disc m rule: abstract_primitive.induct)\n       (simp_all add: bunch_of_lemmata_about_matches(1) primitive_matcher_generic.Extra_single)"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_allow_Allow2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_allow) m action.Drop p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     \\<not> matches (\\<beta>, in_doubt_allow) m Drop p\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                              (abstract_primitive disc m) Drop p", "proof(induction disc m rule: abstract_primitive.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive uu_ MatchAny) Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_allow) (Match a) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc (Match a)) Drop p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (Match a)) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Drop p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot v) Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchNot v)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchNot v))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Drop p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd v va)\n                         Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchAnd v va)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchAnd v va))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Drop p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc MatchAny) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot MatchAny) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Drop p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_allow) m1 Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc m1) Drop p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_allow) m2 Drop p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                  (abstract_primitive disc m2) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd m1 m2) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc (MatchAnd m1 m2))\n                                 Drop p", "case(5 m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n   \\<not> matches (\\<beta>, in_doubt_allow) m2 Drop p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive m1 m2) Drop p\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2_;\n   \\<not> matches (\\<beta>, in_doubt_allow) m2_ Drop p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive m1 m2_) Drop p\n  primitive_matcher_generic \\<beta>\n  normalized_nnf_match (MatchAnd m2 m2_)\n  \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd m2 m2_) Drop p\n\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive uu_ MatchAny) Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_allow) (Match a) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc (Match a)) Drop p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (Match a)) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Drop p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot v) Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchNot v)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchNot v))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Drop p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd v va)\n                         Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchAnd v va)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchAnd v va))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Drop p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc MatchAny) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot MatchAny) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Drop p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_allow) m1 Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc m1) Drop p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_allow) m2 Drop p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                  (abstract_primitive disc m2) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd m1 m2) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc (MatchAnd m1 m2))\n                                 Drop p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n   \\<not> matches (\\<beta>, in_doubt_allow) m2 Drop p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive m1 m2) Drop p\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2_;\n   \\<not> matches (\\<beta>, in_doubt_allow) m2_ Drop p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive m1 m2_) Drop p\n  primitive_matcher_generic \\<beta>\n  normalized_nnf_match (MatchAnd m2 m2_)\n  \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd m2 m2_) Drop p\n\ngoal (1 subgoal):\n 1. \\<not> matches (\\<beta>, in_doubt_allow)\n            (abstract_primitive m1 (MatchAnd m2 m2_)) Drop p", "by (auto simp add: bunch_of_lemmata_about_matches(1))"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_allow)\n          (abstract_primitive m1 (MatchAnd m2 m2_)) Drop p\n\ngoal (6 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive uu_ MatchAny) Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_allow) (Match a) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc (Match a)) Drop p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (Match a)) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Drop p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot v) Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchNot v)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchNot v))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Drop p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_allow) (MatchAnd v va)\n                         Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc (MatchAnd v va)) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot (MatchAnd v va))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Drop p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_allow) MatchAny Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (abstract_primitive disc MatchAny) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_allow) (MatchNot MatchAny) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Drop p", "qed(simp_all add: bunch_of_lemmata_about_matches(1) primitive_matcher_generic.Extra_single)"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_allow_Deny: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Drop p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_allow) m action.Drop p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n      p\\<rbrakk>\n    \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) m Drop p", "apply(induction disc m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        matches (\\<beta>, in_doubt_allow) (abstract_primitive uu_ MatchAny)\n         Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) MatchAny Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (Match a)) Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) (Match a) Drop p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (MatchNot (Match a))) Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                          (MatchNot (Match a)) Drop p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 matches (\\<beta>, in_doubt_allow)\n                  (abstract_primitive disc (MatchNot v)) Drop p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                                   (MatchNot v) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (MatchNot (MatchNot v))) Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                          (MatchNot (MatchNot v)) Drop p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 matches (\\<beta>, in_doubt_allow)\n                  (abstract_primitive disc (MatchAnd v va)) Drop p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                                   (MatchAnd v va) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (MatchNot (MatchAnd v va))) Drop\n         p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                          (MatchNot (MatchAnd v va)) Drop p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 matches (\\<beta>, in_doubt_allow)\n                  (abstract_primitive disc MatchAny) Drop p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) MatchAny\n                                   Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (MatchNot MatchAny)) Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                          (MatchNot MatchAny) Drop p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 matches (\\<beta>, in_doubt_allow)\n                  (abstract_primitive disc m1) Drop p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) m1 Drop\n                                   p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m2) Drop\n          p\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) m2 Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        matches (\\<beta>, in_doubt_allow)\n         (abstract_primitive disc (MatchAnd m1 m2)) Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) (MatchAnd m1 m2)\n                          Drop p", "apply (simp_all add: bunch_of_lemmata_about_matches(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        matches (\\<beta>, in_doubt_allow)\n         (if disc (Pos a)\n          then Match\n                (Extra\n                  (common_primitive_toString ipaddr_generic_toString a))\n          else Match a)\n         Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) (Match a) Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        matches (\\<beta>, in_doubt_allow)\n         (if disc (Neg a)\n          then Match\n                (Extra\n                  (''! '' @\n                   common_primitive_toString ipaddr_generic_toString a))\n          else MatchNot (Match a))\n         Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                          (MatchNot (Match a)) Drop p", "apply(auto simp add: primitive_matcher_generic.Extra_single primitive_matcher_generic.Extra_single_not split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_allow_Deny2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) action.Accept p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_allow) m action.Accept p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m)\n             Accept p\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow) m Accept p", "apply(induction disc m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive uu_ MatchAny) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow) MatchAny\n                                 Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (Match a)) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow) (Match a)\n                                 Accept p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (MatchNot (Match a))) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchNot (Match a)) Accept p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_allow)\n                         (abstract_primitive disc (MatchNot v)) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (MatchNot v) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (MatchNot (MatchNot v))) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchNot (MatchNot v)) Accept p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_allow)\n                         (abstract_primitive disc (MatchAnd v va)) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    (MatchAnd v va) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (MatchNot (MatchAnd v va))) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchNot (MatchAnd v va)) Accept p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_allow)\n                         (abstract_primitive disc MatchAny) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    MatchAny Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (MatchNot MatchAny)) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchNot MatchAny) Accept p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_allow)\n                         (abstract_primitive disc m1) Accept p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n    m1 Accept p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_allow)\n                 (abstract_primitive disc m2) Accept p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow) m2 Accept\n                                  p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc (MatchAnd m1 m2)) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchAnd m1 m2) Accept p", "apply (simp_all add: bunch_of_lemmata_about_matches(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (if disc (Pos a)\n                 then Match\n                       (Extra\n                         (common_primitive_toString ipaddr_generic_toString\n                           a))\n                 else Match a)\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow) (Match a)\n                                 Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (if disc (Neg a)\n                 then Match\n                       (Extra\n                         (''! '' @\n                          common_primitive_toString ipaddr_generic_toString\n                           a))\n                 else MatchNot (Match a))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                                 (MatchNot (Match a)) Accept p\n 3. \\<And>disc m1 m2.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow)\n                        (abstract_primitive disc m1) Accept\n                        p \\<Longrightarrow>\n                \\<not> matches (\\<beta>, in_doubt_allow) m1 Accept p;\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc m2) Accept p \\<Longrightarrow>\n        \\<not> matches (\\<beta>, in_doubt_allow) m2 Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match m1 \\<and> normalized_nnf_match m2;\n        matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m1)\n         Accept p \\<longrightarrow>\n        \\<not> matches (\\<beta>, in_doubt_allow)\n                (abstract_primitive disc m2) Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_allow) m1 Accept\n                          p \\<longrightarrow>\n                         \\<not> matches (\\<beta>, in_doubt_allow) m2 Accept\n                                 p", "apply(auto simp add: primitive_matcher_generic.Extra_single primitive_matcher_generic.Extra_single_not split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem abstract_primitive_in_doubt_allow_generic:\n    fixes \\<beta>::\"('i::len common_primitive, ('i, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n       and n: \"\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r)\"\n       and simple: \"simple_ruleset rs\"\n    defines \"\\<gamma> \\<equiv> (\\<beta>, in_doubt_allow)\" and \"abstract disc \\<equiv> optimize_matches (abstract_primitive disc)\"\n    shows   \"{p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"\n                (is ?deny)\n      and   \"{p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\"\n                (is ?allow)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny} &&&\n    {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"good_ruleset rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs", "using simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs", "by fast"], ["proof (state)\nthis:\n  good_ruleset rs\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "from optimize_matches_simple_ruleset simple simple_imp_good_ruleset"], ["proof (chain)\npicking this:\n  simple_ruleset ?rs \\<Longrightarrow>\n  simple_ruleset (optimize_matches ?f ?rs)\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs", "have\n       good: \"good_ruleset (optimize_matches (abstract_primitive disc) rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow>\n  simple_ruleset (optimize_matches ?f ?rs)\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset (optimize_matches (abstract_primitive disc) rs)", "by fast"], ["proof (state)\nthis:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "let ?\\<gamma>=\"(\\<beta>, in_doubt_allow) :: ('i::len common_primitive, ('i, 'a) tagged_packet_scheme) match_tac\"\n        \\<comment> \\<open>type signature is needed, otherwise @{const in_doubt_allow} would be for arbitrary packet\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "have abstract_primitive_in_doubt_allow_help1:\n        \"approximating_bigstep_fun \\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalAllow\"\n        if prem: \"approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"wf_ruleset \\<gamma> p rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "using good_imp_wf_ruleset simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "from this simple prem n"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "unfolding \\<gamma>_def"], ["proof (prove)\nusing this:\n  wf_ruleset (\\<beta>, in_doubt_allow) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "proof(induction ?\\<gamma> p rs Undecided rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "case (MatchAccept p m a rs)"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "from MatchAccept.prems\n                abstract_primitive_in_doubt_allow_Allow[OF generic] MatchAccept.hyps"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_allow) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                     (abstract_primitive ?disc ?m) Accept ?p\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept", "have\n                \"matches ?\\<gamma> (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_allow) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                     (abstract_primitive ?disc ?m) Accept ?p\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p", "by simp"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalAllow", "apply(simp add: MatchAccept.hyps(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept\n     p \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m Accept # rs))\n     Undecided =\n    Decision FinalAllow", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept\n     p \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m Accept # rs))\n     Undecided =\n    Decision FinalAllow", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "case (Nomatch p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalAllow", "proof(cases \"matches ?\\<gamma> (abstract_primitive disc m) a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "case False"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "with Nomatch"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalAllow", "apply(simp add: optimize_matches_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     simple_ruleset rs \\<Longrightarrow>\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches_option\n        (\\<lambda>m.\n            if matcheq_matchNone (abstract_primitive disc m) then None\n            else Some (abstract_primitive disc m))\n        rs)\n      Undecided =\n     Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalAllow;\n     normalized_nnf_match m \\<and>\n     (\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r));\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches_option\n                         (\\<lambda>m.\n                             if matcheq_matchNone\n                                 (abstract_primitive disc m)\n                             then None\n                             else Some (abstract_primitive disc m))\n                         rs)\n                       Undecided =\n                      Decision FinalAllow", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     simple_ruleset rs \\<Longrightarrow>\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches_option\n        (\\<lambda>m.\n            if matcheq_matchNone (abstract_primitive disc m) then None\n            else Some (abstract_primitive disc m))\n        rs)\n      Undecided =\n     Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n     Decision FinalAllow;\n     normalized_nnf_match m \\<and>\n     (\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r));\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches_option\n                         (\\<lambda>m.\n                             if matcheq_matchNone\n                                 (abstract_primitive disc m)\n                             then None\n                             else Some (abstract_primitive disc m))\n                         rs)\n                       Undecided =\n                      Decision FinalAllow", "by blast"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "case True"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "from Nomatch.prems(1)"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)", "have \"a = action.Accept \\<or> a = action.Drop\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n\ngoal (1 subgoal):\n 1. a = Accept \\<or> a = Drop", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = Accept \\<or> a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "from Nomatch.hyps(1) Nomatch.prems(3) abstract_primitive_in_doubt_allow_Allow2[OF generic]"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_allow) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive ?disc ?m) Drop ?p", "have\n                    \"a = action.Drop \\<Longrightarrow> \\<not> matches ?\\<gamma> (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_allow) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive ?disc ?m) Drop ?p\n\ngoal (1 subgoal):\n 1. a = Drop \\<Longrightarrow>\n    \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m)\n            Drop p", "by simp"], ["proof (state)\nthis:\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "with True \\<open>a = action.Accept \\<or> a = action.Drop\\<close>"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p", "have \"a = action.Accept\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p\n\ngoal (1 subgoal):\n 1. a = Accept", "by blast"], ["proof (state)\nthis:\n  a = Accept\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalAllow", "with True"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept", "show ?thesis"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalAllow", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalAllow", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p [] Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n          Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p\n                           (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (Rule m a # rs) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalAllow", "qed(simp_all add: simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "have abstract_primitive_in_doubt_allow_help2:\n        \"approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny\"\n        if prem: \"approximating_bigstep_fun \\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalDeny\"\n        for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"wf_ruleset \\<gamma> p rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "using good_imp_wf_ruleset simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny", "from this simple prem n"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny", "unfolding \\<gamma>_def"], ["proof (prove)\nusing this:\n  wf_ruleset (\\<beta>, in_doubt_allow) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n    Decision FinalDeny", "proof(induction ?\\<gamma> p rs Undecided rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) []) Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p [] Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "case Empty"], ["proof (state)\nthis:\n  simple_ruleset []\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p_\n   (optimize_matches (abstract_primitive disc) []) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) []) Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p [] Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "thus ?case"], ["proof (prove)\nusing this:\n  simple_ruleset []\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p_\n   (optimize_matches (abstract_primitive disc) []) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p_ [] Undecided =\n    Decision FinalDeny", "by(simp add: optimize_matches_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p_ [] Undecided =\n  Decision FinalDeny\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "case (MatchAccept p m a rs)"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "from MatchAccept.prems abstract_primitive_in_doubt_allow_Allow[OF generic] MatchAccept.hyps"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_allow) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                     (abstract_primitive ?disc ?m) Accept ?p\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept", "have\n                1: \"matches ?\\<gamma> (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_allow) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_allow)\n                     (abstract_primitive ?disc ?m) Accept ?p\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p", "by simp"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "with MatchAccept"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p", "have \"approximating_bigstep_fun ?\\<gamma> p\n                (Rule (abstract_primitive disc m) action.Accept # (optimize_matches (abstract_primitive disc) rs)) Undecided = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (Rule (abstract_primitive disc m) Accept #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalDeny", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (Rule (abstract_primitive disc m) Accept #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalDeny", "by metis"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) Accept #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "with 1"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) Accept #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny", "have False"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Accept p\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) Accept #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. False", "by(simp)"], ["proof (state)\nthis:\n  False\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n     Undecided =\n    Decision FinalDeny", ".."], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "case (Nomatch p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n     Undecided =\n    Decision FinalDeny", "proof(cases \"matches ?\\<gamma> (abstract_primitive disc m) a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "case False"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "with Nomatch.prems(2)"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p", "have \"approximating_bigstep_fun ?\\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "by(simp add: optimize_matches_def split: if_split_asm)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "with Nomatch"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny", "have IH: \"approximating_bigstep_fun ?\\<gamma> p rs Undecided = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n    Decision FinalDeny", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n    Decision FinalDeny", "by auto"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n  Decision FinalDeny\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "with Nomatch(1)"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n  Decision FinalDeny", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p rs Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n     Undecided =\n    Decision FinalDeny", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "case True"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "from Nomatch.prems(2) True"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p", "have 1: \"approximating_bigstep_fun ?\\<gamma> p\n                    (Rule (abstract_primitive disc m) a # (optimize_matches (abstract_primitive disc) rs)) Undecided = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (Rule (abstract_primitive disc m) a #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalDeny", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n     (Rule (abstract_primitive disc m) a #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalDeny", "by metis"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "from Nomatch.prems(1)"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)", "have \"a = action.Accept \\<or> a = action.Drop\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n\ngoal (1 subgoal):\n 1. a = Accept \\<or> a = Drop", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = Accept \\<or> a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "from Nomatch.hyps(1) Nomatch.prems(3) abstract_primitive_in_doubt_allow_Allow2[OF generic]"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_allow) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive ?disc ?m) Drop ?p", "have\n                    \"a = action.Drop \\<Longrightarrow> \\<not> matches ?\\<gamma> (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_allow) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_allow) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_allow)\n                            (abstract_primitive ?disc ?m) Drop ?p\n\ngoal (1 subgoal):\n 1. a = Drop \\<Longrightarrow>\n    \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m)\n            Drop p", "by simp"], ["proof (state)\nthis:\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "with True \\<open>a = action.Accept \\<or> a = action.Drop\\<close>"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p", "have \"a = action.Accept\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Drop \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) Drop\n          p\n\ngoal (1 subgoal):\n 1. a = Accept", "by blast"], ["proof (state)\nthis:\n  a = Accept\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "with 1 True"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept", "have False"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalDeny\n  matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a p\n  a = Accept\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_allow) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                        rs Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_allow) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalDeny", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n     Undecided =\n    Decision FinalDeny", ".."], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_allow) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n\ngoal (4 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_allow) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun\n                           (\\<beta>, in_doubt_allow) p rs Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_allow) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_allow)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalDeny", "qed(simp_all add: simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalDeny\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "from good approximating_semantics_iff_fun_good_ruleset abstract_primitive_in_doubt_allow_help1 \\<open>good_ruleset rs\\<close>"], ["proof (chain)\npicking this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  good_ruleset rs", "show ?allow"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "unfolding abstract_def"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>optimize_matches\n               (abstract_primitive disc)\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "by fast"], ["proof (state)\nthis:\n  {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n               FinalAllow}\n  \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n             rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                            FinalAllow}\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}", "from good approximating_semantics_iff_fun_good_ruleset abstract_primitive_in_doubt_allow_help2 \\<open>good_ruleset rs\\<close> \\<gamma>_def"], ["proof (chain)\npicking this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalDeny\n  good_ruleset rs\n  \\<gamma> \\<equiv> (\\<beta>, in_doubt_allow)", "show ?deny"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalDeny\n  good_ruleset rs\n  \\<gamma> \\<equiv> (\\<beta>, in_doubt_allow)\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}", "unfolding abstract_def"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalDeny\n  good_ruleset rs\n  \\<gamma> \\<equiv> (\\<beta>, in_doubt_allow)\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>optimize_matches\n   (abstract_primitive disc)\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny}", "by fast"], ["proof (state)\nthis:\n  {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n  \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalDeny}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary abstract_primitive_in_doubt_allow:\n    assumes \"\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r)\" and \"simple_ruleset rs\"\n    defines \"\\<gamma> \\<equiv> (common_matcher, in_doubt_allow)\" and \"abstract disc \\<equiv> optimize_matches (abstract_primitive disc)\"\n    shows   \"{p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"\n      and   \"{p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalDeny} &&&\n    {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow}", "unfolding \\<gamma>_def abstract_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           (abstract_primitive disc)\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalDeny}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalDeny} &&&\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       (abstract_primitive disc)\n                       rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow}", "using assms abstract_primitive_in_doubt_allow_generic[OF primitive_matcher_generic_common_matcher]"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n  simple_ruleset rs\n  \\<gamma> \\<equiv> (common_matcher, in_doubt_allow)\n  abstract ?disc \\<equiv> optimize_matches (abstract_primitive ?disc)\n  \\<lbrakk>\\<forall>r\\<in>set ?rs. normalized_nnf_match (get_match r);\n   simple_ruleset ?rs\\<rbrakk>\n  \\<Longrightarrow> {p. (common_matcher,\n                         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                           (abstract_primitive ?disc)\n                           ?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n     FinalDeny}\n                    \\<subseteq> {p. (common_matcher,\n                                     in_doubt_allow),p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                FinalDeny}\n  \\<lbrakk>\\<forall>r\\<in>set ?rs. normalized_nnf_match (get_match r);\n   simple_ruleset ?rs\\<rbrakk>\n  \\<Longrightarrow> {p. (common_matcher,\n                         in_doubt_allow),p\\<turnstile> \\<langle>?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow}\n                    \\<subseteq> {p. (common_matcher,\n                                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n (abstract_primitive ?disc)\n ?rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n\ngoal (1 subgoal):\n 1. {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n           (abstract_primitive disc)\n           rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                          FinalDeny}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalDeny} &&&\n    {p. (common_matcher,\n         in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                         FinalAllow}\n    \\<subseteq> {p. (common_matcher,\n                     in_doubt_allow),p\\<turnstile> \\<langle>optimize_matches\n                       (abstract_primitive disc)\n                       rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\nFinalAllow}", "by blast+"], ["", "end"], ["", "context\nbegin"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_deny_Deny:\n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      matches (\\<beta>, in_doubt_deny) m action.Drop p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     matches (\\<beta>, in_doubt_deny) m Drop p\\<rbrakk>\n    \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                       (abstract_primitive disc m) Drop p", "by(induction disc m rule: abstract_primitive.induct)\n       (simp_all add: bunch_of_lemmata_about_matches(1) primitive_matcher_generic.Extra_single)"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_deny_Deny2:\n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_deny) m action.Accept p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     \\<not> matches (\\<beta>, in_doubt_deny) m Accept p\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                              (abstract_primitive disc m) Accept p", "proof(induction disc m rule: abstract_primitive.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive uu_ MatchAny) Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_deny) (Match a) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc (Match a)) Accept\n                                 p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (Match a)) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Accept p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot v) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchNot v)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchNot v))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Accept p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd v va)\n                         Accept p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchAnd v va)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchAnd v va))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Accept p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc MatchAny) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot MatchAny) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Accept p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_deny) m1 Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc m1) Accept p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_deny) m2 Accept p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                  (abstract_primitive disc m2) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd m1 m2) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc (MatchAnd m1 m2))\n                                 Accept p", "case(5 m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n   \\<not> matches (\\<beta>, in_doubt_deny) m2 Accept p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive m1 m2) Accept p\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2_;\n   \\<not> matches (\\<beta>, in_doubt_deny) m2_ Accept p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive m1 m2_) Accept p\n  primitive_matcher_generic \\<beta>\n  normalized_nnf_match (MatchAnd m2 m2_)\n  \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd m2 m2_) Accept p\n\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive uu_ MatchAny) Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_deny) (Match a) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc (Match a)) Accept\n                                 p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (Match a)) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Accept p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot v) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchNot v)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchNot v))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Accept p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd v va)\n                         Accept p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchAnd v va)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchAnd v va))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Accept p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc MatchAny) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot MatchAny) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Accept p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_deny) m1 Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc m1) Accept p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_deny) m2 Accept p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                  (abstract_primitive disc m2) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd m1 m2) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc (MatchAnd m1 m2))\n                                 Accept p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n   \\<not> matches (\\<beta>, in_doubt_deny) m2 Accept p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive m1 m2) Accept p\n  \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2_;\n   \\<not> matches (\\<beta>, in_doubt_deny) m2_ Accept p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive m1 m2_) Accept p\n  primitive_matcher_generic \\<beta>\n  normalized_nnf_match (MatchAnd m2 m2_)\n  \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd m2 m2_) Accept p\n\ngoal (1 subgoal):\n 1. \\<not> matches (\\<beta>, in_doubt_deny)\n            (abstract_primitive m1 (MatchAnd m2 m2_)) Accept p", "by (auto simp add: bunch_of_lemmata_about_matches(1))"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_deny)\n          (abstract_primitive m1 (MatchAnd m2 m2_)) Accept p\n\ngoal (6 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive uu_ MatchAny) Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_deny) (Match a) Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc (Match a)) Accept\n                                 p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (Match a)) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (Match a)))\n                                 Accept p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot v) Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchNot v)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchNot v))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchNot v)))\n                                 Accept p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_deny) (MatchAnd v va)\n                         Accept p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc (MatchAnd v va)) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot (MatchAnd v va))\n                Accept p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot (MatchAnd v va)))\n                                 Accept p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_deny) MatchAny Accept\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (abstract_primitive disc MatchAny) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_deny) (MatchNot MatchAny) Accept\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (abstract_primitive disc\n                                   (MatchNot MatchAny))\n                                 Accept p", "qed(simp_all add: bunch_of_lemmata_about_matches(1) primitive_matcher_generic.Extra_single)"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_deny_Allow: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Accept p \\<Longrightarrow>\n      matches (\\<beta>, in_doubt_deny) m action.Accept p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n      p\\<rbrakk>\n    \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) m Accept p", "apply(induction disc m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        matches (\\<beta>, in_doubt_deny) (abstract_primitive uu_ MatchAny)\n         Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) MatchAny Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        matches (\\<beta>, in_doubt_deny) (abstract_primitive disc (Match a))\n         Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) (Match a) Accept p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        matches (\\<beta>, in_doubt_deny)\n         (abstract_primitive disc (MatchNot (Match a))) Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                          (MatchNot (Match a)) Accept p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 matches (\\<beta>, in_doubt_deny)\n                  (abstract_primitive disc (MatchNot v)) Accept p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                                   (MatchNot v) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        matches (\\<beta>, in_doubt_deny)\n         (abstract_primitive disc (MatchNot (MatchNot v))) Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                          (MatchNot (MatchNot v)) Accept p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 matches (\\<beta>, in_doubt_deny)\n                  (abstract_primitive disc (MatchAnd v va)) Accept\n                  p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                                   (MatchAnd v va) Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        matches (\\<beta>, in_doubt_deny)\n         (abstract_primitive disc (MatchNot (MatchAnd v va))) Accept\n         p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                          (MatchNot (MatchAnd v va)) Accept p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 matches (\\<beta>, in_doubt_deny)\n                  (abstract_primitive disc MatchAny) Accept p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) MatchAny\n                                   Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        matches (\\<beta>, in_doubt_deny)\n         (abstract_primitive disc (MatchNot MatchAny)) Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                          (MatchNot MatchAny) Accept p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 matches (\\<beta>, in_doubt_deny)\n                  (abstract_primitive disc m1) Accept p\\<rbrakk>\n                \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) m1 Accept\n                                   p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m2)\n          Accept p\\<rbrakk>\n        \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) m2 Accept p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        matches (\\<beta>, in_doubt_deny)\n         (abstract_primitive disc (MatchAnd m1 m2)) Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) (MatchAnd m1 m2)\n                          Accept p", "apply (simp_all add: bunch_of_lemmata_about_matches(1))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        matches (\\<beta>, in_doubt_deny)\n         (if disc (Pos a)\n          then Match\n                (Extra\n                  (common_primitive_toString ipaddr_generic_toString a))\n          else Match a)\n         Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) (Match a) Accept p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        matches (\\<beta>, in_doubt_deny)\n         (if disc (Neg a)\n          then Match\n                (Extra\n                  (''! '' @\n                   common_primitive_toString ipaddr_generic_toString a))\n          else MatchNot (Match a))\n         Accept p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                          (MatchNot (Match a)) Accept p", "apply(auto simp add: primitive_matcher_generic.Extra_single primitive_matcher_generic.Extra_single_not split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "private"], ["", "lemma abstract_primitive_in_doubt_deny_Allow2: \n    \"primitive_matcher_generic \\<beta> \\<Longrightarrow> normalized_nnf_match m \\<Longrightarrow> \n      \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) action.Drop p \\<Longrightarrow>\n      \\<not> matches (\\<beta>, in_doubt_deny) m action.Drop p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m;\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m)\n             Drop p\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) m Drop p", "apply(induction disc m rule: abstract_primitive.induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match MatchAny;\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive uu_ MatchAny) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) MatchAny\n                                 Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (Match a);\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (Match a)) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) (Match a)\n                                 Drop p\n 3. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (Match a));\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (MatchNot (Match a))) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchNot (Match a)) Drop p\n 4. \\<And>disc v.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchNot v);\n                 \\<not> matches (\\<beta>, in_doubt_deny)\n                         (abstract_primitive disc (MatchNot v)) Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (MatchNot v) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchNot v));\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (MatchNot (MatchNot v))) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchNot (MatchNot v)) Drop p\n 5. \\<And>disc v va.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match (MatchAnd v va);\n                 \\<not> matches (\\<beta>, in_doubt_deny)\n                         (abstract_primitive disc (MatchAnd v va)) Drop\n                         p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    (MatchAnd v va) Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot (MatchAnd v va));\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (MatchNot (MatchAnd v va))) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchNot (MatchAnd v va)) Drop p\n 6. \\<And>disc.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match MatchAny;\n                 \\<not> matches (\\<beta>, in_doubt_deny)\n                         (abstract_primitive disc MatchAny) Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n    MatchAny Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchNot MatchAny);\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (MatchNot MatchAny)) Drop\n                p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchNot MatchAny) Drop p\n 7. \\<And>disc m1 m2.\n       \\<lbrakk>\\<lbrakk>primitive_matcher_generic \\<beta>;\n                 normalized_nnf_match m1;\n                 \\<not> matches (\\<beta>, in_doubt_deny)\n                         (abstract_primitive disc m1) Drop p\\<rbrakk>\n                \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) m1\n    Drop p;\n        \\<lbrakk>primitive_matcher_generic \\<beta>; normalized_nnf_match m2;\n         \\<not> matches (\\<beta>, in_doubt_deny)\n                 (abstract_primitive disc m2) Drop p\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) m2 Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match (MatchAnd m1 m2);\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (abstract_primitive disc (MatchAnd m1 m2)) Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchAnd m1 m2) Drop p", "apply (simp_all add: bunch_of_lemmata_about_matches(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (if disc (Pos a)\n                 then Match\n                       (Extra\n                         (common_primitive_toString ipaddr_generic_toString\n                           a))\n                 else Match a)\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny) (Match a)\n                                 Drop p\n 2. \\<And>disc a.\n       \\<lbrakk>primitive_matcher_generic \\<beta>;\n        \\<not> matches (\\<beta>, in_doubt_deny)\n                (if disc (Neg a)\n                 then Match\n                       (Extra\n                         (''! '' @\n                          common_primitive_toString ipaddr_generic_toString\n                           a))\n                 else MatchNot (Match a))\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                                 (MatchNot (Match a)) Drop p\n 3. \\<And>disc m1 m2.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny)\n                        (abstract_primitive disc m1) Drop\n                        p \\<Longrightarrow>\n                \\<not> matches (\\<beta>, in_doubt_deny) m1 Drop p;\n        \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m2)\n                Drop p \\<Longrightarrow>\n        \\<not> matches (\\<beta>, in_doubt_deny) m2 Drop p;\n        primitive_matcher_generic \\<beta>;\n        normalized_nnf_match m1 \\<and> normalized_nnf_match m2;\n        matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m1) Drop\n         p \\<longrightarrow>\n        \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m2)\n                Drop p\\<rbrakk>\n       \\<Longrightarrow> matches (\\<beta>, in_doubt_deny) m1 Drop\n                          p \\<longrightarrow>\n                         \\<not> matches (\\<beta>, in_doubt_deny) m2 Drop p", "apply(auto simp add: primitive_matcher_generic.Extra_single primitive_matcher_generic.Extra_single_not split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem abstract_primitive_in_doubt_deny_generic:\n    fixes \\<beta>::\"('i::len common_primitive, ('i, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n        and n: \"\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r)\"\n        and simple: \"simple_ruleset rs\"\n    defines \"\\<gamma> \\<equiv> (\\<beta>, in_doubt_deny)\" and \"abstract disc \\<equiv> optimize_matches (abstract_primitive disc)\"\n    shows   \"{p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\"\n             (is ?allow)\n    and     \"{p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny} \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalDeny}\"\n             (is ?deny)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow} &&&\n    {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"good_ruleset rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs", "using simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset rs", "by fast"], ["proof (state)\nthis:\n  good_ruleset rs\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "from optimize_matches_simple_ruleset simple simple_imp_good_ruleset"], ["proof (chain)\npicking this:\n  simple_ruleset ?rs \\<Longrightarrow>\n  simple_ruleset (optimize_matches ?f ?rs)\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs", "have\n        good: \"good_ruleset (optimize_matches (abstract_primitive disc) rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow>\n  simple_ruleset (optimize_matches ?f ?rs)\n  simple_ruleset rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset (optimize_matches (abstract_primitive disc) rs)", "by fast"], ["proof (state)\nthis:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "let ?\\<gamma>=\"(\\<beta>, in_doubt_deny) :: ('i::len common_primitive, ('i, 'a) tagged_packet_scheme) match_tac\"\n        \\<comment> \\<open>type signature is needed, otherwise @{const in_doubt_allow} would be for arbitrary packet\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "have abstract_primitive_in_doubt_deny_help1:\n        \"approximating_bigstep_fun \\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalDeny\"\n        if prem: \"approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"wf_ruleset \\<gamma> p rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "using good_imp_wf_ruleset simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "from this simple prem n"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "unfolding \\<gamma>_def"], ["proof (prove)\nusing this:\n  wf_ruleset (\\<beta>, in_doubt_deny) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalDeny", "proof(induction ?\\<gamma> p rs Undecided rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "case (MatchDrop p m a rs)"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "from MatchDrop.prems abstract_primitive_in_doubt_deny_Deny[OF generic] MatchDrop.hyps"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_deny) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                     (abstract_primitive ?disc ?m) Drop ?p\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop", "have\n                \"matches ?\\<gamma> (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_deny) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                     (abstract_primitive ?disc ?m) Drop ?p\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p", "by simp"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "thus ?case"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalDeny", "apply(simp add: MatchDrop.hyps(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop\n     p \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m Drop # rs))\n     Undecided =\n    Decision FinalDeny", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop\n     p \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m Drop # rs))\n     Undecided =\n    Decision FinalDeny", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "case (Nomatch p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (6 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalDeny", "proof(cases \"matches ?\\<gamma> (abstract_primitive disc m) a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "case False"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "with Nomatch"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n   Decision FinalDeny;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                     (optimize_matches (abstract_primitive disc) rs)\n                     Undecided =\n                    Decision FinalDeny\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalDeny\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalDeny", "apply(simp add: optimize_matches_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     simple_ruleset rs \\<Longrightarrow>\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches_option\n        (\\<lambda>m.\n            if matcheq_matchNone (abstract_primitive disc m) then None\n            else Some (abstract_primitive disc m))\n        rs)\n      Undecided =\n     Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n     Decision FinalDeny;\n     normalized_nnf_match m \\<and>\n     (\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r));\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches_option\n                         (\\<lambda>m.\n                             if matcheq_matchNone\n                                 (abstract_primitive disc m)\n                             then None\n                             else Some (abstract_primitive disc m))\n                         rs)\n                       Undecided =\n                      Decision FinalDeny", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     simple_ruleset rs \\<Longrightarrow>\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches_option\n        (\\<lambda>m.\n            if matcheq_matchNone (abstract_primitive disc m) then None\n            else Some (abstract_primitive disc m))\n        rs)\n      Undecided =\n     Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n     Decision FinalDeny;\n     normalized_nnf_match m \\<and>\n     (\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r));\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches_option\n                         (\\<lambda>m.\n                             if matcheq_matchNone\n                                 (abstract_primitive disc m)\n                             then None\n                             else Some (abstract_primitive disc m))\n                         rs)\n                       Undecided =\n                      Decision FinalDeny", "by blast"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "case True"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "from Nomatch.prems(1)"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)", "have \"a = action.Accept \\<or> a = action.Drop\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n\ngoal (1 subgoal):\n 1. a = Accept \\<or> a = Drop", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = Accept \\<or> a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "from Nomatch.hyps(1) Nomatch.prems(3) abstract_primitive_in_doubt_deny_Deny2[OF generic]"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_deny) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive ?disc ?m) Accept ?p", "have\n                    \"a = action.Accept \\<Longrightarrow> \\<not> matches ?\\<gamma> (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_deny) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive ?disc ?m) Accept ?p\n\ngoal (1 subgoal):\n 1. a = Accept \\<Longrightarrow>\n    \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m)\n            Accept p", "by(simp)"], ["proof (state)\nthis:\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "with True \\<open>a = action.Accept \\<or> a = action.Drop\\<close>"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p", "have \"a = action.Drop\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p\n\ngoal (1 subgoal):\n 1. a = Drop", "by blast"], ["proof (state)\nthis:\n  a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n      Decision FinalDeny;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        (optimize_matches (abstract_primitive disc) rs)\n                        Undecided =\n                       Decision FinalDeny;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n      Undecided =\n     Decision FinalDeny;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (optimize_matches (abstract_primitive disc)\n                         (Rule m a # rs))\n                       Undecided =\n                      Decision FinalDeny", "with True"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Drop", "show ?thesis"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Drop\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalDeny", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Drop\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n     Undecided =\n    Decision FinalDeny", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalDeny\n\ngoal (5 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p [] Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc) [])\n                          Undecided =\n                         Decision FinalDeny\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n         Decision FinalDeny;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p (optimize_matches (abstract_primitive disc) rs)\n                           Undecided =\n                          Decision FinalDeny;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n         Undecided =\n        Decision FinalDeny;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (optimize_matches (abstract_primitive disc)\n                              (Rule m a # rs))\n                          Undecided =\n                         Decision FinalDeny", "qed(simp_all add: simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "have abstract_primitive_in_doubt_deny_help2:\n        \"approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow\"\n        if prem: \"approximating_bigstep_fun \\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalAllow\"\n        for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow", "from simple"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"wf_ruleset ?\\<gamma> p rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. wf_ruleset (\\<beta>, in_doubt_deny) p rs", "using good_imp_wf_ruleset simple_imp_good_ruleset"], ["proof (prove)\nusing this:\n  simple_ruleset rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset (\\<beta>, in_doubt_deny) p rs", "by fast"], ["proof (state)\nthis:\n  wf_ruleset (\\<beta>, in_doubt_deny) p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow", "from this simple prem n"], ["proof (chain)\npicking this:\n  wf_ruleset (\\<beta>, in_doubt_deny) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_ruleset (\\<beta>, in_doubt_deny) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow", "unfolding \\<gamma>_def"], ["proof (prove)\nusing this:\n  wf_ruleset (\\<beta>, in_doubt_deny) p rs\n  simple_ruleset rs\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n    Decision FinalAllow", "proof(induction ?\\<gamma> p rs Undecided rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) []) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p [] Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "case Empty"], ["proof (state)\nthis:\n  simple_ruleset []\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p_\n   (optimize_matches (abstract_primitive disc) []) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\n\ngoal (7 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>simple_ruleset [];\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) []) Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p [] Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 7. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  simple_ruleset []\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p_\n   (optimize_matches (abstract_primitive disc) []) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set []. normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p_ [] Undecided =\n    Decision FinalAllow", "by(simp add: optimize_matches_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p_ [] Undecided =\n  Decision FinalAllow\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "case (MatchAccept p m a rs)"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (6 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 6. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Accept\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n     Undecided =\n    Decision FinalAllow", "by auto"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "case (MatchDrop p m a rs)"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "from MatchDrop.prems abstract_primitive_in_doubt_deny_Deny[OF generic] MatchDrop.hyps"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_deny) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                     (abstract_primitive ?disc ?m) Drop ?p\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop", "have\n                1: \"matches ?\\<gamma> (abstract_primitive disc m) action.Drop p\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   matches (\\<beta>, in_doubt_deny) ?m Drop ?p\\<rbrakk>\n  \\<Longrightarrow> matches (\\<beta>, in_doubt_deny)\n                     (abstract_primitive ?disc ?m) Drop ?p\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p", "by simp"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "from MatchDrop"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)", "have \"approximating_bigstep_fun ?\\<gamma> p\n                (Rule (abstract_primitive disc m) action.Drop # (optimize_matches (abstract_primitive disc) rs)) Undecided = Decision FinalAllow\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (Rule (abstract_primitive disc m) Drop #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalAllow", "using optimize_matches_matches_fst 1"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) m a p\n  a = Drop\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (Rule (abstract_primitive disc m) Drop #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalAllow", "by fastforce"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) Drop #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "with 1"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) Drop #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow", "have False"], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Drop p\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) Drop #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. False", "by(simp)"], ["proof (state)\nthis:\n  False\n\ngoal (5 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 5. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n     Undecided =\n    Decision FinalAllow", ".."], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (4 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "case (Nomatch p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (4 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 4. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n     Undecided =\n    Decision FinalAllow", "proof(cases \"matches ?\\<gamma> (abstract_primitive disc m) a p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "case False"], ["proof (state)\nthis:\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "with Nomatch.prems(2)"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p", "have \"approximating_bigstep_fun ?\\<gamma> p (optimize_matches (abstract_primitive disc) rs) Undecided = Decision FinalAllow\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (optimize_matches (abstract_primitive disc) rs) Undecided =\n    Decision FinalAllow", "by(simp add: optimize_matches_def split: if_split_asm)"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "with Nomatch"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow", "have IH: \"approximating_bigstep_fun ?\\<gamma> p rs Undecided = Decision FinalAllow\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n    Decision FinalAllow", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<lbrakk>simple_ruleset rs;\n   approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n    (optimize_matches (abstract_primitive disc) rs) Undecided =\n   Decision FinalAllow;\n   \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs\n                     Undecided =\n                    Decision FinalAllow\n  simple_ruleset (Rule m a # rs)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n    Decision FinalAllow", "by auto"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n  Decision FinalAllow\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow\n 2. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n             p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "with Nomatch(1)"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n  Decision FinalAllow", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p rs Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n     Undecided =\n    Decision FinalAllow", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "case True"], ["proof (state)\nthis:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "from Nomatch.prems(2) True"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p", "have 1: \"approximating_bigstep_fun ?\\<gamma> p\n                    (Rule (abstract_primitive disc m) a # (optimize_matches (abstract_primitive disc) rs)) Undecided = Decision FinalAllow\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (Rule (abstract_primitive disc m) a #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalAllow", "using optimize_matches_matches_fst"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (optimize_matches (abstract_primitive disc) (Rule m a # rs)) Undecided =\n  Decision FinalAllow\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  matches ?\\<gamma> (?f ?m) ?a ?p \\<Longrightarrow>\n  optimize_matches ?f (Rule ?m ?a # ?rs) =\n  Rule (?f ?m) ?a # optimize_matches ?f ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n     (Rule (abstract_primitive disc m) a #\n      optimize_matches (abstract_primitive disc) rs)\n     Undecided =\n    Decision FinalAllow", "by metis"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "from Nomatch.prems(1)"], ["proof (chain)\npicking this:\n  simple_ruleset (Rule m a # rs)", "have \"a = action.Accept \\<or> a = action.Drop\""], ["proof (prove)\nusing this:\n  simple_ruleset (Rule m a # rs)\n\ngoal (1 subgoal):\n 1. a = Accept \\<or> a = Drop", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  a = Accept \\<or> a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "from Nomatch.hyps(1) Nomatch.prems(3) abstract_primitive_in_doubt_deny_Deny2[OF generic]"], ["proof (chain)\npicking this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_deny) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive ?disc ?m) Accept ?p", "have\n                    \"a = action.Accept \\<Longrightarrow> \\<not> matches ?\\<gamma> (abstract_primitive disc m) action.Accept p\""], ["proof (prove)\nusing this:\n  \\<not> matches (\\<beta>, in_doubt_deny) m a p\n  \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r)\n  \\<lbrakk>normalized_nnf_match ?m;\n   \\<not> matches (\\<beta>, in_doubt_deny) ?m Accept ?p\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches (\\<beta>, in_doubt_deny)\n                            (abstract_primitive ?disc ?m) Accept ?p\n\ngoal (1 subgoal):\n 1. a = Accept \\<Longrightarrow>\n    \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m)\n            Accept p", "by simp"], ["proof (state)\nthis:\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "with True \\<open>a = action.Accept \\<or> a = action.Drop\\<close>"], ["proof (chain)\npicking this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p", "have \"a = action.Drop\""], ["proof (prove)\nusing this:\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Accept \\<or> a = Drop\n  a = Accept \\<Longrightarrow>\n  \\<not> matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) Accept\n          p\n\ngoal (1 subgoal):\n 1. a = Drop", "by blast"], ["proof (state)\nthis:\n  a = Drop\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "with 1 True"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Drop", "have False"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n   (Rule (abstract_primitive disc m) a #\n    optimize_matches (abstract_primitive disc) rs)\n   Undecided =\n  Decision FinalAllow\n  matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a p\n  a = Drop\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches (\\<beta>, in_doubt_deny) m a p;\n     \\<lbrakk>simple_ruleset rs;\n      approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n       (optimize_matches (abstract_primitive disc) rs) Undecided =\n      Decision FinalAllow;\n      \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                        rs Undecided =\n                       Decision FinalAllow;\n     simple_ruleset (Rule m a # rs);\n     approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n      (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n      Undecided =\n     Decision FinalAllow;\n     \\<forall>r\\<in>set (Rule m a # rs). normalized_nnf_match (get_match r);\n     matches (\\<beta>, in_doubt_deny) (abstract_primitive disc m) a\n      p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n                       (Rule m a # rs) Undecided =\n                      Decision FinalAllow", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n     Undecided =\n    Decision FinalAllow", ".."], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, in_doubt_deny) p (Rule m a # rs)\n   Undecided =\n  Decision FinalAllow\n\ngoal (3 subgoals):\n 1. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 2. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow\n 3. \\<And>p m a rs.\n       \\<lbrakk>matches (\\<beta>, in_doubt_deny) m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n          (optimize_matches (abstract_primitive disc) rs) Undecided =\n         Decision FinalAllow;\n         \\<forall>r\\<in>set rs. normalized_nnf_match (get_match r)\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                           p rs Undecided =\n                          Decision FinalAllow;\n        simple_ruleset (Rule m a # rs);\n        approximating_bigstep_fun (\\<beta>, in_doubt_deny) p\n         (optimize_matches (abstract_primitive disc) (Rule m a # rs))\n         Undecided =\n        Decision FinalAllow;\n        \\<forall>r\\<in>set (Rule m a # rs).\n           normalized_nnf_match (get_match r)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, in_doubt_deny)\n                          p (Rule m a # rs) Undecided =\n                         Decision FinalAllow", "qed(simp_all add: simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p rs Undecided = Decision FinalAllow\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalAllow\n\ngoal (2 subgoals):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}\n 2. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "from good approximating_semantics_iff_fun_good_ruleset abstract_primitive_in_doubt_deny_help1 \\<open>good_ruleset rs\\<close>"], ["proof (chain)\npicking this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  good_ruleset rs", "show ?deny"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "unfolding abstract_def"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided =\n  Decision FinalDeny \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalDeny\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                 FinalDeny}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>optimize_matches\n               (abstract_primitive disc)\n               rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalDeny}", "by fast"], ["proof (state)\nthis:\n  {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n               FinalDeny}\n  \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n             rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                            FinalDeny}\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}", "from good approximating_semantics_iff_fun_good_ruleset abstract_primitive_in_doubt_deny_help2 \\<open>good_ruleset rs\\<close>"], ["proof (chain)\npicking this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalAllow\n  good_ruleset rs", "show ?allow"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}", "unfolding abstract_def"], ["proof (prove)\nusing this:\n  good_ruleset (optimize_matches (abstract_primitive disc) rs)\n  good_ruleset ?rs \\<Longrightarrow>\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t =\n  (approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s = ?t)\n  approximating_bigstep_fun \\<gamma> ?p\n   (optimize_matches (abstract_primitive disc) rs) Undecided =\n  Decision FinalAllow \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> ?p rs Undecided = Decision FinalAllow\n  good_ruleset rs\n\ngoal (1 subgoal):\n 1. {p. \\<gamma>,p\\<turnstile> \\<langle>optimize_matches\n   (abstract_primitive disc)\n   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n    \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                             FinalAllow}", "by fast"], ["proof (state)\nthis:\n  {p. \\<gamma>,p\\<turnstile> \\<langle>abstract disc\n rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow}\n  \\<subseteq> {p. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}