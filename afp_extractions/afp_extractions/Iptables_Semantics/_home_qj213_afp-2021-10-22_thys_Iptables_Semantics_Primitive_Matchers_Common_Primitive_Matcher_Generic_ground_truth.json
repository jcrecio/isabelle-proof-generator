{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Common_Primitive_Matcher_Generic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma Iface_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (IIface X)) a p \\<longleftrightarrow> match_iface X (p_iiface p)\"\n    \"matches (\\<beta>, \\<alpha>) (Match (OIface X)) a p \\<longleftrightarrow> match_iface X (p_oiface p)\"", "lemma Iface_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (IIface X))) a p \\<longleftrightarrow> \\<not> match_iface X (p_iiface p)\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (OIface X))) a p \\<longleftrightarrow> \\<not> match_iface X (p_oiface p)\"", "lemma Prot_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Prot X)) a p \\<longleftrightarrow> match_proto X (p_proto p)\"", "lemma Prot_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot X))) a p \\<longleftrightarrow> \\<not> match_proto X (p_proto p)\"", "lemma Ports_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a p \\<longleftrightarrow> proto = p_proto p \\<and> p_sport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p \\<longleftrightarrow> proto = p_proto p \\<and> p_dport p \\<in> ports_to_set ps\"", "lemma Ports_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow> proto \\<noteq> p_proto p \\<or> p_sport p \\<notin> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow> proto \\<noteq> p_proto p \\<or> p_dport p \\<notin> ports_to_set ps\"", "lemma Ports_single_rewrite_Prot:\n    \"matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and> p_sport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a p \\<or> p_sport p \\<notin> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and> p_dport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a p \\<or> p_dport p \\<notin> ports_to_set ps\"", "lemma multiports_disjuction:\n        \"(\\<exists>rg\\<in>set spts. matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto [rg]))) a p) \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto spts))) a p\"\n        \"(\\<exists>rg\\<in>set dpts. matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto [rg]))) a p) \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto dpts))) a p\"", "lemma MultiportPorts_single_rewrite:\n    \"matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<or> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p\"", "lemma MultiportPorts_single_rewrite_MatchOr:\n    \"matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchOr (Match (Src_Ports ports)) (Match (Dst_Ports ports))) a p\"", "lemma MultiportPorts_single_not_rewrite_MatchAnd:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchAnd (MatchNot (Match (Src_Ports ports))) (MatchNot (Match (Dst_Ports ports)))) a p\"", "lemma MultiportPorts_single_not_rewrite:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a p \\<longleftrightarrow>\n      \\<not> matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<and> \\<not> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p\"", "lemma Extra_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Extra str)) a p \\<longleftrightarrow> \\<alpha> a p\"", "lemma Extra_single_not:  \\<comment> \\<open>ternary logic, @{text \"\\<not> unknown = unknown\"}\\<close>\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Extra str))) a p \\<longleftrightarrow> \\<alpha> a p\"", "lemma compress_extra_correct_matchexpr:\n    fixes \\<beta>::\"('i::len common_primitive, ('i::len, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows \"matches (\\<beta>, \\<alpha>) m = matches (\\<beta>, \\<alpha>) (compress_extra m)\""], "translations": [["", "lemma Iface_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (IIface X)) a p \\<longleftrightarrow> match_iface X (p_iiface p)\"\n    \"matches (\\<beta>, \\<alpha>) (Match (OIface X)) a p \\<longleftrightarrow> match_iface X (p_oiface p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (IIface X)) a p =\n    match_iface X (p_iiface p) &&&\n    matches (\\<beta>, \\<alpha>) (Match (OIface X)) a p =\n    match_iface X (p_oiface p)", "by(simp_all add: IIface OIface match_raw_ternary bool_to_ternary_simps\n               split: ternaryvalue.split)"], ["", "text\\<open>Since matching on the iface cannot be @{const TernaryUnknown}*, we can pull out negations.\\<close>"], ["", "lemma Iface_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (IIface X))) a p \\<longleftrightarrow> \\<not> match_iface X (p_iiface p)\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (OIface X))) a p \\<longleftrightarrow> \\<not> match_iface X (p_oiface p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot (Match (IIface X))) a p =\n    (\\<not> match_iface X (p_iiface p)) &&&\n    matches (\\<beta>, \\<alpha>) (MatchNot (Match (OIface X))) a p =\n    (\\<not> match_iface X (p_oiface p))", "by(simp_all add: IIface OIface matches_case_ternaryvalue_tuple bool_to_ternary_simps\n          split: ternaryvalue.split)"], ["", "lemma Prot_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Prot X)) a p \\<longleftrightarrow> match_proto X (p_proto p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (Prot X)) a p =\n    match_proto X (p_proto p)", "by(simp add: Prot match_raw_ternary bool_to_ternary_simps split: ternaryvalue.split)"], ["", "lemma Prot_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot X))) a p \\<longleftrightarrow> \\<not> match_proto X (p_proto p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot X))) a p =\n    (\\<not> match_proto X (p_proto p))", "by(simp add: Prot matches_case_ternaryvalue_tuple bool_to_ternary_simps split: ternaryvalue.split)"], ["", "lemma Ports_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a p \\<longleftrightarrow> proto = p_proto p \\<and> p_sport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p \\<longleftrightarrow> proto = p_proto p \\<and> p_dport p \\<in> ports_to_set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a p =\n    (proto = p_proto p \\<and> p_sport p \\<in> ports_to_set ps) &&&\n    matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p =\n    (proto = p_proto p \\<and> p_dport p \\<in> ports_to_set ps)", "by(simp_all add: Src_Ports Dst_Ports match_raw_ternary bool_to_ternary_simps\n               split: ternaryvalue.split)"], ["", "lemma Ports_single_not:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow> proto \\<noteq> p_proto p \\<or> p_sport p \\<notin> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow> proto \\<noteq> p_proto p \\<or> p_dport p \\<notin> ports_to_set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>)\n     (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p =\n    (proto \\<noteq> p_proto p \\<or> p_sport p \\<notin> ports_to_set ps) &&&\n    matches (\\<beta>, \\<alpha>)\n     (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p =\n    (proto \\<noteq> p_proto p \\<or> p_dport p \\<notin> ports_to_set ps)", "by(simp_all add: Src_Ports Dst_Ports matches_case_ternaryvalue_tuple bool_to_ternary_simps\n               split: ternaryvalue.split)"], ["", "text\\<open>Ports are dependent matches. They always match on the protocol too\\<close>"], ["", "lemma Ports_single_rewrite_Prot:\n    \"matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and> p_sport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a p \\<or> p_sport p \\<notin> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and> p_dport p \\<in> ports_to_set ps\"\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a p \\<or> p_dport p \\<notin> ports_to_set ps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto ps))) a\n      p =\n     (matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and>\n      p_sport p \\<in> ports_to_set ps) &&&\n     matches (\\<beta>, \\<alpha>)\n      (MatchNot (Match (Src_Ports (L4Ports proto ps)))) a p =\n     (matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a\n       p \\<or>\n      p_sport p \\<notin> ports_to_set ps)) &&&\n    matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto ps))) a p =\n    (matches (\\<beta>, \\<alpha>) (Match (Prot (Proto proto))) a p \\<and>\n     p_dport p \\<in> ports_to_set ps) &&&\n    matches (\\<beta>, \\<alpha>)\n     (MatchNot (Match (Dst_Ports (L4Ports proto ps)))) a p =\n    (matches (\\<beta>, \\<alpha>) (MatchNot (Match (Prot (Proto proto)))) a\n      p \\<or>\n     p_dport p \\<notin> ports_to_set ps)", "by(auto simp add: Ports_single_not Ports_single Prot_single_not Prot_single)"], ["", "lemma multiports_disjuction:\n        \"(\\<exists>rg\\<in>set spts. matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto [rg]))) a p) \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto spts))) a p\"\n        \"(\\<exists>rg\\<in>set dpts. matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto [rg]))) a p) \\<longleftrightarrow> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto dpts))) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>rg\\<in>set spts.\n        matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto [rg])))\n         a p) =\n    matches (\\<beta>, \\<alpha>) (Match (Src_Ports (L4Ports proto spts))) a\n     p &&&\n    (\\<exists>rg\\<in>set dpts.\n        matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto [rg])))\n         a p) =\n    matches (\\<beta>, \\<alpha>) (Match (Dst_Ports (L4Ports proto dpts))) a p", "by(auto simp add: Src_Ports Dst_Ports match_raw_ternary bool_to_ternary_simps ports_to_set\n                   split: ternaryvalue.split)"], ["", "lemma MultiportPorts_single_rewrite:\n    \"matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<or> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p =\n    (matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<or>\n     matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p)", "apply(cases ports)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p =\n       (matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<or>\n        matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p)", "apply(simp add: Ports_single)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (Match (MultiportPorts (L4Ports x1 x2)))\n        a p =\n       (x1 = p_proto p \\<and> p_sport p \\<in> ports_to_set x2 \\<or>\n        x1 = p_proto p \\<and> p_dport p \\<in> ports_to_set x2)", "by(simp add: MultiportsPorts match_raw_ternary bool_to_ternary_simps\n            split: ternaryvalue.split)"], ["", "lemma MultiportPorts_single_rewrite_MatchOr:\n    \"matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchOr (Match (Src_Ports ports)) (Match (Dst_Ports ports))) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p =\n    matches (\\<beta>, \\<alpha>)\n     (MatchOr (Match (Src_Ports ports)) (Match (Dst_Ports ports))) a p", "apply(cases ports)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (Match (MultiportPorts ports)) a p =\n       matches (\\<beta>, \\<alpha>)\n        (MatchOr (Match (Src_Ports ports)) (Match (Dst_Ports ports))) a p", "by(simp add: MatchOr MultiportPorts_single_rewrite)"], ["", "lemma MultiportPorts_single_not_rewrite_MatchAnd:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a p \\<longleftrightarrow>\n      matches (\\<beta>, \\<alpha>) (MatchAnd (MatchNot (Match (Src_Ports ports))) (MatchNot (Match (Dst_Ports ports)))) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a\n     p =\n    matches (\\<beta>, \\<alpha>)\n     (MatchAnd (MatchNot (Match (Src_Ports ports)))\n       (MatchNot (Match (Dst_Ports ports))))\n     a p", "apply(cases ports)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports)))\n        a p =\n       matches (\\<beta>, \\<alpha>)\n        (MatchAnd (MatchNot (Match (Src_Ports ports)))\n          (MatchNot (Match (Dst_Ports ports))))\n        a p", "apply(simp add: Ports_single_not bunch_of_lemmata_about_matches)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>)\n        (MatchNot (Match (MultiportPorts (L4Ports x1 x2)))) a p =\n       ((x1 = p_proto p \\<longrightarrow>\n         p_sport p \\<notin> ports_to_set x2) \\<and>\n        (x1 = p_proto p \\<longrightarrow>\n         p_dport p \\<notin> ports_to_set x2))", "by(simp add: MultiportsPorts matches_case_ternaryvalue_tuple bool_to_ternary_simps\n            split: ternaryvalue.split)"], ["", "lemma MultiportPorts_single_not_rewrite:\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a p \\<longleftrightarrow>\n      \\<not> matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<and> \\<not> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports))) a\n     p =\n    (\\<not> matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a p \\<and>\n     \\<not> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p)", "apply(cases ports)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       ports = L4Ports x1 x2 \\<Longrightarrow>\n       matches (\\<beta>, \\<alpha>) (MatchNot (Match (MultiportPorts ports)))\n        a p =\n       (\\<not> matches (\\<beta>, \\<alpha>) (Match (Src_Ports ports)) a\n                p \\<and>\n        \\<not> matches (\\<beta>, \\<alpha>) (Match (Dst_Ports ports)) a p)", "by(simp add: MultiportPorts_single_not_rewrite_MatchAnd bunch_of_lemmata_about_matches\n                 Ports_single_not Ports_single)"], ["", "lemma Extra_single:\n    \"matches (\\<beta>, \\<alpha>) (Match (Extra str)) a p \\<longleftrightarrow> \\<alpha> a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (Match (Extra str)) a p = \\<alpha> a p", "by(simp add: Extra match_raw_ternary)"], ["", "lemma Extra_single_not:  \\<comment> \\<open>ternary logic, @{text \"\\<not> unknown = unknown\"}\\<close>\n    \"matches (\\<beta>, \\<alpha>) (MatchNot (Match (Extra str))) a p \\<longleftrightarrow> \\<alpha> a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) (MatchNot (Match (Extra str))) a p =\n    \\<alpha> a p", "by(simp add: Extra matches_case_ternaryvalue_tuple)"], ["", "end"], ["", "subsection\\<open>Basic optimisations\\<close>"], ["", "(*this is currently not used.*)"], ["", "text\\<open>Compress many @{const Extra} expressions to one expression.\\<close>"], ["", "fun compress_extra :: \"'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr\" where\n    \"compress_extra (Match x) = Match x\" |\n    \"compress_extra (MatchNot (Match (Extra e))) = Match (Extra (''NOT (''@e@'')''))\" |\n    \"compress_extra (MatchNot m) = (MatchNot (compress_extra m))\" |\n    (*\"compress_extra (MatchAnd (Match (Extra e1)) (Match (Extra e2))) = compress_extra (Match (Extra (e1@'' ''@e2)))\" |*)\n    (*\"compress_extra (MatchAnd (Match (Extra e1)) MatchAny) = Match (Extra e1)\" |*)\n    \"compress_extra (MatchAnd (Match (Extra e1)) m2) = (case compress_extra m2 of Match (Extra e2) \\<Rightarrow> Match (Extra (e1@'' ''@e2)) | MatchAny \\<Rightarrow> Match (Extra e1) | m2' \\<Rightarrow> MatchAnd (Match (Extra e1)) m2')\" |\n    \"compress_extra (MatchAnd m1 m2) = MatchAnd (compress_extra m1) (compress_extra m2)\" |\n    (*\"compress_extra (MatchAnd m1 m2) = (case (compress_extra m1, compress_extra m2) of \n          (Match (Extra e1), Match (Extra e2)) \\<Rightarrow> Match (Extra (e1@'' ''@e2))\n        | (Match (Extra e1), MatchAny) \\<Rightarrow> Match (Extra e1)\n        | (MatchAny, Match (Extra e2)) \\<Rightarrow> Match (Extra e2)\n        | (m1', m2') \\<Rightarrow> MatchAnd m1' m2')\" |*)\n    \"compress_extra MatchAny = MatchAny\""], ["", "thm compress_extra.simps"], ["", "value [nbe] \"compress_extra (MatchAnd (Match (Extra ''foo'')) (Match (Extra ''bar'')))\""], ["", "value [nbe] \"compress_extra (MatchAnd (Match (Extra ''foo'')) (MatchNot (Match (Extra ''bar''))))\""], ["", "value [nbe] \"compress_extra (MatchAnd (Match (Extra ''-m'')) (MatchAnd (Match (Extra ''addrtype'')) (MatchAnd (Match (Extra ''--dst-type'')) (MatchAnd (Match (Extra ''BROADCAST'')) MatchAny))))\""], ["", "lemma compress_extra_correct_matchexpr:\n    fixes \\<beta>::\"('i::len common_primitive, ('i::len, 'a) tagged_packet_scheme) exact_match_tac\"\n    assumes generic: \"primitive_matcher_generic \\<beta>\"\n    shows \"matches (\\<beta>, \\<alpha>) m = matches (\\<beta>, \\<alpha>) (compress_extra m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m =\n    matches (\\<beta>, \\<alpha>) (compress_extra m)", "proof(simp add: fun_eq_iff, clarify, rename_tac a p)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       matches (\\<beta>, \\<alpha>) m a p =\n       matches (\\<beta>, \\<alpha>) (compress_extra m) a p", "fix a and p :: \"('i, 'a) tagged_packet_scheme\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p.\n       matches (\\<beta>, \\<alpha>) m a p =\n       matches (\\<beta>, \\<alpha>) (compress_extra m) a p", "from generic"], ["proof (chain)\npicking this:\n  primitive_matcher_generic \\<beta>", "have \"\\<beta> (Extra e) p = TernaryUnknown\" for e"], ["proof (prove)\nusing this:\n  primitive_matcher_generic \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> (Extra e) p = TernaryUnknown", "by(simp add: primitive_matcher_generic.Extra)"], ["proof (state)\nthis:\n  \\<beta> (Extra ?e) p = TernaryUnknown\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       matches (\\<beta>, \\<alpha>) m a p =\n       matches (\\<beta>, \\<alpha>) (compress_extra m) a p", "hence \"ternary_ternary_eval (map_match_tac \\<beta> p m) = ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m))\""], ["proof (prove)\nusing this:\n  \\<beta> (Extra ?e) p = TernaryUnknown\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval (map_match_tac \\<beta> p m) =\n    ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m))", "proof(induction m rule: compress_extra.induct)"], ["proof (state)\ngoal (30 subgoals):\n 1. \\<And>x.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (compress_extra (Match x)))\n 2. \\<And>e.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot (Match (Extra e)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (compress_extra (MatchNot (Match (Extra e)))))\n 3. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Src va)))))\n 4. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Dst va)))))\n 5. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (IIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (IIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (IIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (IIface va)))))\n 6. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (OIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (OIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (OIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (OIface va)))))\n 7. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Prot va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Prot va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Prot va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Prot va)))))\n 8. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Src_Ports va)))))\n 9. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Dst_Ports va)))))\n 10. \\<And>va.\n        \\<lbrakk>(\\<And>e.\n                     \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p (Match (MultiportPorts va))) =\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p\n                    (compress_extra (Match (MultiportPorts va))));\n         \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n        \\<Longrightarrow> ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (MatchNot (Match (MultiportPorts va)))) =\n                          ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (compress_extra\n                               (MatchNot (Match (MultiportPorts va)))))\nA total of 30 subgoals...", "case 4"], ["proof (state)\nthis:\n  (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m2_) =\n  ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m2_))\n  \\<beta> (Extra ?e) p = TernaryUnknown\n\ngoal (30 subgoals):\n 1. \\<And>x.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (compress_extra (Match x)))\n 2. \\<And>e.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot (Match (Extra e)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (compress_extra (MatchNot (Match (Extra e)))))\n 3. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Src va)))))\n 4. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Dst va)))))\n 5. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (IIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (IIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (IIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (IIface va)))))\n 6. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (OIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (OIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (OIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (OIface va)))))\n 7. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Prot va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Prot va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Prot va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Prot va)))))\n 8. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Src_Ports va)))))\n 9. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Dst_Ports va)))))\n 10. \\<And>va.\n        \\<lbrakk>(\\<And>e.\n                     \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p (Match (MultiportPorts va))) =\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p\n                    (compress_extra (Match (MultiportPorts va))));\n         \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n        \\<Longrightarrow> ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (MatchNot (Match (MultiportPorts va)))) =\n                          ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (compress_extra\n                               (MatchNot (Match (MultiportPorts va)))))\nA total of 30 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n  ternary_ternary_eval (map_match_tac \\<beta> p m2_) =\n  ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m2_))\n  \\<beta> (Extra ?e) p = TernaryUnknown\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac \\<beta> p (MatchAnd (Match (Extra e1_)) m2_)) =\n    ternary_ternary_eval\n     (map_match_tac \\<beta> p\n       (compress_extra (MatchAnd (Match (Extra e1_)) m2_)))", "by(simp_all split: match_expr.split match_expr.split_asm common_primitive.split)"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac \\<beta> p (MatchAnd (Match (Extra e1_)) m2_)) =\n  ternary_ternary_eval\n   (map_match_tac \\<beta> p\n     (compress_extra (MatchAnd (Match (Extra e1_)) m2_)))\n\ngoal (29 subgoals):\n 1. \\<And>x.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval (map_match_tac \\<beta> p (Match x)) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (compress_extra (Match x)))\n 2. \\<And>e.\n       (\\<And>e. \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p (MatchNot (Match (Extra e)))) =\n       ternary_ternary_eval\n        (map_match_tac \\<beta> p\n          (compress_extra (MatchNot (Match (Extra e)))))\n 3. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Src va)))))\n 4. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Dst va)))))\n 5. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (IIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (IIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (IIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (IIface va)))))\n 6. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (OIface va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (OIface va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (OIface va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (OIface va)))))\n 7. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Prot va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Prot va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Prot va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra (MatchNot (Match (Prot va)))))\n 8. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Src_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Src_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Src_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Src_Ports va)))))\n 9. \\<And>va.\n       \\<lbrakk>(\\<And>e.\n                    \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p (Match (Dst_Ports va))) =\n                ternary_ternary_eval\n                 (map_match_tac \\<beta> p\n                   (compress_extra (Match (Dst_Ports va))));\n        \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n       \\<Longrightarrow> ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (MatchNot (Match (Dst_Ports va)))) =\n                         ternary_ternary_eval\n                          (map_match_tac \\<beta> p\n                            (compress_extra\n                              (MatchNot (Match (Dst_Ports va)))))\n 10. \\<And>va.\n        \\<lbrakk>(\\<And>e.\n                     \\<beta> (Extra e) p = TernaryUnknown) \\<Longrightarrow>\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p (Match (MultiportPorts va))) =\n                 ternary_ternary_eval\n                  (map_match_tac \\<beta> p\n                    (compress_extra (Match (MultiportPorts va))));\n         \\<And>e. \\<beta> (Extra e) p = TernaryUnknown\\<rbrakk>\n        \\<Longrightarrow> ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (MatchNot (Match (MultiportPorts va)))) =\n                          ternary_ternary_eval\n                           (map_match_tac \\<beta> p\n                             (compress_extra\n                               (MatchNot (Match (MultiportPorts va)))))\nA total of 29 subgoals...", "qed (simp_all)"], ["proof (state)\nthis:\n  ternary_ternary_eval (map_match_tac \\<beta> p m) =\n  ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m))\n\ngoal (1 subgoal):\n 1. \\<And>a p.\n       matches (\\<beta>, \\<alpha>) m a p =\n       matches (\\<beta>, \\<alpha>) (compress_extra m) a p", "thus \"matches (\\<beta>, \\<alpha>) m a p = matches (\\<beta>, \\<alpha>) (compress_extra m) a p\""], ["proof (prove)\nusing this:\n  ternary_ternary_eval (map_match_tac \\<beta> p m) =\n  ternary_ternary_eval (map_match_tac \\<beta> p (compress_extra m))\n\ngoal (1 subgoal):\n 1. matches (\\<beta>, \\<alpha>) m a p =\n    matches (\\<beta>, \\<alpha>) (compress_extra m) a p", "by(rule matches_iff_apply_f)"], ["proof (state)\nthis:\n  matches (\\<beta>, \\<alpha>) m a p =\n  matches (\\<beta>, \\<alpha>) (compress_extra m) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}