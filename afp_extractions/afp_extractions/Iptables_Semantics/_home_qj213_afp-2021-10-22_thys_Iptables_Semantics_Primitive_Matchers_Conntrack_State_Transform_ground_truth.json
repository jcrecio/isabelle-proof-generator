{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Conntrack_State_Transform.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma ctstate_assume_state: \"p_tag_ctstate p = s \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>) (ctstate_assume_state s m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\"", "lemma ctstate_assume_new_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (ctstate_assume_new rs)\"", "lemma ipt_tcp_flags_assume_flag: assumes \"match_tcp_flags flg (p_tcp_flags p)\"\n    shows \"matches (common_matcher, \\<alpha>) (ipt_tcp_flags_assume_flag flg m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\"", "lemma ipt_tcp_flags_assume_syn_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (ipt_tcp_flags_assume_syn rs)\"", "lemma packet_assume_new_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (packet_assume_new rs)\""], "translations": [["", "lemma ctstate_assume_state: \"p_tag_ctstate p = s \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>) (ctstate_assume_state s m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p_tag_ctstate p = s \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>) (ctstate_assume_state s m) a p =\n    matches (common_matcher, \\<alpha>) m a p", "apply(rule matches_iff_apply_f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p_tag_ctstate p = s \\<Longrightarrow>\n    ternary_ternary_eval\n     (map_match_tac common_matcher p (ctstate_assume_state s m)) =\n    ternary_ternary_eval (map_match_tac common_matcher p m)", "by(induction m rule: ctstate_assume_state.induct) (simp_all)"], ["", "definition ctstate_assume_new :: \"'i::len  common_primitive rule list \\<Rightarrow> 'i common_primitive rule list\" where\n  \"ctstate_assume_new \\<equiv> optimize_matches (ctstate_assume_state CT_New)\""], ["", "lemma ctstate_assume_new_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (ctstate_assume_new rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (ctstate_assume_new rs)", "by (simp add: ctstate_assume_new_def optimize_matches_simple_ruleset)"], ["", "text\\<open>Usually, the interesting part of a firewall is only about the rules for setting up connections.\n      That means, we mostly only care about packets in state @{const CT_New}.\n      Use the function @{const ctstate_assume_new} to remove all state matching and just care about\n      the connection setup.\n\\<close>"], ["", "corollary ctstate_assume_new: \"p_tag_ctstate p = CT_New \\<Longrightarrow> \n  approximating_bigstep_fun (common_matcher, \\<alpha>) p (ctstate_assume_new rs) s = approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p_tag_ctstate p = CT_New \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p\n     (ctstate_assume_new rs) s =\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s", "unfolding ctstate_assume_new_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p_tag_ctstate p = CT_New \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p\n     (optimize_matches (ctstate_assume_state CT_New) rs) s =\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s", "apply(rule optimize_matches)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p_tag_ctstate p = CT_New \\<Longrightarrow>\n    \\<forall>m a.\n       matches (common_matcher, \\<alpha>) (ctstate_assume_state CT_New m) a\n        p =\n       matches (common_matcher, \\<alpha>) m a p", "apply(simp add: ctstate_assume_state)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>If we assume the CT State is @{const CT_New}, we can also assume that the TCP SYN flag (@{const ipt_tcp_syn}) is set.\\<close>"], ["", "fun ipt_tcp_flags_assume_flag :: \"ipt_tcp_flags \\<Rightarrow> 'i::len common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr\" where\n  \"ipt_tcp_flags_assume_flag flg (Match (L4_Flags x)) = (if ipt_tcp_flags_equal x flg then MatchAny else (case match_tcp_flags_conjunct_option x flg of None \\<Rightarrow> MatchNot MatchAny | Some f3 \\<Rightarrow> Match (L4_Flags f3)))\" |\n  \"ipt_tcp_flags_assume_flag flg (Match m) = Match m\" |\n  \"ipt_tcp_flags_assume_flag flg (MatchNot m) = MatchNot (ipt_tcp_flags_assume_flag flg m)\" |\n  \"ipt_tcp_flags_assume_flag _ MatchAny = MatchAny\" |\n  \"ipt_tcp_flags_assume_flag flg (MatchAnd m1 m2) = MatchAnd (ipt_tcp_flags_assume_flag flg m1) (ipt_tcp_flags_assume_flag flg m2)\""], ["", "lemma ipt_tcp_flags_assume_flag: assumes \"match_tcp_flags flg (p_tcp_flags p)\"\n    shows \"matches (common_matcher, \\<alpha>) (ipt_tcp_flags_assume_flag flg m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (ipt_tcp_flags_assume_flag flg m) a\n     p =\n    matches (common_matcher, \\<alpha>) m a p", "proof(rule matches_iff_apply_f)"], ["proof (state)\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac common_matcher p (ipt_tcp_flags_assume_flag flg m)) =\n    ternary_ternary_eval (map_match_tac common_matcher p m)", "show \"ternary_ternary_eval (map_match_tac common_matcher p (ipt_tcp_flags_assume_flag flg m)) = ternary_ternary_eval (map_match_tac common_matcher p m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac common_matcher p (ipt_tcp_flags_assume_flag flg m)) =\n    ternary_ternary_eval (map_match_tac common_matcher p m)", "using assms"], ["proof (prove)\nusing this:\n  match_tcp_flags flg (p_tcp_flags p)\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac common_matcher p (ipt_tcp_flags_assume_flag flg m)) =\n    ternary_ternary_eval (map_match_tac common_matcher p m)", "proof(induction m rule: ipt_tcp_flags_assume_flag.induct)"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>flg x.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (L4_Flags x)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (L4_Flags x)))\n 2. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Src v)))\n 3. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Dst v)))\n 4. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (IIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (IIface v)))\n 5. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (OIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (OIface v)))\n 6. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Prot v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Prot v)))\n 7. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Src_Ports v)))\n 8. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Dst_Ports v)))\n 9. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (MultiportPorts v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (MultiportPorts v)))\n 10. \\<And>flg v.\n        match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n        ternary_ternary_eval\n         (map_match_tac common_matcher p\n           (ipt_tcp_flags_assume_flag flg (Match (CT_State v)))) =\n        ternary_ternary_eval\n         (map_match_tac common_matcher p (Match (CT_State v)))\nA total of 14 subgoals...", "case (1 flg x)"], ["proof (state)\nthis:\n  match_tcp_flags flg (p_tcp_flags p)\n\ngoal (14 subgoals):\n 1. \\<And>flg x.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (L4_Flags x)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (L4_Flags x)))\n 2. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Src v)))\n 3. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Dst v)))\n 4. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (IIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (IIface v)))\n 5. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (OIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (OIface v)))\n 6. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Prot v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Prot v)))\n 7. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Src_Ports v)))\n 8. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Dst_Ports v)))\n 9. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (MultiportPorts v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (MultiportPorts v)))\n 10. \\<And>flg v.\n        match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n        ternary_ternary_eval\n         (map_match_tac common_matcher p\n           (ipt_tcp_flags_assume_flag flg (Match (CT_State v)))) =\n        ternary_ternary_eval\n         (map_match_tac common_matcher p (Match (CT_State v)))\nA total of 14 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  match_tcp_flags flg (p_tcp_flags p)\n\ngoal (1 subgoal):\n 1. ternary_ternary_eval\n     (map_match_tac common_matcher p\n       (ipt_tcp_flags_assume_flag flg (Match (L4_Flags x)))) =\n    ternary_ternary_eval\n     (map_match_tac common_matcher p (Match (L4_Flags x)))", "apply(simp add: ipt_tcp_flags_equal del: match_tcp_flags.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n    (\\<exists>pkt.\n        match_tcp_flags x pkt =\n        (\\<not> match_tcp_flags flg pkt)) \\<longrightarrow>\n    ternary_ternary_eval\n     (map_match_tac common_matcher p\n       (case match_tcp_flags_conjunct_option x flg of\n        None \\<Rightarrow> MatchNot MatchAny\n        | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n    bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "apply(cases \"match_tcp_flags_conjunct_option x flg\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n     match_tcp_flags_conjunct_option x flg = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pkt.\n                          match_tcp_flags x pkt =\n                          (\\<not> match_tcp_flags flg\n                                   pkt)) \\<longrightarrow>\n                      ternary_ternary_eval\n                       (map_match_tac common_matcher p\n                         (case match_tcp_flags_conjunct_option x flg of\n                          None \\<Rightarrow> MatchNot MatchAny\n                          | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n                      bool_to_ternary (match_tcp_flags x (p_tcp_flags p))\n 2. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        match_tcp_flags_conjunct_option x flg = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         ternary_ternary_eval\n                          (map_match_tac common_matcher p\n                            (case match_tcp_flags_conjunct_option x flg of\n                             None \\<Rightarrow> MatchNot MatchAny\n                             | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n     match_tcp_flags_conjunct_option x flg = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pkt.\n                          match_tcp_flags x pkt =\n                          (\\<not> match_tcp_flags flg\n                                   pkt)) \\<longrightarrow>\n                      TernaryFalse =\n                      bool_to_ternary (match_tcp_flags x (p_tcp_flags p))\n 2. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        match_tcp_flags_conjunct_option x flg = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         ternary_ternary_eval\n                          (map_match_tac common_matcher p\n                            (case match_tcp_flags_conjunct_option x flg of\n                             None \\<Rightarrow> MatchNot MatchAny\n                             | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "using match_tcp_flags_conjunct_option_None bool_to_ternary_simps(2)"], ["proof (prove)\nusing this:\n  match_tcp_flags_conjunct_option ?f1.0 ?f2.0 = None \\<Longrightarrow>\n  \\<not> (match_tcp_flags ?f1.0 ?pkt \\<and> match_tcp_flags ?f2.0 ?pkt)\n  (bool_to_ternary ?Y = TernaryFalse) = (\\<not> ?Y)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n     match_tcp_flags_conjunct_option x flg = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>pkt.\n                          match_tcp_flags x pkt =\n                          (\\<not> match_tcp_flags flg\n                                   pkt)) \\<longrightarrow>\n                      TernaryFalse =\n                      bool_to_ternary (match_tcp_flags x (p_tcp_flags p))\n 2. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        match_tcp_flags_conjunct_option x flg = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         ternary_ternary_eval\n                          (map_match_tac common_matcher p\n                            (case match_tcp_flags_conjunct_option x flg of\n                             None \\<Rightarrow> MatchNot MatchAny\n                             | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        match_tcp_flags_conjunct_option x flg = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         ternary_ternary_eval\n                          (map_match_tac common_matcher p\n                            (case match_tcp_flags_conjunct_option x flg of\n                             None \\<Rightarrow> MatchNot MatchAny\n                             | Some f3 \\<Rightarrow> Match (L4_Flags f3))) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        match_tcp_flags_conjunct_option x flg = Some a\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         bool_to_ternary\n                          (match_tcp_flags a (p_tcp_flags p)) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "apply(drule_tac pkt=\"(p_tcp_flags p)\" in match_tcp_flags_conjunct_option_Some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_tcp_flags flg (p_tcp_flags p);\n        (match_tcp_flags x (p_tcp_flags p) \\<and>\n         match_tcp_flags flg (p_tcp_flags p)) =\n        match_tcp_flags a (p_tcp_flags p)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>pkt.\n                             match_tcp_flags x pkt =\n                             (\\<not> match_tcp_flags flg\npkt)) \\<longrightarrow>\n                         bool_to_ternary\n                          (match_tcp_flags a (p_tcp_flags p)) =\n                         bool_to_ternary (match_tcp_flags x (p_tcp_flags p))", "by simp"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac common_matcher p\n     (ipt_tcp_flags_assume_flag flg (Match (L4_Flags x)))) =\n  ternary_ternary_eval (map_match_tac common_matcher p (Match (L4_Flags x)))\n\ngoal (13 subgoals):\n 1. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Src v)))\n 2. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst v)))) =\n       ternary_ternary_eval (map_match_tac common_matcher p (Match (Dst v)))\n 3. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (IIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (IIface v)))\n 4. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (OIface v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (OIface v)))\n 5. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Prot v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Prot v)))\n 6. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Src_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Src_Ports v)))\n 7. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (Dst_Ports v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (Dst_Ports v)))\n 8. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (MultiportPorts v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (MultiportPorts v)))\n 9. \\<And>flg v.\n       match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n       ternary_ternary_eval\n        (map_match_tac common_matcher p\n          (ipt_tcp_flags_assume_flag flg (Match (CT_State v)))) =\n       ternary_ternary_eval\n        (map_match_tac common_matcher p (Match (CT_State v)))\n 10. \\<And>flg v.\n        match_tcp_flags flg (p_tcp_flags p) \\<Longrightarrow>\n        ternary_ternary_eval\n         (map_match_tac common_matcher p\n           (ipt_tcp_flags_assume_flag flg (Match (Extra v)))) =\n        ternary_ternary_eval\n         (map_match_tac common_matcher p (Match (Extra v)))\nA total of 13 subgoals...", "qed(simp_all del: match_tcp_flags.simps)"], ["proof (state)\nthis:\n  ternary_ternary_eval\n   (map_match_tac common_matcher p (ipt_tcp_flags_assume_flag flg m)) =\n  ternary_ternary_eval (map_match_tac common_matcher p m)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ipt_tcp_flags_assume_syn :: \"'i::len common_primitive rule list \\<Rightarrow> 'i common_primitive rule list\" where\n  \"ipt_tcp_flags_assume_syn \\<equiv> optimize_matches (ipt_tcp_flags_assume_flag ipt_tcp_syn)\""], ["", "lemma ipt_tcp_flags_assume_syn_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (ipt_tcp_flags_assume_syn rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (ipt_tcp_flags_assume_syn rs)", "by (simp add: ipt_tcp_flags_assume_syn_def optimize_matches_simple_ruleset)"], ["", "corollary ipt_tcp_flags_assume_syn: \"match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<Longrightarrow>\n  approximating_bigstep_fun (common_matcher, \\<alpha>) p (ipt_tcp_flags_assume_syn rs) s = approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p\n     (ipt_tcp_flags_assume_syn rs) s =\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s", "unfolding ipt_tcp_flags_assume_syn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<Longrightarrow>\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p\n     (optimize_matches (ipt_tcp_flags_assume_flag ipt_tcp_syn) rs) s =\n    approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s", "apply(rule optimize_matches)"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<Longrightarrow>\n    \\<forall>m a.\n       matches (common_matcher, \\<alpha>)\n        (ipt_tcp_flags_assume_flag ipt_tcp_syn m) a p =\n       matches (common_matcher, \\<alpha>) m a p", "apply(simp add: ipt_tcp_flags_assume_flag)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition packet_assume_new :: \"'i::len common_primitive rule list \\<Rightarrow> 'i common_primitive rule list\" where\n  \"packet_assume_new \\<equiv> ctstate_assume_new \\<circ> ipt_tcp_flags_assume_syn\""], ["", "lemma packet_assume_new_simple_ruleset: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (packet_assume_new rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (packet_assume_new rs)", "by (simp add: packet_assume_new_def ipt_tcp_flags_assume_syn_simple_ruleset ctstate_assume_new_simple_ruleset)"], ["", "corollary packet_assume_new: \"match_tcp_flags ipt_tcp_syn (p_tcp_flags p) \\<Longrightarrow> p_tag_ctstate p = CT_New \\<Longrightarrow> \n  approximating_bigstep_fun (common_matcher, \\<alpha>) p (packet_assume_new rs) s = approximating_bigstep_fun (common_matcher, \\<alpha>) p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>match_tcp_flags ipt_tcp_syn (p_tcp_flags p);\n     p_tag_ctstate p = CT_New\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (common_matcher, \\<alpha>) p\n                       (packet_assume_new rs) s =\n                      approximating_bigstep_fun (common_matcher, \\<alpha>) p\n                       rs s", "unfolding packet_assume_new_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>match_tcp_flags ipt_tcp_syn (p_tcp_flags p);\n     p_tag_ctstate p = CT_New\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun (common_matcher, \\<alpha>) p\n                       ((ctstate_assume_new \\<circ>\n                         ipt_tcp_flags_assume_syn)\n                         rs)\n                       s =\n                      approximating_bigstep_fun (common_matcher, \\<alpha>) p\n                       rs s", "by (simp add: ctstate_assume_new ipt_tcp_flags_assume_syn)"], ["", "end"]]}