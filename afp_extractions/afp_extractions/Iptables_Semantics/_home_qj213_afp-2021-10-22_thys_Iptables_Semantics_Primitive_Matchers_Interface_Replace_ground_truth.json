{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Interface_Replace.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma matches_ipassmt_iface_constrain_srcip_mexpr: \n    \"matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n      (case ipassmt ifce of\n            None \\<Rightarrow> match_iface ifce (p_iiface p)\n          | Some ips \\<Rightarrow> match_iface ifce (p_iiface p) \\<and> p_src p \\<in> ipcidr_union_set (set ips)\n          )\"", "lemma iiface_constrain_matches_Primitive:\n          \"matches (common_matcher, \\<alpha>) (MatchNot (iiface_constrain ipassmt (Match x))) a p = matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p \\<longleftrightarrow>\n           matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x)) a p = matches (common_matcher, \\<alpha>) (Match x) a p\"", "lemma matches_ipassmt_iface_constrain_srcip_mexpr_case_Iface:\n        fixes ifce::iface\n        assumes \"ipassmt_sanity_nowildcards ipassmt\"\n        and \"\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips)\"\n        shows   \"matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n                 matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\"", "lemma matches_iiface_constrain:\n       \"normalized_nnf_match m \\<Longrightarrow> ipassmt_sanity_nowildcards ipassmt \\<Longrightarrow>\n        (\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\"", "lemma \"(\\<exists>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<and> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       (case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\"\n      \"(case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n      (\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips))\"", "lemma \"\\<forall> p:: ('i::len,'pkt_ext) tagged_packet_scheme.\n        Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow> p_src p \\<in> ipcidr_union_set (set (the (ipassmt (Iface (p_iiface p))))) \\<Longrightarrow>\n       no_spoofing TYPE('pkt_ext) ipassmt rs\"", "lemma \n  fixes p :: \"('i::len,'pkt_ext) tagged_packet_scheme\"\n  shows \"no_spoofing TYPE('pkt_ext) ipassmt rs \\<Longrightarrow> \n      (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<Longrightarrow>\n       case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips) | None \\<Rightarrow> True\"", "lemma matches_ipassmt_iface_replace_srcip_mexpr: \n    \"matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow> (case ipassmt ifce of\n            None \\<Rightarrow> match_iface ifce (p_iiface p)\n          | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips)\n          )\"", "lemma iiface_rewrite_matches_Primitive:\n          \"matches (common_matcher, \\<alpha>) (MatchNot (iiface_rewrite ipassmt (Match x))) a p = matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p \\<longleftrightarrow>\n           matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a p = matches (common_matcher, \\<alpha>) (Match x) a p\"", "lemma matches_ipassmt_iface_replace_srcip_mexpr_case_Iface:\n        fixes ifce::iface\n        assumes \"ipassmt_sanity_nowildcards ipassmt\"\n            and \"ipassmt_sanity_disjoint ipassmt\"\n            and \"ipassmt (Iface (p_iiface p)) = Some p_ips \\<and> p_src p \\<in> ipcidr_union_set (set p_ips)\"\n        shows   \"matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n                 matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\"", "lemma matches_iiface_rewrite:\n       \"normalized_nnf_match m \\<Longrightarrow> ipassmt_sanity_nowildcards ipassmt \\<Longrightarrow> ipassmt_sanity_disjoint ipassmt \\<Longrightarrow>\n        (\\<exists>p_ips. ipassmt (Iface (p_iiface p)) = Some p_ips \\<and> p_src p \\<in> ipcidr_union_set (set p_ips)) \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\"", "lemma iface_replace_needs_ipassmt_disjoint:\n    assumes \"ipassmt_sanity_nowildcards ipassmt\"\n    and iface_replace: \"\\<And> ifce p:: 'i::len tagged_packet.\n          (matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p)\" \n    shows \"ipassmt_sanity_disjoint ipassmt\""], "translations": [["", "lemma matches_ipassmt_iface_constrain_srcip_mexpr: \n    \"matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n      (case ipassmt ifce of\n            None \\<Rightarrow> match_iface ifce (p_iiface p)\n          | Some ips \\<Rightarrow> match_iface ifce (p_iiface p) \\<and> p_src p \\<in> ipcidr_union_set (set ips)\n          )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow>\n         match_iface ifce (p_iiface p) \\<and>\n         p_src p \\<in> ipcidr_union_set (set ips))", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow>\n         match_iface ifce (p_iiface p) \\<and>\n         p_src p \\<in> ipcidr_union_set (set ips))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow>\n         match_iface ifce (p_iiface p) \\<and>\n         p_src p \\<in> ipcidr_union_set (set ips))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow>\n         match_iface ifce (p_iiface p) \\<and>\n         p_src p \\<in> ipcidr_union_set (set ips))", "by(simp add: ipassmt_iface_constrain_srcip_mexpr_def primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher]; fail)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n   | Some ips \\<Rightarrow>\n       match_iface ifce (p_iiface p) \\<and>\n       p_src p \\<in> ipcidr_union_set (set ips))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "case (Some ips)"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "have \"matches (common_matcher, \\<alpha>) (match_list_to_match_expr (map (Match \\<circ> Src \\<circ> (uncurry IpAddrNetmask)) ips)) a p \\<longleftrightarrow>\n       (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n     a p =\n    (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)", "apply(simp add: match_list_to_match_expr_disjunction[symmetric]\n                       match_list_matches match_simplematcher_SrcDst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>m\\<in>set ips.\n        p_src p \\<in> ipt_iprange_to_set (uncurry IpAddrNetmask m)) =\n    (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)", "by(simp add: ipt_iprange_to_set_uncurry_IpAddrNetmask)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow>\n            match_iface ifce (p_iiface p) \\<and>\n            p_src p \\<in> ipcidr_union_set (set ips))", "with Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some ips\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some ips\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow>\n         match_iface ifce (p_iiface p) \\<and>\n         p_src p \\<in> ipcidr_union_set (set ips))", "apply(simp add: ipcidr_union_set_uncurry)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipassmt ifce = Some ips;\n     matches (common_matcher, \\<alpha>)\n      (match_list_to_match_expr\n        (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n          ips))\n      a p =\n     (\\<exists>m\\<in>set ips.\n         p_src p \\<in> uncurry ipset_from_cidr m)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a\n                       p =\n                      (match_iface ifce (p_iiface p) \\<and>\n                       (\\<exists>x\\<in>set ips.\n                           p_src p \\<in> uncurry ipset_from_cidr x))", "apply(simp add: ipassmt_iface_constrain_srcip_mexpr_def bunch_of_lemmata_about_matches)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipassmt ifce = Some ips;\n     matches (common_matcher, \\<alpha>)\n      (match_list_to_match_expr\n        (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n          ips))\n      a p =\n     (\\<exists>m\\<in>set ips.\n         p_src p \\<in> uncurry ipset_from_cidr m)\\<rbrakk>\n    \\<Longrightarrow> (matches (common_matcher, \\<alpha>)\n                        (Match (IIface ifce)) a p \\<and>\n                       (\\<exists>m\\<in>set ips.\n                           p_src p \\<in> uncurry ipset_from_cidr m)) =\n                      (match_iface ifce (p_iiface p) \\<and>\n                       (\\<exists>x\\<in>set ips.\n                           p_src p \\<in> uncurry ipset_from_cidr x))", "apply(simp add: primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n   | Some ips \\<Rightarrow>\n       match_iface ifce (p_iiface p) \\<and>\n       p_src p \\<in> ipcidr_union_set (set ips))\n\ngoal:\nNo subgoals!", "qed"], ["", "fun iiface_constrain :: \"'i::len ipassignment \\<Rightarrow> 'i common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr\" where\n  \"iiface_constrain _       MatchAny = MatchAny\" |\n  \"iiface_constrain ipassmt (Match (IIface ifce)) = ipassmt_iface_constrain_srcip_mexpr ipassmt ifce\" |\n  \"iiface_constrain ipassmt (Match a) = Match a\" |\n  \"iiface_constrain ipassmt (MatchNot m) = MatchNot (iiface_constrain ipassmt m)\" |\n  \"iiface_constrain ipassmt (MatchAnd m1 m2) = MatchAnd (iiface_constrain ipassmt m1) (iiface_constrain ipassmt m2)\""], ["", "context\nbegin"], ["", "(*helper1: used in induction case MatchNot*)\n  private"], ["", "lemma iiface_constrain_matches_Primitive:\n          \"matches (common_matcher, \\<alpha>) (MatchNot (iiface_constrain ipassmt (Match x))) a p = matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p \\<longleftrightarrow>\n           matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x)) a p = matches (common_matcher, \\<alpha>) (Match x) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n     matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n    (matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x))\n      a p =\n     matches (common_matcher, \\<alpha>) (Match x) a p)", "proof(cases x)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_constrain ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "case (IIface ifce)"], ["proof (state)\nthis:\n  x = IIface ifce\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_constrain ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "have \"(matches (common_matcher, \\<alpha>) (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p = (\\<not> match_iface ifce (p_iiface p))) \\<longleftrightarrow>\n      (matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p = match_iface ifce (p_iiface p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "apply(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n    (\\<not> match_iface ifce (p_iiface p))", "apply(simp add: ipassmt_iface_constrain_srcip_mexpr_def\n              primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "case (Some ips)"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "{"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "fix ips"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "have \"matches (common_matcher, \\<alpha>)\n                 (MatchNot (match_list_to_match_expr (map (Match \\<circ> Src \\<circ> (uncurry IpAddrNetmask)) ips))) a p \\<longleftrightarrow>\n                 (p_src p \\<notin> ipcidr_union_set (set ips))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (MatchNot\n       (match_list_to_match_expr\n         (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n           ips)))\n     a p =\n    (p_src p \\<notin> ipcidr_union_set (set ips))", "apply(induction ips)"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches (common_matcher, \\<alpha>)\n     (MatchNot\n       (match_list_to_match_expr\n         (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n           [])))\n     a p =\n    (p_src p \\<notin> ipcidr_union_set (set []))\n 2. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              (aa # ips))))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set (aa # ips)))", "apply(simp add: bunch_of_lemmata_about_matches ipcidr_union_set_uncurry; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              (aa # ips))))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set (aa # ips)))", "apply(simp add: MatchOr_MatchNot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (Match (Src (uncurry IpAddrNetmask aa)))) a p \\<and>\n        p_src p \\<notin> ipcidr_union_set (set ips)) =\n       (p_src p \\<notin> ipcidr_union_set (insert aa (set ips)))", "apply(simp add: ipcidr_union_set_uncurry)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (\\<forall>x\\<in>set ips.\n           p_src p \\<notin> uncurry ipset_from_cidr x) \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (Match (Src (uncurry IpAddrNetmask aa)))) a p \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr aa \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "apply(simp add: match_simplematcher_SrcDst_not)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (\\<forall>x\\<in>set ips.\n           p_src p \\<notin> uncurry ipset_from_cidr x) \\<Longrightarrow>\n       (p_src p\n        \\<notin> ipt_iprange_to_set (uncurry IpAddrNetmask aa) \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr aa \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "apply(thin_tac _)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ips.\n       (p_src p \\<notin> ipt_iprange_to_set (uncurry IpAddrNetmask a) \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr a \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "by (simp add: ipt_iprange_to_set_uncurry_IpAddrNetmask)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ips)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ips))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "}"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ?ipsa2)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ?ipsa2))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "note helper=this"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ?ipsa2)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ?ipsa2))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "from Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some ips", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "apply(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((match_iface ifce (p_iiface p) \\<and>\n      p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: ipassmt_iface_constrain_srcip_mexpr_def primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot\n        (MatchAnd (Match (IIface ifce))\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              ips))))\n      a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((match_iface ifce (p_iiface p) \\<and>\n      p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: matches_DeMorgan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    ((matches (common_matcher, \\<alpha>) (MatchNot (Match (IIface ifce))) a\n       p \\<or>\n      matches (common_matcher, \\<alpha>)\n       (MatchNot\n         (match_list_to_match_expr\n           (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n             ips)))\n       a p) =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((match_iface ifce (p_iiface p) \\<and>\n      p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: helper)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    ((matches (common_matcher, \\<alpha>) (MatchNot (Match (IIface ifce))) a\n       p \\<or>\n      p_src p \\<notin> ipcidr_union_set (set ips)) =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((match_iface ifce (p_iiface p) \\<and>\n      p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    ((match_iface ifce (p_iiface p) \\<longrightarrow>\n      p_src p \\<notin> ipcidr_union_set (set ips)) =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((match_iface ifce (p_iiface p) \\<and>\n      p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "by blast"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_constrain ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "with IIface"], ["proof (chain)\npicking this:\n  x = IIface ifce\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))", "show ?thesis"], ["proof (prove)\nusing this:\n  x = IIface ifce\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n     matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n    (matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x))\n      a p =\n     matches (common_matcher, \\<alpha>) (Match x) a p)", "by(simp add: primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher]\n                   primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n   matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n  (matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x)) a\n    p =\n   matches (common_matcher, \\<alpha>) (Match x) a p)\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x10.\n       x = CT_State x10 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_constrain ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x11.\n        x = Extra x11 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_constrain ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_constrain ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)", "qed(simp_all)"], ["", "(*helper2: used in induction base case*)\n  private"], ["", "lemma matches_ipassmt_iface_constrain_srcip_mexpr_case_Iface:\n        fixes ifce::iface\n        assumes \"ipassmt_sanity_nowildcards ipassmt\"\n        and \"\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips)\"\n        shows   \"matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n                 matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "have \"matches (common_matcher, \\<alpha>) (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p = match_iface ifce (p_iiface p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "proof(cases \"ipassmt (Iface (p_iiface p))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt (Iface (p_iiface p)) = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case None"], ["proof (state)\nthis:\n  ipassmt (Iface (p_iiface p)) = None\n\ngoal (2 subgoals):\n 1. ipassmt (Iface (p_iiface p)) = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "from None"], ["proof (chain)\npicking this:\n  ipassmt (Iface (p_iiface p)) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt (Iface (p_iiface p)) = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n     ipassmt ifce = None\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a\n                       p =\n                      match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n     ipassmt ifce = None\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a\n                       p =\n                      match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "case (Some a)"], ["proof (state)\nthis:\n  ipassmt ifce = Some a\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "from assms(1)"], ["proof (chain)\npicking this:\n  ipassmt_sanity_nowildcards ipassmt", "have \"\\<not> match_iface ifce (p_iiface p)\""], ["proof (prove)\nusing this:\n  ipassmt_sanity_nowildcards ipassmt\n\ngoal (1 subgoal):\n 1. \\<not> match_iface ifce (p_iiface p)", "apply(rule ipassmt_sanity_nowildcards_match_iface)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ipassmt (Iface (p_iiface p)) = None\n 2. ipassmt ifce = Some ?a", "by(simp_all add: Some None)"], ["proof (state)\nthis:\n  \\<not> match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>ipassmt (Iface (p_iiface p)) = None;\n        ipassmt ifce = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce)\n                          a p =\n                         match_iface ifce (p_iiface p)", "with Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some a\n  \\<not> match_iface ifce (p_iiface p)", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some a\n  \\<not> match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case (Some x)"], ["proof (state)\nthis:\n  ipassmt (Iface (p_iiface p)) = Some x\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "with assms(2)"], ["proof (chain)\npicking this:\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  ipassmt (Iface (p_iiface p)) = Some x", "have assms2: \"p_src p \\<in> ipcidr_union_set (set x)\""], ["proof (prove)\nusing this:\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  ipassmt (Iface (p_iiface p)) = Some x\n\ngoal (1 subgoal):\n 1. p_src p \\<in> ipcidr_union_set (set x)", "by(simp)"], ["proof (state)\nthis:\n  p_src p \\<in> ipcidr_union_set (set x)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "(*unused*)"], ["proof (state)\nthis:\n  p_src p \\<in> ipcidr_union_set (set x)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt (Iface (p_iiface p)) = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case (Some y)"], ["proof (state)\nthis:\n  ipassmt ifce = Some y\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "with assms(2)"], ["proof (chain)\npicking this:\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  ipassmt ifce = Some y", "have \"(match_iface ifce (p_iiface p) \\<and> p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)\""], ["proof (prove)\nusing this:\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  ipassmt ifce = Some y\n\ngoal (1 subgoal):\n 1. (match_iface ifce (p_iiface p) \\<and>\n     p_src p \\<in> ipcidr_union_set (set y)) =\n    match_iface ifce (p_iiface p)", "apply(cases ifce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt ifce = Some y; ifce = Iface x\\<rbrakk>\n       \\<Longrightarrow> (match_iface ifce (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface ifce (p_iiface p)", "apply(rename_tac ifce_str)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt ifce = Some y; ifce = Iface ifce_str\\<rbrakk>\n       \\<Longrightarrow> (match_iface ifce (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface ifce (p_iiface p)", "apply(case_tac \"ifce_str = (p_iiface p)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt ifce = Some y; ifce = Iface ifce_str;\n        ifce_str = p_iiface p\\<rbrakk>\n       \\<Longrightarrow> (match_iface ifce (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface ifce (p_iiface p)\n 2. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt ifce = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> (match_iface ifce (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface ifce (p_iiface p)", "apply (simp add: match_iface_refl; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt ifce = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> (match_iface ifce (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface ifce (p_iiface p)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt (Iface ifce_str) = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> (match_iface (Iface ifce_str) (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface (Iface ifce_str) (p_iiface p)", "apply(subgoal_tac \"\\<not> match_iface (Iface ifce_str) (p_iiface p)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt (Iface ifce_str) = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p;\n        \\<not> match_iface (Iface ifce_str) (p_iiface p)\\<rbrakk>\n       \\<Longrightarrow> (match_iface (Iface ifce_str) (p_iiface p) \\<and>\n                          p_src p \\<in> ipcidr_union_set (set y)) =\n                         match_iface (Iface ifce_str) (p_iiface p)\n 2. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt (Iface ifce_str) = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_iface (Iface ifce_str) (p_iiface p)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt (Iface ifce_str) = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_iface (Iface ifce_str) (p_iiface p)", "using assms(1)"], ["proof (prove)\nusing this:\n  ipassmt_sanity_nowildcards ipassmt\n\ngoal (1 subgoal):\n 1. \\<And>ifce_str.\n       \\<lbrakk>\\<And>ips.\n                   ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n                   p_src p \\<in> ipcidr_union_set (set ips);\n        ipassmt (Iface ifce_str) = Some y; ifce = Iface ifce_str;\n        ifce_str \\<noteq> p_iiface p\\<rbrakk>\n       \\<Longrightarrow> \\<not> match_iface (Iface ifce_str) (p_iiface p)", "by (metis domI iface.sel iface_is_wildcard_def ipassmt_sanity_nowildcards_def match_iface_case_nowildcard)"], ["proof (state)\nthis:\n  (match_iface ifce (p_iiface p) \\<and>\n   p_src p \\<in> ipcidr_union_set (set y)) =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "with Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some y\n  (match_iface ifce (p_iiface p) \\<and>\n   p_src p \\<in> ipcidr_union_set (set y)) =\n  match_iface ifce (p_iiface p)", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some y\n  (match_iface ifce (p_iiface p) \\<and>\n   p_src p \\<in> ipcidr_union_set (set y)) =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_constrain_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "thus ?thesis"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "by(simp add: primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_constrain_srcip_mexpr ipassmt ifce) a p =\n  matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matches_iiface_constrain:\n       \"normalized_nnf_match m \\<Longrightarrow> ipassmt_sanity_nowildcards ipassmt \\<Longrightarrow>\n        (\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n     \\<And>ips.\n        ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n        p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_constrain ipassmt m) a p =\n                      matches (common_matcher, \\<alpha>) m a p", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p\n 4. \\<lbrakk>normalized_nnf_match MatchAny;\n     ipassmt_sanity_nowildcards ipassmt;\n     \\<And>ips.\n        ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n        p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_constrain ipassmt MatchAny) a p =\n                      matches (common_matcher, \\<alpha>) MatchAny a p", "case MatchAny"], ["proof (state)\nthis:\n  normalized_nnf_match MatchAny\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p\n 4. \\<lbrakk>normalized_nnf_match MatchAny;\n     ipassmt_sanity_nowildcards ipassmt;\n     \\<And>ips.\n        ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n        p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_constrain ipassmt MatchAny) a p =\n                      matches (common_matcher, \\<alpha>) MatchAny a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match MatchAny\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt MatchAny) a\n     p =\n    matches (common_matcher, \\<alpha>) MatchAny a p", "by simp"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt MatchAny) a\n   p =\n  matches (common_matcher, \\<alpha>) MatchAny a p\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case (MatchNot m)"], ["proof (state)\nthis:\n  \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m) a p =\n                    matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "hence IH: \"normalized_nnf_match m \\<Longrightarrow> matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p = matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m) a p =\n                    matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n    matches (common_matcher, \\<alpha>) m a p", "by blast"], ["proof (state)\nthis:\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "with MatchNot.prems IH"], ["proof (chain)\npicking this:\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p", "show ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (iiface_constrain ipassmt (MatchNot m)) a p =\n    matches (common_matcher, \\<alpha>) (MatchNot m) a p", "by(induction m) (simp_all add: iiface_constrain_matches_Primitive)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (MatchNot m))\n   a p =\n  matches (common_matcher, \\<alpha>) (MatchNot m) a p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case(Match x)"], ["proof (state)\nthis:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x))\n     a p =\n    matches (common_matcher, \\<alpha>) (Match x) a p", "proof(cases x)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x3.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = IIface x3\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x10.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips);\n         x = CT_State x10\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p\nA total of 11 subgoals...", "case (IIface ifce)"], ["proof (state)\nthis:\n  x = IIface ifce\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x3.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = IIface x3\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x10.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips);\n         x = CT_State x10\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p\nA total of 11 subgoals...", "with Match"], ["proof (chain)\npicking this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  x = IIface ifce", "show ?thesis"], ["proof (prove)\nusing this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  x = IIface ifce\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x))\n     a p =\n    matches (common_matcher, \\<alpha>) (Match x) a p", "using matches_ipassmt_iface_constrain_srcip_mexpr_case_Iface"], ["proof (prove)\nusing this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n  x = IIface ifce\n  \\<lbrakk>ipassmt_sanity_nowildcards ?ipassmt;\n   \\<And>ips.\n      ?ipassmt (Iface (p_iiface ?p)) = Some ips \\<Longrightarrow>\n      p_src ?p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, ?\\<alpha>)\n                     (ipassmt_iface_constrain_srcip_mexpr ?ipassmt ?ifce) ?a\n                     ?p =\n                    matches (common_matcher, ?\\<alpha>)\n                     (Match (IIface ?ifce)) ?a ?p\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x))\n     a p =\n    matches (common_matcher, \\<alpha>) (Match x) a p", "by fastforce"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x)) a\n   p =\n  matches (common_matcher, \\<alpha>) (Match x) a p\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x10.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips);\n        x = CT_State x10\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x11.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips);\n         x = Extra x11\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p", "qed(simp_all)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_constrain ipassmt (Match x)) a\n   p =\n  matches (common_matcher, \\<alpha>) (Match x) a p\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case (MatchAnd m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>normalized_nnf_match m1; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m1) a p =\n                    matches (common_matcher, \\<alpha>) m1 a p\n  \\<lbrakk>normalized_nnf_match m2; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m2) a p =\n                    matches (common_matcher, \\<alpha>) m2 a p\n  normalized_nnf_match (MatchAnd m1 m2)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 \\<And>ips.\n                    ipassmt (Iface (p_iiface p)) =\n                    Some ips \\<Longrightarrow>\n                    p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_constrain ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         \\<And>ips.\n            ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n            p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_constrain ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt;\n        \\<And>ips.\n           ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n           p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match m1; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m1) a p =\n                    matches (common_matcher, \\<alpha>) m1 a p\n  \\<lbrakk>normalized_nnf_match m2; ipassmt_sanity_nowildcards ipassmt;\n   \\<And>ips.\n      ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n      p_src p \\<in> ipcidr_union_set (set ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_constrain ipassmt m2) a p =\n                    matches (common_matcher, \\<alpha>) m2 a p\n  normalized_nnf_match (MatchAnd m1 m2)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some ?ips \\<Longrightarrow>\n  p_src p \\<in> ipcidr_union_set (set ?ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n    matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (iiface_constrain ipassmt (MatchAnd m1 m2)) a p =\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection\\<open>Sanity checking the assumption\\<close>"], ["", "(* we need a good formulation of the assumption. the case stuff is so undefined for the None case \\<dots>\n   \\<exists>-quantor is too strong\n  Also holds if \\<exists> replaced by \\<forall>*)"], ["", "lemma \"(\\<exists>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<and> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       (case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\"\n      \"(case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips)) \\<Longrightarrow>\n      (\\<And>ips. ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow> p_src p \\<in> ipcidr_union_set (set ips))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>ips.\n        ipassmt (Iface (p_iiface p)) = Some ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set ips) \\<Longrightarrow>\n     case ipassmt (Iface (p_iiface p)) of\n     Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips)) &&&\n    (case ipassmt (Iface (p_iiface p)) of\n     Some ips \\<Rightarrow>\n       p_src p \\<in> ipcidr_union_set (set ips) \\<Longrightarrow>\n     (\\<And>ips.\n         ipassmt (Iface (p_iiface p)) = Some ips \\<Longrightarrow>\n         p_src p \\<in> ipcidr_union_set (set ips)))", "by(cases \"ipassmt (Iface (p_iiface p))\",simp_all)+"], ["", "text\\<open>Sanity check:\n      If we assume that there are no spoofed packets, spoofing protection is trivially fulfilled.\\<close>"], ["", "lemma \"\\<forall> p:: ('i::len,'pkt_ext) tagged_packet_scheme.\n        Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow> p_src p \\<in> ipcidr_union_set (set (the (ipassmt (Iface (p_iiface p))))) \\<Longrightarrow>\n       no_spoofing TYPE('pkt_ext) ipassmt rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n       p_src p\n       \\<in> ipcidr_union_set\n              (set (the (ipassmt (Iface (p_iiface p))))) \\<Longrightarrow>\n    no_spoofing TYPE('pkt_ext) ipassmt rs", "apply(simp add: no_spoofing_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n       p_src p\n       \\<in> ipcidr_union_set\n              (set (the (ipassmt (Iface (p_iiface p))))) \\<Longrightarrow>\n    \\<forall>iface\\<in>dom ipassmt.\n       \\<forall>p.\n          (common_matcher, in_doubt_allow),p\n          \\<lparr>p_iiface :=\n                    iface_sel\n                     iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<longrightarrow>\n          p_src p \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iface y p.\n       \\<lbrakk>\\<forall>p.\n                   Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set\n                          (set (the (ipassmt (Iface (p_iiface p)))));\n        ipassmt iface = Some y;\n        (common_matcher, in_doubt_allow),p\n        \\<lparr>p_iiface :=\n                  iface_sel\n                   iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow\\<rbrakk>\n       \\<Longrightarrow> p_src p\n                         \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "apply(rename_tac iface ips p)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iface ips p.\n       \\<lbrakk>\\<forall>p.\n                   Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set\n                          (set (the (ipassmt (Iface (p_iiface p)))));\n        ipassmt iface = Some ips;\n        (common_matcher, in_doubt_allow),p\n        \\<lparr>p_iiface :=\n                  iface_sel\n                   iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                               FinalAllow\\<rbrakk>\n       \\<Longrightarrow> p_src p\n                         \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "apply(thin_tac \"_,_\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iface ips p.\n       \\<lbrakk>\\<forall>p.\n                   Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set\n                          (set (the (ipassmt (Iface (p_iiface p)))));\n        ipassmt iface = Some ips\\<rbrakk>\n       \\<Longrightarrow> p_src p\n                         \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "(*not needed*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iface ips p.\n       \\<lbrakk>\\<forall>p.\n                   Iface (p_iiface p) \\<in> dom ipassmt \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set\n                          (set (the (ipassmt (Iface (p_iiface p)))));\n        ipassmt iface = Some ips\\<rbrakk>\n       \\<Longrightarrow> p_src p\n                         \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "apply(erule_tac x=\"p\\<lparr>p_iiface := iface_sel iface\\<rparr>\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iface ips p.\n       \\<lbrakk>ipassmt iface = Some ips;\n        Iface (p_iiface (p\\<lparr>p_iiface := iface_sel iface\\<rparr>))\n        \\<in> dom ipassmt \\<longrightarrow>\n        p_src (p\\<lparr>p_iiface := iface_sel iface\\<rparr>)\n        \\<in> ipcidr_union_set\n               (set (the (ipassmt\n                           (Iface\n                             (p_iiface\n                               (p\\<lparr>p_iiface :=\n     iface_sel iface\\<rparr>))))))\\<rbrakk>\n       \\<Longrightarrow> p_src p\n                         \\<in> ipcidr_union_set (set (the (ipassmt iface)))", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Sanity check:\n      If the firewall features spoofing protection and we look at a packet which was allowed by the firewall.\n      Then the packet's src ip must be according to ipassmt. (case Some)\n      We don't case about packets from an interface which are not defined in ipassmt. (case None)\\<close>"], ["", "lemma \n  fixes p :: \"('i::len,'pkt_ext) tagged_packet_scheme\"\n  shows \"no_spoofing TYPE('pkt_ext) ipassmt rs \\<Longrightarrow> \n      (common_matcher, in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision FinalAllow \\<Longrightarrow>\n       case ipassmt (Iface (p_iiface p)) of Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips) | None \\<Rightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_spoofing TYPE('pkt_ext) ipassmt rs;\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(simp add: no_spoofing_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(case_tac \"Iface (p_iiface p) \\<in> dom ipassmt\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 2. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(erule_tac x=\"Iface (p_iiface p)\" in ballE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(common_matcher,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt;\n     \\<forall>pa.\n        (common_matcher, in_doubt_allow),pa\n        \\<lparr>p_iiface :=\n                  iface_sel\n                   (Iface\n                     (p_iiface\n                       p))\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                 FinalAllow \\<longrightarrow>\n        p_src pa\n        \\<in> ipcidr_union_set\n               (set (the (ipassmt (Iface (p_iiface p)))))\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 2. \\<lbrakk>(common_matcher,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 3. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(common_matcher,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt;\n     \\<forall>pa.\n        (common_matcher, in_doubt_allow),pa\n        \\<lparr>p_iiface :=\n                  p_iiface\n                   p\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                           FinalAllow \\<longrightarrow>\n        p_src pa\n        \\<in> ipcidr_union_set\n               (set (the (ipassmt (Iface (p_iiface p)))))\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 2. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(erule_tac x=\"p\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(common_matcher,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt;\n     (common_matcher, in_doubt_allow),p\n     \\<lparr>p_iiface :=\n               p_iiface\n                p\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                        FinalAllow \\<longrightarrow>\n     p_src p\n     \\<in> ipcidr_union_set\n            (set (the (ipassmt (Iface (p_iiface p)))))\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 2. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(common_matcher,\n              in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              FinalAllow;\n     Iface (p_iiface p) \\<in> dom ipassmt;\n     p_src p\n     \\<in> ipcidr_union_set\n            (set (the (ipassmt (Iface (p_iiface p)))))\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)\n 2. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>iface\\<in>dom ipassmt.\n                \\<forall>p.\n                   (common_matcher, in_doubt_allow),p\n                   \\<lparr>p_iiface :=\n                             iface_sel\n                              iface\\<rparr>\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n    FinalAllow \\<longrightarrow>\n                   p_src p\n                   \\<in> ipcidr_union_set (set (the (ipassmt iface)));\n     (common_matcher,\n      in_doubt_allow),p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow;\n     Iface (p_iiface p) \\<notin> dom ipassmt\\<rbrakk>\n    \\<Longrightarrow> case ipassmt (Iface (p_iiface p)) of\n                      None \\<Rightarrow> True\n                      | Some ips \\<Rightarrow>\n                          p_src p \\<in> ipcidr_union_set (set ips)", "by (simp add: domIff)"], ["", "subsection\\<open>Replacing Interfaces Completely\\<close>"], ["", "text\\<open>This is a stricter, true rewriting since it removes the interface match completely.\n      However, it requires @{const ipassmt_sanity_disjoint}\\<close>"], ["", "thm ipassmt_sanity_disjoint_def"], ["", "definition ipassmt_iface_replace_srcip_mexpr\n  :: \"'i::len ipassignment \\<Rightarrow> iface \\<Rightarrow> 'i common_primitive match_expr\" where\n  \"ipassmt_iface_replace_srcip_mexpr ipassmt ifce \\<equiv> case ipassmt ifce of\n          None \\<Rightarrow> Match (IIface ifce)\n        | Some ips \\<Rightarrow> (match_list_to_match_expr (map (Match \\<circ> Src) (map (uncurry IpAddrNetmask) ips)))\""], ["", "lemma matches_ipassmt_iface_replace_srcip_mexpr: \n    \"matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow> (case ipassmt ifce of\n            None \\<Rightarrow> match_iface ifce (p_iiface p)\n          | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips)\n          )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "by(simp add: ipassmt_iface_replace_srcip_mexpr_def primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n   | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "case (Some ips)"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "have \"matches (common_matcher, \\<alpha>) (match_list_to_match_expr (map (Match \\<circ> Src \\<circ> (uncurry IpAddrNetmask)) ips)) a p \\<longleftrightarrow>\n       (\\<exists>m\\<in>set ips. p_src p \\<in> (uncurry ipset_from_cidr m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n     a p =\n    (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)", "by(simp add: match_list_to_match_expr_disjunction[symmetric]\n                    match_list_matches match_simplematcher_SrcDst ipt_iprange_to_set_uncurry_IpAddrNetmask)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       (case ipassmt ifce of\n        None \\<Rightarrow> match_iface ifce (p_iiface p)\n        | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "with Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some ips\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some ips\n  matches (common_matcher, \\<alpha>)\n   (match_list_to_match_expr\n     (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask) ips))\n   a p =\n  (\\<exists>m\\<in>set ips. p_src p \\<in> uncurry ipset_from_cidr m)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n     | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))", "apply(simp add: ipassmt_iface_replace_srcip_mexpr_def bunch_of_lemmata_about_matches)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ipassmt ifce = Some ips;\n     matches (common_matcher, \\<alpha>)\n      (match_list_to_match_expr\n        (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n          ips))\n      a p =\n     (\\<exists>m\\<in>set ips.\n         p_src p \\<in> uncurry ipset_from_cidr m)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>m\\<in>set ips.\n                          p_src p \\<in> uncurry ipset_from_cidr m) =\n                      (p_src p \\<in> ipcidr_union_set (set ips))", "apply(simp add: ipcidr_union_set_uncurry)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  (case ipassmt ifce of None \\<Rightarrow> match_iface ifce (p_iiface p)\n   | Some ips \\<Rightarrow> p_src p \\<in> ipcidr_union_set (set ips))\n\ngoal:\nNo subgoals!", "qed"], ["", "fun iiface_rewrite\n  :: \"'i::len ipassignment \\<Rightarrow> 'i common_primitive match_expr \\<Rightarrow> 'i common_primitive match_expr\"\nwhere\n  \"iiface_rewrite _       MatchAny = MatchAny\" |\n  \"iiface_rewrite ipassmt (Match (IIface ifce)) = ipassmt_iface_replace_srcip_mexpr ipassmt ifce\" |\n  \"iiface_rewrite ipassmt (Match a) = Match a\" |\n  \"iiface_rewrite ipassmt (MatchNot m) = MatchNot (iiface_rewrite ipassmt m)\" |\n  \"iiface_rewrite ipassmt (MatchAnd m1 m2) = MatchAnd (iiface_rewrite ipassmt m1) (iiface_rewrite ipassmt m2)\""], ["", "context\nbegin"], ["", "(*helper1: used in induction case MatchNot*)\n  private"], ["", "lemma iiface_rewrite_matches_Primitive:\n          \"matches (common_matcher, \\<alpha>) (MatchNot (iiface_rewrite ipassmt (Match x))) a p = matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p \\<longleftrightarrow>\n           matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a p = matches (common_matcher, \\<alpha>) (Match x) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n     matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n    (matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n      p =\n     matches (common_matcher, \\<alpha>) (Match x) a p)", "proof(cases x)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_rewrite ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "case (IIface ifce)"], ["proof (state)\nthis:\n  x = IIface ifce\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_rewrite ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "have \"(matches (common_matcher, \\<alpha>) (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p = (\\<not> match_iface ifce (p_iiface p))) \\<longleftrightarrow>\n      (matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p = match_iface ifce (p_iiface p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "apply(simp add: matches_ipassmt_iface_replace_srcip_mexpr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n    (\\<not> match_iface ifce (p_iiface p))", "apply(simp add: ipassmt_iface_replace_srcip_mexpr_def primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "case (Some ips)"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "{"], ["proof (state)\nthis:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "fix ips"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "have \"matches (common_matcher, \\<alpha>)\n                 (MatchNot (match_list_to_match_expr (map (Match \\<circ> Src \\<circ> (uncurry IpAddrNetmask)) ips))) a p \\<longleftrightarrow>\n                 (p_src p \\<notin> ipcidr_union_set (set ips))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (MatchNot\n       (match_list_to_match_expr\n         (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n           ips)))\n     a p =\n    (p_src p \\<notin> ipcidr_union_set (set ips))", "apply(induction ips)"], ["proof (prove)\ngoal (2 subgoals):\n 1. matches (common_matcher, \\<alpha>)\n     (MatchNot\n       (match_list_to_match_expr\n         (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n           [])))\n     a p =\n    (p_src p \\<notin> ipcidr_union_set (set []))\n 2. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              (aa # ips))))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set (aa # ips)))", "apply(simp add: bunch_of_lemmata_about_matches ipcidr_union_set_uncurry)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n              (aa # ips))))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set (aa # ips)))", "apply(simp add: MatchOr_MatchNot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (p_src p \\<notin> ipcidr_union_set (set ips)) \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (Match (Src (uncurry IpAddrNetmask aa)))) a p \\<and>\n        p_src p \\<notin> ipcidr_union_set (set ips)) =\n       (p_src p \\<notin> ipcidr_union_set (insert aa (set ips)))", "apply(simp add: ipcidr_union_set_uncurry)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (\\<forall>x\\<in>set ips.\n           p_src p \\<notin> uncurry ipset_from_cidr x) \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (Match (Src (uncurry IpAddrNetmask aa)))) a p \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr aa \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "apply(simp add: match_simplematcher_SrcDst_not)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ips.\n       matches (common_matcher, \\<alpha>)\n        (MatchNot\n          (match_list_to_match_expr\n            (map (\\<lambda>a. Match (Src (uncurry IpAddrNetmask a))) ips)))\n        a p =\n       (\\<forall>x\\<in>set ips.\n           p_src p \\<notin> uncurry ipset_from_cidr x) \\<Longrightarrow>\n       (p_src p\n        \\<notin> ipt_iprange_to_set (uncurry IpAddrNetmask aa) \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr aa \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "apply(thin_tac _)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ips.\n       (p_src p \\<notin> ipt_iprange_to_set (uncurry IpAddrNetmask a) \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x)) =\n       (p_src p \\<notin> uncurry ipset_from_cidr a \\<and>\n        (\\<forall>x\\<in>set ips.\n            p_src p \\<notin> uncurry ipset_from_cidr x))", "apply(simp add: ipt_iprange_to_set_uncurry_IpAddrNetmask)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ips)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ips))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "}"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ?ipsa2)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ?ipsa2))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "note helper=this"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (MatchNot\n     (match_list_to_match_expr\n       (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n         ?ipsa2)))\n   a p =\n  (p_src p \\<notin> ipcidr_union_set (set ?ipsa2))\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n        (\\<not> match_iface ifce (p_iiface p))) =\n       (matches (common_matcher, \\<alpha>)\n         (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n        match_iface ifce (p_iiface p))", "from Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some ips", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some ips\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    (matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n     match_iface ifce (p_iiface p))", "apply(simp add: matches_ipassmt_iface_replace_srcip_mexpr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: ipassmt_iface_replace_srcip_mexpr_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt ifce = Some ips \\<Longrightarrow>\n    (matches (common_matcher, \\<alpha>)\n      (MatchNot\n        (match_list_to_match_expr\n          (map ((Match \\<circ> Src \\<circ>\\<circ> uncurry) IpAddrNetmask)\n            ips)))\n      a p =\n     (\\<not> match_iface ifce (p_iiface p))) =\n    ((p_src p \\<in> ipcidr_union_set (set ips)) =\n     match_iface ifce (p_iiface p))", "apply(simp add: helper)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x3.\n       x = IIface x3 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x10.\n        x = CT_State x10 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_rewrite ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)\nA total of 11 subgoals...", "with IIface"], ["proof (chain)\npicking this:\n  x = IIface ifce\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))", "show ?thesis"], ["proof (prove)\nusing this:\n  x = IIface ifce\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (ipassmt_iface_replace_srcip_mexpr ipassmt ifce)) a p =\n   (\\<not> match_iface ifce (p_iiface p))) =\n  (matches (common_matcher, \\<alpha>)\n    (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n   match_iface ifce (p_iiface p))\n\ngoal (1 subgoal):\n 1. (matches (common_matcher, \\<alpha>)\n      (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n     matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n    (matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n      p =\n     matches (common_matcher, \\<alpha>) (Match x) a p)", "by(simp add: primitive_matcher_generic.Iface_single_not[OF primitive_matcher_generic_common_matcher]\n            primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (state)\nthis:\n  (matches (common_matcher, \\<alpha>)\n    (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n   matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n  (matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n    p =\n   matches (common_matcher, \\<alpha>) (Match x) a p)\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       x = Src x1 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 2. \\<And>x2.\n       x = Dst x2 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 3. \\<And>x4.\n       x = OIface x4 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 4. \\<And>x5.\n       x = Prot x5 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 5. \\<And>x6.\n       x = Src_Ports x6 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 6. \\<And>x7.\n       x = Dst_Ports x7 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 7. \\<And>x8.\n       x = MultiportPorts x8 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 8. \\<And>x9.\n       x = L4_Flags x9 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 9. \\<And>x10.\n       x = CT_State x10 \\<Longrightarrow>\n       (matches (common_matcher, \\<alpha>)\n         (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n        matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n       (matches (common_matcher, \\<alpha>)\n         (iiface_rewrite ipassmt (Match x)) a p =\n        matches (common_matcher, \\<alpha>) (Match x) a p)\n 10. \\<And>x11.\n        x = Extra x11 \\<Longrightarrow>\n        (matches (common_matcher, \\<alpha>)\n          (MatchNot (iiface_rewrite ipassmt (Match x))) a p =\n         matches (common_matcher, \\<alpha>) (MatchNot (Match x)) a p) =\n        (matches (common_matcher, \\<alpha>)\n          (iiface_rewrite ipassmt (Match x)) a p =\n         matches (common_matcher, \\<alpha>) (Match x) a p)", "qed(simp_all)"], ["", "(*helper2: used in induction base case*)\n  private"], ["", "lemma matches_ipassmt_iface_replace_srcip_mexpr_case_Iface:\n        fixes ifce::iface\n        assumes \"ipassmt_sanity_nowildcards ipassmt\"\n            and \"ipassmt_sanity_disjoint ipassmt\"\n            and \"ipassmt (Iface (p_iiface p)) = Some p_ips \\<and> p_src p \\<in> ipcidr_union_set (set p_ips)\"\n        shows   \"matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow>\n                 matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "have \"matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p = match_iface ifce (p_iiface p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "proof(cases \"ipassmt ifce\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case None"], ["proof (state)\nthis:\n  ipassmt ifce = None\n\ngoal (2 subgoals):\n 1. ipassmt ifce = None \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)\n 2. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = None\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_replace_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "case (Some y)"], ["proof (state)\nthis:\n  ipassmt ifce = Some y\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "with assms(2)"], ["proof (chain)\npicking this:\n  ipassmt_sanity_disjoint ipassmt\n  ipassmt ifce = Some y", "have \"p_src p \\<in> ipcidr_union_set (set y) = match_iface ifce (p_iiface p)\""], ["proof (prove)\nusing this:\n  ipassmt_sanity_disjoint ipassmt\n  ipassmt ifce = Some y\n\ngoal (1 subgoal):\n 1. (p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)", "using assms(1) assms(3) ipassmt_disjoint_matcheq_iifce_srcip"], ["proof (prove)\nusing this:\n  ipassmt_sanity_disjoint ipassmt\n  ipassmt ifce = Some y\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n  p_src p \\<in> ipcidr_union_set (set p_ips)\n  \\<lbrakk>ipassmt_sanity_nowildcards ?ipassmt;\n   ipassmt_sanity_disjoint ?ipassmt; ?ipassmt ?ifce = Some ?i_ips;\n   ?ipassmt (Iface (p_iiface ?p)) = Some ?p_ips \\<and>\n   p_src ?p \\<in> ipcidr_union_set (set ?p_ips)\\<rbrakk>\n  \\<Longrightarrow> match_iface ?ifce (p_iiface ?p) =\n                    (p_src ?p \\<in> ipcidr_union_set (set ?i_ips))\n\ngoal (1 subgoal):\n 1. (p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)", "by blast"], ["proof (state)\nthis:\n  (p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       ipassmt ifce = Some aa \\<Longrightarrow>\n       matches (common_matcher, \\<alpha>)\n        (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n       match_iface ifce (p_iiface p)", "with Some"], ["proof (chain)\npicking this:\n  ipassmt ifce = Some y\n  (p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)", "show ?thesis"], ["proof (prove)\nusing this:\n  ipassmt ifce = Some y\n  (p_src p \\<in> ipcidr_union_set (set y)) = match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    match_iface ifce (p_iiface p)", "by(simp add: matches_ipassmt_iface_replace_srcip_mexpr)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "thus ?thesis"], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  match_iface ifce (p_iiface p)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n    matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p", "by(simp add: primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher])"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p =\n  matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma matches_iiface_rewrite:\n       \"normalized_nnf_match m \\<Longrightarrow> ipassmt_sanity_nowildcards ipassmt \\<Longrightarrow> ipassmt_sanity_disjoint ipassmt \\<Longrightarrow>\n        (\\<exists>p_ips. ipassmt (Iface (p_iiface p)) = Some p_ips \\<and> p_src p \\<in> ipcidr_union_set (set p_ips)) \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n     ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt m) a p =\n                      matches (common_matcher, \\<alpha>) m a p", "proof(induction m)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p\n 4. \\<lbrakk>normalized_nnf_match MatchAny;\n     ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt MatchAny) a p =\n                      matches (common_matcher, \\<alpha>) MatchAny a p", "case MatchAny"], ["proof (state)\nthis:\n  normalized_nnf_match MatchAny\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p\n 4. \\<lbrakk>normalized_nnf_match MatchAny;\n     ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt MatchAny) a p =\n                      matches (common_matcher, \\<alpha>) MatchAny a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match MatchAny\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt MatchAny) a\n     p =\n    matches (common_matcher, \\<alpha>) MatchAny a p", "by simp"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt MatchAny) a p =\n  matches (common_matcher, \\<alpha>) MatchAny a p\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case (MatchNot m)"], ["proof (state)\nthis:\n  \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m) a p =\n                    matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "hence IH: \"normalized_nnf_match m \\<Longrightarrow>\n        matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =matches (common_matcher, \\<alpha>) m a p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match m; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m) a p =\n                    matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n    matches (common_matcher, \\<alpha>) m a p", "by blast"], ["proof (state)\nthis:\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m) a p =\n                                  matches (common_matcher, \\<alpha>) m a p;\n        normalized_nnf_match (MatchNot m);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchNot m)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchNot m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "with MatchNot.prems IH"], ["proof (chain)\npicking this:\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p", "show ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match (MatchNot m)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n  normalized_nnf_match m \\<Longrightarrow>\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt m) a p =\n  matches (common_matcher, \\<alpha>) m a p\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (MatchNot m))\n     a p =\n    matches (common_matcher, \\<alpha>) (MatchNot m) a p", "by(induction m) (simp_all add: iiface_rewrite_matches_Primitive)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (MatchNot m)) a\n   p =\n  matches (common_matcher, \\<alpha>) (MatchNot m) a p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case(Match x)"], ["proof (state)\nthis:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n     p =\n    matches (common_matcher, \\<alpha>) (Match x) a p", "proof(cases x)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x3.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = IIface x3\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x10.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips);\n         x = CT_State x10\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p\nA total of 11 subgoals...", "case (IIface ifce)"], ["proof (state)\nthis:\n  x = IIface ifce\n\ngoal (11 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x3.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = IIface x3\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x10.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips);\n         x = CT_State x10\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p\nA total of 11 subgoals...", "with Match"], ["proof (chain)\npicking this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n  x = IIface ifce", "show ?thesis"], ["proof (prove)\nusing this:\n  normalized_nnf_match (Match x)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n  x = IIface ifce\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n     p =\n    matches (common_matcher, \\<alpha>) (Match x) a p", "apply(cases \"ipassmt (Iface (p_iiface p))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>normalized_nnf_match (Match x);\n     ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips);\n     x = IIface ifce; ipassmt (Iface (p_iiface p)) = None\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt (Match x)) a p =\n                      matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>aa.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = IIface ifce; ipassmt (Iface (p_iiface p)) = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = IIface ifce; ipassmt (Iface (p_iiface p)) = Some aa\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<lbrakk>normalized_nnf_match (Match x);\n     ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips);\n     x = IIface ifce; ipassmt (Iface (p_iiface p)) = None\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt (Match x)) a p =\n                      matches (common_matcher, \\<alpha>) (Match x) a p", "apply(simp add: matches_ipassmt_iface_replace_srcip_mexpr_case_Iface; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>normalized_nnf_match (Match x);\n     ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n     \\<exists>p_ips.\n        ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n        p_src p \\<in> ipcidr_union_set (set p_ips);\n     x = IIface ifce; ipassmt (Iface (p_iiface p)) = None\\<rbrakk>\n    \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                       (iiface_rewrite ipassmt (Match x)) a p =\n                      matches (common_matcher, \\<alpha>) (Match x) a p", "by auto"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n   p =\n  matches (common_matcher, \\<alpha>) (Match x) a p\n\ngoal (10 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src x1\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 2. \\<And>x2.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst x2\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 3. \\<And>x4.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = OIface x4\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 4. \\<And>x5.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Prot x5\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 5. \\<And>x6.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Src_Ports x6\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 6. \\<And>x7.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = Dst_Ports x7\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 7. \\<And>x8.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = MultiportPorts x8\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 8. \\<And>x9.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = L4_Flags x9\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 9. \\<And>x10.\n       \\<lbrakk>normalized_nnf_match (Match x);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips);\n        x = CT_State x10\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (Match x)) a p =\n                         matches (common_matcher, \\<alpha>) (Match x) a p\n 10. \\<And>x11.\n        \\<lbrakk>normalized_nnf_match (Match x);\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips);\n         x = Extra x11\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt (Match x)) a p =\n                          matches (common_matcher, \\<alpha>) (Match x) a p", "qed(simp_all)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>) (iiface_rewrite ipassmt (Match x)) a\n   p =\n  matches (common_matcher, \\<alpha>) (Match x) a p\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "case (MatchAnd m1 m2)"], ["proof (state)\nthis:\n  \\<lbrakk>normalized_nnf_match m1; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m1) a p =\n                    matches (common_matcher, \\<alpha>) m1 a p\n  \\<lbrakk>normalized_nnf_match m2; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m2) a p =\n                    matches (common_matcher, \\<alpha>) m2 a p\n  normalized_nnf_match (MatchAnd m1 m2)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>\\<lbrakk>normalized_nnf_match m1;\n                 ipassmt_sanity_nowildcards ipassmt;\n                 ipassmt_sanity_disjoint ipassmt;\n                 \\<exists>p_ips.\n                    ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n                    p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n                \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                                   (iiface_rewrite ipassmt m1) a p =\n                                  matches (common_matcher, \\<alpha>) m1 a p;\n        \\<lbrakk>normalized_nnf_match m2;\n         ipassmt_sanity_nowildcards ipassmt;\n         ipassmt_sanity_disjoint ipassmt;\n         \\<exists>p_ips.\n            ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n            p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n        \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                           (iiface_rewrite ipassmt m2) a p =\n                          matches (common_matcher, \\<alpha>) m2 a p;\n        normalized_nnf_match (MatchAnd m1 m2);\n        ipassmt_sanity_nowildcards ipassmt; ipassmt_sanity_disjoint ipassmt;\n        \\<exists>p_ips.\n           ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n           p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n       \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                          (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n                         matches (common_matcher, \\<alpha>) (MatchAnd m1 m2)\n                          a p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>normalized_nnf_match m1; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m1) a p =\n                    matches (common_matcher, \\<alpha>) m1 a p\n  \\<lbrakk>normalized_nnf_match m2; ipassmt_sanity_nowildcards ipassmt;\n   ipassmt_sanity_disjoint ipassmt;\n   \\<exists>p_ips.\n      ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n      p_src p \\<in> ipcidr_union_set (set p_ips)\\<rbrakk>\n  \\<Longrightarrow> matches (common_matcher, \\<alpha>)\n                     (iiface_rewrite ipassmt m2) a p =\n                    matches (common_matcher, \\<alpha>) m2 a p\n  normalized_nnf_match (MatchAnd m1 m2)\n  ipassmt_sanity_nowildcards ipassmt\n  ipassmt_sanity_disjoint ipassmt\n  \\<exists>p_ips.\n     ipassmt (Iface (p_iiface p)) = Some p_ips \\<and>\n     p_src p \\<in> ipcidr_union_set (set p_ips)\n\ngoal (1 subgoal):\n 1. matches (common_matcher, \\<alpha>)\n     (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n    matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches (common_matcher, \\<alpha>)\n   (iiface_rewrite ipassmt (MatchAnd m1 m2)) a p =\n  matches (common_matcher, \\<alpha>) (MatchAnd m1 m2) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text\\<open>Finally, we show that @{const ipassmt_sanity_disjoint} is really needed.\\<close>"], ["", "lemma iface_replace_needs_ipassmt_disjoint:\n    assumes \"ipassmt_sanity_nowildcards ipassmt\"\n    and iface_replace: \"\\<And> ifce p:: 'i::len tagged_packet.\n          (matches (common_matcher, \\<alpha>) (ipassmt_iface_replace_srcip_mexpr ipassmt ifce) a p \\<longleftrightarrow> matches (common_matcher, \\<alpha>) (Match (IIface ifce)) a p)\" \n    shows \"ipassmt_sanity_disjoint ipassmt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ipassmt_sanity_disjoint ipassmt", "unfolding ipassmt_sanity_disjoint_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i1\\<in>dom ipassmt.\n       \\<forall>i2\\<in>dom ipassmt.\n          i1 \\<noteq> i2 \\<longrightarrow>\n          ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n          ipcidr_union_set (set (the (ipassmt i2))) =\n          {}", "proof(intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "fix i1 i2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "assume \"i1 \\<in> dom ipassmt\" and \"i2 \\<in> dom ipassmt\" and \"i1 \\<noteq> i2\""], ["proof (state)\nthis:\n  i1 \\<in> dom ipassmt\n  i2 \\<in> dom ipassmt\n  i1 \\<noteq> i2\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "from \\<open>i1 \\<in> dom ipassmt\\<close>"], ["proof (chain)\npicking this:\n  i1 \\<in> dom ipassmt", "obtain i1_ips where i1_ips: \"ipassmt i1 = Some i1_ips\""], ["proof (prove)\nusing this:\n  i1 \\<in> dom ipassmt\n\ngoal (1 subgoal):\n 1. (\\<And>i1_ips.\n        ipassmt i1 = Some i1_ips \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ipassmt i1 = Some i1_ips\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "from \\<open>i2 \\<in> dom ipassmt\\<close>"], ["proof (chain)\npicking this:\n  i2 \\<in> dom ipassmt", "obtain i2_ips where i2_ips: \"ipassmt i2 = Some i2_ips\""], ["proof (prove)\nusing this:\n  i2 \\<in> dom ipassmt\n\ngoal (1 subgoal):\n 1. (\\<And>i2_ips.\n        ipassmt i2 = Some i2_ips \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ipassmt i2 = Some i2_ips\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "{"], ["proof (state)\nthis:\n  ipassmt i2 = Some i2_ips\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "fix p :: \"'i tagged_packet\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "from iface_replace[of  i1 \"p\\<lparr> p_iiface := iface_sel i2\\<rparr>\"]"], ["proof (chain)\npicking this:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt i1) a\n   (p\\<lparr>p_iiface := iface_sel i2\\<rparr>) =\n  matches (common_matcher, \\<alpha>) (Match (IIface i1)) a\n   (p\\<lparr>p_iiface := iface_sel i2\\<rparr>)", "have\n        \"(p_src p \\<in> ipcidr_union_set (set i2_ips) \\<Longrightarrow> (p_src p \\<in> ipcidr_union_set (set i1_ips)) = match_iface i1 (iface_sel i2))\""], ["proof (prove)\nusing this:\n  matches (common_matcher, \\<alpha>)\n   (ipassmt_iface_replace_srcip_mexpr ipassmt i1) a\n   (p\\<lparr>p_iiface := iface_sel i2\\<rparr>) =\n  matches (common_matcher, \\<alpha>) (Match (IIface i1)) a\n   (p\\<lparr>p_iiface := iface_sel i2\\<rparr>)\n\ngoal (1 subgoal):\n 1. p_src p \\<in> ipcidr_union_set (set i2_ips) \\<Longrightarrow>\n    (p_src p \\<in> ipcidr_union_set (set i1_ips)) =\n    match_iface i1 (iface_sel i2)", "apply(simp add: primitive_matcher_generic.Iface_single[OF primitive_matcher_generic_common_matcher] \\<open>i1 \\<in> dom ipassmt\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p_src p \\<in> ipcidr_union_set (set i2_ips);\n     matches (common_matcher, \\<alpha>)\n      (ipassmt_iface_replace_srcip_mexpr ipassmt i1) a\n      (p\\<lparr>p_iiface := iface_sel i2\\<rparr>) =\n     match_iface i1 (iface_sel i2)\\<rbrakk>\n    \\<Longrightarrow> (p_src p \\<in> ipcidr_union_set (set i1_ips)) =\n                      match_iface i1 (iface_sel i2)", "apply(simp add: matches_ipassmt_iface_replace_srcip_mexpr i1_ips)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p_src p \\<in> ipcidr_union_set (set i2_ips) \\<Longrightarrow>\n  (p_src p \\<in> ipcidr_union_set (set i1_ips)) =\n  match_iface i1 (iface_sel i2)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "with \\<open>i1 \\<noteq> i2\\<close>"], ["proof (chain)\npicking this:\n  i1 \\<noteq> i2\n  p_src p \\<in> ipcidr_union_set (set i2_ips) \\<Longrightarrow>\n  (p_src p \\<in> ipcidr_union_set (set i1_ips)) =\n  match_iface i1 (iface_sel i2)", "have \"\\<not> (p_src p \\<in> ipcidr_union_set (set i2_ips) \\<and> (p_src p \\<in> ipcidr_union_set (set i1_ips)))\""], ["proof (prove)\nusing this:\n  i1 \\<noteq> i2\n  p_src p \\<in> ipcidr_union_set (set i2_ips) \\<Longrightarrow>\n  (p_src p \\<in> ipcidr_union_set (set i1_ips)) =\n  match_iface i1 (iface_sel i2)\n\ngoal (1 subgoal):\n 1. \\<not> (p_src p \\<in> ipcidr_union_set (set i2_ips) \\<and>\n            p_src p \\<in> ipcidr_union_set (set i1_ips))", "by (metis \\<open>i1 \\<in> dom ipassmt\\<close> assms(1) iface.exhaust_sel iface_is_wildcard_def ipassmt_sanity_nowildcards_def match_iface_case_nowildcard)"], ["proof (state)\nthis:\n  \\<not> (p_src p \\<in> ipcidr_union_set (set i2_ips) \\<and>\n          p_src p \\<in> ipcidr_union_set (set i1_ips))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "}"], ["proof (state)\nthis:\n  \\<not> (p_src ?p2 \\<in> ipcidr_union_set (set i2_ips) \\<and>\n          p_src ?p2 \\<in> ipcidr_union_set (set i1_ips))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "hence \"\\<not> (src \\<in> ipcidr_union_set (set i2_ips) \\<and> (src \\<in> ipcidr_union_set (set i1_ips)))\"\n      for src"], ["proof (prove)\nusing this:\n  \\<not> (p_src ?p2 \\<in> ipcidr_union_set (set i2_ips) \\<and>\n          p_src ?p2 \\<in> ipcidr_union_set (set i1_ips))\n\ngoal (1 subgoal):\n 1. \\<not> (src \\<in> ipcidr_union_set (set i2_ips) \\<and>\n            src \\<in> ipcidr_union_set (set i1_ips))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p_src p \\<in> ipcidr_union_set (set i2_ips) \\<longrightarrow>\n        p_src p \\<notin> ipcidr_union_set (set i1_ips)) \\<Longrightarrow>\n    src \\<in> ipcidr_union_set (set i2_ips) \\<longrightarrow>\n    src \\<notin> ipcidr_union_set (set i1_ips)", "by (metis simple_packet.select_convs(3))"], ["proof (state)\nthis:\n  \\<not> (?src \\<in> ipcidr_union_set (set i2_ips) \\<and>\n          ?src \\<in> ipcidr_union_set (set i1_ips))\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>i1 \\<in> dom ipassmt; i2 \\<in> dom ipassmt;\n        i1 \\<noteq> i2\\<rbrakk>\n       \\<Longrightarrow> ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n                         ipcidr_union_set (set (the (ipassmt i2))) =\n                         {}", "thus \"ipcidr_union_set (set (the (ipassmt i1))) \\<inter> ipcidr_union_set (set (the (ipassmt i2))) = {}\""], ["proof (prove)\nusing this:\n  \\<not> (?src \\<in> ipcidr_union_set (set i2_ips) \\<and>\n          ?src \\<in> ipcidr_union_set (set i1_ips))\n\ngoal (1 subgoal):\n 1. ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n    ipcidr_union_set (set (the (ipassmt i2))) =\n    {}", "apply(simp add: i1_ips i2_ips)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>src.\n        src \\<in> ipcidr_union_set (set i2_ips) \\<longrightarrow>\n        src \\<notin> ipcidr_union_set (set i1_ips)) \\<Longrightarrow>\n    ipcidr_union_set (set i1_ips) \\<inter> ipcidr_union_set (set i2_ips) =\n    {}", "by blast"], ["proof (state)\nthis:\n  ipcidr_union_set (set (the (ipassmt i1))) \\<inter>\n  ipcidr_union_set (set (the (ipassmt i2))) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}