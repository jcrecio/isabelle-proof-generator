{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Primitive_Matchers/Common_Primitive_Lemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma has_unknowns_common_matcher: fixes m::\"'i::len common_primitive match_expr\"\n  shows \"has_unknowns common_matcher m \\<longleftrightarrow> has_disc is_Extra m\""], "translations": [["", "lemma has_unknowns_common_matcher: fixes m::\"'i::len common_primitive match_expr\"\n  shows \"has_unknowns common_matcher m \\<longleftrightarrow> has_disc is_Extra m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "fix A and p :: \"('i, 'a) tagged_packet_scheme\""], ["proof (state)\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "have \"common_matcher A p = TernaryUnknown \\<longleftrightarrow> is_Extra A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (common_matcher A p = TernaryUnknown) = is_Extra A", "by(induction A p rule: common_matcher.induct) (simp_all add: bool_to_ternary_Unknown)"], ["proof (state)\nthis:\n  (common_matcher A p = TernaryUnknown) = is_Extra A\n\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "}"], ["proof (state)\nthis:\n  (common_matcher ?A2 ?p2 = TernaryUnknown) = is_Extra ?A2\n\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "hence \"\\<beta> = (common_matcher::('i::len common_primitive, ('i, 'a) tagged_packet_scheme) exact_match_tac)\n            \\<Longrightarrow> has_unknowns \\<beta> m = has_disc is_Extra m\" for \\<beta>"], ["proof (prove)\nusing this:\n  (common_matcher ?A2 ?p2 = TernaryUnknown) = is_Extra ?A2\n\ngoal (1 subgoal):\n 1. \\<beta> = common_matcher \\<Longrightarrow>\n    has_unknowns \\<beta> m = has_disc is_Extra m", "by(induction \\<beta> m rule: has_unknowns.induct)\n    (simp_all)"], ["proof (state)\nthis:\n  ?\\<beta> = common_matcher \\<Longrightarrow>\n  has_unknowns ?\\<beta> m = has_disc is_Extra m\n\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<beta> = common_matcher \\<Longrightarrow>\n  has_unknowns ?\\<beta> m = has_disc is_Extra m\n\ngoal (1 subgoal):\n 1. has_unknowns common_matcher m = has_disc is_Extra m", "by simp"], ["proof (state)\nthis:\n  has_unknowns common_matcher m = has_disc is_Extra m\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}