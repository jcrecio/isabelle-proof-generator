{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Normalized_Matches.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma normalize_match_not_matcheq_matchNone: \"\\<forall>m' \\<in> set (normalize_match m). \\<not> matcheq_matchNone m'\"", "lemma normalize_match_empty_iff_matcheq_matchNone: \"normalize_match m = [] \\<longleftrightarrow> matcheq_matchNone m \"", "lemma match_list_normalize_match: \"match_list \\<gamma> [m] a p \\<longleftrightarrow> match_list \\<gamma> (normalize_match m) a p\"", "theorem normalize_match_correct: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m)) s = approximating_bigstep_fun \\<gamma> p [Rule m a] s\"", "lemma normalize_match_empty: \"normalize_match m = [] \\<Longrightarrow> \\<not> matches \\<gamma> m a p\"", "lemma matches_to_match_list_normalize: \"matches \\<gamma> m a p = match_list \\<gamma> (normalize_match m) a p\"", "lemma wf_ruleset_normalize_match: \"wf_ruleset \\<gamma> p [(Rule m a)] \\<Longrightarrow> wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m))\"", "lemma normalize_match_wf_ruleset: \"wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m)) \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m a]\"", "lemma good_ruleset_normalize_match: \"good_ruleset [(Rule m a)] \\<Longrightarrow> good_ruleset (map (\\<lambda>m. Rule m a) (normalize_match m))\"", "lemma normalize_rules_singleton: \"normalize_rules f [Rule m a] = map (\\<lambda>m. Rule m a) (f m)\"", "lemma normalize_rules_fst: \"(normalize_rules f (r # rs)) = (normalize_rules f [r]) @ (normalize_rules f rs)\"", "lemma normalize_rules_concat_map:\n    \"normalize_rules f rs = concat (map (\\<lambda>r. map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) rs)\"", "lemma good_ruleset_normalize_rules: \"good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\"", "lemma simple_ruleset_normalize_rules: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\"", "lemma normalize_rules_match_list_semantics_3: \n    assumes \"\\<forall>m a. P m \\<longrightarrow> match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\"\n    and \"simple_ruleset rs\"\n    and P: \"\\<forall> r \\<in> set rs. P (get_match r)\"\n    shows \"approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma in_normalized_matches: \"ls \\<in> set (normalize_match m) \\<and> matches \\<gamma> ls a p \\<Longrightarrow> matches \\<gamma> m a p\"", "lemma normalize_rules_property:\n assumes \"\\<forall> r \\<in> set rs. P (get_match r)\"\n     and \"\\<forall>m. P m \\<longrightarrow> (\\<forall>m' \\<in> set (f m). Q m')\"\n  shows \"\\<forall>r \\<in> set (normalize_rules f rs). Q (get_match r)\"", "lemma normalize_rules_preserves: assumes \"\\<forall> r \\<in> set rs. P (get_match r)\"\n     and \"\\<forall>m. P m \\<longrightarrow> (\\<forall>m' \\<in> set (f m). P m')\"\n  shows \"\\<forall>r \\<in> set (normalize_rules f rs). P (get_match r)\"", "lemma normalize_rules_dnf_append: \"normalize_rules_dnf (rs1@rs2) = normalize_rules_dnf rs1 @ normalize_rules_dnf rs2\"", "lemma normalize_rules_dnf_def2: \"normalize_rules_dnf = normalize_rules normalize_match\"", "lemma wf_ruleset_normalize_rules_dnf: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow> wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\"", "lemma good_ruleset_normalize_rules_dnf: \"good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules_dnf rs)\"", "lemma simple_ruleset_normalize_rules_dnf: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules_dnf rs)\"", "lemma \"simple_ruleset rs \\<Longrightarrow> \n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma normalize_rules_dnf_correct: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow> \n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma normalize_match_already_normalized: \"normalized_nnf_match m \\<Longrightarrow> normalize_match m = [m]\"", "lemma normalized_nnf_match_normalize_match: \"\\<forall> m' \\<in> set (normalize_match m). normalized_nnf_match m'\"", "lemma normalized_nnf_match_MatchNot_D: \"normalized_nnf_match (MatchNot m) \\<Longrightarrow> normalized_nnf_match m\"", "lemma \"normalize_match (MatchNot (MatchAnd (Match ip_src) (Match tcp))) = [MatchNot (Match ip_src), MatchNot (Match tcp)]\"", "lemma optimize_matches_option_normalized_nnf_match: \"(\\<And> r. r \\<in> set rs \\<Longrightarrow> normalized_nnf_match (get_match r)) \\<Longrightarrow>\n     (\\<And>m m'. normalized_nnf_match m \\<Longrightarrow> f m = Some m' \\<Longrightarrow> normalized_nnf_match m') \\<Longrightarrow>\n      \\<forall> r \\<in> set (optimize_matches_option f rs). normalized_nnf_match (get_match r)\"", "lemma optimize_matches_normalized_nnf_match: \"\\<lbrakk>\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r); \\<forall>m. normalized_nnf_match m \\<longrightarrow> normalized_nnf_match (f m) \\<rbrakk> \\<Longrightarrow>\n      \\<forall> r \\<in> set (optimize_matches f rs). normalized_nnf_match (get_match r)\"", "lemma normalize_rules_dnf_normalized_nnf_match: \"\\<forall>x \\<in> set (normalize_rules_dnf rs). normalized_nnf_match (get_match x)\""], "translations": [["", "lemma normalize_match_not_matcheq_matchNone: \"\\<forall>m' \\<in> set (normalize_match m). \\<not> matcheq_matchNone m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m'\\<in>set (normalize_match m). \\<not> matcheq_matchNone m'", "proof(induction m rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny).\n       \\<not> matcheq_matchNone m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          \\<not> matcheq_matchNone m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   \\<not> matcheq_matchNone m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              \\<not> matcheq_matchNone m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            \\<not> matcheq_matchNone m'\n 4. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match (MatchNot m1)).\n                   \\<not> matcheq_matchNone m';\n        \\<forall>m'\\<in>set (normalize_match (MatchNot m2)).\n           \\<not> matcheq_matchNone m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchNot (MatchAnd m1 m2))).\n                            \\<not> matcheq_matchNone m'\n 5. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          \\<not> matcheq_matchNone m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          \\<not> matcheq_matchNone m'\n 6. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       \\<not> matcheq_matchNone m'\n 7. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          \\<not> matcheq_matchNone m'", "case 4"], ["proof (state)\nthis:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m1_)).\n     \\<not> matcheq_matchNone m'\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m2_)).\n     \\<not> matcheq_matchNone m'\n\ngoal (7 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny).\n       \\<not> matcheq_matchNone m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          \\<not> matcheq_matchNone m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   \\<not> matcheq_matchNone m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              \\<not> matcheq_matchNone m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            \\<not> matcheq_matchNone m'\n 4. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match (MatchNot m1)).\n                   \\<not> matcheq_matchNone m';\n        \\<forall>m'\\<in>set (normalize_match (MatchNot m2)).\n           \\<not> matcheq_matchNone m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchNot (MatchAnd m1 m2))).\n                            \\<not> matcheq_matchNone m'\n 5. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          \\<not> matcheq_matchNone m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          \\<not> matcheq_matchNone m'\n 6. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       \\<not> matcheq_matchNone m'\n 7. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          \\<not> matcheq_matchNone m'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m1_)).\n     \\<not> matcheq_matchNone m'\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m2_)).\n     \\<not> matcheq_matchNone m'\n\ngoal (1 subgoal):\n 1. \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchAnd m1_ m2_))).\n       \\<not> matcheq_matchNone m'", "by (simp) blast"], ["proof (state)\nthis:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchAnd m1_ m2_))).\n     \\<not> matcheq_matchNone m'\n\ngoal (6 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny).\n       \\<not> matcheq_matchNone m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          \\<not> matcheq_matchNone m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   \\<not> matcheq_matchNone m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              \\<not> matcheq_matchNone m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            \\<not> matcheq_matchNone m'\n 4. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          \\<not> matcheq_matchNone m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          \\<not> matcheq_matchNone m'\n 5. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       \\<not> matcheq_matchNone m'\n 6. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          \\<not> matcheq_matchNone m'", "qed(simp_all)"], ["", "lemma normalize_match_empty_iff_matcheq_matchNone: \"normalize_match m = [] \\<longleftrightarrow> matcheq_matchNone m \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (normalize_match m = []) = matcheq_matchNone m", "proof(induction m rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. (normalize_match MatchAny = []) = matcheq_matchNone MatchAny\n 2. \\<And>m. (normalize_match (Match m) = []) = matcheq_matchNone (Match m)\n 3. \\<And>m1 m2.\n       \\<lbrakk>(normalize_match m1 = []) = matcheq_matchNone m1;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           (normalize_match m2 = []) = matcheq_matchNone m2\\<rbrakk>\n       \\<Longrightarrow> (normalize_match (MatchAnd m1 m2) = []) =\n                         matcheq_matchNone (MatchAnd m1 m2)\n 4. \\<And>m1 m2.\n       \\<lbrakk>(normalize_match (MatchNot m1) = []) =\n                matcheq_matchNone (MatchNot m1);\n        (normalize_match (MatchNot m2) = []) =\n        matcheq_matchNone (MatchNot m2)\\<rbrakk>\n       \\<Longrightarrow> (normalize_match (MatchNot (MatchAnd m1 m2)) =\n                          []) =\n                         matcheq_matchNone (MatchNot (MatchAnd m1 m2))\n 5. \\<And>m.\n       (normalize_match m = []) = matcheq_matchNone m \\<Longrightarrow>\n       (normalize_match (MatchNot (MatchNot m)) = []) =\n       matcheq_matchNone (MatchNot (MatchNot m))\n 6. (normalize_match (MatchNot MatchAny) = []) =\n    matcheq_matchNone (MatchNot MatchAny)\n 7. \\<And>m.\n       (normalize_match (MatchNot (Match m)) = []) =\n       matcheq_matchNone (MatchNot (Match m))", "case 3"], ["proof (state)\nthis:\n  (normalize_match m1_ = []) = matcheq_matchNone m1_\n  ?x \\<in> set (normalize_match m1_) \\<Longrightarrow>\n  (normalize_match m2_ = []) = matcheq_matchNone m2_\n\ngoal (7 subgoals):\n 1. (normalize_match MatchAny = []) = matcheq_matchNone MatchAny\n 2. \\<And>m. (normalize_match (Match m) = []) = matcheq_matchNone (Match m)\n 3. \\<And>m1 m2.\n       \\<lbrakk>(normalize_match m1 = []) = matcheq_matchNone m1;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           (normalize_match m2 = []) = matcheq_matchNone m2\\<rbrakk>\n       \\<Longrightarrow> (normalize_match (MatchAnd m1 m2) = []) =\n                         matcheq_matchNone (MatchAnd m1 m2)\n 4. \\<And>m1 m2.\n       \\<lbrakk>(normalize_match (MatchNot m1) = []) =\n                matcheq_matchNone (MatchNot m1);\n        (normalize_match (MatchNot m2) = []) =\n        matcheq_matchNone (MatchNot m2)\\<rbrakk>\n       \\<Longrightarrow> (normalize_match (MatchNot (MatchAnd m1 m2)) =\n                          []) =\n                         matcheq_matchNone (MatchNot (MatchAnd m1 m2))\n 5. \\<And>m.\n       (normalize_match m = []) = matcheq_matchNone m \\<Longrightarrow>\n       (normalize_match (MatchNot (MatchNot m)) = []) =\n       matcheq_matchNone (MatchNot (MatchNot m))\n 6. (normalize_match (MatchNot MatchAny) = []) =\n    matcheq_matchNone (MatchNot MatchAny)\n 7. \\<And>m.\n       (normalize_match (MatchNot (Match m)) = []) =\n       matcheq_matchNone (MatchNot (Match m))", "thus ?case"], ["proof (prove)\nusing this:\n  (normalize_match m1_ = []) = matcheq_matchNone m1_\n  ?x \\<in> set (normalize_match m1_) \\<Longrightarrow>\n  (normalize_match m2_ = []) = matcheq_matchNone m2_\n\ngoal (1 subgoal):\n 1. (normalize_match (MatchAnd m1_ m2_) = []) =\n    matcheq_matchNone (MatchAnd m1_ m2_)", "by (simp) fastforce"], ["proof (state)\nthis:\n  (normalize_match (MatchAnd m1_ m2_) = []) =\n  matcheq_matchNone (MatchAnd m1_ m2_)\n\ngoal (6 subgoals):\n 1. (normalize_match MatchAny = []) = matcheq_matchNone MatchAny\n 2. \\<And>m. (normalize_match (Match m) = []) = matcheq_matchNone (Match m)\n 3. \\<And>m1 m2.\n       \\<lbrakk>(normalize_match (MatchNot m1) = []) =\n                matcheq_matchNone (MatchNot m1);\n        (normalize_match (MatchNot m2) = []) =\n        matcheq_matchNone (MatchNot m2)\\<rbrakk>\n       \\<Longrightarrow> (normalize_match (MatchNot (MatchAnd m1 m2)) =\n                          []) =\n                         matcheq_matchNone (MatchNot (MatchAnd m1 m2))\n 4. \\<And>m.\n       (normalize_match m = []) = matcheq_matchNone m \\<Longrightarrow>\n       (normalize_match (MatchNot (MatchNot m)) = []) =\n       matcheq_matchNone (MatchNot (MatchNot m))\n 5. (normalize_match (MatchNot MatchAny) = []) =\n    matcheq_matchNone (MatchNot MatchAny)\n 6. \\<And>m.\n       (normalize_match (MatchNot (Match m)) = []) =\n       matcheq_matchNone (MatchNot (Match m))", "qed(simp_all)"], ["", "lemma match_list_normalize_match: \"match_list \\<gamma> [m] a p \\<longleftrightarrow> match_list \\<gamma> (normalize_match m) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [m] a p =\n    match_list \\<gamma> (normalize_match m) a p", "proof(induction m rule:normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. match_list \\<gamma> [MatchAny] a p =\n    match_list \\<gamma> (normalize_match MatchAny) a p\n 2. \\<And>m.\n       match_list \\<gamma> [Match m] a p =\n       match_list \\<gamma> (normalize_match (Match m)) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 4. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 5. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 6. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 7. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. match_list \\<gamma> [MatchAny] a p =\n    match_list \\<gamma> (normalize_match MatchAny) a p\n 2. \\<And>m.\n       match_list \\<gamma> [Match m] a p =\n       match_list \\<gamma> (normalize_match (Match m)) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 4. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 5. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 6. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 7. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchAny] a p =\n    match_list \\<gamma> (normalize_match MatchAny) a p", "by(simp add: match_list_singleton)"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchAny] a p =\n  match_list \\<gamma> (normalize_match MatchAny) a p\n\ngoal (6 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [Match m] a p =\n       match_list \\<gamma> (normalize_match (Match m)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 4. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 5. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 6. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [Match m] a p =\n       match_list \\<gamma> (normalize_match (Match m)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 4. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 5. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 6. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [Match m] a p =\n       match_list \\<gamma> (normalize_match (Match m)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 4. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 5. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 6. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [Match m_] a p =\n    match_list \\<gamma> (normalize_match (Match m_)) a p", "by(simp add: match_list_singleton)"], ["proof (state)\nthis:\n  match_list \\<gamma> [Match m_] a p =\n  match_list \\<gamma> (normalize_match (Match m_)) a p\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 3. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 4. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 5. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 3. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 4. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 5. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case (3 m1 m2)"], ["proof (state)\nthis:\n  match_list \\<gamma> [m1] a p =\n  match_list \\<gamma> (normalize_match m1) a p\n  ?x \\<in> set (normalize_match m1) \\<Longrightarrow>\n  match_list \\<gamma> [m2] a p =\n  match_list \\<gamma> (normalize_match m2) a p\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [m1] a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           match_list \\<gamma> [m2] a p =\n           match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchAnd m1 m2] a p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchAnd m1 m2)) a p\n 2. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 3. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 4. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 5. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\nusing this:\n  match_list \\<gamma> [m1] a p =\n  match_list \\<gamma> (normalize_match m1) a p\n  ?x \\<in> set (normalize_match m1) \\<Longrightarrow>\n  match_list \\<gamma> [m2] a p =\n  match_list \\<gamma> (normalize_match m2) a p\n\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchAnd m1 m2] a p =\n    match_list \\<gamma> (normalize_match (MatchAnd m1 m2)) a p", "apply(simp_all add: match_list_singleton del: match_list.simps(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply(case_tac \"matches \\<gamma> m1 a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p\n 2. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply(rule matches_list_And_concat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m1 a p =\n                      match_list \\<gamma> (normalize_match m1) a p\n 2. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m2 a p =\n                      match_list \\<gamma> (normalize_match m2) a p\n 3. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m2 a p =\n                      match_list \\<gamma> (normalize_match m2) a p\n 2. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply(case_tac \"(normalize_match m1)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     matches \\<gamma> m1 a p; normalize_match m1 = []\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> m2 a p =\n                      match_list \\<gamma> (normalize_match m2) a p\n 2. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m1 a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           matches \\<gamma> m2 a p =\n           match_list \\<gamma> (normalize_match m2) a p;\n        matches \\<gamma> m1 a p; normalize_match m1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m2 a p =\n                         match_list \\<gamma> (normalize_match m2) a p\n 3. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa list.\n       \\<lbrakk>matches \\<gamma> m1 a p =\n                match_list \\<gamma> (normalize_match m1) a p;\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           matches \\<gamma> m2 a p =\n           match_list \\<gamma> (normalize_match m2) a p;\n        matches \\<gamma> m1 a p; normalize_match m1 = aa # list\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m2 a p =\n                         match_list \\<gamma> (normalize_match m2) a p\n 2. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply (auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m1 a p =\n             match_list \\<gamma> (normalize_match m1) a p;\n     \\<And>x.\n        x \\<in> set (normalize_match m1) \\<Longrightarrow>\n        matches \\<gamma> m2 a p =\n        match_list \\<gamma> (normalize_match m2) a p;\n     \\<not> matches \\<gamma> m1 a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchAnd m1 m2) a p =\n                      match_list \\<gamma>\n                       (concat\n                         (map (\\<lambda>x.\n                                  map (MatchAnd x) (normalize_match m2))\n                           (normalize_match m1)))\n                       a p", "apply(simp add: bunch_of_lemmata_about_matches match_list_helper)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchAnd m1 m2] a p =\n  match_list \\<gamma> (normalize_match (MatchAnd m1 m2)) a p\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 2. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 3. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 4. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 2. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 3. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 4. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 4"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchNot m1_] a p =\n  match_list \\<gamma> (normalize_match (MatchNot m1_)) a p\n  match_list \\<gamma> [MatchNot m2_] a p =\n  match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>match_list \\<gamma> [MatchNot m1] a p =\n                match_list \\<gamma> (normalize_match (MatchNot m1)) a p;\n        match_list \\<gamma> [MatchNot m2] a p =\n        match_list \\<gamma> (normalize_match (MatchNot m2)) a p\\<rbrakk>\n       \\<Longrightarrow> match_list \\<gamma> [MatchNot (MatchAnd m1 m2)] a\n                          p =\n                         match_list \\<gamma>\n                          (normalize_match (MatchNot (MatchAnd m1 m2))) a p\n 2. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 3. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 4. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\nusing this:\n  match_list \\<gamma> [MatchNot m1_] a p =\n  match_list \\<gamma> (normalize_match (MatchNot m1_)) a p\n  match_list \\<gamma> [MatchNot m2_] a p =\n  match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\n\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchNot (MatchAnd m1_ m2_)] a p =\n    match_list \\<gamma> (normalize_match (MatchNot (MatchAnd m1_ m2_))) a p", "apply(simp_all add: match_list_singleton del: match_list.simps(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchNot m1_) a p =\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     matches \\<gamma> (MatchNot m2_) a p =\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p =\n                      match_list \\<gamma>\n                       (normalize_match (MatchNot m1_) @\n                        normalize_match (MatchNot m2_))\n                       a p", "apply(simp add: match_list_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> (MatchNot m1_) a p =\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     matches \\<gamma> (MatchNot m2_) a p =\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p =\n                      (\\<not> match_list \\<gamma>\n                               (normalize_match (MatchNot m1_)) a\n                               p \\<longrightarrow>\n                       match_list \\<gamma> (normalize_match (MatchNot m2_))\n                        a p)", "apply(safe)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> (MatchNot m1_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     matches \\<gamma> (MatchNot m2_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) a p\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> (MatchNot m1_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     matches \\<gamma> (MatchNot m2_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p\n 3. \\<lbrakk>matches \\<gamma> (MatchNot m1_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     \\<not> matches \\<gamma> (MatchNot m2_) a p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) a p;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) a p\\<rbrakk>\n    \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) a p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     matches \\<gamma> (MatchNot m2_) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a p\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p\n 5. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) a p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) a p;\n     \\<not> matches \\<gamma> (MatchNot m2_) a p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) a p;\n     matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) a\n             p\\<rbrakk>\n    \\<Longrightarrow> match_list \\<gamma> (normalize_match (MatchNot m2_)) a\n                       p", "apply(simp_all add: matches_DeMorgan)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchNot (MatchAnd m1_ m2_)] a p =\n  match_list \\<gamma> (normalize_match (MatchNot (MatchAnd m1_ m2_))) a p\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 2. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 3. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 2. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 3. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 5"], ["proof (state)\nthis:\n  match_list \\<gamma> [m_] a p =\n  match_list \\<gamma> (normalize_match m_) a p\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       match_list \\<gamma> [m] a p =\n       match_list \\<gamma> (normalize_match m) a p \\<Longrightarrow>\n       match_list \\<gamma> [MatchNot (MatchNot m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (MatchNot m))) a p\n 2. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 3. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\nusing this:\n  match_list \\<gamma> [m_] a p =\n  match_list \\<gamma> (normalize_match m_) a p\n\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchNot (MatchNot m_)] a p =\n    match_list \\<gamma> (normalize_match (MatchNot (MatchNot m_))) a p", "by(simp add: match_list_singleton bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchNot (MatchNot m_)] a p =\n  match_list \\<gamma> (normalize_match (MatchNot (MatchNot m_))) a p\n\ngoal (2 subgoals):\n 1. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 2. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 2. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 6"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n 2. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchNot MatchAny] a p =\n    match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p", "by(simp add: match_list_singleton bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchNot MatchAny] a p =\n  match_list \\<gamma> (normalize_match (MatchNot MatchAny)) a p\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "case 7"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>m.\n       match_list \\<gamma> [MatchNot (Match m)] a p =\n       match_list \\<gamma> (normalize_match (MatchNot (Match m))) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> [MatchNot (Match m_)] a p =\n    match_list \\<gamma> (normalize_match (MatchNot (Match m_))) a p", "by(simp add: match_list_singleton)"], ["proof (state)\nthis:\n  match_list \\<gamma> [MatchNot (Match m_)] a p =\n  match_list \\<gamma> (normalize_match (MatchNot (Match m_))) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "thm match_list_normalize_match[simplified match_list_singleton]"], ["", "theorem normalize_match_correct: \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m)) s = approximating_bigstep_fun \\<gamma> p [Rule m a] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match m)) s =\n    approximating_bigstep_fun \\<gamma> p [Rule m a] s", "apply(rule match_list_semantics[of _ _ _ _ \"[m]\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_list \\<gamma> (normalize_match m) a p =\n    (if matches \\<gamma> m a p then True else match_list \\<gamma> [] a p)", "using match_list_normalize_match"], ["proof (prove)\nusing this:\n  match_list ?\\<gamma> [?m] ?a ?p =\n  match_list ?\\<gamma> (normalize_match ?m) ?a ?p\n\ngoal (1 subgoal):\n 1. match_list \\<gamma> (normalize_match m) a p =\n    (if matches \\<gamma> m a p then True else match_list \\<gamma> [] a p)", "by fastforce"], ["", "lemma normalize_match_empty: \"normalize_match m = [] \\<Longrightarrow> \\<not> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_match m = [] \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "proof(induction m rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>normalize_match m1 = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m1 a p;\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            normalize_match m2 = []\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m2 a p;\n        normalize_match (MatchAnd m1 m2) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<And>m1 m2.\n       \\<lbrakk>normalize_match (MatchNot m1) = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        normalize_match (MatchNot m2) = [] \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        normalize_match (MatchNot (MatchAnd m1 m2)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 5. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 6. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 7. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "case 3"], ["proof (state)\nthis:\n  normalize_match m1_ = [] \\<Longrightarrow> \\<not> matches \\<gamma> m1_ a p\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   normalize_match m2_ = []\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> m2_ a p\n  normalize_match (MatchAnd m1_ m2_) = []\n\ngoal (7 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>normalize_match m1 = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m1 a p;\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            normalize_match m2 = []\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m2 a p;\n        normalize_match (MatchAnd m1 m2) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchAnd m1 m2) a p\n 4. \\<And>m1 m2.\n       \\<lbrakk>normalize_match (MatchNot m1) = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        normalize_match (MatchNot m2) = [] \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        normalize_match (MatchNot (MatchAnd m1 m2)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 5. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 6. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 7. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalize_match m1_ = [] \\<Longrightarrow> \\<not> matches \\<gamma> m1_ a p\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   normalize_match m2_ = []\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> m2_ a p\n  normalize_match (MatchAnd m1_ m2_) = []\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchAnd m1_ m2_) a p", "by(fastforce dest: matches_dest)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> (MatchAnd m1_ m2_) a p\n\ngoal (6 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>normalize_match (MatchNot m1) = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        normalize_match (MatchNot m2) = [] \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        normalize_match (MatchNot (MatchAnd m1 m2)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 4. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 5. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 6. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>normalize_match (MatchNot m1) = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        normalize_match (MatchNot m2) = [] \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        normalize_match (MatchNot (MatchAnd m1 m2)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 4. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 5. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 6. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "case 4"], ["proof (state)\nthis:\n  normalize_match (MatchNot m1_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m1_) a p\n  normalize_match (MatchNot m2_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m2_) a p\n  normalize_match (MatchNot (MatchAnd m1_ m2_)) = []\n\ngoal (6 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m1 m2.\n       \\<lbrakk>normalize_match (MatchNot m1) = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> (MatchNot m1) a p;\n        normalize_match (MatchNot m2) = [] \\<Longrightarrow>\n        \\<not> matches \\<gamma> (MatchNot m2) a p;\n        normalize_match (MatchNot (MatchAnd m1 m2)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1 m2))\n                                 a p\n 4. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 5. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 6. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalize_match (MatchNot m1_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m1_) a p\n  normalize_match (MatchNot m2_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m2_) a p\n  normalize_match (MatchNot (MatchAnd m1_ m2_)) = []\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p", "using match_list_normalize_match"], ["proof (prove)\nusing this:\n  normalize_match (MatchNot m1_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m1_) a p\n  normalize_match (MatchNot m2_) = [] \\<Longrightarrow>\n  \\<not> matches \\<gamma> (MatchNot m2_) a p\n  normalize_match (MatchNot (MatchAnd m1_ m2_)) = []\n  match_list ?\\<gamma> [?m] ?a ?p =\n  match_list ?\\<gamma> (normalize_match ?m) ?a ?p\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p", "by (simp add: matches_DeMorgan)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p\n\ngoal (5 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 4. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 5. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 4. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 5. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "case 5"], ["proof (state)\nthis:\n  normalize_match m_ = [] \\<Longrightarrow> \\<not> matches \\<gamma> m_ a p\n  normalize_match (MatchNot (MatchNot m_)) = []\n\ngoal (5 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m.\n       \\<lbrakk>normalize_match m = [] \\<Longrightarrow>\n                \\<not> matches \\<gamma> m a p;\n        normalize_match (MatchNot (MatchNot m)) = []\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchNot m)) a p\n 4. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 5. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalize_match m_ = [] \\<Longrightarrow> \\<not> matches \\<gamma> m_ a p\n  normalize_match (MatchNot (MatchNot m_)) = []\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot (MatchNot m_)) a p", "using matches_not_idem"], ["proof (prove)\nusing this:\n  normalize_match m_ = [] \\<Longrightarrow> \\<not> matches \\<gamma> m_ a p\n  normalize_match (MatchNot (MatchNot m_)) = []\n  matches ?\\<gamma> (MatchNot (MatchNot ?m)) ?a ?p =\n  matches ?\\<gamma> ?m ?a ?p\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot (MatchNot m_)) a p", "by fastforce"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> (MatchNot (MatchNot m_)) a p\n\ngoal (4 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 4. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 4. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "case 6"], ["proof (state)\nthis:\n  normalize_match (MatchNot MatchAny) = []\n\ngoal (4 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. normalize_match (MatchNot MatchAny) = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n 4. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  normalize_match (MatchNot MatchAny) = []\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot MatchAny) a p", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> (MatchNot MatchAny) a p\n\ngoal (3 subgoals):\n 1. normalize_match MatchAny = [] \\<Longrightarrow>\n    \\<not> matches \\<gamma> MatchAny a p\n 2. \\<And>m.\n       normalize_match (Match m) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (Match m) a p\n 3. \\<And>m.\n       normalize_match (MatchNot (Match m)) = [] \\<Longrightarrow>\n       \\<not> matches \\<gamma> (MatchNot (Match m)) a p", "qed(simp_all)"], ["", "lemma matches_to_match_list_normalize: \"matches \\<gamma> m a p = match_list \\<gamma> (normalize_match m) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> m a p = match_list \\<gamma> (normalize_match m) a p", "using match_list_normalize_match[simplified match_list_singleton]"], ["proof (prove)\nusing this:\n  matches ?\\<gamma> ?m ?a ?p =\n  match_list ?\\<gamma> (normalize_match ?m) ?a ?p\n\ngoal (1 subgoal):\n 1. matches \\<gamma> m a p = match_list \\<gamma> (normalize_match m) a p", "."], ["", "lemma wf_ruleset_normalize_match: \"wf_ruleset \\<gamma> p [(Rule m a)] \\<Longrightarrow> wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m))", "proof(induction m rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. wf_ruleset \\<gamma> p [Rule MatchAny a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (Match m) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (Match m)))\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 4. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 5. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 6. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 7. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 1"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule MatchAny a]\n\ngoal (7 subgoals):\n 1. wf_ruleset \\<gamma> p [Rule MatchAny a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (Match m) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (Match m)))\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 4. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 5. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 6. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 7. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule MatchAny a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))", "by simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))\n\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (Match m) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (Match m)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 5. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (Match m) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (Match m)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 5. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 2"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (Match m_) a]\n\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (Match m) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (Match m)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 5. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule (Match m_) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (Match m_)))", "by simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (Match m_)))\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 4. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 4. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 3"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule m1_ a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m1_))\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   wf_ruleset \\<gamma> p [Rule m2_ a]\\<rbrakk>\n  \\<Longrightarrow> wf_ruleset \\<gamma> p\n                     (map (\\<lambda>m. Rule m a) (normalize_match m2_))\n  wf_ruleset \\<gamma> p [Rule (MatchAnd m1_ m2_) a]\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m1 a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m1));\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p [Rule m2 a]\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p\n                              (map (\\<lambda>m. Rule m a)\n                                (normalize_match m2));\n        wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchAnd m1 m2)))\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 4. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule m1_ a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m1_))\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   wf_ruleset \\<gamma> p [Rule m2_ a]\\<rbrakk>\n  \\<Longrightarrow> wf_ruleset \\<gamma> p\n                     (map (\\<lambda>m. Rule m a) (normalize_match m2_))\n  wf_ruleset \\<gamma> p [Rule (MatchAnd m1_ m2_) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchAnd m1_ m2_)))", "by(simp add: fixedaction_wf_ruleset wf_ruleset_singleton matches_to_match_list_normalize)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchAnd m1_ m2_)))\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 3. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 3. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 4"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m1_)))\n  wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2_)))\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 [Rule (MatchNot m1) a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a] \\<Longrightarrow>\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2)));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1 m2)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchAnd m1 m2))))\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 3. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m1_)))\n  wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2_)))\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot (MatchAnd m1_ m2_))))", "apply(simp add: wf_ruleset_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a] \\<Longrightarrow>\n             wf_ruleset \\<gamma> p\n              (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m1_)));\n     wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a] \\<Longrightarrow>\n     wf_ruleset \\<gamma> p\n      (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2_)));\n     wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]\\<rbrakk>\n    \\<Longrightarrow> wf_ruleset \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (normalize_match (MatchNot m1_))) \\<and>\n                      wf_ruleset \\<gamma> p\n                       (map (\\<lambda>m. Rule m a)\n                         (normalize_match (MatchNot m2_)))", "apply(simp add: fixedaction_wf_ruleset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a] \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) a\n              p \\<longrightarrow>\n             (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n             a \\<noteq> Return \\<and>\n             (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n             a \\<noteq> Unknown;\n     wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a] \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a\n      p \\<longrightarrow>\n     (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<forall>chain. a \\<noteq> Goto chain) \\<and> a \\<noteq> Unknown;\n     wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]\\<rbrakk>\n    \\<Longrightarrow> (match_list \\<gamma> (normalize_match (MatchNot m1_))\n                        a p \\<longrightarrow>\n                       (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n                       a \\<noteq> Return \\<and>\n                       (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n                       a \\<noteq> Unknown) \\<and>\n                      (match_list \\<gamma> (normalize_match (MatchNot m2_))\n                        a p \\<longrightarrow>\n                       (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n                       a \\<noteq> Return \\<and>\n                       (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n                       a \\<noteq> Unknown)", "apply(unfold wf_ruleset_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) a p \\<or>\n             (\\<nexists>chain. a = Call chain) \\<and>\n             a \\<noteq> Return \\<and>\n             (\\<nexists>chain. a = Goto chain) \\<and>\n             a \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) a\n              p \\<longrightarrow>\n             (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n             a \\<noteq> Return \\<and>\n             (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n             a \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and>\n     a \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) a\n      p \\<longrightarrow>\n     (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<forall>chain. a \\<noteq> Goto chain) \\<and> a \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\\<rbrakk>\n    \\<Longrightarrow> (match_list \\<gamma> (normalize_match (MatchNot m1_))\n                        a p \\<longrightarrow>\n                       (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n                       a \\<noteq> Return \\<and>\n                       (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n                       a \\<noteq> Unknown) \\<and>\n                      (match_list \\<gamma> (normalize_match (MatchNot m2_))\n                        a p \\<longrightarrow>\n                       (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n                       a \\<noteq> Return \\<and>\n                       (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n                       a \\<noteq> Unknown)", "apply(safe)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Return p \\<or>\n             (\\<nexists>chain. Return = Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<nexists>chain. Return = Goto chain) \\<and>\n             Return \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Return\n              p \\<longrightarrow>\n             (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n             Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Return p \\<or>\n     (\\<nexists>chain. Return = Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<nexists>chain. Return = Goto chain) \\<and>\n     Return \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return\n      p \\<longrightarrow>\n     (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n     Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Goto chain) p \\<longrightarrow>\n                (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n        (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Unknown p \\<or>\n             (\\<nexists>chain. Unknown = Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<nexists>chain. Unknown = Goto chain) \\<and>\n             Unknown \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown\n              p \\<longrightarrow>\n             (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n             Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Unknown p \\<or>\n     (\\<nexists>chain. Unknown = Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<nexists>chain. Unknown = Goto chain) \\<and>\n     Unknown \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown\n      p \\<longrightarrow>\n     (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n     Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Return p \\<or>\n             (\\<nexists>chain. Return = Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<nexists>chain. Return = Goto chain) \\<and>\n             Return \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Return\n              p \\<longrightarrow>\n             (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n             Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Return p \\<or>\n     (\\<nexists>chain. Return = Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<nexists>chain. Return = Goto chain) \\<and>\n     Return \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return\n      p \\<longrightarrow>\n     (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n     Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Goto chain) p \\<longrightarrow>\n                (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n        (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Unknown p \\<or>\n             (\\<nexists>chain. Unknown = Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<nexists>chain. Unknown = Goto chain) \\<and>\n             Unknown \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown\n              p \\<longrightarrow>\n             (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n             Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Unknown p \\<or>\n     (\\<nexists>chain. Unknown = Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<nexists>chain. Unknown = Goto chain) \\<and>\n     Unknown \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown\n      p \\<longrightarrow>\n     (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n     Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<nexists>chaina. Call chain = Call chaina;\n        Call chain \\<noteq> Return;\n        \\<nexists>chaina. Call chain = Goto chaina;\n        Call chain \\<noteq> Unknown;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>chain.\n        \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                 (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                 Goto chain \\<noteq> Return \\<and>\n                 (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                 Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                 match_list \\<gamma> (normalize_match (MatchNot m1_))\n                  (Goto chain) p \\<longrightarrow>\n                 (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                 Goto chain \\<noteq> Return \\<and>\n                 (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                 Goto chain \\<noteq> Unknown;\n         \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n         (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n         Goto chain \\<noteq> Return \\<and>\n         (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n         Goto chain \\<noteq> Unknown \\<Longrightarrow>\n         match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n          p \\<longrightarrow>\n         (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n         Goto chain \\<noteq> Return \\<and>\n         (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n         Goto chain \\<noteq> Unknown;\n         \\<nexists>chaina. Goto chain = Call chaina;\n         Goto chain \\<noteq> Return;\n         \\<nexists>chaina. Goto chain = Goto chaina;\n         Goto chain \\<noteq> Unknown;\n         match_list \\<gamma> (normalize_match (MatchNot m1_)) (Goto chain)\n          p;\n         a = Goto chain\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 12 subgoals...", "(*there is a simpler way but the simplifier takes for ever if we just apply it here, ...*)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Return p \\<or>\n             (\\<nexists>chain. Return = Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<nexists>chain. Return = Goto chain) \\<and>\n             Return \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Return\n              p \\<longrightarrow>\n             (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n             Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Return p \\<or>\n     (\\<nexists>chain. Return = Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<nexists>chain. Return = Goto chain) \\<and>\n     Return \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return\n      p \\<longrightarrow>\n     (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n     Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Goto chain) p \\<longrightarrow>\n                (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n        (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Unknown p \\<or>\n             (\\<nexists>chain. Unknown = Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<nexists>chain. Unknown = Goto chain) \\<and>\n             Unknown \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown\n              p \\<longrightarrow>\n             (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n             Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Unknown p \\<or>\n     (\\<nexists>chain. Unknown = Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<nexists>chain. Unknown = Goto chain) \\<and>\n     Unknown \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown\n      p \\<longrightarrow>\n     (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n     Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Return p \\<or>\n             (\\<nexists>chain. Return = Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<nexists>chain. Return = Goto chain) \\<and>\n             Return \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Return\n              p \\<longrightarrow>\n             (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n             Return \\<noteq> Return \\<and>\n             (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n             Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Return p \\<or>\n     (\\<nexists>chain. Return = Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<nexists>chain. Return = Goto chain) \\<and>\n     Return \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return\n      p \\<longrightarrow>\n     (\\<forall>chain. Return \\<noteq> Call chain) \\<and>\n     Return \\<noteq> Return \\<and>\n     (\\<forall>chain. Return \\<noteq> Goto chain) \\<and>\n     Return \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Goto chain) p \\<longrightarrow>\n                (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                Goto chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n        (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n        Goto chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n        Goto chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) Unknown p \\<or>\n             (\\<nexists>chain. Unknown = Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<nexists>chain. Unknown = Goto chain) \\<and>\n             Unknown \\<noteq> Unknown \\<Longrightarrow>\n             match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown\n              p \\<longrightarrow>\n             (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n             Unknown \\<noteq> Return \\<and>\n             (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n             Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) Unknown p \\<or>\n     (\\<nexists>chain. Unknown = Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<nexists>chain. Unknown = Goto chain) \\<and>\n     Unknown \\<noteq> Unknown \\<Longrightarrow>\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown\n      p \\<longrightarrow>\n     (\\<forall>chain. Unknown \\<noteq> Call chain) \\<and>\n     Unknown \\<noteq> Return \\<and>\n     (\\<forall>chain. Unknown \\<noteq> Goto chain) \\<and>\n     Unknown \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 9. \\<And>chain.\n       \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p \\<or>\n                (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown \\<Longrightarrow>\n                match_list \\<gamma> (normalize_match (MatchNot m1_))\n                 (Call chain) p \\<longrightarrow>\n                (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n                Call chain \\<noteq> Return \\<and>\n                (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n                Call chain \\<noteq> Unknown;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p \\<or>\n        (\\<nexists>chaina. Call chain = Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<nexists>chaina. Call chain = Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown \\<Longrightarrow>\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain)\n         p \\<longrightarrow>\n        (\\<forall>chaina. Call chain \\<noteq> Call chaina) \\<and>\n        Call chain \\<noteq> Return \\<and>\n        (\\<forall>chaina. Call chain \\<noteq> Goto chaina) \\<and>\n        Call chain \\<noteq> Unknown;\n        \\<nexists>chaina. Call chain = Call chaina;\n        Call chain \\<noteq> Return;\n        \\<nexists>chaina. Call chain = Goto chaina;\n        Call chain \\<noteq> Unknown;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>chain.\n        \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p \\<or>\n                 (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n                 Goto chain \\<noteq> Return \\<and>\n                 (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n                 Goto chain \\<noteq> Unknown \\<Longrightarrow>\n                 match_list \\<gamma> (normalize_match (MatchNot m1_))\n                  (Goto chain) p \\<longrightarrow>\n                 (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n                 Goto chain \\<noteq> Return \\<and>\n                 (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n                 Goto chain \\<noteq> Unknown;\n         \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p \\<or>\n         (\\<nexists>chaina. Goto chain = Call chaina) \\<and>\n         Goto chain \\<noteq> Return \\<and>\n         (\\<nexists>chaina. Goto chain = Goto chaina) \\<and>\n         Goto chain \\<noteq> Unknown \\<Longrightarrow>\n         match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain)\n          p \\<longrightarrow>\n         (\\<forall>chaina. Goto chain \\<noteq> Call chaina) \\<and>\n         Goto chain \\<noteq> Return \\<and>\n         (\\<forall>chaina. Goto chain \\<noteq> Goto chaina) \\<and>\n         Goto chain \\<noteq> Unknown;\n         \\<nexists>chaina. Goto chain = Call chaina;\n         Goto chain \\<noteq> Return;\n         \\<nexists>chaina. Goto chain = Goto chaina;\n         Goto chain \\<noteq> Unknown;\n         match_list \\<gamma> (normalize_match (MatchNot m1_)) (Goto chain)\n          p;\n         a = Goto chain\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 12 subgoals...", "apply(simp_all add: matches_to_match_list_normalize)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>chain.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (normalize_match (MatchNot m1_) @\n                         normalize_match (MatchNot m2_))\n                        (Call chain) p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>\\<not> match_list \\<gamma>\n                     (normalize_match (MatchNot m1_) @\n                      normalize_match (MatchNot m2_))\n                     Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chain.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (normalize_match (MatchNot m1_) @\n                         normalize_match (MatchNot m2_))\n                        (Goto chain) p;\n        match_list \\<gamma> (normalize_match (MatchNot m1_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>\\<not> match_list \\<gamma>\n                     (normalize_match (MatchNot m1_) @\n                      normalize_match (MatchNot m2_))\n                     Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chain.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (normalize_match (MatchNot m1_) @\n                         normalize_match (MatchNot m2_))\n                        (Call chain) p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<lbrakk>\\<not> match_list \\<gamma>\n                     (normalize_match (MatchNot m1_) @\n                      normalize_match (MatchNot m2_))\n                     Return p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 7. \\<And>chain.\n       \\<lbrakk>\\<not> match_list \\<gamma>\n                        (normalize_match (MatchNot m1_) @\n                         normalize_match (MatchNot m2_))\n                        (Goto chain) p;\n        match_list \\<gamma> (normalize_match (MatchNot m2_)) (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<lbrakk>\\<not> match_list \\<gamma>\n                     (normalize_match (MatchNot m1_) @\n                      normalize_match (MatchNot m2_))\n                     Unknown p;\n     match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp_all add: match_list_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot (MatchAnd m1_ m2_))))\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 2. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 2. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 5"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule m_ a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m_))\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m_)) a]\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p [Rule m a] \\<Longrightarrow>\n                wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a) (normalize_match m));\n        wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m)) a]\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (map (\\<lambda>m. Rule m a)\n                            (normalize_match (MatchNot (MatchNot m))))\n 2. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule m_ a] \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m_))\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m_)) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (MatchNot m_))))", "by(simp add: wf_ruleset_singleton matches_to_match_list_normalize)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (MatchNot m_))))\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 6"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))", "by(simp add: wf_ruleset_def)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "case 7"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot (Match m_)) a]\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a] \\<Longrightarrow>\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m))))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [Rule (MatchNot (Match m_)) a]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m_))))", "by(simp_all add: wf_ruleset_append)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m_))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normalize_match_wf_ruleset: \"wf_ruleset \\<gamma> p (map (\\<lambda>m. Rule m a) (normalize_match m)) \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a) (normalize_match m)) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule m a]", "proof(induction m rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match MatchAny)) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule MatchAny a]\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (Match m))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (Match m) a]\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 4. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 5. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 6. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 7. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 1"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))\n\ngoal (7 subgoals):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match MatchAny)) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule MatchAny a]\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (Match m))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (Match m) a]\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 4. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 5. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 6. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 7. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match MatchAny))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule MatchAny a]", "by simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule MatchAny a]\n\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (Match m))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (Match m) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 5. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (Match m))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (Match m) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 5. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 2"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (Match m_)))\n\ngoal (6 subgoals):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (Match m))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (Match m) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 3. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 4. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 5. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 6. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (Match m_)))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (Match m_) a]", "by simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (Match m_) a]\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 4. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 4. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 3"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match m1_)) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule m1_ a]\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   wf_ruleset \\<gamma> p\n    (map (\\<lambda>m. Rule m a) (normalize_match m2_))\\<rbrakk>\n  \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2_ a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchAnd m1_ m2_)))\n\ngoal (5 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m1)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m1 a];\n        \\<And>x.\n           \\<lbrakk>x \\<in> set (normalize_match m1);\n            wf_ruleset \\<gamma> p\n             (map (\\<lambda>m. Rule m a) (normalize_match m2))\\<rbrakk>\n           \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2 a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchAnd m1 m2)))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule (MatchAnd m1 m2) a]\n 2. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 3. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 4. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 5. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match m1_)) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule m1_ a]\n  \\<lbrakk>?x \\<in> set (normalize_match m1_);\n   wf_ruleset \\<gamma> p\n    (map (\\<lambda>m. Rule m a) (normalize_match m2_))\\<rbrakk>\n  \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m2_ a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchAnd m1_ m2_)))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (MatchAnd m1_ m2_) a]", "by(simp add: fixedaction_wf_ruleset wf_ruleset_singleton matches_to_match_list_normalize)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchAnd m1_ m2_) a]\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 3. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 3. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 4"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot m1_))) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot m2_))) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot (MatchAnd m1_ m2_))))\n\ngoal (4 subgoals):\n 1. \\<And>m1 m2.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match (MatchNot m1))) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule (MatchNot m1) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot m2))) \\<Longrightarrow>\n        wf_ruleset \\<gamma> p [Rule (MatchNot m2) a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchAnd m1 m2))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchAnd m1 m2)) a]\n 2. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 3. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 4. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot m1_))) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot m2_))) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a)\n     (normalize_match (MatchNot (MatchAnd m1_ m2_))))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]", "apply(simp add: wf_ruleset_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a];\n     wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a];\n     wf_ruleset \\<gamma> p\n      (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m1_))) \\<and>\n     wf_ruleset \\<gamma> p\n      (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot m2_)))\\<rbrakk>\n    \\<Longrightarrow> wf_ruleset \\<gamma> p\n                       [Rule (MatchNot (MatchAnd m1_ m2_)) a]", "apply(simp add: fixedaction_wf_ruleset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p [Rule (MatchNot m1_) a];\n     wf_ruleset \\<gamma> p [Rule (MatchNot m2_) a];\n     (match_list \\<gamma> (normalize_match (MatchNot m1_)) a\n       p \\<longrightarrow>\n      (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n      a \\<noteq> Return \\<and>\n      (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n      a \\<noteq> Unknown) \\<and>\n     (match_list \\<gamma> (normalize_match (MatchNot m2_)) a\n       p \\<longrightarrow>\n      (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n      a \\<noteq> Return \\<and>\n      (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n      a \\<noteq> Unknown)\\<rbrakk>\n    \\<Longrightarrow> wf_ruleset \\<gamma> p\n                       [Rule (MatchNot (MatchAnd m1_ m2_)) a]", "apply(unfold wf_ruleset_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> (MatchNot m1_) a p \\<or>\n             (\\<nexists>chain. a = Call chain) \\<and>\n             a \\<noteq> Return \\<and>\n             (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown;\n     \\<not> matches \\<gamma> (MatchNot m2_) a p \\<or>\n     (\\<nexists>chain. a = Call chain) \\<and>\n     a \\<noteq> Return \\<and>\n     (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown;\n     (match_list \\<gamma> (normalize_match (MatchNot m1_)) a\n       p \\<longrightarrow>\n      (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n      a \\<noteq> Return \\<and>\n      (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n      a \\<noteq> Unknown) \\<and>\n     (match_list \\<gamma> (normalize_match (MatchNot m2_)) a\n       p \\<longrightarrow>\n      (\\<forall>chain. a \\<noteq> Call chain) \\<and>\n      a \\<noteq> Return \\<and>\n      (\\<forall>chain. a \\<noteq> Goto chain) \\<and>\n      a \\<noteq> Unknown)\\<rbrakk>\n    \\<Longrightarrow> \\<not> matches \\<gamma> (MatchNot (MatchAnd m1_ m2_))\n                              a p \\<or>\n                      (\\<nexists>chain. a = Call chain) \\<and>\n                      a \\<noteq> Return \\<and>\n                      (\\<nexists>chain. a = Goto chain) \\<and>\n                      a \\<noteq> Unknown", "apply(safe)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Call chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Call chain) p;\n        \\<not> False; a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Return p;\n     \\<not> matches \\<gamma> (MatchNot m1_) Return p;\n     \\<not> matches \\<gamma> (MatchNot m2_) Return p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) Return p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) Return p;\n     \\<not> False; a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Goto chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Goto chain) p;\n        \\<not> False; a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) Unknown p;\n     \\<not> matches \\<gamma> (MatchNot m1_) Unknown p;\n     \\<not> matches \\<gamma> (MatchNot m2_) Unknown p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown p;\n     \\<not> False; a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Call chain) p;\n        \\<forall>chaina. Call chain \\<noteq> Call chaina;\n        Call chain \\<noteq> Return;\n        \\<forall>chaina. Call chain \\<noteq> Goto chaina;\n        Call chain \\<noteq> Unknown; \\<not> False; a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Goto chain) p;\n        \\<forall>chaina. Goto chain \\<noteq> Call chaina;\n        Goto chain \\<noteq> Return;\n        \\<forall>chaina. Goto chain \\<noteq> Goto chaina;\n        Goto chain \\<noteq> Unknown; \\<not> False; a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p;\n        \\<forall>chaina. Call chain \\<noteq> Call chaina;\n        Call chain \\<noteq> Return;\n        \\<forall>chaina. Call chain \\<noteq> Goto chaina;\n        Call chain \\<noteq> Unknown;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Call chain) p;\n        \\<not> False; a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p;\n        \\<forall>chaina. Goto chain \\<noteq> Call chaina;\n        Goto chain \\<noteq> Return;\n        \\<forall>chaina. Goto chain \\<noteq> Goto chaina;\n        Goto chain \\<noteq> Unknown;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Goto chain) p;\n        \\<not> False; a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>chain.\n       \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Call chain)\n                 p;\n        \\<not> matches \\<gamma> (MatchNot m1_) (Call chain) p;\n        \\<not> matches \\<gamma> (MatchNot m2_) (Call chain) p;\n        \\<forall>chaina. Call chain \\<noteq> Call chaina;\n        Call chain \\<noteq> Return;\n        \\<forall>chaina. Call chain \\<noteq> Goto chaina;\n        Call chain \\<noteq> Unknown;\n        \\<forall>chaina. Call chain \\<noteq> Call chaina;\n        Call chain \\<noteq> Return;\n        \\<forall>chaina. Call chain \\<noteq> Goto chaina;\n        Call chain \\<noteq> Unknown; \\<not> False; a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 10. \\<And>chain.\n        \\<lbrakk>matches \\<gamma> (MatchNot (MatchAnd m1_ m2_)) (Goto chain)\n                  p;\n         \\<not> matches \\<gamma> (MatchNot m1_) (Goto chain) p;\n         \\<not> matches \\<gamma> (MatchNot m2_) (Goto chain) p;\n         \\<forall>chaina. Goto chain \\<noteq> Call chaina;\n         Goto chain \\<noteq> Return;\n         \\<forall>chaina. Goto chain \\<noteq> Goto chaina;\n         Goto chain \\<noteq> Unknown;\n         \\<forall>chaina. Goto chain \\<noteq> Call chaina;\n         Goto chain \\<noteq> Return;\n         \\<forall>chaina. Goto chain \\<noteq> Goto chaina;\n         Goto chain \\<noteq> Unknown; \\<not> False; a = Goto chain\\<rbrakk>\n        \\<Longrightarrow> False", "apply(simp_all add: matches_to_match_list_normalize)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>chain.\n       \\<lbrakk>match_list \\<gamma>\n                 (normalize_match (MatchNot m1_) @\n                  normalize_match (MatchNot m2_))\n                 (Call chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Call chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Call chain) p;\n        a = Call chain\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>match_list \\<gamma>\n              (normalize_match (MatchNot m1_) @\n               normalize_match (MatchNot m2_))\n              Return p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) Return p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) Return p;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<And>chain.\n       \\<lbrakk>match_list \\<gamma>\n                 (normalize_match (MatchNot m1_) @\n                  normalize_match (MatchNot m2_))\n                 (Goto chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_))\n                (Goto chain) p;\n        \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_))\n                (Goto chain) p;\n        a = Goto chain\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>match_list \\<gamma>\n              (normalize_match (MatchNot m1_) @\n               normalize_match (MatchNot m2_))\n              Unknown p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m1_)) Unknown p;\n     \\<not> match_list \\<gamma> (normalize_match (MatchNot m2_)) Unknown p;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp_all add: match_list_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchAnd m1_ m2_)) a]\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 2. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 2. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 5"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match m_)) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule m_ a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (MatchNot m_))))\n\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>wf_ruleset \\<gamma> p\n                 (map (\\<lambda>m. Rule m a)\n                   (normalize_match m)) \\<Longrightarrow>\n                wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a)\n           (normalize_match (MatchNot (MatchNot m))))\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          [Rule (MatchNot (MatchNot m)) a]\n 2. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 3. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match m_)) \\<Longrightarrow>\n  wf_ruleset \\<gamma> p [Rule m_ a]\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (MatchNot m_))))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m_)) a]", "unfolding wf_ruleset_singleton"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match m_)) \\<Longrightarrow>\n  \\<not> matches \\<gamma> m_ a p \\<or>\n  (\\<nexists>chain. a = Call chain) \\<and>\n  a \\<noteq> Return \\<and>\n  (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (MatchNot m_))))\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot (MatchNot m_)) a p \\<or>\n    (\\<nexists>chain. a = Call chain) \\<and>\n    a \\<noteq> Return \\<and>\n    (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown", "by(simp add: matches_to_match_list_normalize)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot (MatchNot m_)) a]\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 6"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p\n     (map (\\<lambda>m. Rule m a)\n       (normalize_match (MatchNot MatchAny))) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n 2. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]", "unfolding wf_ruleset_singleton"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot MatchAny)))\n\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> (MatchNot MatchAny) a p \\<or>\n    (\\<nexists>chain. a = Call chain) \\<and>\n    a \\<noteq> Return \\<and>\n    (\\<nexists>chain. a = Goto chain) \\<and> a \\<noteq> Unknown", "by(simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot MatchAny) a]\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "case 7"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m_))))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       wf_ruleset \\<gamma> p\n        (map (\\<lambda>m. Rule m a)\n          (normalize_match (MatchNot (Match m)))) \\<Longrightarrow>\n       wf_ruleset \\<gamma> p [Rule (MatchNot (Match m)) a]", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p\n   (map (\\<lambda>m. Rule m a) (normalize_match (MatchNot (Match m_))))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [Rule (MatchNot (Match m_)) a]", "by(simp add: wf_ruleset_append)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [Rule (MatchNot (Match m_)) a]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma good_ruleset_normalize_match: \"good_ruleset [(Rule m a)] \\<Longrightarrow> good_ruleset (map (\\<lambda>m. Rule m a) (normalize_match m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset [Rule m a] \\<Longrightarrow>\n    good_ruleset (map (\\<lambda>m. Rule m a) (normalize_match m))", "by(simp add: good_ruleset_def)"], ["", "section\\<open>Normalizing rules instead of only match expressions\\<close>"], ["", "fun normalize_rules :: \"('a match_expr \\<Rightarrow> 'a match_expr list) \\<Rightarrow> 'a rule list \\<Rightarrow> 'a rule list\" where\n    \"normalize_rules _ [] = []\" |\n    \"normalize_rules f ((Rule m a)#rs) = (map (\\<lambda>m. Rule m a) (f m))@(normalize_rules f rs)\""], ["", "lemma normalize_rules_singleton: \"normalize_rules f [Rule m a] = map (\\<lambda>m. Rule m a) (f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules f [Rule m a] = map (\\<lambda>m. Rule m a) (f m)", "by(simp)"], ["", "lemma normalize_rules_fst: \"(normalize_rules f (r # rs)) = (normalize_rules f [r]) @ (normalize_rules f rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules f (r # rs) =\n    normalize_rules f [r] @ normalize_rules f rs", "by(cases r) (simp)"], ["", "lemma normalize_rules_concat_map:\n    \"normalize_rules f rs = concat (map (\\<lambda>r. map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules f rs =\n    concat\n     (map (\\<lambda>r.\n              map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n       rs)", "apply(induction rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. normalize_rules f [] =\n    concat\n     (map (\\<lambda>r.\n              map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n       [])\n 2. \\<And>a rs.\n       normalize_rules f rs =\n       concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n          rs) \\<Longrightarrow>\n       normalize_rules f (a # rs) =\n       concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n          (a # rs))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       normalize_rules f rs =\n       concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n          rs) \\<Longrightarrow>\n       normalize_rules f (a # rs) =\n       map (\\<lambda>m. Rule m (get_action a)) (f (get_match a)) @\n       concat\n        (map (\\<lambda>r.\n                 map (\\<lambda>m. Rule m (get_action r)) (f (get_match r)))\n          rs)", "apply(rename_tac r rs, case_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>normalize_rules f rs =\n                concat\n                 (map (\\<lambda>r.\n                          map (\\<lambda>m. Rule m (get_action r))\n                           (f (get_match r)))\n                   rs);\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> normalize_rules f (r # rs) =\n                         map (\\<lambda>m. Rule m (get_action r))\n                          (f (get_match r)) @\n                         concat\n                          (map (\\<lambda>r.\n                                   map (\\<lambda>m. Rule m (get_action r))\n                                    (f (get_match r)))\n                            rs)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma good_ruleset_normalize_rules: \"good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. good_ruleset [] \\<Longrightarrow> good_ruleset (normalize_rules f [])\n 2. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "case Nil"], ["proof (state)\nthis:\n  good_ruleset []\n\ngoal (2 subgoals):\n 1. good_ruleset [] \\<Longrightarrow> good_ruleset (normalize_rules f [])\n 2. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  good_ruleset []\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f [])", "by (simp)"], ["proof (state)\nthis:\n  good_ruleset (normalize_rules f [])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "case(Cons r rs)"], ["proof (state)\nthis:\n  good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\n  good_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "from Cons"], ["proof (chain)\npicking this:\n  good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\n  good_ruleset (r # rs)", "have IH: \"good_ruleset (normalize_rules f rs)\""], ["proof (prove)\nusing this:\n  good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\n  good_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f rs)", "using good_ruleset_tail"], ["proof (prove)\nusing this:\n  good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules f rs)\n  good_ruleset (r # rs)\n  good_ruleset (?r # ?rs) \\<Longrightarrow> good_ruleset ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f rs)", "by blast"], ["proof (state)\nthis:\n  good_ruleset (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "from Cons.prems"], ["proof (chain)\npicking this:\n  good_ruleset (r # rs)", "have \"good_ruleset [r]\""], ["proof (prove)\nusing this:\n  good_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. good_ruleset [r]", "using good_ruleset_fst"], ["proof (prove)\nusing this:\n  good_ruleset (r # rs)\n  good_ruleset (?r # ?rs) \\<Longrightarrow> good_ruleset [?r]\n\ngoal (1 subgoal):\n 1. good_ruleset [r]", "by fast"], ["proof (state)\nthis:\n  good_ruleset [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "hence \"good_ruleset (normalize_rules f [r])\""], ["proof (prove)\nusing this:\n  good_ruleset [r]\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f [r])", "by(cases r) (simp add: good_ruleset_alt)"], ["proof (state)\nthis:\n  good_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "with IH good_ruleset_append"], ["proof (chain)\npicking this:\n  good_ruleset (normalize_rules f rs)\n  good_ruleset (?rs\\<^sub>1 @ ?rs\\<^sub>2) =\n  (good_ruleset ?rs\\<^sub>1 \\<and> good_ruleset ?rs\\<^sub>2)\n  good_ruleset (normalize_rules f [r])", "have \"good_ruleset (normalize_rules f [r] @ normalize_rules f rs)\""], ["proof (prove)\nusing this:\n  good_ruleset (normalize_rules f rs)\n  good_ruleset (?rs\\<^sub>1 @ ?rs\\<^sub>2) =\n  (good_ruleset ?rs\\<^sub>1 \\<and> good_ruleset ?rs\\<^sub>2)\n  good_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f [r] @ normalize_rules f rs)", "by blast"], ["proof (state)\nthis:\n  good_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                good_ruleset (normalize_rules f rs);\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> good_ruleset (normalize_rules f (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  good_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f (r # rs))", "using normalize_rules_fst"], ["proof (prove)\nusing this:\n  good_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n  normalize_rules ?f (?r # ?rs) =\n  normalize_rules ?f [?r] @ normalize_rules ?f ?rs\n\ngoal (1 subgoal):\n 1. good_ruleset (normalize_rules f (r # rs))", "by metis"], ["proof (state)\nthis:\n  good_ruleset (normalize_rules f (r # rs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simple_ruleset_normalize_rules: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (normalize_rules f rs)", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_ruleset [] \\<Longrightarrow>\n    simple_ruleset (normalize_rules f [])\n 2. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "case Nil"], ["proof (state)\nthis:\n  simple_ruleset []\n\ngoal (2 subgoals):\n 1. simple_ruleset [] \\<Longrightarrow>\n    simple_ruleset (normalize_rules f [])\n 2. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  simple_ruleset []\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f [])", "by (simp)"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f [])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "case(Cons r rs)"], ["proof (state)\nthis:\n  simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\n  simple_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "from Cons"], ["proof (chain)\npicking this:\n  simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\n  simple_ruleset (r # rs)", "have IH: \"simple_ruleset (normalize_rules f rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\n  simple_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f rs)", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules f rs)\n  simple_ruleset (r # rs)\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f rs)", "by blast"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "from Cons.prems"], ["proof (chain)\npicking this:\n  simple_ruleset (r # rs)", "have \"simple_ruleset [r]\""], ["proof (prove)\nusing this:\n  simple_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset [r]", "using simple_ruleset_append"], ["proof (prove)\nusing this:\n  simple_ruleset (r # rs)\n  simple_ruleset (?rs\\<^sub>1 @ ?rs\\<^sub>2) =\n  (simple_ruleset ?rs\\<^sub>1 \\<and> simple_ruleset ?rs\\<^sub>2)\n\ngoal (1 subgoal):\n 1. simple_ruleset [r]", "by fastforce"], ["proof (state)\nthis:\n  simple_ruleset [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "hence \"simple_ruleset (normalize_rules f [r])\""], ["proof (prove)\nusing this:\n  simple_ruleset [r]\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f [r])", "by(cases r) (simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "with IH simple_ruleset_append"], ["proof (chain)\npicking this:\n  simple_ruleset (normalize_rules f rs)\n  simple_ruleset (?rs\\<^sub>1 @ ?rs\\<^sub>2) =\n  (simple_ruleset ?rs\\<^sub>1 \\<and> simple_ruleset ?rs\\<^sub>2)\n  simple_ruleset (normalize_rules f [r])", "have  \"simple_ruleset (normalize_rules f [r] @ normalize_rules f rs)\""], ["proof (prove)\nusing this:\n  simple_ruleset (normalize_rules f rs)\n  simple_ruleset (?rs\\<^sub>1 @ ?rs\\<^sub>2) =\n  (simple_ruleset ?rs\\<^sub>1 \\<and> simple_ruleset ?rs\\<^sub>2)\n  simple_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f [r] @ normalize_rules f rs)", "by blast"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>simple_ruleset rs \\<Longrightarrow>\n                simple_ruleset (normalize_rules f rs);\n        simple_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> simple_ruleset (normalize_rules f (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  simple_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f (r # rs))", "using normalize_rules_fst"], ["proof (prove)\nusing this:\n  simple_ruleset (normalize_rules f [r] @ normalize_rules f rs)\n  normalize_rules ?f (?r # ?rs) =\n  normalize_rules ?f [?r] @ normalize_rules ?f ?rs\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f (r # rs))", "by metis"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f (r # rs))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*tuned version of the next lemma for usage with normalize_primitive_extract where P=normalized_nnf_match*)"], ["", "lemma normalize_rules_match_list_semantics_3: \n    assumes \"\\<forall>m a. P m \\<longrightarrow> match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\"\n    and \"simple_ruleset rs\"\n    and P: \"\\<forall> r \\<in> set rs. P (get_match r)\"\n    shows \"approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "have assm_1: \"\\<forall>r\\<in>set rs. match_list \\<gamma> (f (get_match r)) (get_action r) p = matches \\<gamma> (get_match r) (get_action r) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set rs.\n       match_list \\<gamma> (f (get_match r)) (get_action r) p =\n       matches \\<gamma> (get_match r) (get_action r) p", "using P assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. P (get_match r)\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set rs.\n       match_list \\<gamma> (f (get_match r)) (get_action r) p =\n       matches \\<gamma> (get_match r) (get_action r) p", "by blast"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set rs.\n     match_list \\<gamma> (f (get_match r)) (get_action r) p =\n     matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "{"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set rs.\n     match_list \\<gamma> (f (get_match r)) (get_action r) p =\n     matches \\<gamma> (get_match r) (get_action r) p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "assume \"r \\<in> set rs\""], ["proof (state)\nthis:\n  r \\<in> set rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "with assm_1"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set rs.\n     match_list \\<gamma> (f (get_match r)) (get_action r) p =\n     matches \\<gamma> (get_match r) (get_action r) p\n  r \\<in> set rs", "have \"match_list \\<gamma> (f (get_match r)) (get_action r) p \\<longleftrightarrow> match_list \\<gamma> [(get_match r)] (get_action r) p\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs.\n     match_list \\<gamma> (f (get_match r)) (get_action r) p =\n     matches \\<gamma> (get_match r) (get_action r) p\n  r \\<in> set rs\n\ngoal (1 subgoal):\n 1. match_list \\<gamma> (f (get_match r)) (get_action r) p =\n    match_list \\<gamma> [get_match r] (get_action r) p", "by simp"], ["proof (state)\nthis:\n  match_list \\<gamma> (f (get_match r)) (get_action r) p =\n  match_list \\<gamma> [get_match r] (get_action r) p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "with match_list_semantics[of \\<gamma> \"f (get_match r)\" \"(get_action r)\" p \"[(get_match r)]\"]"], ["proof (chain)\npicking this:\n  match_list \\<gamma> (f (get_match r)) (get_action r) p =\n  match_list \\<gamma> [get_match r] (get_action r) p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) ?s =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) [get_match r]) ?s\n  match_list \\<gamma> (f (get_match r)) (get_action r) p =\n  match_list \\<gamma> [get_match r] (get_action r) p", "have\n          \"approximating_bigstep_fun \\<gamma> p (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) s = \n           approximating_bigstep_fun \\<gamma> p [Rule (get_match r) (get_action r)] s\""], ["proof (prove)\nusing this:\n  match_list \\<gamma> (f (get_match r)) (get_action r) p =\n  match_list \\<gamma> [get_match r] (get_action r) p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) ?s =\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) [get_match r]) ?s\n  match_list \\<gamma> (f (get_match r)) (get_action r) p =\n  match_list \\<gamma> [get_match r] (get_action r) p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) s =\n    approximating_bigstep_fun \\<gamma> p [Rule (get_match r) (get_action r)]\n     s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) s =\n  approximating_bigstep_fun \\<gamma> p [Rule (get_match r) (get_action r)] s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "hence \"(approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s) = approximating_bigstep_fun \\<gamma> p [r] s\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (map (\\<lambda>m. Rule m (get_action r)) (f (get_match r))) s =\n  approximating_bigstep_fun \\<gamma> p [Rule (get_match r) (get_action r)] s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s =\n    approximating_bigstep_fun \\<gamma> p [r] s", "by(cases r) (simp)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s =\n  approximating_bigstep_fun \\<gamma> p [r] s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "}"], ["proof (state)\nthis:\n  ?r2 \\<in> set rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r2]) ?sa2 =\n  approximating_bigstep_fun \\<gamma> p [?r2] ?sa2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset rs\n  \\<forall>r\\<in>set rs. P (get_match r)\n  ?r2 \\<in> set rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r2]) ?sa2 =\n  approximating_bigstep_fun \\<gamma> p [?r2] ?sa2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset rs\n  \\<forall>r\\<in>set rs. P (get_match r)\n  ?r2 \\<in> set rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r2]) ?sa2 =\n  approximating_bigstep_fun \\<gamma> p [?r2] ?sa2\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction rs arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>\\<forall>m a.\n                   P m \\<longrightarrow>\n                   match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset []; \\<forall>r\\<in>set []. P (get_match r);\n        \\<And>r sa.\n           r \\<in> set [] \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "case Nil"], ["proof (state)\nthis:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset []\n  \\<forall>r\\<in>set []. P (get_match r)\n  ?r \\<in> set [] \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>\\<forall>m a.\n                   P m \\<longrightarrow>\n                   match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset []; \\<forall>r\\<in>set []. P (get_match r);\n        \\<And>r sa.\n           r \\<in> set [] \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset []\n  \\<forall>r\\<in>set []. P (get_match r)\n  ?r \\<in> set [] \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f []) s =\n    approximating_bigstep_fun \\<gamma> p [] s", "by (simp)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f []) s =\n  approximating_bigstep_fun \\<gamma> p [] s\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "case (Cons r rs)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa", "have \"simple_ruleset [r]\""], ["proof (prove)\nusing this:\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (1 subgoal):\n 1. simple_ruleset [r]", "by(simp add: simple_ruleset_def)"], ["proof (state)\nthis:\n  simple_ruleset [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "with simple_imp_good_ruleset good_imp_wf_ruleset"], ["proof (chain)\npicking this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset [r]", "have wf_r: \"wf_ruleset \\<gamma> p [r]\""], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset [r]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r]", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "from \\<open>simple_ruleset [r]\\<close> simple_imp_good_ruleset good_imp_wf_ruleset"], ["proof (chain)\npicking this:\n  simple_ruleset [r]\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs", "have wf_r: \n          \"wf_ruleset \\<gamma> p [r]\""], ["proof (prove)\nusing this:\n  simple_ruleset [r]\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r]", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "from simple_ruleset_normalize_rules[OF \\<open>simple_ruleset [r]\\<close>]"], ["proof (chain)\npicking this:\n  simple_ruleset (normalize_rules ?f [r])", "have \"simple_ruleset (normalize_rules f [r])\""], ["proof (prove)\nusing this:\n  simple_ruleset (normalize_rules ?f [r])\n\ngoal (1 subgoal):\n 1. simple_ruleset (normalize_rules f [r])", "by(simp)"], ["proof (state)\nthis:\n  simple_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "with simple_imp_good_ruleset good_imp_wf_ruleset"], ["proof (chain)\npicking this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset (normalize_rules f [r])", "have wf_nr: \"wf_ruleset \\<gamma> p (normalize_rules f [r])\""], ["proof (prove)\nusing this:\n  simple_ruleset ?rs \\<Longrightarrow> good_ruleset ?rs\n  good_ruleset ?rs \\<Longrightarrow> wf_ruleset ?\\<gamma> ?p ?rs\n  simple_ruleset (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules f [r])", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa", "have IH: \"\\<And>s. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n       approximating_bigstep_fun \\<gamma> p rs s", "using simple_ruleset_tail"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n  simple_ruleset (?r # ?rs) \\<Longrightarrow> simple_ruleset ?rs\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n       approximating_bigstep_fun \\<gamma> p rs s", "by force"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) ?s =\n  approximating_bigstep_fun \\<gamma> p rs ?s\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa", "have a: \"\\<And>s. approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s = approximating_bigstep_fun \\<gamma> p [r] s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>m a.\n              P m \\<longrightarrow>\n              match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n   simple_ruleset rs; \\<forall>r\\<in>set rs. P (get_match r);\n   \\<And>r sa.\n      r \\<in> set rs \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n      approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (normalize_rules f rs) ?s =\n                    approximating_bigstep_fun \\<gamma> p rs ?s\n  \\<forall>m a.\n     P m \\<longrightarrow>\n     match_list \\<gamma> (f m) a p = matches \\<gamma> m a p\n  simple_ruleset (r # rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [?r]) ?sa =\n  approximating_bigstep_fun \\<gamma> p [?r] ?sa\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s =\n       approximating_bigstep_fun \\<gamma> p [r] s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) ?s =\n  approximating_bigstep_fun \\<gamma> p [r] ?s\n\ngoal (1 subgoal):\n 1. \\<And>a rs s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>m a.\n                               P m \\<longrightarrow>\n                               match_list \\<gamma> (f m) a p =\n                               matches \\<gamma> m a p;\n                    simple_ruleset rs;\n                    \\<forall>r\\<in>set rs. P (get_match r);\n                    \\<And>r sa.\n                       r \\<in> set rs \\<Longrightarrow>\n                       approximating_bigstep_fun \\<gamma> p\n                        (normalize_rules f [r]) sa =\n                       approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n                   \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n(normalize_rules f rs) s =\n                                     approximating_bigstep_fun \\<gamma> p rs\ns;\n        \\<forall>m a.\n           P m \\<longrightarrow>\n           match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        simple_ruleset (a # rs);\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<And>r sa.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) sa =\n           approximating_bigstep_fun \\<gamma> p [r] sa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules f (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "apply(subst normalize_rules_fst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (normalize_rules f [r] @ normalize_rules f rs) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "apply(simp add: approximating_bigstep_fun_seq_wf[OF wf_nr])"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs)\n     (approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s) =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "apply(subst approximating_bigstep_fun_seq_wf[OF wf_r, simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs)\n     (approximating_bigstep_fun \\<gamma> p (normalize_rules f [r]) s) =\n    approximating_bigstep_fun \\<gamma> p rs\n     (approximating_bigstep_fun \\<gamma> p [r] s)", "apply(simp add: a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules f rs)\n     (approximating_bigstep_fun \\<gamma> p [r] s) =\n    approximating_bigstep_fun \\<gamma> p rs\n     (approximating_bigstep_fun \\<gamma> p [r] s)", "apply(simp add: IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f (r # rs)) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary normalize_rules_match_list_semantics: \n  \"(\\<forall>m a. match_list \\<gamma> (f m) a p = matches \\<gamma> m a p) \\<Longrightarrow> simple_ruleset rs \\<Longrightarrow>\n   approximating_bigstep_fun \\<gamma> p (normalize_rules f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m a.\n                match_list \\<gamma> (f m) a p = matches \\<gamma> m a p;\n     simple_ruleset rs\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (normalize_rules f rs) s =\n                      approximating_bigstep_fun \\<gamma> p rs s", "by(rule normalize_rules_match_list_semantics_3[where P=\"\\<lambda>_. True\"]) simp_all"], ["", "lemma in_normalized_matches: \"ls \\<in> set (normalize_match m) \\<and> matches \\<gamma> ls a p \\<Longrightarrow> matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ls \\<in> set (normalize_match m) \\<and>\n    matches \\<gamma> ls a p \\<Longrightarrow>\n    matches \\<gamma> m a p", "by (meson match_list_matches matches_to_match_list_normalize)"], ["", "text\\<open>applying a function (with a prerequisite \\<open>Q\\<close>) to all rules\\<close>"], ["", "lemma normalize_rules_property:\n assumes \"\\<forall> r \\<in> set rs. P (get_match r)\"\n     and \"\\<forall>m. P m \\<longrightarrow> (\\<forall>m' \\<in> set (f m). Q m')\"\n  shows \"\\<forall>r \\<in> set (normalize_rules f rs). Q (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (normalize_rules f rs). Q (get_match r)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r)", "fix r'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r)", "assume a: \"r' \\<in> set (normalize_rules f rs)\""], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r)", "from a assms"], ["proof (chain)\npicking this:\n  r' \\<in> set (normalize_rules f rs)\n  \\<forall>r\\<in>set rs. P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>m'\\<in>set (f m). Q m')", "show \"Q (get_match r')\""], ["proof (prove)\nusing this:\n  r' \\<in> set (normalize_rules f rs)\n  \\<forall>r\\<in>set rs. P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>m'\\<in>set (f m). Q m')\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>r' \\<in> set (normalize_rules f []);\n     \\<forall>r\\<in>set []. P (get_match r);\n     \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n    \\<Longrightarrow> Q (get_match r')\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "case Nil"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f [])\n  \\<forall>r\\<in>set []. P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>r' \\<in> set (normalize_rules f []);\n     \\<forall>r\\<in>set []. P (get_match r);\n     \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n    \\<Longrightarrow> Q (get_match r')\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "thus ?case"], ["proof (prove)\nusing this:\n  r' \\<in> set (normalize_rules f [])\n  \\<forall>r\\<in>set []. P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "by simp"], ["proof (state)\nthis:\n  Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "case (Cons r rs)"], ["proof (state)\nthis:\n  \\<lbrakk>r' \\<in> set (normalize_rules f rs);\n   \\<forall>r\\<in>set rs. P (get_match r);\n   \\<forall>m.\n      P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\\<rbrakk>\n  \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f (r # rs))\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "{"], ["proof (state)\nthis:\n  \\<lbrakk>r' \\<in> set (normalize_rules f rs);\n   \\<forall>r\\<in>set rs. P (get_match r);\n   \\<forall>m.\n      P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\\<rbrakk>\n  \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f (r # rs))\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "assume \"r' \\<in> set (normalize_rules f rs)\""], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "from Cons.IH this"], ["proof (chain)\npicking this:\n  \\<lbrakk>r' \\<in> set (normalize_rules f rs);\n   \\<forall>r\\<in>set rs. P (get_match r);\n   \\<forall>m.\n      P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\\<rbrakk>\n  \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f rs)", "have \"Q (get_match r')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>r' \\<in> set (normalize_rules f rs);\n   \\<forall>r\\<in>set rs. P (get_match r);\n   \\<forall>m.\n      P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\\<rbrakk>\n  \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "using Cons.prems(2) Cons.prems(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>r' \\<in> set (normalize_rules f rs);\n   \\<forall>r\\<in>set rs. P (get_match r);\n   \\<forall>m.\n      P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\\<rbrakk>\n  \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f rs)\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "by fastforce"], ["proof (state)\nthis:\n  Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "}"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "note 1=this"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "{"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "assume \"r' \\<in> set (normalize_rules f [r])\""], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "hence a: \"(get_match r') \\<in> set (f (get_match r))\""], ["proof (prove)\nusing this:\n  r' \\<in> set (normalize_rules f [r])\n\ngoal (1 subgoal):\n 1. get_match r' \\<in> set (f (get_match r))", "by(cases r) (auto)"], ["proof (state)\nthis:\n  get_match r' \\<in> set (f (get_match r))\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "with Cons.prems(2) Cons.prems(3)"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n  get_match r' \\<in> set (f (get_match r))", "have \"\\<forall>m'\\<in>set (f (get_match r)). Q m'\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (r # rs). P (get_match r)\n  \\<forall>m. P m \\<longrightarrow> (\\<forall>a\\<in>set (f m). Q a)\n  get_match r' \\<in> set (f (get_match r))\n\ngoal (1 subgoal):\n 1. \\<forall>m'\\<in>set (f (get_match r)). Q m'", "by auto"], ["proof (state)\nthis:\n  \\<forall>m'\\<in>set (f (get_match r)). Q m'\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "with a"], ["proof (chain)\npicking this:\n  get_match r' \\<in> set (f (get_match r))\n  \\<forall>m'\\<in>set (f (get_match r)). Q m'", "have \"Q (get_match r')\""], ["proof (prove)\nusing this:\n  get_match r' \\<in> set (f (get_match r))\n  \\<forall>m'\\<in>set (f (get_match r)). Q m'\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "by blast"], ["proof (state)\nthis:\n  Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "}"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f [r]) \\<Longrightarrow> Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "note 2=this"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f [r]) \\<Longrightarrow> Q (get_match r')\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "from Cons.prems(1)"], ["proof (chain)\npicking this:\n  r' \\<in> set (normalize_rules f (r # rs))", "have \"r' \\<in> set (normalize_rules f [r]) \\<or> r' \\<in> set (normalize_rules f rs)\""], ["proof (prove)\nusing this:\n  r' \\<in> set (normalize_rules f (r # rs))\n\ngoal (1 subgoal):\n 1. r' \\<in> set (normalize_rules f [r]) \\<or>\n    r' \\<in> set (normalize_rules f rs)", "by(subst(asm) normalize_rules_fst) auto"], ["proof (state)\nthis:\n  r' \\<in> set (normalize_rules f [r]) \\<or>\n  r' \\<in> set (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>r' \\<in> set (normalize_rules f rs);\n                 \\<forall>r\\<in>set rs. P (get_match r);\n                 \\<forall>m.\n                    P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n                \\<Longrightarrow> Q (get_match r');\n        r' \\<in> set (normalize_rules f (a # rs));\n        \\<forall>r\\<in>set (a # rs). P (get_match r);\n        \\<forall>m. P m \\<longrightarrow> Ball (set (f m)) Q\\<rbrakk>\n       \\<Longrightarrow> Q (get_match r')", "with 1 2"], ["proof (chain)\npicking this:\n  r' \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f [r]) \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f [r]) \\<or>\n  r' \\<in> set (normalize_rules f rs)", "show ?case"], ["proof (prove)\nusing this:\n  r' \\<in> set (normalize_rules f rs) \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f [r]) \\<Longrightarrow> Q (get_match r')\n  r' \\<in> set (normalize_rules f [r]) \\<or>\n  r' \\<in> set (normalize_rules f rs)\n\ngoal (1 subgoal):\n 1. Q (get_match r')", "by(elim disjE)(simp)"], ["proof (state)\nthis:\n  Q (get_match r')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q (get_match r')\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>If a function \\<open>f\\<close> preserves some property of the match expressions, then this property is preserved when applying @{const normalize_rules}\\<close>"], ["", "lemma normalize_rules_preserves: assumes \"\\<forall> r \\<in> set rs. P (get_match r)\"\n     and \"\\<forall>m. P m \\<longrightarrow> (\\<forall>m' \\<in> set (f m). P m')\"\n  shows \"\\<forall>r \\<in> set (normalize_rules f rs). P (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (normalize_rules f rs). P (get_match r)", "using normalize_rules_property[OF assms(1) assms(2)]"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (normalize_rules f rs). P (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (normalize_rules f rs). P (get_match r)", "by simp"], ["", "fun normalize_rules_dnf :: \"'a rule list \\<Rightarrow> 'a rule list\" where\n  \"normalize_rules_dnf [] = []\" |\n  \"normalize_rules_dnf ((Rule m a)#rs) = (map (\\<lambda>m. Rule m a) (normalize_match m))@(normalize_rules_dnf rs)\""], ["", "lemma normalize_rules_dnf_append: \"normalize_rules_dnf (rs1@rs2) = normalize_rules_dnf rs1 @ normalize_rules_dnf rs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules_dnf (rs1 @ rs2) =\n    normalize_rules_dnf rs1 @ normalize_rules_dnf rs2", "proof(induction rs1 rule: normalize_rules_dnf.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. normalize_rules_dnf ([] @ rs2) =\n    normalize_rules_dnf [] @ normalize_rules_dnf rs2\n 2. \\<And>m a rs.\n       normalize_rules_dnf (rs @ rs2) =\n       normalize_rules_dnf rs @ normalize_rules_dnf rs2 \\<Longrightarrow>\n       normalize_rules_dnf ((Rule m a # rs) @ rs2) =\n       normalize_rules_dnf (Rule m a # rs) @ normalize_rules_dnf rs2", "qed(simp_all)"], ["", "lemma normalize_rules_dnf_def2: \"normalize_rules_dnf = normalize_rules normalize_match\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules_dnf = normalize_rules normalize_match", "proof(simp add: fun_eq_iff, intro allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. normalize_rules_dnf x = normalize_rules normalize_match x", "fix x::\"'a rule list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. normalize_rules_dnf x = normalize_rules normalize_match x", "show \"normalize_rules_dnf x = normalize_rules normalize_match x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_rules_dnf x = normalize_rules normalize_match x", "proof(induction x)"], ["proof (state)\ngoal (2 subgoals):\n 1. normalize_rules_dnf [] = normalize_rules normalize_match []\n 2. \\<And>a x.\n       normalize_rules_dnf x =\n       normalize_rules normalize_match x \\<Longrightarrow>\n       normalize_rules_dnf (a # x) = normalize_rules normalize_match (a # x)", "case (Cons r rs)"], ["proof (state)\nthis:\n  normalize_rules_dnf rs = normalize_rules normalize_match rs\n\ngoal (2 subgoals):\n 1. normalize_rules_dnf [] = normalize_rules normalize_match []\n 2. \\<And>a x.\n       normalize_rules_dnf x =\n       normalize_rules normalize_match x \\<Longrightarrow>\n       normalize_rules_dnf (a # x) = normalize_rules normalize_match (a # x)", "thus ?case"], ["proof (prove)\nusing this:\n  normalize_rules_dnf rs = normalize_rules normalize_match rs\n\ngoal (1 subgoal):\n 1. normalize_rules_dnf (r # rs) = normalize_rules normalize_match (r # rs)", "by (cases r) simp"], ["proof (state)\nthis:\n  normalize_rules_dnf (r # rs) = normalize_rules normalize_match (r # rs)\n\ngoal (1 subgoal):\n 1. normalize_rules_dnf [] = normalize_rules normalize_match []", "qed(simp)"], ["proof (state)\nthis:\n  normalize_rules_dnf x = normalize_rules normalize_match x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_ruleset_normalize_rules_dnf: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow> wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n    wf_ruleset \\<gamma> p (normalize_rules_dnf rs)", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p (normalize_rules_dnf [])\n 2. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "case Nil"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p []\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [] \\<Longrightarrow>\n    wf_ruleset \\<gamma> p (normalize_rules_dnf [])\n 2. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p []\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf [])", "by simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "case(Cons r rs)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "from Cons"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n  wf_ruleset \\<gamma> p (r # rs)", "have IH: \"wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf rs)", "by(auto dest: wf_rulesetD)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "from Cons.prems"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p (r # rs)", "have \"wf_ruleset \\<gamma> p [r]\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r]", "by(auto dest: wf_rulesetD)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [r]\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "hence \"wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [r]\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf [r])", "using wf_ruleset_normalize_match"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p [r]\n  wf_ruleset ?\\<gamma> ?p [Rule ?m ?a] \\<Longrightarrow>\n  wf_ruleset ?\\<gamma> ?p (map (\\<lambda>m. Rule m ?a) (normalize_match ?m))\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf [r])", "by(cases r) simp"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "with IH wf_ruleset_append"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n  wf_ruleset ?\\<gamma> ?p (?rs1.0 @ ?rs2.0) =\n  (wf_ruleset ?\\<gamma> ?p ?rs1.0 \\<and> wf_ruleset ?\\<gamma> ?p ?rs2.0)\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])", "have \"wf_ruleset \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs)\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf rs)\n  wf_ruleset ?\\<gamma> ?p (?rs1.0 @ ?rs2.0) =\n  (wf_ruleset ?\\<gamma> ?p ?rs1.0 \\<and> wf_ruleset ?\\<gamma> ?p ?rs2.0)\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs)", "by fast"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                wf_ruleset \\<gamma> p (normalize_rules_dnf rs);\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> wf_ruleset \\<gamma> p\n                          (normalize_rules_dnf (a # rs))", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf (r # rs))", "using normalize_rules_dnf_def2 normalize_rules_fst"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs)\n  normalize_rules_dnf = normalize_rules normalize_match\n  normalize_rules ?f (?r # ?rs) =\n  normalize_rules ?f [?r] @ normalize_rules ?f ?rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (normalize_rules_dnf (r # rs))", "by metis"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p (normalize_rules_dnf (r # rs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma good_ruleset_normalize_rules_dnf: \"good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules_dnf rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules_dnf rs)", "using normalize_rules_dnf_def2 good_ruleset_normalize_rules"], ["proof (prove)\nusing this:\n  normalize_rules_dnf = normalize_rules normalize_match\n  good_ruleset ?rs \\<Longrightarrow> good_ruleset (normalize_rules ?f ?rs)\n\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow> good_ruleset (normalize_rules_dnf rs)", "by metis"], ["", "lemma simple_ruleset_normalize_rules_dnf: \"simple_ruleset rs \\<Longrightarrow> simple_ruleset (normalize_rules_dnf rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (normalize_rules_dnf rs)", "using normalize_rules_dnf_def2 simple_ruleset_normalize_rules"], ["proof (prove)\nusing this:\n  normalize_rules_dnf = normalize_rules normalize_match\n  simple_ruleset ?rs \\<Longrightarrow>\n  simple_ruleset (normalize_rules ?f ?rs)\n\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    simple_ruleset (normalize_rules_dnf rs)", "by metis"], ["", "(*This is the simple correctness proof, using the generalized version.\n  below, we have a more complex correctness proof with a slighter generic assumption.\n  Probably, we can delete the complex proof when we only focus on simple rulesets\n  *)"], ["", "lemma \"simple_ruleset rs \\<Longrightarrow> \n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "unfolding normalize_rules_dnf_def2"], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p\n     (normalize_rules normalize_match rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "apply(rule normalize_rules_match_list_semantics)"], ["proof (prove)\ngoal (2 subgoals):\n 1. simple_ruleset rs \\<Longrightarrow>\n    \\<forall>m a.\n       match_list \\<gamma> (normalize_match m) a p = matches \\<gamma> m a p\n 2. simple_ruleset rs \\<Longrightarrow> simple_ruleset rs", "apply (metis matches_to_match_list_normalize)"], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow> simple_ruleset rs", "by simp"], ["", "lemma normalize_rules_dnf_correct: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow> \n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [] \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf []) s =\n    approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "case Nil"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p []\n\ngoal (2 subgoals):\n 1. wf_ruleset \\<gamma> p [] \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf []) s =\n    approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p []\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf []) s =\n    approximating_bigstep_fun \\<gamma> p [] s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf []) s =\n  approximating_bigstep_fun \\<gamma> p [] s\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "case (Cons r rs)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        wf_ruleset \\<gamma> p (a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf (a # rs)) s =\n                         approximating_bigstep_fun \\<gamma> p (a # rs) s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "proof(induction s rule: just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided)"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "from Cons wf_rulesetD(2)"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n  wf_ruleset \\<gamma> p (r # rs)\n  wf_ruleset ?\\<gamma> ?p (?r # ?rs) \\<Longrightarrow>\n  wf_ruleset ?\\<gamma> ?p ?rs", "have IH: \"approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n  wf_ruleset \\<gamma> p (r # rs)\n  wf_ruleset ?\\<gamma> ?p (?r # ?rs) \\<Longrightarrow>\n  wf_ruleset ?\\<gamma> ?p ?rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "by fast"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "from Cons.prems"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p (r # rs)", "have \"wf_ruleset \\<gamma> p [r]\" and \"wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r] &&&\n    wf_ruleset \\<gamma> p (normalize_rules_dnf [r])", "by(auto dest: wf_rulesetD simp: wf_ruleset_normalize_rules_dnf)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p [r]\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "with IH Undecided"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n  s = Undecided\n  wf_ruleset \\<gamma> p [r]\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])", "have\n      \"approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) (approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r]) Undecided) = approximating_bigstep_fun \\<gamma> p (r # rs) Undecided\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n  s = Undecided\n  wf_ruleset \\<gamma> p [r]\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs)\n     (approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r])\n       Undecided) =\n    approximating_bigstep_fun \\<gamma> p (r # rs) Undecided", "apply(cases r, rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) s =\n                approximating_bigstep_fun \\<gamma> p rs s;\n        s = Undecided; wf_ruleset \\<gamma> p [r];\n        wf_ruleset \\<gamma> p (normalize_rules_dnf [r]); r = Rule m a;\n        approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs) s =\n        approximating_bigstep_fun \\<gamma> p rs s;\n        s = Undecided; wf_ruleset \\<gamma> p [r];\n        wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (normalize_rules_dnf rs)\n                          (approximating_bigstep_fun \\<gamma> p\n                            (normalize_rules_dnf [r]) Undecided) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))", "apply(case_tac a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Accept\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 2. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Drop\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 3. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Log\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 4. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Reject\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 5. \\<And>m a x5.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 6. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Return\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 7. \\<And>m a x7.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 8. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Empty\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))\n 9. \\<And>m a.\n       \\<lbrakk>approximating_bigstep_fun \\<gamma> p\n                 (normalize_rules_dnf rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p [Rule m a];\n        wf_ruleset \\<gamma> p\n         (map (\\<lambda>m. Rule m a) (normalize_match m));\n        r = Rule m a; s = Undecided; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> (\\<not> matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          approximating_bigstep_fun \\<gamma> p rs\n                           Undecided) \\<and>\n                         (matches \\<gamma> m a p \\<longrightarrow>\n                          approximating_bigstep_fun \\<gamma> p\n                           (normalize_rules_dnf rs)\n                           (approximating_bigstep_fun \\<gamma> p\n                             (map (\\<lambda>m. Rule m a)\n                               (normalize_match m))\n                             Undecided) =\n                          (case a of\n                           Accept \\<Rightarrow> Decision FinalAllow\n                           | Drop \\<Rightarrow> Decision FinalDeny\n                           | Log \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided\n                           | Reject \\<Rightarrow> Decision FinalDeny\n                           | Empty \\<Rightarrow>\n                               approximating_bigstep_fun \\<gamma> p rs\n                                Undecided))", "apply(simp_all add: normalize_match_correct Decision_approximating_bigstep_fun wf_ruleset_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs)\n   (approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r])\n     Undecided) =\n  approximating_bigstep_fun \\<gamma> p (r # rs) Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "hence \"approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s = approximating_bigstep_fun \\<gamma> p (r # rs) s\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs)\n   (approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r])\n     Undecided) =\n  approximating_bigstep_fun \\<gamma> p (r # rs) Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "using Undecided \\<open>wf_ruleset \\<gamma> p [r]\\<close> \\<open>wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\\<close>"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf rs)\n   (approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf [r])\n     Undecided) =\n  approximating_bigstep_fun \\<gamma> p (r # rs) Undecided\n  s = Undecided\n  wf_ruleset \\<gamma> p [r]\n  wf_ruleset \\<gamma> p (normalize_rules_dnf [r])\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "by(simp add: approximating_bigstep_fun_seq_wf)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "using normalize_rules_fst normalize_rules_dnf_def2"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p\n   (normalize_rules_dnf [r] @ normalize_rules_dnf rs) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n  normalize_rules ?f (?r # ?rs) =\n  normalize_rules ?f [?r] @ normalize_rules ?f ?rs\n  normalize_rules_dnf = normalize_rules normalize_match\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n    approximating_bigstep_fun \\<gamma> p (r # rs) s", "by metis"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (normalize_rules_dnf (r # rs)) s =\n  approximating_bigstep_fun \\<gamma> p (r # rs) s\n\ngoal:\nNo subgoals!", "qed"], ["", "fun normalized_nnf_match :: \"'a match_expr \\<Rightarrow> bool\" where\n  \"normalized_nnf_match MatchAny = True\" |\n  \"normalized_nnf_match (Match _ ) = True\" |\n  \"normalized_nnf_match (MatchNot (Match _)) = True\" |\n  \"normalized_nnf_match (MatchAnd m1 m2) = ((normalized_nnf_match m1) \\<and> (normalized_nnf_match m2))\" |\n  \"normalized_nnf_match _ = False\""], ["", "text\\<open>Essentially, @{term normalized_nnf_match} checks for a negation normal form: Only AND is at toplevel, negation only occurs in front of literals.\n Since @{typ \"'a match_expr\"} does not support OR, the result is in conjunction normal form.\n Applying @{const normalize_match}, the reuslt is a list. Essentially, this is the disjunctive normal form.\\<close>"], ["", "lemma normalize_match_already_normalized: \"normalized_nnf_match m \\<Longrightarrow> normalize_match m = [m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow> normalize_match m = [m]", "by(induction m rule: normalize_match.induct) (simp)+"], ["", "lemma normalized_nnf_match_normalize_match: \"\\<forall> m' \\<in> set (normalize_match m). normalized_nnf_match m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m'\\<in>set (normalize_match m). normalized_nnf_match m'", "proof(induction m arbitrary: rule: normalize_match.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny). normalized_nnf_match m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          normalized_nnf_match m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   normalized_nnf_match m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            normalized_nnf_match m'\n 4. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match (MatchNot m1)).\n                   normalized_nnf_match m';\n        \\<forall>m'\\<in>set (normalize_match (MatchNot m2)).\n           normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchNot (MatchAnd m1 m2))).\n                            normalized_nnf_match m'\n 5. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          normalized_nnf_match m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          normalized_nnf_match m'\n 6. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       normalized_nnf_match m'\n 7. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          normalized_nnf_match m'", "case 4"], ["proof (state)\nthis:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m1_)).\n     normalized_nnf_match m'\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m2_)).\n     normalized_nnf_match m'\n\ngoal (7 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny). normalized_nnf_match m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          normalized_nnf_match m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   normalized_nnf_match m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            normalized_nnf_match m'\n 4. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match (MatchNot m1)).\n                   normalized_nnf_match m';\n        \\<forall>m'\\<in>set (normalize_match (MatchNot m2)).\n           normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchNot (MatchAnd m1 m2))).\n                            normalized_nnf_match m'\n 5. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          normalized_nnf_match m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          normalized_nnf_match m'\n 6. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       normalized_nnf_match m'\n 7. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          normalized_nnf_match m'", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m1_)).\n     normalized_nnf_match m'\n  \\<forall>m'\\<in>set (normalize_match (MatchNot m2_)).\n     normalized_nnf_match m'\n\ngoal (1 subgoal):\n 1. \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchAnd m1_ m2_))).\n       normalized_nnf_match m'", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchAnd m1_ m2_))).\n     normalized_nnf_match m'\n\ngoal (6 subgoals):\n 1. \\<forall>m'\\<in>set (normalize_match MatchAny). normalized_nnf_match m'\n 2. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (Match m)).\n          normalized_nnf_match m'\n 3. \\<And>m1 m2.\n       \\<lbrakk>\\<forall>m'\\<in>set (normalize_match m1).\n                   normalized_nnf_match m';\n        \\<And>x.\n           x \\<in> set (normalize_match m1) \\<Longrightarrow>\n           \\<forall>m'\\<in>set (normalize_match m2).\n              normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m'\\<in>set\n    (normalize_match (MatchAnd m1 m2)).\n                            normalized_nnf_match m'\n 4. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match m).\n          normalized_nnf_match m' \\<Longrightarrow>\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (MatchNot m))).\n          normalized_nnf_match m'\n 5. \\<forall>m'\\<in>set (normalize_match (MatchNot MatchAny)).\n       normalized_nnf_match m'\n 6. \\<And>m.\n       \\<forall>m'\\<in>set (normalize_match (MatchNot (Match m))).\n          normalized_nnf_match m'", "qed (simp_all)"], ["", "lemma normalized_nnf_match_MatchNot_D: \"normalized_nnf_match (MatchNot m) \\<Longrightarrow> normalized_nnf_match m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match (MatchNot m) \\<Longrightarrow>\n    normalized_nnf_match m", "by(induction m) (simp_all)"], ["", "text\\<open>Example\\<close>"], ["", "lemma \"normalize_match (MatchNot (MatchAnd (Match ip_src) (Match tcp))) = [MatchNot (Match ip_src), MatchNot (Match tcp)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalize_match (MatchNot (MatchAnd (Match ip_src) (Match tcp))) =\n    [MatchNot (Match ip_src), MatchNot (Match tcp)]", "by simp"], ["", "subsection\\<open>Functions which preserve @{const normalized_nnf_match}\\<close>"], ["", "lemma optimize_matches_option_normalized_nnf_match: \"(\\<And> r. r \\<in> set rs \\<Longrightarrow> normalized_nnf_match (get_match r)) \\<Longrightarrow>\n     (\\<And>m m'. normalized_nnf_match m \\<Longrightarrow> f m = Some m' \\<Longrightarrow> normalized_nnf_match m') \\<Longrightarrow>\n      \\<forall> r \\<in> set (optimize_matches_option f rs). normalized_nnf_match (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r.\n                r \\<in> set rs \\<Longrightarrow>\n                normalized_nnf_match (get_match r);\n     \\<And>m m'.\n        \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f rs).\n                         normalized_nnf_match (get_match r)", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>r.\n                r \\<in> set [] \\<Longrightarrow>\n                normalized_nnf_match (get_match r);\n     \\<And>m m'.\n        \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f []).\n                         normalized_nnf_match (get_match r)\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "case Nil"], ["proof (state)\nthis:\n  ?r \\<in> set [] \\<Longrightarrow> normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>r.\n                r \\<in> set [] \\<Longrightarrow>\n                normalized_nnf_match (get_match r);\n     \\<And>m m'.\n        \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f []).\n                         normalized_nnf_match (get_match r)\n 2. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "thus ?case"], ["proof (prove)\nusing this:\n  ?r \\<in> set [] \\<Longrightarrow> normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches_option f []).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches_option f []).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "case (Cons r rs)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>r.\n              r \\<in> set rs \\<Longrightarrow>\n              normalized_nnf_match (get_match r);\n   \\<And>m m'.\n      \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f rs).\n                       normalized_nnf_match (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "from Cons.IH Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>r.\n              r \\<in> set rs \\<Longrightarrow>\n              normalized_nnf_match (get_match r);\n   \\<And>m m'.\n      \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f rs).\n                       normalized_nnf_match (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'", "have IH: \"\\<forall>r\\<in>set (optimize_matches_option f rs). normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>r.\n              r \\<in> set rs \\<Longrightarrow>\n              normalized_nnf_match (get_match r);\n   \\<And>m m'.\n      \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f rs).\n                       normalized_nnf_match (get_match r)\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches_option f rs).\n       normalized_nnf_match (get_match r)", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches_option f rs).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "from Cons.prems"], ["proof (chain)\npicking this:\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'", "have \"\\<forall>r\\<in>set (optimize_matches_option f [r]). normalized_nnf_match (get_match r)\""], ["proof (prove)\nusing this:\n  ?r \\<in> set (r # rs) \\<Longrightarrow>\n  normalized_nnf_match (get_match ?r)\n  \\<lbrakk>normalized_nnf_match ?m; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> normalized_nnf_match ?m'\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches_option f [r]).\n       normalized_nnf_match (get_match r)", "apply(cases r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>ra.\n                   ra \\<in> set (r # rs) \\<Longrightarrow>\n                   normalized_nnf_match (get_match ra);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m';\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches_option f [r]).\n                            normalized_nnf_match (get_match r)", "apply(simp split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>r.\n                   r = Rule x1 x2 \\<or> r \\<in> set rs \\<Longrightarrow>\n                   normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m';\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            f x1 = Some x2 \\<longrightarrow>\n                            normalized_nnf_match x2", "by force"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches_option f [r]).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "(*1s*)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches_option f [r]).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<lbrakk>\\<And>r.\n                            r \\<in> set rs \\<Longrightarrow>\n                            normalized_nnf_match (get_match r);\n                 \\<And>m m'.\n                    \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n                    \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n                \\<Longrightarrow> \\<forall>r\n     \\<in>set (optimize_matches_option f rs).\n                                     normalized_nnf_match (get_match r);\n        \\<And>r.\n           r \\<in> set (a # rs) \\<Longrightarrow>\n           normalized_nnf_match (get_match r);\n        \\<And>m m'.\n           \\<lbrakk>normalized_nnf_match m; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> normalized_nnf_match m'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (optimize_matches_option f (a # rs)).\n                            normalized_nnf_match (get_match r)", "with IH"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (optimize_matches_option f rs).\n     normalized_nnf_match (get_match r)\n  \\<forall>r\\<in>set (optimize_matches_option f [r]).\n     normalized_nnf_match (get_match r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (optimize_matches_option f rs).\n     normalized_nnf_match (get_match r)\n  \\<forall>r\\<in>set (optimize_matches_option f [r]).\n     normalized_nnf_match (get_match r)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (optimize_matches_option f (r # rs)).\n       normalized_nnf_match (get_match r)", "by(cases r, simp split: option.split_asm)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (optimize_matches_option f (r # rs)).\n     normalized_nnf_match (get_match r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma optimize_matches_normalized_nnf_match: \"\\<lbrakk>\\<forall> r \\<in> set rs. normalized_nnf_match (get_match r); \\<forall>m. normalized_nnf_match m \\<longrightarrow> normalized_nnf_match (f m) \\<rbrakk> \\<Longrightarrow>\n      \\<forall> r \\<in> set (optimize_matches f rs). normalized_nnf_match (get_match r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n     \\<forall>m.\n        normalized_nnf_match m \\<longrightarrow>\n        normalized_nnf_match (f m)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set (optimize_matches f rs).\n                         normalized_nnf_match (get_match r)", "unfolding optimize_matches_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n     \\<forall>m.\n        normalized_nnf_match m \\<longrightarrow>\n        normalized_nnf_match (f m)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set\n(optimize_matches_option\n  (\\<lambda>m. if matcheq_matchNone (f m) then None else Some (f m)) rs).\n                         normalized_nnf_match (get_match r)", "apply(rule optimize_matches_option_normalized_nnf_match)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r.\n       \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n        \\<forall>m.\n           normalized_nnf_match m \\<longrightarrow>\n           normalized_nnf_match (f m);\n        r \\<in> set rs\\<rbrakk>\n       \\<Longrightarrow> normalized_nnf_match (get_match r)\n 2. \\<And>m m'.\n       \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n        \\<forall>m.\n           normalized_nnf_match m \\<longrightarrow>\n           normalized_nnf_match (f m);\n        normalized_nnf_match m;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        Some m'\\<rbrakk>\n       \\<Longrightarrow> normalized_nnf_match m'", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n        \\<forall>m.\n           normalized_nnf_match m \\<longrightarrow>\n           normalized_nnf_match (f m);\n        normalized_nnf_match m;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        Some m'\\<rbrakk>\n       \\<Longrightarrow> normalized_nnf_match m'", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       \\<lbrakk>\\<forall>r\\<in>set rs. normalized_nnf_match (get_match r);\n        \\<forall>m.\n           normalized_nnf_match m \\<longrightarrow>\n           normalized_nnf_match (f m);\n        normalized_nnf_match m; \\<not> matcheq_matchNone m';\n        f m = m'\\<rbrakk>\n       \\<Longrightarrow> normalized_nnf_match m'", "by blast"], ["", "lemma normalize_rules_dnf_normalized_nnf_match: \"\\<forall>x \\<in> set (normalize_rules_dnf rs). normalized_nnf_match (get_match x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf rs).\n       normalized_nnf_match (get_match x)", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf []).\n       normalized_nnf_match (get_match x)\n 2. \\<And>a rs.\n       \\<forall>x\\<in>set (normalize_rules_dnf rs).\n          normalized_nnf_match (get_match x) \\<Longrightarrow>\n       \\<forall>x\\<in>set (normalize_rules_dnf (a # rs)).\n          normalized_nnf_match (get_match x)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf []).\n       normalized_nnf_match (get_match x)\n 2. \\<And>a rs.\n       \\<forall>x\\<in>set (normalize_rules_dnf rs).\n          normalized_nnf_match (get_match x) \\<Longrightarrow>\n       \\<forall>x\\<in>set (normalize_rules_dnf (a # rs)).\n          normalized_nnf_match (get_match x)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf []).\n       normalized_nnf_match (get_match x)", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (normalize_rules_dnf []).\n     normalized_nnf_match (get_match x)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<forall>x\\<in>set (normalize_rules_dnf rs).\n          normalized_nnf_match (get_match x) \\<Longrightarrow>\n       \\<forall>x\\<in>set (normalize_rules_dnf (a # rs)).\n          normalized_nnf_match (get_match x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<forall>x\\<in>set (normalize_rules_dnf rs).\n          normalized_nnf_match (get_match x) \\<Longrightarrow>\n       \\<forall>x\\<in>set (normalize_rules_dnf (a # rs)).\n          normalized_nnf_match (get_match x)", "case (Cons r rs)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (normalize_rules_dnf rs).\n     normalized_nnf_match (get_match x)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<forall>x\\<in>set (normalize_rules_dnf rs).\n          normalized_nnf_match (get_match x) \\<Longrightarrow>\n       \\<forall>x\\<in>set (normalize_rules_dnf (a # rs)).\n          normalized_nnf_match (get_match x)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (normalize_rules_dnf rs).\n     normalized_nnf_match (get_match x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf (r # rs)).\n       normalized_nnf_match (get_match x)", "using normalized_nnf_match_normalize_match"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (normalize_rules_dnf rs).\n     normalized_nnf_match (get_match x)\n  \\<forall>m'\\<in>set (normalize_match ?m). normalized_nnf_match m'\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (normalize_rules_dnf (r # rs)).\n       normalized_nnf_match (get_match x)", "by(cases r) fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (normalize_rules_dnf (r # rs)).\n     normalized_nnf_match (get_match x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}