{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Negation_Type_Matching.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma normalized_nnf_match_alist_and: \"normalized_nnf_match (alist_and as)\"", "lemma alist_and_append: \"matches \\<gamma> (alist_and (l1 @ l2)) a p \\<longleftrightarrow> matches \\<gamma>  (MatchAnd (alist_and l1)  (alist_and l2)) a p\"", "lemma alist_and': \"matches (\\<gamma>, \\<alpha>) (alist_and' as) = matches (\\<gamma>, \\<alpha>) (alist_and as)\"", "lemma normalized_nnf_match_alist_and': \"normalized_nnf_match (alist_and' as)\"", "lemma matches_alist_and_alist_and':\n    \"matches \\<gamma> (alist_and' ls) a p \\<longleftrightarrow> matches \\<gamma> (alist_and ls) a p\"", "lemma alist_and'_append: \"matches \\<gamma> (alist_and' (l1 @ l2)) a p \\<longleftrightarrow> matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a p\"", "lemma alist_and_NegPos_map_getNeg_getPos_matches: \n  \"(\\<forall>m\\<in>set (getNeg spts). matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n   (\\<forall>m\\<in>set (getPos spts). matches \\<gamma> (Match (C m)) a p)\n    \\<longleftrightarrow>\n    matches \\<gamma> (alist_and (NegPos_map C spts)) a p\"", "lemma alist_and_negation_type_to_match_expr_f_matches:\n    \"matches \\<gamma> (alist_and (NegPos_map C spts)) a p \\<longleftrightarrow>\n        (\\<forall>m\\<in>set spts. matches \\<gamma> (negation_type_to_match_expr_f C m) a p)\"", "lemma negation_type_to_match_expr_simps:\n  \"negation_type_to_match_expr (Pos e) = (Match e)\"\n  \"negation_type_to_match_expr (Neg e) = (MatchNot (Match e))\"", "lemma alist_and_negation_type_to_match_expr: \"alist_and (n#es) =  MatchAnd (negation_type_to_match_expr n) (alist_and es)\"", "lemma \"normalized_nnf_match m \\<Longrightarrow> matches \\<gamma> (alist_and (to_negation_type_nnf m)) a p  = matches \\<gamma> m a p\"", "lemma nt_match_list_matches: \"nt_match_list \\<gamma> a p l \\<longleftrightarrow> matches \\<gamma> (alist_and l) a p\"", "lemma nt_match_list_simp: \"nt_match_list \\<gamma> a p ms \\<longleftrightarrow> \n      (\\<forall>m \\<in> set (getPos ms). matches \\<gamma> (Match m) a p) \\<and> (\\<forall>m \\<in> set (getNeg ms). matches \\<gamma> (MatchNot (Match m)) a p)\"", "lemma matches_alist_and: \"matches \\<gamma> (alist_and l) a p \\<longleftrightarrow> (\\<forall>m \\<in> set (getPos l). matches \\<gamma> (Match m) a p) \\<and> (\\<forall>m \\<in> set (getNeg l). matches \\<gamma> (MatchNot (Match m)) a p)\""], "translations": [["", "lemma normalized_nnf_match_alist_and: \"normalized_nnf_match (alist_and as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match (alist_and as)", "by(induction as rule: alist_and.induct) simp_all"], ["", "lemma alist_and_append: \"matches \\<gamma> (alist_and (l1 @ l2)) a p \\<longleftrightarrow> matches \\<gamma>  (MatchAnd (alist_and l1)  (alist_and l2)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and (l1 @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a p", "proof(induction l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> (alist_and ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and []) (alist_and l2)) a p\n 2. \\<And>aa l1.\n       matches \\<gamma> (alist_and (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and (aa # l1)) (alist_and l2)) a p", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. matches \\<gamma> (alist_and ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and []) (alist_and l2)) a p\n 2. \\<And>aa l1.\n       matches \\<gamma> (alist_and (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and (aa # l1)) (alist_and l2)) a p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and []) (alist_and l2)) a p", "by (simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and ([] @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and []) (alist_and l2)) a p\n\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and (aa # l1)) (alist_and l2)) a p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and (aa # l1)) (alist_and l2)) a p", "case (Cons l l1)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and (l1 @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a p\n\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and (aa # l1)) (alist_and l2)) a p", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> (alist_and (l1 @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and l1) (alist_and l2)) a p\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and ((l # l1) @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and (l # l1)) (alist_and l2)) a p", "by (cases l) (simp_all add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and ((l # l1) @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and (l # l1)) (alist_and l2)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>This version of @{const alist_and} avoids the trailing @{const MatchAny}. Only intended for code.\\<close>"], ["", "fun alist_and' :: \"'a negation_type list \\<Rightarrow> 'a match_expr\" where\n    \"alist_and' [] = MatchAny\" |\n    \"alist_and' [Pos e] = Match e\" |\n    \"alist_and' [Neg e] = MatchNot (Match e)\"|\n    \"alist_and' ((Pos e)#es) = MatchAnd (Match e) (alist_and' es)\" |\n    \"alist_and' ((Neg e)#es) = MatchAnd (MatchNot (Match e)) (alist_and' es)\""], ["", "lemma alist_and': \"matches (\\<gamma>, \\<alpha>) (alist_and' as) = matches (\\<gamma>, \\<alpha>) (alist_and as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (\\<gamma>, \\<alpha>) (alist_and' as) =\n    matches (\\<gamma>, \\<alpha>) (alist_and as)", "by(induction as rule: alist_and'.induct) (simp_all add: bunch_of_lemmata_about_matches)"], ["", "lemma normalized_nnf_match_alist_and': \"normalized_nnf_match (alist_and' as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match (alist_and' as)", "by(induction as rule: alist_and'.induct) simp_all"], ["", "lemma matches_alist_and_alist_and':\n    \"matches \\<gamma> (alist_and' ls) a p \\<longleftrightarrow> matches \\<gamma> (alist_and ls) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and' ls) a p =\n    matches \\<gamma> (alist_and ls) a p", "apply(induction ls rule: alist_and'.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. matches \\<gamma> (alist_and' []) a p =\n    matches \\<gamma> (alist_and []) a p\n 2. \\<And>e.\n       matches \\<gamma> (alist_and' [Pos e]) a p =\n       matches \\<gamma> (alist_and [Pos e]) a p\n 3. \\<And>e.\n       matches \\<gamma> (alist_and' [Neg e]) a p =\n       matches \\<gamma> (alist_and [Neg e]) a p\n 4. \\<And>e v va.\n       matches \\<gamma> (alist_and' (v # va)) a p =\n       matches \\<gamma> (alist_and (v # va)) a p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' (Pos e # v # va)) a p =\n       matches \\<gamma> (alist_and (Pos e # v # va)) a p\n 5. \\<And>e v va.\n       matches \\<gamma> (alist_and' (v # va)) a p =\n       matches \\<gamma> (alist_and (v # va)) a p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' (Neg e # v # va)) a p =\n       matches \\<gamma> (alist_and (Neg e # v # va)) a p", "by(simp add: bunch_of_lemmata_about_matches)+"], ["", "lemma alist_and'_append: \"matches \\<gamma> (alist_and' (l1 @ l2)) a p \\<longleftrightarrow> matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a p", "proof(induction l1)"], ["proof (state)\ngoal (2 subgoals):\n 1. matches \\<gamma> (alist_and' ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and' []) (alist_and' l2)) a p\n 2. \\<And>aa l1.\n       matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' (aa # l1)) (alist_and' l2)) a\n        p", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. matches \\<gamma> (alist_and' ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and' []) (alist_and' l2)) a p\n 2. \\<And>aa l1.\n       matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' (aa # l1)) (alist_and' l2)) a\n        p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and' ([] @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and' []) (alist_and' l2)) a p", "by (simp add: bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and' ([] @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and' []) (alist_and' l2)) a p\n\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' (aa # l1)) (alist_and' l2)) a\n        p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' (aa # l1)) (alist_and' l2)) a\n        p", "case (Cons l l1)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a p\n\ngoal (1 subgoal):\n 1. \\<And>aa l1.\n       matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a\n        p \\<Longrightarrow>\n       matches \\<gamma> (alist_and' ((aa # l1) @ l2)) a p =\n       matches \\<gamma> (MatchAnd (alist_and' (aa # l1)) (alist_and' l2)) a\n        p", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2)) a p\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and' ((l # l1) @ l2)) a p =\n    matches \\<gamma> (MatchAnd (alist_and' (l # l1)) (alist_and' l2)) a p", "apply (cases l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n                matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2))\n                 a p;\n        l = Pos x1\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (alist_and' ((l # l1) @ l2)) a p =\n                         matches \\<gamma>\n                          (MatchAnd (alist_and' (l # l1)) (alist_and' l2)) a\n                          p\n 2. \\<And>x2.\n       \\<lbrakk>matches \\<gamma> (alist_and' (l1 @ l2)) a p =\n                matches \\<gamma> (MatchAnd (alist_and' l1) (alist_and' l2))\n                 a p;\n        l = Neg x2\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> (alist_and' ((l # l1) @ l2)) a p =\n                         matches \\<gamma>\n                          (MatchAnd (alist_and' (l # l1)) (alist_and' l2)) a\n                          p", "by(simp_all add: matches_alist_and_alist_and' bunch_of_lemmata_about_matches)"], ["proof (state)\nthis:\n  matches \\<gamma> (alist_and' ((l # l1) @ l2)) a p =\n  matches \\<gamma> (MatchAnd (alist_and' (l # l1)) (alist_and' l2)) a p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alist_and_NegPos_map_getNeg_getPos_matches: \n  \"(\\<forall>m\\<in>set (getNeg spts). matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n   (\\<forall>m\\<in>set (getPos spts). matches \\<gamma> (Match (C m)) a p)\n    \\<longleftrightarrow>\n    matches \\<gamma> (alist_and (NegPos_map C spts)) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>m\\<in>set (getNeg spts).\n         matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n     (\\<forall>m\\<in>set (getPos spts).\n         matches \\<gamma> (Match (C m)) a p)) =\n    matches \\<gamma> (alist_and (NegPos_map C spts)) a p", "proof(induction spts rule: alist_and.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. ((\\<forall>m\\<in>set (getNeg []).\n         matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n     (\\<forall>m\\<in>set (getPos []). matches \\<gamma> (Match (C m)) a p)) =\n    matches \\<gamma> (alist_and (NegPos_map C [])) a p\n 2. \\<And>e es.\n       ((\\<forall>m\\<in>set (getNeg es).\n            matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n        (\\<forall>m\\<in>set (getPos es).\n            matches \\<gamma> (Match (C m)) a p)) =\n       matches \\<gamma> (alist_and (NegPos_map C es)) a p \\<Longrightarrow>\n       ((\\<forall>m\\<in>set (getNeg (Pos e # es)).\n            matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n        (\\<forall>m\\<in>set (getPos (Pos e # es)).\n            matches \\<gamma> (Match (C m)) a p)) =\n       matches \\<gamma> (alist_and (NegPos_map C (Pos e # es))) a p\n 3. \\<And>e es.\n       ((\\<forall>m\\<in>set (getNeg es).\n            matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n        (\\<forall>m\\<in>set (getPos es).\n            matches \\<gamma> (Match (C m)) a p)) =\n       matches \\<gamma> (alist_and (NegPos_map C es)) a p \\<Longrightarrow>\n       ((\\<forall>m\\<in>set (getNeg (Neg e # es)).\n            matches \\<gamma> (MatchNot (Match (C m))) a p) \\<and>\n        (\\<forall>m\\<in>set (getPos (Neg e # es)).\n            matches \\<gamma> (Match (C m)) a p)) =\n       matches \\<gamma> (alist_and (NegPos_map C (Neg e # es))) a p", "qed(auto simp add: bunch_of_lemmata_about_matches)"], ["", "fun negation_type_to_match_expr_f :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a negation_type \\<Rightarrow> 'b match_expr\" where\n  \"negation_type_to_match_expr_f f (Pos a) = Match (f a)\" |\n  \"negation_type_to_match_expr_f f (Neg a) = MatchNot (Match (f a))\""], ["", "lemma alist_and_negation_type_to_match_expr_f_matches:\n    \"matches \\<gamma> (alist_and (NegPos_map C spts)) a p \\<longleftrightarrow>\n        (\\<forall>m\\<in>set spts. matches \\<gamma> (negation_type_to_match_expr_f C m) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and (NegPos_map C spts)) a p =\n    (\\<forall>m\\<in>set spts.\n        matches \\<gamma> (negation_type_to_match_expr_f C m) a p)", "proof(induction spts rule: alist_and.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. matches \\<gamma> (alist_and (NegPos_map C [])) a p =\n    (\\<forall>m\\<in>set [].\n        matches \\<gamma> (negation_type_to_match_expr_f C m) a p)\n 2. \\<And>e es.\n       matches \\<gamma> (alist_and (NegPos_map C es)) a p =\n       (\\<forall>m\\<in>set es.\n           matches \\<gamma> (negation_type_to_match_expr_f C m) a\n            p) \\<Longrightarrow>\n       matches \\<gamma> (alist_and (NegPos_map C (Pos e # es))) a p =\n       (\\<forall>m\\<in>set (Pos e # es).\n           matches \\<gamma> (negation_type_to_match_expr_f C m) a p)\n 3. \\<And>e es.\n       matches \\<gamma> (alist_and (NegPos_map C es)) a p =\n       (\\<forall>m\\<in>set es.\n           matches \\<gamma> (negation_type_to_match_expr_f C m) a\n            p) \\<Longrightarrow>\n       matches \\<gamma> (alist_and (NegPos_map C (Neg e # es))) a p =\n       (\\<forall>m\\<in>set (Neg e # es).\n           matches \\<gamma> (negation_type_to_match_expr_f C m) a p)", "qed(auto simp add: bunch_of_lemmata_about_matches)"], ["", "definition negation_type_to_match_expr :: \"'a negation_type \\<Rightarrow> 'a match_expr\" where\n  \"negation_type_to_match_expr m \\<equiv> negation_type_to_match_expr_f id m\""], ["", "lemma negation_type_to_match_expr_simps:\n  \"negation_type_to_match_expr (Pos e) = (Match e)\"\n  \"negation_type_to_match_expr (Neg e) = (MatchNot (Match e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. negation_type_to_match_expr (Pos e) = Match e &&&\n    negation_type_to_match_expr (Neg e) = MatchNot (Match e)", "by(simp_all add: negation_type_to_match_expr_def)"], ["", "lemma alist_and_negation_type_to_match_expr: \"alist_and (n#es) =  MatchAnd (negation_type_to_match_expr n) (alist_and es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alist_and (n # es) =\n    MatchAnd (negation_type_to_match_expr n) (alist_and es)", "by(cases n, simp_all add: negation_type_to_match_expr_simps)"], ["", "fun to_negation_type_nnf :: \"'a match_expr \\<Rightarrow> 'a negation_type list\" where\n \"to_negation_type_nnf MatchAny = []\" |\n \"to_negation_type_nnf (Match a) = [Pos a]\" |\n \"to_negation_type_nnf (MatchNot (Match a)) = [Neg a]\" |\n \"to_negation_type_nnf (MatchAnd a b) = (to_negation_type_nnf a) @ (to_negation_type_nnf b)\" |\n \"to_negation_type_nnf _ = undefined\""], ["", "lemma \"normalized_nnf_match m \\<Longrightarrow> matches \\<gamma> (alist_and (to_negation_type_nnf m)) a p  = matches \\<gamma> m a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normalized_nnf_match m \\<Longrightarrow>\n    matches \\<gamma> (alist_and (to_negation_type_nnf m)) a p =\n    matches \\<gamma> m a p", "proof(induction m rule: to_negation_type_nnf.induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. normalized_nnf_match MatchAny \\<Longrightarrow>\n    matches \\<gamma> (alist_and (to_negation_type_nnf MatchAny)) a p =\n    matches \\<gamma> MatchAny a p\n 2. \\<And>aa.\n       normalized_nnf_match (Match aa) \\<Longrightarrow>\n       matches \\<gamma> (alist_and (to_negation_type_nnf (Match aa))) a p =\n       matches \\<gamma> (Match aa) a p\n 3. \\<And>aa.\n       normalized_nnf_match (MatchNot (Match aa)) \\<Longrightarrow>\n       matches \\<gamma>\n        (alist_and (to_negation_type_nnf (MatchNot (Match aa)))) a p =\n       matches \\<gamma> (MatchNot (Match aa)) a p\n 4. \\<And>aa b.\n       \\<lbrakk>normalized_nnf_match aa \\<Longrightarrow>\n                matches \\<gamma> (alist_and (to_negation_type_nnf aa)) a p =\n                matches \\<gamma> aa a p;\n        normalized_nnf_match b \\<Longrightarrow>\n        matches \\<gamma> (alist_and (to_negation_type_nnf b)) a p =\n        matches \\<gamma> b a p;\n        normalized_nnf_match (MatchAnd aa b)\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma>\n                          (alist_and (to_negation_type_nnf (MatchAnd aa b)))\n                          a p =\n                         matches \\<gamma> (MatchAnd aa b) a p\n 5. \\<And>va.\n       normalized_nnf_match (MatchNot (MatchNot va)) \\<Longrightarrow>\n       matches \\<gamma>\n        (alist_and (to_negation_type_nnf (MatchNot (MatchNot va)))) a p =\n       matches \\<gamma> (MatchNot (MatchNot va)) a p\n 6. \\<And>va vb.\n       normalized_nnf_match (MatchNot (MatchAnd va vb)) \\<Longrightarrow>\n       matches \\<gamma>\n        (alist_and (to_negation_type_nnf (MatchNot (MatchAnd va vb)))) a p =\n       matches \\<gamma> (MatchNot (MatchAnd va vb)) a p\n 7. normalized_nnf_match (MatchNot MatchAny) \\<Longrightarrow>\n    matches \\<gamma> (alist_and (to_negation_type_nnf (MatchNot MatchAny)))\n     a p =\n    matches \\<gamma> (MatchNot MatchAny) a p", "qed(simp_all add: bunch_of_lemmata_about_matches alist_and_append)"], ["", "text\\<open>Isolating the matching semantics\\<close>"], ["", "fun nt_match_list :: \"('a, 'packet) match_tac \\<Rightarrow> action \\<Rightarrow> 'packet \\<Rightarrow> 'a negation_type list \\<Rightarrow> bool\" where\n  \"nt_match_list _ _ _ [] = True\" |\n  \"nt_match_list \\<gamma> a p ((Pos x)#xs) \\<longleftrightarrow> matches \\<gamma> (Match x) a p \\<and> nt_match_list \\<gamma> a p xs\" |\n  \"nt_match_list \\<gamma> a p ((Neg x)#xs) \\<longleftrightarrow> matches \\<gamma> (MatchNot (Match x)) a p \\<and> nt_match_list \\<gamma> a p xs\""], ["", "lemma nt_match_list_matches: \"nt_match_list \\<gamma> a p l \\<longleftrightarrow> matches \\<gamma> (alist_and l) a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nt_match_list \\<gamma> a p l = matches \\<gamma> (alist_and l) a p", "apply(induction l rule: alist_and.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. nt_match_list \\<gamma> a p [] = matches \\<gamma> (alist_and []) a p\n 2. \\<And>e es.\n       nt_match_list \\<gamma> a p es =\n       matches \\<gamma> (alist_and es) a p \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Pos e # es) =\n       matches \\<gamma> (alist_and (Pos e # es)) a p\n 3. \\<And>e es.\n       nt_match_list \\<gamma> a p es =\n       matches \\<gamma> (alist_and es) a p \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Neg e # es) =\n       matches \\<gamma> (alist_and (Neg e # es)) a p", "apply(case_tac [!] \\<gamma>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<gamma> = (aa, b) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p [] = matches \\<gamma> (alist_and []) a p\n 2. \\<And>e es aa b.\n       \\<lbrakk>nt_match_list \\<gamma> a p es =\n                matches \\<gamma> (alist_and es) a p;\n        \\<gamma> = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> nt_match_list \\<gamma> a p (Pos e # es) =\n                         matches \\<gamma> (alist_and (Pos e # es)) a p\n 3. \\<And>e es aa b.\n       \\<lbrakk>nt_match_list \\<gamma> a p es =\n                matches \\<gamma> (alist_and es) a p;\n        \\<gamma> = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> nt_match_list \\<gamma> a p (Neg e # es) =\n                         matches \\<gamma> (alist_and (Neg e # es)) a p", "apply(simp_all add: bunch_of_lemmata_about_matches)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nt_match_list_simp: \"nt_match_list \\<gamma> a p ms \\<longleftrightarrow> \n      (\\<forall>m \\<in> set (getPos ms). matches \\<gamma> (Match m) a p) \\<and> (\\<forall>m \\<in> set (getNeg ms). matches \\<gamma> (MatchNot (Match m)) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nt_match_list \\<gamma> a p ms =\n    ((\\<forall>m\\<in>set (getPos ms). matches \\<gamma> (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg ms).\n         matches \\<gamma> (MatchNot (Match m)) a p))", "proof(induction \\<gamma> a p ms rule: nt_match_list.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ uw_.\n       nt_match_list uu_ uv_ uw_ [] =\n       ((\\<forall>m\\<in>set (getPos []).\n            matches uu_ (Match m) uv_ uw_) \\<and>\n        (\\<forall>m\\<in>set (getNeg []).\n            matches uu_ (MatchNot (Match m)) uv_ uw_))\n 2. \\<And>\\<gamma> a p x xs.\n       nt_match_list \\<gamma> a p xs =\n       ((\\<forall>m\\<in>set (getPos xs).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg xs).\n            matches \\<gamma> (MatchNot (Match m)) a p)) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Pos x # xs) =\n       ((\\<forall>m\\<in>set (getPos (Pos x # xs)).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg (Pos x # xs)).\n            matches \\<gamma> (MatchNot (Match m)) a p))\n 3. \\<And>\\<gamma> a p x xs.\n       nt_match_list \\<gamma> a p xs =\n       ((\\<forall>m\\<in>set (getPos xs).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg xs).\n            matches \\<gamma> (MatchNot (Match m)) a p)) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Neg x # xs) =\n       ((\\<forall>m\\<in>set (getPos (Neg x # xs)).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg (Neg x # xs)).\n            matches \\<gamma> (MatchNot (Match m)) a p))", "case 3"], ["proof (state)\nthis:\n  nt_match_list \\<gamma>_ a_ p_ xs_ =\n  ((\\<forall>m\\<in>set (getPos xs_).\n       matches \\<gamma>_ (Match m) a_ p_) \\<and>\n   (\\<forall>m\\<in>set (getNeg xs_).\n       matches \\<gamma>_ (MatchNot (Match m)) a_ p_))\n\ngoal (3 subgoals):\n 1. \\<And>uu_ uv_ uw_.\n       nt_match_list uu_ uv_ uw_ [] =\n       ((\\<forall>m\\<in>set (getPos []).\n            matches uu_ (Match m) uv_ uw_) \\<and>\n        (\\<forall>m\\<in>set (getNeg []).\n            matches uu_ (MatchNot (Match m)) uv_ uw_))\n 2. \\<And>\\<gamma> a p x xs.\n       nt_match_list \\<gamma> a p xs =\n       ((\\<forall>m\\<in>set (getPos xs).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg xs).\n            matches \\<gamma> (MatchNot (Match m)) a p)) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Pos x # xs) =\n       ((\\<forall>m\\<in>set (getPos (Pos x # xs)).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg (Pos x # xs)).\n            matches \\<gamma> (MatchNot (Match m)) a p))\n 3. \\<And>\\<gamma> a p x xs.\n       nt_match_list \\<gamma> a p xs =\n       ((\\<forall>m\\<in>set (getPos xs).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg xs).\n            matches \\<gamma> (MatchNot (Match m)) a p)) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Neg x # xs) =\n       ((\\<forall>m\\<in>set (getPos (Neg x # xs)).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg (Neg x # xs)).\n            matches \\<gamma> (MatchNot (Match m)) a p))", "thus ?case"], ["proof (prove)\nusing this:\n  nt_match_list \\<gamma>_ a_ p_ xs_ =\n  ((\\<forall>m\\<in>set (getPos xs_).\n       matches \\<gamma>_ (Match m) a_ p_) \\<and>\n   (\\<forall>m\\<in>set (getNeg xs_).\n       matches \\<gamma>_ (MatchNot (Match m)) a_ p_))\n\ngoal (1 subgoal):\n 1. nt_match_list \\<gamma>_ a_ p_ (Neg x_ # xs_) =\n    ((\\<forall>m\\<in>set (getPos (Neg x_ # xs_)).\n         matches \\<gamma>_ (Match m) a_ p_) \\<and>\n     (\\<forall>m\\<in>set (getNeg (Neg x_ # xs_)).\n         matches \\<gamma>_ (MatchNot (Match m)) a_ p_))", "by fastforce"], ["proof (state)\nthis:\n  nt_match_list \\<gamma>_ a_ p_ (Neg x_ # xs_) =\n  ((\\<forall>m\\<in>set (getPos (Neg x_ # xs_)).\n       matches \\<gamma>_ (Match m) a_ p_) \\<and>\n   (\\<forall>m\\<in>set (getNeg (Neg x_ # xs_)).\n       matches \\<gamma>_ (MatchNot (Match m)) a_ p_))\n\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_ uw_.\n       nt_match_list uu_ uv_ uw_ [] =\n       ((\\<forall>m\\<in>set (getPos []).\n            matches uu_ (Match m) uv_ uw_) \\<and>\n        (\\<forall>m\\<in>set (getNeg []).\n            matches uu_ (MatchNot (Match m)) uv_ uw_))\n 2. \\<And>\\<gamma> a p x xs.\n       nt_match_list \\<gamma> a p xs =\n       ((\\<forall>m\\<in>set (getPos xs).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg xs).\n            matches \\<gamma> (MatchNot (Match m)) a p)) \\<Longrightarrow>\n       nt_match_list \\<gamma> a p (Pos x # xs) =\n       ((\\<forall>m\\<in>set (getPos (Pos x # xs)).\n            matches \\<gamma> (Match m) a p) \\<and>\n        (\\<forall>m\\<in>set (getNeg (Pos x # xs)).\n            matches \\<gamma> (MatchNot (Match m)) a p))", "qed(simp_all)"], ["", "lemma matches_alist_and: \"matches \\<gamma> (alist_and l) a p \\<longleftrightarrow> (\\<forall>m \\<in> set (getPos l). matches \\<gamma> (Match m) a p) \\<and> (\\<forall>m \\<in> set (getNeg l). matches \\<gamma> (MatchNot (Match m)) a p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and l) a p =\n    ((\\<forall>m\\<in>set (getPos l). matches \\<gamma> (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg l).\n         matches \\<gamma> (MatchNot (Match m)) a p))", "using nt_match_list_matches nt_match_list_simp"], ["proof (prove)\nusing this:\n  nt_match_list ?\\<gamma> ?a ?p ?l = matches ?\\<gamma> (alist_and ?l) ?a ?p\n  nt_match_list ?\\<gamma> ?a ?p ?ms =\n  ((\\<forall>m\\<in>set (getPos ?ms).\n       matches ?\\<gamma> (Match m) ?a ?p) \\<and>\n   (\\<forall>m\\<in>set (getNeg ?ms).\n       matches ?\\<gamma> (MatchNot (Match m)) ?a ?p))\n\ngoal (1 subgoal):\n 1. matches \\<gamma> (alist_and l) a p =\n    ((\\<forall>m\\<in>set (getPos l). matches \\<gamma> (Match m) a p) \\<and>\n     (\\<forall>m\\<in>set (getNeg l).\n         matches \\<gamma> (MatchNot (Match m)) a p))", "by fast"], ["", "end"]]}