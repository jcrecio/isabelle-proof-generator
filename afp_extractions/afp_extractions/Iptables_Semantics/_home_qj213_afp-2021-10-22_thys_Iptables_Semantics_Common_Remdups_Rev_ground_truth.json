{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Common/Remdups_Rev.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma remdups_append: \"remdups (rs @ rs2) = remdups [r\\<leftarrow>rs . r \\<notin> set rs2] @ remdups rs2\"", "lemma remdups_rev_append: \"remdups_rev (rs @ rs2) = remdups_rev rs @ remdups_rev [r\\<leftarrow>rs2 . r \\<notin> set rs]\"", "lemma remdups_rev_fst:\n  \"remdups_rev (r#rs) = (if r \\<in> set rs then r#remdups_rev (removeAll r rs) else r#remdups_rev rs)\"", "lemma remdups_rev_set: \"set (remdups_rev rs) = set rs\"", "lemma remdups_rev_removeAll: \"remdups_rev (removeAll r rs) = removeAll r (remdups_rev rs)\"", "lemma remdups_rev_code[code_unfold]: \"remdups_rev rs = remdups_rev_code [] rs\""], "translations": [["", "lemma remdups_append: \"remdups (rs @ rs2) = remdups [r\\<leftarrow>rs . r \\<notin> set rs2] @ remdups rs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups (rs @ rs2) =\n    remdups (filter (\\<lambda>r. r \\<notin> set rs2) rs) @ remdups rs2", "by(induction rs arbitrary: rs2) (simp_all)"], ["", "lemma remdups_rev_append: \"remdups_rev (rs @ rs2) = remdups_rev rs @ remdups_rev [r\\<leftarrow>rs2 . r \\<notin> set rs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev (rs @ rs2) =\n    remdups_rev rs @\n    remdups_rev (filter (\\<lambda>r. r \\<notin> set rs) rs2)", "proof(induction rs arbitrary: rs2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rs2.\n       remdups_rev ([] @ rs2) =\n       remdups_rev [] @\n       remdups_rev (filter (\\<lambda>r. r \\<notin> set []) rs2)\n 2. \\<And>a rs rs2.\n       (\\<And>rs2.\n           remdups_rev (rs @ rs2) =\n           remdups_rev rs @\n           remdups_rev\n            (filter (\\<lambda>r. r \\<notin> set rs) rs2)) \\<Longrightarrow>\n       remdups_rev ((a # rs) @ rs2) =\n       remdups_rev (a # rs) @\n       remdups_rev (filter (\\<lambda>r. r \\<notin> set (a # rs)) rs2)", "case Cons"], ["proof (state)\nthis:\n  remdups_rev (rs_ @ ?rs2.0) =\n  remdups_rev rs_ @\n  remdups_rev (filter (\\<lambda>r. r \\<notin> set rs_) ?rs2.0)\n\ngoal (2 subgoals):\n 1. \\<And>rs2.\n       remdups_rev ([] @ rs2) =\n       remdups_rev [] @\n       remdups_rev (filter (\\<lambda>r. r \\<notin> set []) rs2)\n 2. \\<And>a rs rs2.\n       (\\<And>rs2.\n           remdups_rev (rs @ rs2) =\n           remdups_rev rs @\n           remdups_rev\n            (filter (\\<lambda>r. r \\<notin> set rs) rs2)) \\<Longrightarrow>\n       remdups_rev ((a # rs) @ rs2) =\n       remdups_rev (a # rs) @\n       remdups_rev (filter (\\<lambda>r. r \\<notin> set (a # rs)) rs2)", "thus ?case"], ["proof (prove)\nusing this:\n  remdups_rev (rs_ @ ?rs2.0) =\n  remdups_rev rs_ @\n  remdups_rev (filter (\\<lambda>r. r \\<notin> set rs_) ?rs2.0)\n\ngoal (1 subgoal):\n 1. remdups_rev ((a_ # rs_) @ rs2) =\n    remdups_rev (a_ # rs_) @\n    remdups_rev (filter (\\<lambda>r. r \\<notin> set (a_ # rs_)) rs2)", "by(simp add: remdups_append rev_filter remdups_rev_def)"], ["proof (state)\nthis:\n  remdups_rev ((a_ # rs_) @ rs2) =\n  remdups_rev (a_ # rs_) @\n  remdups_rev (filter (\\<lambda>r. r \\<notin> set (a_ # rs_)) rs2)\n\ngoal (1 subgoal):\n 1. \\<And>rs2.\n       remdups_rev ([] @ rs2) =\n       remdups_rev [] @\n       remdups_rev (filter (\\<lambda>r. r \\<notin> set []) rs2)", "qed(simp add: remdups_rev_def)"], ["", "lemma remdups_rev_fst:\n  \"remdups_rev (r#rs) = (if r \\<in> set rs then r#remdups_rev (removeAll r rs) else r#remdups_rev rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "have 1: \"r \\<notin> set rs \\<Longrightarrow> remdups_rev (r # rs) = r # remdups_rev rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<notin> set rs \\<Longrightarrow>\n    remdups_rev (r # rs) = r # remdups_rev rs", "unfolding remdups_rev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<notin> set rs \\<Longrightarrow>\n    rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs))", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "case (Cons r rs)"], ["proof (state)\nthis:\n  r \\<notin> set rs \\<Longrightarrow>\n  rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs))\n  r \\<notin> set (r # rs)\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "{"], ["proof (state)\nthis:\n  r \\<notin> set rs \\<Longrightarrow>\n  rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs))\n  r \\<notin> set (r # rs)\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "fix rs and rs2::\"'a list\""], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "have \"set rs \\<inter> set rs2 = {} \\<Longrightarrow> remdups (rs @ rs2) = remdups rs @ remdups rs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set rs \\<inter> set rs2 = {} \\<Longrightarrow>\n    remdups (rs @ rs2) = remdups rs @ remdups rs2", "by(induction rs arbitrary: rs2) (simp_all)"], ["proof (state)\nthis:\n  set rs \\<inter> set rs2 = {} \\<Longrightarrow>\n  remdups (rs @ rs2) = remdups rs @ remdups rs2\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "}"], ["proof (state)\nthis:\n  set ?rsb2 \\<inter> set ?rs2.2 = {} \\<Longrightarrow>\n  remdups (?rsb2 @ ?rs2.2) = remdups ?rsb2 @ remdups ?rs2.2\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "note h=this"], ["proof (state)\nthis:\n  set ?rsb2 \\<inter> set ?rs2.2 = {} \\<Longrightarrow>\n  remdups (?rsb2 @ ?rs2.2) = remdups ?rsb2 @ remdups ?rs2.2\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "{"], ["proof (state)\nthis:\n  set ?rsb2 \\<inter> set ?rs2.2 = {} \\<Longrightarrow>\n  remdups (?rsb2 @ ?rs2.2) = remdups ?rsb2 @ remdups ?rs2.2\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "fix r and rs::\"'a list\""], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "from h[of \"rev rs\" \"[r]\"]"], ["proof (chain)\npicking this:\n  set (rev rs) \\<inter> set [r] = {} \\<Longrightarrow>\n  remdups (rev rs @ [r]) = remdups (rev rs) @ remdups [r]", "have \"r \\<notin> set rs \\<Longrightarrow> remdups (rev rs @ [r]) = remdups (rev rs) @ [r]\""], ["proof (prove)\nusing this:\n  set (rev rs) \\<inter> set [r] = {} \\<Longrightarrow>\n  remdups (rev rs @ [r]) = remdups (rev rs) @ remdups [r]\n\ngoal (1 subgoal):\n 1. r \\<notin> set rs \\<Longrightarrow>\n    remdups (rev rs @ [r]) = remdups (rev rs) @ [r]", "by simp"], ["proof (state)\nthis:\n  r \\<notin> set rs \\<Longrightarrow>\n  remdups (rev rs @ [r]) = remdups (rev rs) @ [r]\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "}"], ["proof (state)\nthis:\n  ?rb2 \\<notin> set ?rsb2 \\<Longrightarrow>\n  remdups (rev ?rsb2 @ [?rb2]) = remdups (rev ?rsb2) @ [?rb2]\n\ngoal (2 subgoals):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<notin> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs));\n        r \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r # rev (remdups (rev (a # rs)))", "with Cons"], ["proof (chain)\npicking this:\n  r \\<notin> set rs \\<Longrightarrow>\n  rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs))\n  r \\<notin> set (r # rs)\n  ?rb2 \\<notin> set ?rsb2 \\<Longrightarrow>\n  remdups (rev ?rsb2 @ [?rb2]) = remdups (rev ?rsb2) @ [?rb2]", "show ?case"], ["proof (prove)\nusing this:\n  r \\<notin> set rs \\<Longrightarrow>\n  rev (remdups (rev (r # rs))) = r # rev (remdups (rev rs))\n  r \\<notin> set (r # rs)\n  ?rb2 \\<notin> set ?rsb2 \\<Longrightarrow>\n  remdups (rev ?rsb2 @ [?rb2]) = remdups (rev ?rsb2) @ [?rb2]\n\ngoal (1 subgoal):\n 1. rev (remdups (rev (r # r # rs))) = r # rev (remdups (rev (r # rs)))", "by fastforce"], ["proof (state)\nthis:\n  rev (remdups (rev (r # r # rs))) = r # rev (remdups (rev (r # rs)))\n\ngoal (1 subgoal):\n 1. r \\<notin> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) = r # rev (remdups (rev []))", "qed(simp)"], ["proof (state)\nthis:\n  r \\<notin> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev rs\n\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "have 2: \"r \\<in> set rs \\<Longrightarrow> remdups_rev (r # rs) = r # remdups_rev (rev (removeAll r (rev rs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set rs \\<Longrightarrow>\n    remdups_rev (r # rs) = r # remdups_rev (rev (removeAll r (rev rs)))", "unfolding remdups_rev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> set rs \\<Longrightarrow>\n    rev (remdups (rev (r # rs))) =\n    r # rev (remdups (rev (rev (removeAll r (rev rs)))))", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) =\n    r # rev (remdups (rev (rev (removeAll r (rev [])))))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<in> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) =\n                r # rev (remdups (rev (rev (removeAll r (rev rs)))));\n        r \\<in> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r #\n                         rev (remdups\n                               (rev (rev (removeAll r (rev (a # rs))))))", "case Cons"], ["proof (state)\nthis:\n  r \\<in> set rs_ \\<Longrightarrow>\n  rev (remdups (rev (r # rs_))) =\n  r # rev (remdups (rev (rev (removeAll r (rev rs_)))))\n  r \\<in> set (a_ # rs_)\n\ngoal (2 subgoals):\n 1. r \\<in> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) =\n    r # rev (remdups (rev (rev (removeAll r (rev [])))))\n 2. \\<And>a rs.\n       \\<lbrakk>r \\<in> set rs \\<Longrightarrow>\n                rev (remdups (rev (r # rs))) =\n                r # rev (remdups (rev (rev (removeAll r (rev rs)))));\n        r \\<in> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> rev (remdups (rev (r # a # rs))) =\n                         r #\n                         rev (remdups\n                               (rev (rev (removeAll r (rev (a # rs))))))", "thus ?case"], ["proof (prove)\nusing this:\n  r \\<in> set rs_ \\<Longrightarrow>\n  rev (remdups (rev (r # rs_))) =\n  r # rev (remdups (rev (rev (removeAll r (rev rs_)))))\n  r \\<in> set (a_ # rs_)\n\ngoal (1 subgoal):\n 1. rev (remdups (rev (r # a_ # rs_))) =\n    r # rev (remdups (rev (rev (removeAll r (rev (a_ # rs_))))))", "apply(simp add: removeAll_filter_not_eq remdups_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> set rs_ \\<Longrightarrow>\n             remdups (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n             remdups (filter ((\\<noteq>) r) (rev rs_));\n     r = a_ \\<or> r \\<in> set rs_\\<rbrakk>\n    \\<Longrightarrow> (a_ = r \\<longrightarrow>\n                       remdups\n                        (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n                       remdups (filter ((\\<noteq>) r) (rev rs_))) \\<and>\n                      (a_ \\<noteq> r \\<longrightarrow>\n                       remdups\n                        (filter\n                          (\\<lambda>ra. ra \\<noteq> a_ \\<and> ra \\<noteq> r)\n                          (rev rs_)) =\n                       remdups\n                        (filter\n                          (\\<lambda>x. r \\<noteq> x \\<and> x \\<noteq> a_)\n                          (rev rs_)))", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a_ \\<in> set rs_ \\<Longrightarrow>\n             remdups (filter (\\<lambda>r. r \\<noteq> a_) (rev rs_)) =\n             remdups (filter ((\\<noteq>) a_) (rev rs_));\n     r = a_\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter (\\<lambda>r. r \\<noteq> a_) (rev rs_)) =\n                      remdups (filter ((\\<noteq>) a_) (rev rs_))\n 2. \\<lbrakk>r \\<in> set rs_ \\<Longrightarrow>\n             remdups (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n             remdups (filter ((\\<noteq>) r) (rev rs_));\n     r \\<in> set rs_; a_ = r\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n                      remdups (filter ((\\<noteq>) r) (rev rs_))\n 3. \\<lbrakk>r \\<in> set rs_ \\<Longrightarrow>\n             remdups (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n             remdups (filter ((\\<noteq>) r) (rev rs_));\n     r \\<in> set rs_; a_ \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter\n                         (\\<lambda>ra. ra \\<noteq> a_ \\<and> ra \\<noteq> r)\n                         (rev rs_)) =\n                      remdups\n                       (filter\n                         (\\<lambda>x. r \\<noteq> x \\<and> x \\<noteq> a_)\n                         (rev rs_))", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a_ \\<in> set rs_ \\<Longrightarrow>\n             remdups (filter (\\<lambda>r. r \\<noteq> a_) (rev rs_)) =\n             remdups (filter ((\\<noteq>) a_) (rev rs_));\n     r = a_\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter (\\<lambda>r. r \\<noteq> a_) (rev rs_)) =\n                      remdups (filter ((\\<noteq>) a_) (rev rs_))\n 2. \\<lbrakk>remdups (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n             remdups (filter ((\\<noteq>) r) (rev rs_));\n     r \\<in> set rs_; a_ \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter\n                         (\\<lambda>ra. ra \\<noteq> a_ \\<and> ra \\<noteq> r)\n                         (rev rs_)) =\n                      remdups\n                       (filter\n                         (\\<lambda>x. r \\<noteq> x \\<and> x \\<noteq> a_)\n                         (rev rs_))", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>remdups (filter (\\<lambda>ra. ra \\<noteq> r) (rev rs_)) =\n             remdups (filter ((\\<noteq>) r) (rev rs_));\n     r \\<in> set rs_; a_ \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> remdups\n                       (filter\n                         (\\<lambda>ra. ra \\<noteq> a_ \\<and> ra \\<noteq> r)\n                         (rev rs_)) =\n                      remdups\n                       (filter\n                         (\\<lambda>x. r \\<noteq> x \\<and> x \\<noteq> a_)\n                         (rev rs_))", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rev (remdups (rev (r # a_ # rs_))) =\n  r # rev (remdups (rev (rev (removeAll r (rev (a_ # rs_))))))\n\ngoal (1 subgoal):\n 1. r \\<in> set [] \\<Longrightarrow>\n    rev (remdups (rev [r])) =\n    r # rev (remdups (rev (rev (removeAll r (rev [])))))", "qed(simp)"], ["proof (state)\nthis:\n  r \\<in> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev (rev (removeAll r (rev rs)))\n\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "have \"rev (removeAll r (rev rs)) = removeAll r rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (removeAll r (rev rs)) = removeAll r rs", "by (simp add: removeAll_filter_not_eq rev_filter)"], ["proof (state)\nthis:\n  rev (removeAll r (rev rs)) = removeAll r rs\n\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "with 1 2"], ["proof (chain)\npicking this:\n  r \\<notin> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev rs\n  r \\<in> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev (rev (removeAll r (rev rs)))\n  rev (removeAll r (rev rs)) = removeAll r rs", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<notin> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev rs\n  r \\<in> set rs \\<Longrightarrow>\n  remdups_rev (r # rs) = r # remdups_rev (rev (removeAll r (rev rs)))\n  rev (removeAll r (rev rs)) = removeAll r rs\n\ngoal (1 subgoal):\n 1. remdups_rev (r # rs) =\n    (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n     else r # remdups_rev rs)", "by simp"], ["proof (state)\nthis:\n  remdups_rev (r # rs) =\n  (if r \\<in> set rs then r # remdups_rev (removeAll r rs)\n   else r # remdups_rev rs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma remdups_rev_set: \"set (remdups_rev rs) = set rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups_rev rs) = set rs", "by (simp add: remdups_rev_def)"], ["", "lemma remdups_rev_removeAll: \"remdups_rev (removeAll r rs) = removeAll r (remdups_rev rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev (removeAll r rs) = removeAll r (remdups_rev rs)", "by (simp add: remdups_filter remdups_rev_def removeAll_filter_not_eq rev_filter)"], ["", "text\\<open>Faster code equations\\<close>"], ["", "fun remdups_rev_code :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n  \"remdups_rev_code _ [] = []\" |\n  \"remdups_rev_code ps (r#rs) = (if r \\<in> set ps then remdups_rev_code ps rs else r#remdups_rev_code (r#ps) rs)\""], ["", "lemma remdups_rev_code[code_unfold]: \"remdups_rev rs = remdups_rev_code [] rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "fix ps1 ps2 p and rs::\"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "have \"set ps1 = set ps2 \\<Longrightarrow> remdups_rev_code ps1 rs = remdups_rev_code ps2 rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ps1 = set ps2 \\<Longrightarrow>\n    remdups_rev_code ps1 rs = remdups_rev_code ps2 rs", "proof(induction rs arbitrary: ps1 ps2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       set ps1 = set ps2 \\<Longrightarrow>\n       remdups_rev_code ps1 [] = remdups_rev_code ps2 []\n 2. \\<And>a rs ps1 ps2.\n       \\<lbrakk>\\<And>ps1 ps2.\n                   set ps1 = set ps2 \\<Longrightarrow>\n                   remdups_rev_code ps1 rs = remdups_rev_code ps2 rs;\n        set ps1 = set ps2\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps1 (a # rs) =\n                         remdups_rev_code ps2 (a # rs)", "case Nil"], ["proof (state)\nthis:\n  set ps1 = set ps2\n\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       set ps1 = set ps2 \\<Longrightarrow>\n       remdups_rev_code ps1 [] = remdups_rev_code ps2 []\n 2. \\<And>a rs ps1 ps2.\n       \\<lbrakk>\\<And>ps1 ps2.\n                   set ps1 = set ps2 \\<Longrightarrow>\n                   remdups_rev_code ps1 rs = remdups_rev_code ps2 rs;\n        set ps1 = set ps2\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps1 (a # rs) =\n                         remdups_rev_code ps2 (a # rs)", "thus ?case"], ["proof (prove)\nusing this:\n  set ps1 = set ps2\n\ngoal (1 subgoal):\n 1. remdups_rev_code ps1 [] = remdups_rev_code ps2 []", "by simp"], ["proof (state)\nthis:\n  remdups_rev_code ps1 [] = remdups_rev_code ps2 []\n\ngoal (1 subgoal):\n 1. \\<And>a rs ps1 ps2.\n       \\<lbrakk>\\<And>ps1 ps2.\n                   set ps1 = set ps2 \\<Longrightarrow>\n                   remdups_rev_code ps1 rs = remdups_rev_code ps2 rs;\n        set ps1 = set ps2\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps1 (a # rs) =\n                         remdups_rev_code ps2 (a # rs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs ps1 ps2.\n       \\<lbrakk>\\<And>ps1 ps2.\n                   set ps1 = set ps2 \\<Longrightarrow>\n                   remdups_rev_code ps1 rs = remdups_rev_code ps2 rs;\n        set ps1 = set ps2\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps1 (a # rs) =\n                         remdups_rev_code ps2 (a # rs)", "case (Cons r rs)"], ["proof (state)\nthis:\n  set ?ps1.0 = set ?ps2.0 \\<Longrightarrow>\n  remdups_rev_code ?ps1.0 rs = remdups_rev_code ?ps2.0 rs\n  set ps1 = set ps2\n\ngoal (1 subgoal):\n 1. \\<And>a rs ps1 ps2.\n       \\<lbrakk>\\<And>ps1 ps2.\n                   set ps1 = set ps2 \\<Longrightarrow>\n                   remdups_rev_code ps1 rs = remdups_rev_code ps2 rs;\n        set ps1 = set ps2\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps1 (a # rs) =\n                         remdups_rev_code ps2 (a # rs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev_code ps1 (r # rs) = remdups_rev_code ps2 (r # rs)", "apply(subst remdups_rev_code.simps)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "(*simplifier loops*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "apply(case_tac \"r \\<in> set ps1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. r \\<in> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)\n 2. r \\<notin> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "using Cons"], ["proof (prove)\nusing this:\n  set ?ps1.0 = set ?ps2.0 \\<Longrightarrow>\n  remdups_rev_code ?ps1.0 rs = remdups_rev_code ?ps2.0 rs\n  set ps1 = set ps2\n\ngoal (2 subgoals):\n 1. r \\<in> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)\n 2. r \\<notin> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<notin> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "using Cons"], ["proof (prove)\nusing this:\n  set ?ps1.0 = set ?ps2.0 \\<Longrightarrow>\n  remdups_rev_code ?ps1.0 rs = remdups_rev_code ?ps2.0 rs\n  set ps1 = set ps2\n\ngoal (1 subgoal):\n 1. r \\<notin> set ps1 \\<Longrightarrow>\n    (if r \\<in> set ps1 then remdups_rev_code ps1 rs\n     else r # remdups_rev_code (r # ps1) rs) =\n    (if r \\<in> set ps2 then remdups_rev_code ps2 rs\n     else r # remdups_rev_code (r # ps2) rs)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  remdups_rev_code ps1 (r # rs) = remdups_rev_code ps2 (r # rs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set ps1 = set ps2 \\<Longrightarrow>\n  remdups_rev_code ps1 rs = remdups_rev_code ps2 rs\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "}"], ["proof (state)\nthis:\n  set ?ps1.2 = set ?ps2.2 \\<Longrightarrow>\n  remdups_rev_code ?ps1.2 ?rsa2 = remdups_rev_code ?ps2.2 ?rsa2\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "note remdups_rev_code_ps_seteq=this"], ["proof (state)\nthis:\n  set ?ps1.2 = set ?ps2.2 \\<Longrightarrow>\n  remdups_rev_code ?ps1.2 ?rsa2 = remdups_rev_code ?ps2.2 ?rsa2\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "{"], ["proof (state)\nthis:\n  set ?ps1.2 = set ?ps2.2 \\<Longrightarrow>\n  remdups_rev_code ?ps1.2 ?rsa2 = remdups_rev_code ?ps2.2 ?rsa2\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "fix ps1 ps2 p and rs::\"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "have \"remdups_rev_code (ps1@ps2) rs = remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev_code (ps1 @ ps2) rs =\n    remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) rs)", "proof(induction rs arbitrary: ps1 ps2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       remdups_rev_code (ps1 @ ps2) [] =\n       remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) [])\n 2. \\<And>a rs ps1 ps2.\n       (\\<And>ps1 ps2.\n           remdups_rev_code (ps1 @ ps2) rs =\n           remdups_rev_code ps2\n            (filter (\\<lambda>r. r \\<notin> set ps1) rs)) \\<Longrightarrow>\n       remdups_rev_code (ps1 @ ps2) (a # rs) =\n       remdups_rev_code ps2\n        (filter (\\<lambda>r. r \\<notin> set ps1) (a # rs))", "case (Cons r rs)"], ["proof (state)\nthis:\n  remdups_rev_code (?ps1.0 @ ?ps2.0) rs =\n  remdups_rev_code ?ps2.0 (filter (\\<lambda>r. r \\<notin> set ?ps1.0) rs)\n\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       remdups_rev_code (ps1 @ ps2) [] =\n       remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) [])\n 2. \\<And>a rs ps1 ps2.\n       (\\<And>ps1 ps2.\n           remdups_rev_code (ps1 @ ps2) rs =\n           remdups_rev_code ps2\n            (filter (\\<lambda>r. r \\<notin> set ps1) rs)) \\<Longrightarrow>\n       remdups_rev_code (ps1 @ ps2) (a # rs) =\n       remdups_rev_code ps2\n        (filter (\\<lambda>r. r \\<notin> set ps1) (a # rs))", "have \"remdups_rev_code (r # ps1 @ ps2) rs = remdups_rev_code (ps1 @ r # ps2) rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev_code (r # ps1 @ ps2) rs =\n    remdups_rev_code (ps1 @ r # ps2) rs", "by(rule remdups_rev_code_ps_seteq) simp"], ["proof (state)\nthis:\n  remdups_rev_code (r # ps1 @ ps2) rs = remdups_rev_code (ps1 @ r # ps2) rs\n\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       remdups_rev_code (ps1 @ ps2) [] =\n       remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) [])\n 2. \\<And>a rs ps1 ps2.\n       (\\<And>ps1 ps2.\n           remdups_rev_code (ps1 @ ps2) rs =\n           remdups_rev_code ps2\n            (filter (\\<lambda>r. r \\<notin> set ps1) rs)) \\<Longrightarrow>\n       remdups_rev_code (ps1 @ ps2) (a # rs) =\n       remdups_rev_code ps2\n        (filter (\\<lambda>r. r \\<notin> set ps1) (a # rs))", "with Cons.IH"], ["proof (chain)\npicking this:\n  remdups_rev_code (?ps1.0 @ ?ps2.0) rs =\n  remdups_rev_code ?ps2.0 (filter (\\<lambda>r. r \\<notin> set ?ps1.0) rs)\n  remdups_rev_code (r # ps1 @ ps2) rs = remdups_rev_code (ps1 @ r # ps2) rs", "have \"remdups_rev_code (r # ps1 @ ps2) rs = remdups_rev_code (r#ps2) [r\\<leftarrow>rs . r \\<notin> set ps1]\""], ["proof (prove)\nusing this:\n  remdups_rev_code (?ps1.0 @ ?ps2.0) rs =\n  remdups_rev_code ?ps2.0 (filter (\\<lambda>r. r \\<notin> set ?ps1.0) rs)\n  remdups_rev_code (r # ps1 @ ps2) rs = remdups_rev_code (ps1 @ r # ps2) rs\n\ngoal (1 subgoal):\n 1. remdups_rev_code (r # ps1 @ ps2) rs =\n    remdups_rev_code (r # ps2) (filter (\\<lambda>r. r \\<notin> set ps1) rs)", "by simp"], ["proof (state)\nthis:\n  remdups_rev_code (r # ps1 @ ps2) rs =\n  remdups_rev_code (r # ps2) (filter (\\<lambda>r. r \\<notin> set ps1) rs)\n\ngoal (2 subgoals):\n 1. \\<And>ps1 ps2.\n       remdups_rev_code (ps1 @ ps2) [] =\n       remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) [])\n 2. \\<And>a rs ps1 ps2.\n       (\\<And>ps1 ps2.\n           remdups_rev_code (ps1 @ ps2) rs =\n           remdups_rev_code ps2\n            (filter (\\<lambda>r. r \\<notin> set ps1) rs)) \\<Longrightarrow>\n       remdups_rev_code (ps1 @ ps2) (a # rs) =\n       remdups_rev_code ps2\n        (filter (\\<lambda>r. r \\<notin> set ps1) (a # rs))", "from this"], ["proof (chain)\npicking this:\n  remdups_rev_code (r # ps1 @ ps2) rs =\n  remdups_rev_code (r # ps2) (filter (\\<lambda>r. r \\<notin> set ps1) rs)", "show ?case"], ["proof (prove)\nusing this:\n  remdups_rev_code (r # ps1 @ ps2) rs =\n  remdups_rev_code (r # ps2) (filter (\\<lambda>r. r \\<notin> set ps1) rs)\n\ngoal (1 subgoal):\n 1. remdups_rev_code (ps1 @ ps2) (r # rs) =\n    remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) (r # rs))", "by(simp add: Cons)"], ["proof (state)\nthis:\n  remdups_rev_code (ps1 @ ps2) (r # rs) =\n  remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) (r # rs))\n\ngoal (1 subgoal):\n 1. \\<And>ps1 ps2.\n       remdups_rev_code (ps1 @ ps2) [] =\n       remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) [])", "qed(simp add: remdups_rev_def)"], ["proof (state)\nthis:\n  remdups_rev_code (ps1 @ ps2) rs =\n  remdups_rev_code ps2 (filter (\\<lambda>r. r \\<notin> set ps1) rs)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "}"], ["proof (state)\nthis:\n  remdups_rev_code (?ps1.2 @ ?ps2.2) ?rsa2 =\n  remdups_rev_code ?ps2.2 (filter (\\<lambda>r. r \\<notin> set ?ps1.2) ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "note remdups_rev_code_ps_append=this"], ["proof (state)\nthis:\n  remdups_rev_code (?ps1.2 @ ?ps2.2) ?rsa2 =\n  remdups_rev_code ?ps2.2 (filter (\\<lambda>r. r \\<notin> set ?ps1.2) ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "{"], ["proof (state)\nthis:\n  remdups_rev_code (?ps1.2 @ ?ps2.2) ?rsa2 =\n  remdups_rev_code ?ps2.2 (filter (\\<lambda>r. r \\<notin> set ?ps1.2) ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "fix ps p and rs::\"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "have \"remdups_rev_code (p # ps) rs = remdups_rev_code ps (removeAll p rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev_code (p # ps) rs = remdups_rev_code ps (removeAll p rs)", "by(simp add: remdups_rev_code_ps_append[of \"[p]\" \"ps\" rs, simplified] removeAll_filter_not_eq) metis"], ["proof (state)\nthis:\n  remdups_rev_code (p # ps) rs = remdups_rev_code ps (removeAll p rs)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "}"], ["proof (state)\nthis:\n  remdups_rev_code (?p2 # ?ps2) ?rsa2 =\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "note remdups_rev_code_ps_fst=this"], ["proof (state)\nthis:\n  remdups_rev_code (?p2 # ?ps2) ?rsa2 =\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "{"], ["proof (state)\nthis:\n  remdups_rev_code (?p2 # ?ps2) ?rsa2 =\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "fix ps p and rs::\"'a list\""], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "have \"remdups_rev_code ps (removeAll p rs) = removeAll p (remdups_rev_code ps rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. remdups_rev_code ps (removeAll p rs) =\n    removeAll p (remdups_rev_code ps rs)", "apply(induction rs arbitrary: ps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ps.\n       remdups_rev_code ps (removeAll p []) =\n       removeAll p (remdups_rev_code ps [])\n 2. \\<And>a rs ps.\n       (\\<And>ps.\n           remdups_rev_code ps (removeAll p rs) =\n           removeAll p (remdups_rev_code ps rs)) \\<Longrightarrow>\n       remdups_rev_code ps (removeAll p (a # rs)) =\n       removeAll p (remdups_rev_code ps (a # rs))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs ps.\n       (\\<And>ps.\n           remdups_rev_code ps (removeAll p rs) =\n           removeAll p (remdups_rev_code ps rs)) \\<Longrightarrow>\n       p = a \\<longrightarrow>\n       (a \\<in> set ps \\<longrightarrow>\n        remdups_rev_code ps (removeAll a rs) =\n        removeAll a (remdups_rev_code ps rs)) \\<and>\n       (a \\<notin> set ps \\<longrightarrow>\n        remdups_rev_code ps (removeAll a rs) =\n        removeAll a (remdups_rev_code (a # ps) rs))", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   remdups_rev_code ps (removeAll p rs) =\n                   removeAll p (remdups_rev_code ps rs);\n        p \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps (removeAll p rs) =\n                         removeAll p (remdups_rev_code ps rs)\n 2. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   remdups_rev_code ps (removeAll p rs) =\n                   removeAll p (remdups_rev_code ps rs);\n        p \\<notin> set ps\\<rbrakk>\n       \\<Longrightarrow> remdups_rev_code ps (removeAll p rs) =\n                         removeAll p (remdups_rev_code (p # ps) rs)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs ps.\n       \\<lbrakk>\\<And>ps.\n                   remdups_rev_code ps (removeAll p rs) =\n                   removeAll p (remdups_rev_code ps rs);\n        p \\<notin> set ps\\<rbrakk>\n       \\<Longrightarrow> removeAll p (remdups_rev_code ps rs) =\n                         removeAll p (remdups_rev_code (p # ps) rs)", "apply(simp add: remdups_rev_code_ps_fst removeAll_filter_not_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  remdups_rev_code ps (removeAll p rs) =\n  removeAll p (remdups_rev_code ps rs)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "}"], ["proof (state)\nthis:\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2) =\n  removeAll ?p2 (remdups_rev_code ?ps2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "note remdups_rev_code_removeAll=this"], ["proof (state)\nthis:\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2) =\n  removeAll ?p2 (remdups_rev_code ?ps2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "{"], ["proof (state)\nthis:\n  remdups_rev_code ?ps2 (removeAll ?p2 ?rsa2) =\n  removeAll ?p2 (remdups_rev_code ?ps2 ?rsa2)\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "fix ps"], ["proof (state)\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "have \"\\<forall>p \\<in> set ps. p \\<notin> set rs \\<Longrightarrow> remdups_rev rs = remdups_rev_code ps rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p\\<in>set ps. p \\<notin> set rs \\<Longrightarrow>\n    remdups_rev rs = remdups_rev_code ps rs", "apply(induction rs arbitrary: ps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ps.\n       \\<forall>p\\<in>set ps. p \\<notin> set [] \\<Longrightarrow>\n       remdups_rev [] = remdups_rev_code ps []\n 2. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> remdups_rev (a # rs) = remdups_rev_code ps (a # rs)", "apply(simp add: remdups_rev_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<notin> set (a # rs)\\<rbrakk>\n       \\<Longrightarrow> remdups_rev (a # rs) = remdups_rev_code ps (a # rs)", "apply(simp add: remdups_rev_fst remdups_rev_removeAll)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps.\n           p \\<noteq> a \\<and> p \\<notin> set rs\\<rbrakk>\n       \\<Longrightarrow> (a \\<in> set rs \\<longrightarrow>\n                          (a \\<in> set ps \\<longrightarrow>\n                           a # remdups_rev rs =\n                           remdups_rev_code ps rs) \\<and>\n                          (a \\<notin> set ps \\<longrightarrow>\n                           removeAll a (remdups_rev rs) =\n                           remdups_rev_code (a # ps) rs)) \\<and>\n                         (a \\<notin> set rs \\<longrightarrow>\n                          a \\<in> set ps \\<longrightarrow>\n                          a # remdups_rev rs = remdups_rev_code ps rs)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set rs; a \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> a # remdups_rev rs = remdups_rev_code ps rs\n 2. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set rs; a \\<notin> set ps\\<rbrakk>\n       \\<Longrightarrow> removeAll a (remdups_rev rs) =\n                         remdups_rev_code (a # ps) rs\n 3. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<notin> set rs; a \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> a # remdups_rev rs = remdups_rev_code ps rs", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set rs; a \\<notin> set ps\\<rbrakk>\n       \\<Longrightarrow> removeAll a (remdups_rev rs) =\n                         remdups_rev_code (a # ps) rs\n 2. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> a # remdups_rev rs = remdups_rev_code ps rs", "apply(simp add: remdups_rev_code_ps_fst remdups_rev_code_removeAll)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set rs; a \\<notin> set ps\\<rbrakk>\n       \\<Longrightarrow> removeAll a (remdups_rev rs) =\n                         removeAll a (remdups_rev_code ps rs)\n 2. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> a # remdups_rev rs = remdups_rev_code ps rs", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs ps.\n       \\<lbrakk>\\<And>ps.\n                   \\<forall>p\\<in>set ps.\n                      p \\<notin> set rs \\<Longrightarrow>\n                   remdups_rev rs = remdups_rev_code ps rs;\n        \\<forall>p\\<in>set ps. p \\<noteq> a \\<and> p \\<notin> set rs;\n        a \\<in> set ps\\<rbrakk>\n       \\<Longrightarrow> a # remdups_rev rs = remdups_rev_code ps rs", "by blast"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ps. p \\<notin> set rs \\<Longrightarrow>\n  remdups_rev rs = remdups_rev_code ps rs\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "}"], ["proof (state)\nthis:\n  \\<forall>p\\<in>set ?ps2. p \\<notin> set rs \\<Longrightarrow>\n  remdups_rev rs = remdups_rev_code ?ps2 rs\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p\\<in>set ?ps2. p \\<notin> set rs \\<Longrightarrow>\n  remdups_rev rs = remdups_rev_code ?ps2 rs\n\ngoal (1 subgoal):\n 1. remdups_rev rs = remdups_rev_code [] rs", "by simp"], ["proof (state)\nthis:\n  remdups_rev rs = remdups_rev_code [] rs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}