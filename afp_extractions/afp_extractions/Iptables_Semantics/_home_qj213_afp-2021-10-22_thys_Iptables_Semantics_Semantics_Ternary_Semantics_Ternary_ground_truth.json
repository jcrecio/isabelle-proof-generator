{"file_name": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics/Semantics_Ternary/Semantics_Ternary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Iptables_Semantics", "problem_names": ["lemma approximating_bigstep_induct[case_names Skip Allow Deny Log Nomatch Decision Seq, induct pred: approximating_bigstep] : \"\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n(\\<And>t. P [] t t) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Accept \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalAllow)) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Drop \\<or> a = Reject \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalDeny)) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Log \\<or> a = Empty \\<Longrightarrow> P [Rule m a] Undecided Undecided) \\<Longrightarrow>\n(\\<And>m a. \\<not> matches \\<gamma> m a p \\<Longrightarrow> P [Rule m a] Undecided Undecided) \\<Longrightarrow>\n(\\<And>rs X. P rs (Decision X) (Decision X)) \\<Longrightarrow>\n(\\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'. rs = rs\\<^sub>1 @ rs\\<^sub>2 \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> P rs\\<^sub>1 Undecided t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow> P rs\\<^sub>2 t t' \\<Longrightarrow> P rs Undecided t')\n   \\<Longrightarrow> P rs s t\"", "lemma skipD: \"\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> s = t\"", "lemma decisionD: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Decision X\"", "lemma acceptD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Accept], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Accept p \\<Longrightarrow> t = Decision FinalAllow\"", "lemma dropD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Drop], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Drop p \\<Longrightarrow> t = Decision FinalDeny\"", "lemma rejectD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Reject], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Reject p \\<Longrightarrow> t = Decision FinalDeny\"", "lemma logD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Log], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Undecided\"", "lemma emptyD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Empty], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Undecided\"", "lemma nomatchD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> \\<not> matches \\<gamma> m a p \\<Longrightarrow> t = Undecided\"", "lemmas approximating_bigstepD = skipD acceptD dropD rejectD logD emptyD nomatchD decisionD", "lemma approximating_bigstep_to_undecided: \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> s = Undecided\"", "lemma approximating_bigstep_to_decision1: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Decision Y\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision X \\<Longrightarrow> Y = X\"", "lemma nomatch_fst: \"\\<not> matches \\<gamma> m a p \\<Longrightarrow>  \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"", "lemma seq':\n  assumes \"rs = rs\\<^sub>1 @ rs\\<^sub>2\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\"\n  shows \"\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\"", "lemma seq_split:\n  assumes \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" \"rs = rs\\<^sub>1@rs\\<^sub>2\"\n  obtains t' where \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"", "lemma seqE_fst:\n  assumes \"\\<gamma>,p\\<turnstile> \\<langle>r#rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"\n  obtains t' where \"\\<gamma>,p\\<turnstile> \\<langle>[r],s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" \"\\<gamma>,p\\<turnstile> \\<langle>rs,t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"", "lemma seq_fst: assumes \"\\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" and \"\\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" shows \"\\<gamma>,p\\<turnstile> \\<langle>r # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\"", "lemma wf_ruleset_append: \"wf_ruleset \\<gamma> p (rs1@rs2) \\<longleftrightarrow> wf_ruleset \\<gamma> p rs1 \\<and> wf_ruleset \\<gamma> p rs2\"", "lemma wf_rulesetD: assumes \"wf_ruleset \\<gamma> p (r # rs)\" shows \"wf_ruleset \\<gamma> p [r]\" and \"wf_ruleset \\<gamma> p rs\"", "lemma wf_ruleset_fst: \"wf_ruleset \\<gamma> p (Rule m a # rs) \\<longleftrightarrow> wf_ruleset \\<gamma> p [Rule m a] \\<and> wf_ruleset \\<gamma> p rs\"", "lemma wf_ruleset_stripfst: \"wf_ruleset \\<gamma> p (r # rs) \\<Longrightarrow> wf_ruleset \\<gamma> p (rs)\"", "lemma wf_ruleset_rest: \"wf_ruleset \\<gamma> p (Rule m a # rs) \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m a]\"", "lemma approximating_bigstep_fun_induct[case_names Empty Decision Nomatch Match] : \"\n(\\<And>\\<gamma> p s. P \\<gamma> p [] s) \\<Longrightarrow>\n(\\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X)) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    \\<not> matches \\<gamma> m a p \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> (a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided) \\<Longrightarrow> (a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided) \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\nP \\<gamma> p rs s\"", "lemma Decision_approximating_bigstep_fun: \"approximating_bigstep_fun \\<gamma> p rs (Decision X) = Decision X\"", "lemma approximating_bigstep_fun_induct_wf[case_names Empty Decision Nomatch MatchAccept MatchDrop MatchReject MatchLog MatchEmpty, consumes 1]:\n  \"wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n(\\<And>\\<gamma> p s. P \\<gamma> p [] s) \\<Longrightarrow>\n(\\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X)) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    \\<not> matches \\<gamma> m a p \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Accept  \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Drop \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Reject \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided  \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\nP \\<gamma> p rs s\"", "lemma just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided[case_names Undecided]: \n      assumes \"s = Undecided \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rs1 s = approximating_bigstep_fun \\<gamma> p rs2 s\"\n      shows \"approximating_bigstep_fun \\<gamma> p rs1 s = approximating_bigstep_fun \\<gamma> p rs2 s\"", "lemma approximating_bigstep_fun_seq_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p rs\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s = approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (approximating_bigstep_fun \\<gamma> p rs\\<^sub>1 s)\"", "lemma approximating_bigstep_fun_seq_Undecided_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p (rs1@rs2)\\<rbrakk> \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rs1@rs2) Undecided = Undecided \\<longleftrightarrow> \n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and> approximating_bigstep_fun \\<gamma> p rs2 Undecided = Undecided\"", "lemma approximating_bigstep_fun_seq_Undecided_t_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p (rs1@rs2)\\<rbrakk> \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rs1@rs2) Undecided = t \\<longleftrightarrow> \n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and> approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = t \\<and> t \\<noteq> Undecided\"", "lemma approximating_bigstep_fun_wf_postpend: \"wf_ruleset \\<gamma> p rsA \\<Longrightarrow> wf_ruleset \\<gamma> p rsB \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p rsA s = approximating_bigstep_fun \\<gamma> p rsB s \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rsA@rsC) s = approximating_bigstep_fun \\<gamma> p (rsB@rsC) s\"", "lemma approximating_bigstep_fun_singleton_prepend:\n    assumes \"approximating_bigstep_fun \\<gamma> p rsB s = approximating_bigstep_fun \\<gamma> p rsC s\"\n    shows \"approximating_bigstep_fun \\<gamma> p (r#rsB) s = approximating_bigstep_fun \\<gamma> p (r#rsC) s\"", "lemma approximating_bigstep_wf: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> wf_ruleset \\<gamma> p rs\"", "lemma[code_unfold]: \"good_ruleset rs = (\\<forall>r\\<in>set rs. (case get_action r of Call chain \\<Rightarrow> False | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True))\"", "lemma good_ruleset_alt: \"good_ruleset rs = (\\<forall>r\\<in>set rs. get_action r = Accept \\<or> get_action r = Drop \\<or>\n                                                get_action r = Reject \\<or> get_action r = Log  \\<or> get_action r = Empty)\"", "lemma good_ruleset_append: \"good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2) \\<longleftrightarrow> good_ruleset rs\\<^sub>1 \\<and> good_ruleset rs\\<^sub>2\"", "lemma good_ruleset_fst: \"good_ruleset (r#rs) \\<Longrightarrow> good_ruleset [r]\"", "lemma good_ruleset_tail: \"good_ruleset (r#rs) \\<Longrightarrow> good_ruleset rs\"", "lemma good_imp_wf_ruleset: \"good_ruleset rs \\<Longrightarrow> wf_ruleset \\<gamma> p rs\"", "lemma simple_imp_good_ruleset: \"simple_ruleset rs \\<Longrightarrow> good_ruleset rs\"", "lemma approximating_bigstep_fun_seq_semantics: \"\\<lbrakk> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<rbrakk> \\<Longrightarrow> \n    approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s = approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t\"", "lemma approximating_semantics_imp_fun: \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rs s = t\"", "lemma approximating_fun_imp_semantics: assumes \"wf_ruleset \\<gamma> p rs\"\n      shows \"approximating_bigstep_fun \\<gamma> p rs s = t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"", "theorem approximating_semantics_iff_fun: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow> approximating_bigstep_fun \\<gamma> p rs s = t\"", "lemma approximating_bigstep_deterministic: \"\\<lbrakk> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t; \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<rbrakk> \\<Longrightarrow> t = t'\"", "lemma rm_LogEmpty_fun_semantics: \n  \"approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma \"\\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"", "lemma rm_LogEmpty_simple_but_Reject: \n  \"good_ruleset rs \\<Longrightarrow> \\<forall>r \\<in> set (rm_LogEmpty rs). get_action r = Accept \\<or> get_action r = Reject \\<or> get_action r = Drop\"", "lemma rw_Reject_fun_semantics: \n  \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> \n  (approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s = approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s)\"", "lemma rmLogEmpty_rwReject_good_to_simple: \"good_ruleset rs \\<Longrightarrow> simple_ruleset (rw_Reject (rm_LogEmpty rs))\"", "lemma optimize_matches_option_generic:\n  assumes \"\\<forall> r \\<in> set rs. P (get_match r) (get_action r)\"\n      and \"(\\<And>m m' a. P m a \\<Longrightarrow> f m = Some m' \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p)\"\n      and \"(\\<And>m a. P m a \\<Longrightarrow> f m = None \\<Longrightarrow> \\<not> matches \\<gamma> m a p)\"\n  shows \"approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma optimize_matches_generic: \"\\<forall> r \\<in> set rs. P (get_match r) (get_action r) \\<Longrightarrow> \n      (\\<And>m a. P m a \\<Longrightarrow> matches \\<gamma> (f m) a p = matches \\<gamma> m a p) \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma optimize_matches_matches_fst: \"matches \\<gamma> (f m) a p \\<Longrightarrow> optimize_matches f (Rule m a # rs) = (Rule (f m) a)# optimize_matches f rs\"", "lemma optimize_matches: \"\\<forall>m a. matches \\<gamma> (f m) a p = matches \\<gamma> m a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma optimize_matches_opt_MatchAny_match_expr: \"approximating_bigstep_fun \\<gamma> p (optimize_matches opt_MatchAny_match_expr rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma optimize_matches_a: \"\\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma optimize_matches_a_simplers:\n  assumes \"simple_ruleset rs\" and \"\\<forall>a m. a = Accept \\<or> a = Drop \\<longrightarrow> matches \\<gamma> (f a m) a = matches \\<gamma> m a\"\n  shows \"approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s = approximating_bigstep_fun \\<gamma> p rs s\"", "lemma not_matches_removeAll: \"\\<not> matches \\<gamma> m a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (removeAll (Rule m a) rs) Undecided = approximating_bigstep_fun \\<gamma> p rs Undecided\""], "translations": [["", "lemma approximating_bigstep_induct[case_names Skip Allow Deny Log Nomatch Decision Seq, induct pred: approximating_bigstep] : \"\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n(\\<And>t. P [] t t) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Accept \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalAllow)) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Drop \\<or> a = Reject \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalDeny)) \\<Longrightarrow>\n(\\<And>m a. matches \\<gamma> m a p \\<Longrightarrow> a = Log \\<or> a = Empty \\<Longrightarrow> P [Rule m a] Undecided Undecided) \\<Longrightarrow>\n(\\<And>m a. \\<not> matches \\<gamma> m a p \\<Longrightarrow> P [Rule m a] Undecided Undecided) \\<Longrightarrow>\n(\\<And>rs X. P rs (Decision X) (Decision X)) \\<Longrightarrow>\n(\\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'. rs = rs\\<^sub>1 @ rs\\<^sub>2 \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> P rs\\<^sub>1 Undecided t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow> P rs\\<^sub>2 t t' \\<Longrightarrow> P rs Undecided t')\n   \\<Longrightarrow> P rs s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     \\<And>t. P [] t t;\n     \\<And>m a.\n        \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalAllow);\n     \\<And>m a.\n        \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject\\<rbrakk>\n        \\<Longrightarrow> P [Rule m a] Undecided (Decision FinalDeny);\n     \\<And>m a.\n        \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n        \\<Longrightarrow> P [Rule m a] Undecided Undecided;\n     \\<And>m a.\n        \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n        P [Rule m a] Undecided Undecided;\n     \\<And>rs X. P rs (Decision X) (Decision X);\n     \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n        \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n         P rs\\<^sub>1 Undecided t;\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         P rs\\<^sub>2 t t'\\<rbrakk>\n        \\<Longrightarrow> P rs Undecided t'\\<rbrakk>\n    \\<Longrightarrow> P rs s t", "by (induction rule: approximating_bigstep.induct) (simp_all)"], ["", "lemma skipD: \"\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    s = t", "by (induction \"[]::'a rule list\" s t rule: approximating_bigstep_induct) (simp_all)"], ["", "lemma decisionD: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    t = Decision X", "by (induction rs \"Decision X\" t rule: approximating_bigstep_induct) (simp_all)"], ["", "lemma acceptD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Accept], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Accept p \\<Longrightarrow> t = Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         Accept], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> t = Decision FinalAllow", "proof (induction \"[Rule m Accept]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Accept;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Decision FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m Accept p;\n     Accept = Drop \\<or> Accept = Reject;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Decision FinalAllow\n 3. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Log \\<or> Accept = Empty;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow\n 4. \\<lbrakk>\\<not> matches \\<gamma> m Accept p;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Accept] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m Accept];\n         matches \\<gamma> m Accept p\\<rbrakk>\n        \\<Longrightarrow> t = Decision FinalAllow;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Accept]; t = Undecided;\n         matches \\<gamma> m Accept p\\<rbrakk>\n        \\<Longrightarrow> t' = Decision FinalAllow;\n        matches \\<gamma> m Accept p\\<rbrakk>\n       \\<Longrightarrow> t' = Decision FinalAllow", "case Seq"], ["proof (state)\nthis:\n  [Rule m Accept] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t_\n  \\<lbrakk>rs\\<^sub>1_ = [Rule m Accept];\n   matches \\<gamma> m Accept p\\<rbrakk>\n  \\<Longrightarrow> t_ = Decision FinalAllow\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'_\n  \\<lbrakk>rs\\<^sub>2_ = [Rule m Accept]; t_ = Undecided;\n   matches \\<gamma> m Accept p\\<rbrakk>\n  \\<Longrightarrow> t'_ = Decision FinalAllow\n  matches \\<gamma> m Accept p\n\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Accept;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Decision FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m Accept p;\n     Accept = Drop \\<or> Accept = Reject;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Decision FinalAllow\n 3. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Log \\<or> Accept = Empty;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow\n 4. \\<lbrakk>\\<not> matches \\<gamma> m Accept p;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Accept] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m Accept];\n         matches \\<gamma> m Accept p\\<rbrakk>\n        \\<Longrightarrow> t = Decision FinalAllow;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Accept]; t = Undecided;\n         matches \\<gamma> m Accept p\\<rbrakk>\n        \\<Longrightarrow> t' = Decision FinalAllow;\n        matches \\<gamma> m Accept p\\<rbrakk>\n       \\<Longrightarrow> t' = Decision FinalAllow", "thus ?case"], ["proof (prove)\nusing this:\n  [Rule m Accept] = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t_\n  \\<lbrakk>rs\\<^sub>1_ = [Rule m Accept];\n   matches \\<gamma> m Accept p\\<rbrakk>\n  \\<Longrightarrow> t_ = Decision FinalAllow\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'_\n  \\<lbrakk>rs\\<^sub>2_ = [Rule m Accept]; t_ = Undecided;\n   matches \\<gamma> m Accept p\\<rbrakk>\n  \\<Longrightarrow> t'_ = Decision FinalAllow\n  matches \\<gamma> m Accept p\n\ngoal (1 subgoal):\n 1. t'_ = Decision FinalAllow", "by (metis list_app_singletonE skipD)"], ["proof (state)\nthis:\n  t'_ = Decision FinalAllow\n\ngoal (4 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Accept;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Decision FinalAllow\n 2. \\<lbrakk>matches \\<gamma> m Accept p;\n     Accept = Drop \\<or> Accept = Reject;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Decision FinalAllow\n 3. \\<lbrakk>matches \\<gamma> m Accept p; Accept = Log \\<or> Accept = Empty;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow\n 4. \\<lbrakk>\\<not> matches \\<gamma> m Accept p;\n     matches \\<gamma> m Accept p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalAllow", "qed(simp_all)"], ["", "lemma dropD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Drop], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Drop p \\<Longrightarrow> t = Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         Drop], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     matches \\<gamma> m Drop p\\<rbrakk>\n    \\<Longrightarrow> t = Decision FinalDeny", "apply (induction \"[Rule m Drop]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Drop p; Drop = Accept;\n     matches \\<gamma> m Drop p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Decision FinalDeny\n 2. \\<lbrakk>matches \\<gamma> m Drop p; Drop = Drop \\<or> Drop = Reject;\n     matches \\<gamma> m Drop p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Decision FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m Drop p; Drop = Log \\<or> Drop = Empty;\n     matches \\<gamma> m Drop p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalDeny\n 4. \\<lbrakk>\\<not> matches \\<gamma> m Drop p;\n     matches \\<gamma> m Drop p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalDeny\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Drop] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m Drop];\n         matches \\<gamma> m Drop p\\<rbrakk>\n        \\<Longrightarrow> t = Decision FinalDeny;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Drop]; t = Undecided;\n         matches \\<gamma> m Drop p\\<rbrakk>\n        \\<Longrightarrow> t' = Decision FinalDeny;\n        matches \\<gamma> m Drop p\\<rbrakk>\n       \\<Longrightarrow> t' = Decision FinalDeny", "by(auto dest: skipD elim!: rules_singleton_rev_E)"], ["", "lemma rejectD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Reject], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> matches \\<gamma> m Reject p \\<Longrightarrow> t = Decision FinalDeny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         Reject], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     matches \\<gamma> m Reject p\\<rbrakk>\n    \\<Longrightarrow> t = Decision FinalDeny", "apply (induction \"[Rule m Reject]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Reject p; Reject = Accept;\n     matches \\<gamma> m Reject p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Decision FinalDeny\n 2. \\<lbrakk>matches \\<gamma> m Reject p;\n     Reject = Drop \\<or> Reject = Reject;\n     matches \\<gamma> m Reject p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Decision FinalDeny\n 3. \\<lbrakk>matches \\<gamma> m Reject p; Reject = Log \\<or> Reject = Empty;\n     matches \\<gamma> m Reject p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalDeny\n 4. \\<lbrakk>\\<not> matches \\<gamma> m Reject p;\n     matches \\<gamma> m Reject p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Decision FinalDeny\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Reject] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m Reject];\n         matches \\<gamma> m Reject p\\<rbrakk>\n        \\<Longrightarrow> t = Decision FinalDeny;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Reject]; t = Undecided;\n         matches \\<gamma> m Reject p\\<rbrakk>\n        \\<Longrightarrow> t' = Decision FinalDeny;\n        matches \\<gamma> m Reject p\\<rbrakk>\n       \\<Longrightarrow> t' = Decision FinalDeny", "by(auto dest: skipD elim!: rules_singleton_rev_E)"], ["", "lemma logD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Log], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>[Rule m\nLog], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    t = Undecided", "apply (induction \"[Rule m Log]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Log p; Log = Accept\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Undecided\n 2. \\<lbrakk>matches \\<gamma> m Log p;\n     Log = Drop \\<or> Log = Reject\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Undecided\n 3. \\<lbrakk>matches \\<gamma> m Log p; Log = Log \\<or> Log = Empty\\<rbrakk>\n    \\<Longrightarrow> Undecided = Undecided\n 4. \\<not> matches \\<gamma> m Log p \\<Longrightarrow> Undecided = Undecided\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Log] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        rs\\<^sub>1 = [Rule m Log] \\<Longrightarrow> t = Undecided;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Log]; t = Undecided\\<rbrakk>\n        \\<Longrightarrow> t' = Undecided\\<rbrakk>\n       \\<Longrightarrow> t' = Undecided", "by(auto dest: skipD elim!: rules_singleton_rev_E)"], ["", "lemma emptyD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m Empty], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> t = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>[Rule m\nEmpty], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    t = Undecided", "apply (induction \"[Rule m Empty]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Empty p; Empty = Accept\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Undecided\n 2. \\<lbrakk>matches \\<gamma> m Empty p;\n     Empty = Drop \\<or> Empty = Reject\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Undecided\n 3. \\<lbrakk>matches \\<gamma> m Empty p;\n     Empty = Log \\<or> Empty = Empty\\<rbrakk>\n    \\<Longrightarrow> Undecided = Undecided\n 4. \\<not> matches \\<gamma> m Empty p \\<Longrightarrow>\n    Undecided = Undecided\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m Empty] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        rs\\<^sub>1 = [Rule m Empty] \\<Longrightarrow> t = Undecided;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m Empty]; t = Undecided\\<rbrakk>\n        \\<Longrightarrow> t' = Undecided\\<rbrakk>\n       \\<Longrightarrow> t' = Undecided", "by(auto dest: skipD elim!: rules_singleton_rev_E)"], ["", "lemma nomatchD: \"\\<gamma>,p\\<turnstile> \\<langle>[Rule m a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> \\<not> matches \\<gamma> m a p \\<Longrightarrow> t = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[Rule m\n         a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> t = Undecided", "apply (induction \"[Rule m a]\" Undecided t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalAllow = Undecided\n 2. \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> Decision FinalDeny = Undecided\n 3. \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Undecided\n 4. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> Undecided = Undecided\n 5. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>[Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<lbrakk>rs\\<^sub>1 = [Rule m a];\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> t = Undecided;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<lbrakk>rs\\<^sub>2 = [Rule m a]; t = Undecided;\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> t' = Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> t' = Undecided", "by(auto dest: skipD elim!: rules_singleton_rev_E)"], ["", "lemmas approximating_bigstepD = skipD acceptD dropD rejectD logD emptyD nomatchD decisionD"], ["", "lemma approximating_bigstep_to_undecided: \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> s = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow>\n    s = Undecided", "by (metis decisionD state.exhaust)"], ["", "lemma approximating_bigstep_to_decision1: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Decision Y\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision X \\<Longrightarrow> Y = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n   Y\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision X \\<Longrightarrow>\n    Y = X", "by (metis decisionD state.inject)"], ["", "lemma nomatch_fst: \"\\<not> matches \\<gamma> m a p \\<Longrightarrow>  \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(cases s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     s = Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(drule nomatch)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     s = Undecided;\n     \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(drule(1) seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     s = Undecided;\n     \\<gamma>,p\\<turnstile> \\<langle>[Rule m a] @\n                                     rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply (simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n       x2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Decision x2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(drule decisionD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; s = Decision x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Decision x2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; s = Decision x2;\n        t = Decision x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Decision\n                        x2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision x2", "apply(simp add: decision)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma seq':\n  assumes \"rs = rs\\<^sub>1 @ rs\\<^sub>2\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\"\n  shows \"\\<gamma>,p\\<turnstile> \\<langle>rs,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "using assms"], ["proof (prove)\nusing this:\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "by (cases s) (auto intro: seq decision dest: decisionD)"], ["", "lemma seq_split:\n  assumes \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" \"rs = rs\\<^sub>1@rs\\<^sub>2\"\n  obtains t' where \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induction rs s t arbitrary: rs\\<^sub>1 rs\\<^sub>2 thesis rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Allow"], ["proof (state)\nthis:\n  matches \\<gamma> m_ a_ p\n  a_ = Accept\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n              FinalAllow\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (7 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalAllow\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ a_ p\n  a_ = Accept\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n              FinalAllow\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by (auto dest: skipD elim!: rules_singleton_rev_E intro: approximating_bigstep.intros)"], ["proof (state)\nthis:\n  thesis\n\ngoal (6 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Deny"], ["proof (state)\nthis:\n  matches \\<gamma> m_ a_ p\n  a_ = Drop \\<or> a_ = Reject\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n              FinalDeny\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                      FinalDeny\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ a_ p\n  a_ = Drop \\<or> a_ = Reject\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n              FinalDeny\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by (auto dest: skipD elim!: rules_singleton_rev_E intro: approximating_bigstep.intros)"], ["proof (state)\nthis:\n  thesis\n\ngoal (5 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Log"], ["proof (state)\nthis:\n  matches \\<gamma> m_ a_ p\n  a_ = Log \\<or> a_ = Empty\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (5 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ a_ p\n  a_ = Log \\<or> a_ = Empty\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by (auto dest: skipD elim!: rules_singleton_rev_E intro: approximating_bigstep.intros)"], ["proof (state)\nthis:\n  thesis\n\ngoal (4 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nomatch"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m_ a_ p\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (4 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>m a rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<And>t'.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        [Rule m a] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m_ a_ p\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\\<rbrakk>\n  \\<Longrightarrow> thesis\n  [Rule m_ a_] = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "by (auto dest: skipD elim!: rules_singleton_rev_E intro: approximating_bigstep.intros)"], ["proof (state)\nthis:\n  thesis\n\ngoal (3 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Seq rs rsa rsb t t')"], ["proof (state)\nthis:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "hence rs: \"rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\""], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "note List.append_eq_append_conv_if[simp]"], ["proof (state)\nthis:\n  (?xs\\<^sub>1 @ ?xs\\<^sub>2 = ?ys\\<^sub>1 @ ?ys\\<^sub>2) =\n  (if length ?xs\\<^sub>1 \\<le> length ?ys\\<^sub>1\n   then ?xs\\<^sub>1 = take (length ?xs\\<^sub>1) ?ys\\<^sub>1 \\<and>\n        ?xs\\<^sub>2 = drop (length ?xs\\<^sub>1) ?ys\\<^sub>1 @ ?ys\\<^sub>2\n   else take (length ?ys\\<^sub>1) ?xs\\<^sub>1 = ?ys\\<^sub>1 \\<and>\n        drop (length ?ys\\<^sub>1) ?xs\\<^sub>1 @ ?xs\\<^sub>2 = ?ys\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' rs\\<^sub>1' rs\\<^sub>2' thesis.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>1' rs\\<^sub>2 thesis.\n           \\<lbrakk>\\<And>t'.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>1 = rs\\<^sub>1' @ rs\\<^sub>2\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>1 rs\\<^sub>2' thesis.\n           \\<lbrakk>\\<And>t'a.\n                       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n                        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n            rs\\<^sub>2 = rs\\<^sub>1 @ rs\\<^sub>2'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        \\<And>t'a.\n           \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1', Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n            \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2', t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1' @ rs\\<^sub>2'\\<rbrakk>\n       \\<Longrightarrow> thesis", "from rs"], ["proof (chain)\npicking this:\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. thesis", "proof (cases rule: list_app_eq_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>rsa = take (length rsa) rs\\<^sub>1;\n     rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "case longer"], ["proof (state)\nthis:\n  rsa = take (length rsa) rs\\<^sub>1\n  rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>rsa = take (length rsa) rs\\<^sub>1;\n     rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with Seq"], ["proof (chain)\npicking this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = take (length rsa) rs\\<^sub>1\n  rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2", "have t1: \"\\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = take (length rsa) rs\\<^sub>1\n  rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>take (length rsa)\n                                     rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by simp"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>rsa = take (length rsa) rs\\<^sub>1;\n     rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "from Seq longer"], ["proof (chain)\npicking this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = take (length rsa) rs\\<^sub>1\n  rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2", "obtain t2\n          where t2a: \"\\<gamma>,p\\<turnstile> \\<langle>drop (length rsa) rs\\<^sub>1,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\"\n            and rs2_t2: \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = take (length rsa) rs\\<^sub>1\n  rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>t2.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>drop (length rsa)\n            rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2;\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa)\n                                   rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>rsa = take (length rsa) rs\\<^sub>1;\n     rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with t1 rs2_t2"], ["proof (chain)\npicking this:\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa)\n                                   rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "have \"\\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1 @ drop (length rsa) rs\\<^sub>1,Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\""], ["proof (prove)\nusing this:\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa)\n                                   rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1 @\n                                    drop (length rsa)\n                                     rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2", "by (blast intro: approximating_bigstep.seq)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1 @\n                                  drop (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>rsa = take (length rsa) rs\\<^sub>1;\n     rsb = drop (length rsa) rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with Seq rs2_t2"], ["proof (chain)\npicking this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1 @\n                                  drop (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2", "show ?thesis"], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t2\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa) rs\\<^sub>1 @\n                                  drop (length rsa)\n                                   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "case shorter"], ["proof (state)\nthis:\n  rs\\<^sub>1 = take (length rs\\<^sub>1) rsa\n  rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with rs"], ["proof (chain)\npicking this:\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\n  rs\\<^sub>1 = take (length rs\\<^sub>1) rsa\n  rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb", "have rsa': \"rsa = rs\\<^sub>1 @ take (length rsa - length rs\\<^sub>1) rs\\<^sub>2\""], ["proof (prove)\nusing this:\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\n  rs\\<^sub>1 = take (length rs\\<^sub>1) rsa\n  rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\n\ngoal (1 subgoal):\n 1. rsa = rs\\<^sub>1 @ take (length rsa - length rs\\<^sub>1) rs\\<^sub>2", "by (metis append_eq_conv_conj length_drop)"], ["proof (state)\nthis:\n  rsa = rs\\<^sub>1 @ take (length rsa - length rs\\<^sub>1) rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "from shorter rs"], ["proof (chain)\npicking this:\n  rs\\<^sub>1 = take (length rs\\<^sub>1) rsa\n  rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2", "have rsb': \"rsb = drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2\""], ["proof (prove)\nusing this:\n  rs\\<^sub>1 = take (length rs\\<^sub>1) rsa\n  rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\n  rsa @ rsb = rs\\<^sub>1 @ rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. rsb = drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2", "by (metis append_eq_conv_conj length_drop)"], ["proof (state)\nthis:\n  rsb = drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "from Seq rsa'"], ["proof (chain)\npicking this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = rs\\<^sub>1 @ take (length rsa - length rs\\<^sub>1) rs\\<^sub>2", "obtain t1\n          where t1a: \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1,Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t1\"\n            and t1b: \"\\<gamma>,p\\<turnstile> \\<langle>take (length rsa - length rs\\<^sub>1) rs\\<^sub>2,t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  rsa = rs\\<^sub>1 @ take (length rsa - length rs\\<^sub>1) rs\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>t1.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t1;\n         \\<gamma>,p\\<turnstile> \\<langle>take\n    (length rsa - length rs\\<^sub>1)\n    rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t1\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "from rsb' Seq.hyps"], ["proof (chain)\npicking this:\n  rsb = drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "have t2: \"\\<gamma>,p\\<turnstile> \\<langle>drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2,t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  rsb = drop (length rsa - length rs\\<^sub>1) rs\\<^sub>2\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa - length rs\\<^sub>1)\n                                     rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "by blast"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with seq' t1b"], ["proof (chain)\npicking this:\n  \\<lbrakk>?rs = ?rs\\<^sub>1 @ ?rs\\<^sub>2;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>2, ?t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "have \"\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2,t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?rs = ?rs\\<^sub>1 @ ?rs\\<^sub>2;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>2, ?t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>take (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>drop (length rsa - length rs\\<^sub>1)\n                                   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "by (metis append_take_drop_id)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rs\\<^sub>1 = take (length rs\\<^sub>1) rsa;\n     rs\\<^sub>2 = drop (length rs\\<^sub>1) rsa @ rsb\\<rbrakk>\n    \\<Longrightarrow> thesis", "with Seq t1a"], ["proof (chain)\npicking this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t1\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "show ?thesis"], ["proof (prove)\nusing this:\n  rs = rsa @ rsb\n  \\<gamma>,p\\<turnstile> \\<langle>rsa, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rsb, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>\\<And>t'.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsa = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<And>t'a.\n              \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a;\n               \\<gamma>,p\\<turnstile> \\<langle>?rs\\<^sub>2, t'a\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   rsb = ?rs\\<^sub>1 @ ?rs\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t';\n   \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, ?t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  rs = rs\\<^sub>1 @ rs\\<^sub>2\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t1\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t1\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. thesis", "by fast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (2 subgoals):\n 1. \\<And>t rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        [] = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>rs X rs\\<^sub>1 rs\\<^sub>2 thesis.\n       \\<lbrakk>\\<And>t'.\n                   \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Decision\n                                   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n                    \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                              X\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        rs = rs\\<^sub>1 @ rs\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed (auto intro: approximating_bigstep.intros)"], ["", "lemma seqE_fst:\n  assumes \"\\<gamma>,p\\<turnstile> \\<langle>r#rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"\n  obtains t' where \"\\<gamma>,p\\<turnstile> \\<langle>[r],s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" \"\\<gamma>,p\\<turnstile> \\<langle>rs,t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         \\<gamma>,p\\<turnstile> \\<langle>rs, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms seq_split"], ["proof (prove)\nusing this:\n  \\<gamma>,p\\<turnstile> \\<langle>r #\n                                  rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<lbrakk>?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t;\n   ?rs = ?rs\\<^sub>1 @ ?rs\\<^sub>2;\n   \\<And>t'.\n      \\<lbrakk>?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n       ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>2, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         \\<gamma>,p\\<turnstile> \\<langle>rs, t'\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Cons append_Nil)"], ["", "lemma seq_fst: assumes \"\\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\" and \"\\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\" shows \"\\<gamma>,p\\<turnstile> \\<langle>r # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "proof(cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "with assms seq"], ["proof (chain)\npicking this:\n  \\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>2, ?t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n                ?rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\n  s = Undecided", "show \"\\<gamma>,p\\<turnstile> \\<langle>r # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  \\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  \\<lbrakk>?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t;\n   ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>2, ?t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\\<rbrakk>\n  \\<Longrightarrow> ?\\<gamma>,?p\\<turnstile> \\<langle>?rs\\<^sub>1 @\n                ?rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'\n  s = Undecided\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "by fastforce"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>r #\n                                  rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "case Decision"], ["proof (state)\nthis:\n  s = Decision x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "with assms"], ["proof (chain)\npicking this:\n  \\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  s = Decision x2_", "show \"\\<gamma>,p\\<turnstile> \\<langle>r # rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  \\<gamma>,p\\<turnstile> \\<langle>[r], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  \\<gamma>,p\\<turnstile> \\<langle>rs, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n  s = Decision x2_\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "by(auto simp: decision dest!: decisionD)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>r #\n                                  rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>wf ruleset\\<close>"], ["", "text\\<open>\n  A @{typ \"'a rule list\"} here is well-formed (for a packet) if\n    \\<^item> either the rules do not match\n    \\<^item> or the action is not @{const Call}, not @{const Return}, not @{const Unknown}\n\\<close>"], ["", "definition wf_ruleset :: \"('a, 'p) match_tac \\<Rightarrow> 'p \\<Rightarrow> 'a rule list \\<Rightarrow> bool\" where\n    \"wf_ruleset \\<gamma> p rs \\<equiv> \\<forall>r \\<in> set rs. \n      (\\<not> matches \\<gamma> (get_match r) (get_action r) p) \\<or> \n      (\\<not>(\\<exists>chain. get_action r = Call chain) \\<and> get_action r \\<noteq> Return \\<and> \\<not>(\\<exists>chain. get_action r = Goto chain) \\<and> get_action r \\<noteq> Unknown)\""], ["", "lemma wf_ruleset_append: \"wf_ruleset \\<gamma> p (rs1@rs2) \\<longleftrightarrow> wf_ruleset \\<gamma> p rs1 \\<and> wf_ruleset \\<gamma> p rs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (rs1 @ rs2) =\n    (wf_ruleset \\<gamma> p rs1 \\<and> wf_ruleset \\<gamma> p rs2)", "by(auto simp add: wf_ruleset_def)"], ["", "lemma wf_rulesetD: assumes \"wf_ruleset \\<gamma> p (r # rs)\" shows \"wf_ruleset \\<gamma> p [r]\" and \"wf_ruleset \\<gamma> p rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r] &&& wf_ruleset \\<gamma> p rs", "using assms"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p (r # rs)\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p [r] &&& wf_ruleset \\<gamma> p rs", "by(auto simp add: wf_ruleset_def)"], ["", "lemma wf_ruleset_fst: \"wf_ruleset \\<gamma> p (Rule m a # rs) \\<longleftrightarrow> wf_ruleset \\<gamma> p [Rule m a] \\<and> wf_ruleset \\<gamma> p rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (Rule m a # rs) =\n    (wf_ruleset \\<gamma> p [Rule m a] \\<and> wf_ruleset \\<gamma> p rs)", "by(auto simp add: wf_ruleset_def)"], ["", "lemma wf_ruleset_stripfst: \"wf_ruleset \\<gamma> p (r # rs) \\<Longrightarrow> wf_ruleset \\<gamma> p (rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (r # rs) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p rs", "by(simp add: wf_ruleset_def)"], ["", "lemma wf_ruleset_rest: \"wf_ruleset \\<gamma> p (Rule m a # rs) \\<Longrightarrow> wf_ruleset \\<gamma> p [Rule m a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (Rule m a # rs) \\<Longrightarrow>\n    wf_ruleset \\<gamma> p [Rule m a]", "by(simp add: wf_ruleset_def)"], ["", "subsection\\<open>Ternary Semantics (Function)\\<close>"], ["", "fun approximating_bigstep_fun :: \"('a, 'p) match_tac \\<Rightarrow> 'p \\<Rightarrow> 'a rule list \\<Rightarrow> state \\<Rightarrow> state\" where\n  \"approximating_bigstep_fun \\<gamma> p [] s = s\" |\n  \"approximating_bigstep_fun \\<gamma> p rs (Decision X) = (Decision X)\" |\n  \"approximating_bigstep_fun \\<gamma> p ((Rule m a)#rs) Undecided = (if \n      \\<not> matches \\<gamma> m a p\n    then\n      approximating_bigstep_fun \\<gamma> p rs Undecided\n    else\n      case a of Accept \\<Rightarrow> Decision FinalAllow\n              | Drop \\<Rightarrow> Decision FinalDeny\n              | Reject \\<Rightarrow> Decision FinalDeny\n              | Log \\<Rightarrow> approximating_bigstep_fun \\<gamma> p rs Undecided\n              | Empty \\<Rightarrow> approximating_bigstep_fun \\<gamma> p rs Undecided\n              \\<comment> \\<open>unhandled cases\\<close>\n              )\""], ["", "(*tuned induction rule*)"], ["", "lemma approximating_bigstep_fun_induct[case_names Empty Decision Nomatch Match] : \"\n(\\<And>\\<gamma> p s. P \\<gamma> p [] s) \\<Longrightarrow>\n(\\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X)) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    \\<not> matches \\<gamma> m a p \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> (a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided) \\<Longrightarrow> (a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided) \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\nP \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>\\<gamma> p s. P \\<gamma> p [] s;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p;\n         a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided;\n         a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p rs s", "apply (rule approximating_bigstep_fun.induct[of P \\<gamma> p rs s])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<And>\\<gamma> p s. P \\<gamma> p [] s;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p;\n            a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided;\n            a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p [] s\n 2. \\<And>\\<gamma> p v va X.\n       \\<lbrakk>\\<And>\\<gamma> p s. P \\<gamma> p [] s;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p;\n            a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided;\n            a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (v # va) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<And>\\<gamma> p s. P \\<gamma> p [] s;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p;\n            a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided;\n            a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n        P \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Log\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> m a p; a = Empty\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<And>\\<gamma> p s. P \\<gamma> p [] s;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p;\n            a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided;\n            a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n        P \\<gamma> p rs Undecided;\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "by metis"], ["", "lemma Decision_approximating_bigstep_fun: \"approximating_bigstep_fun \\<gamma> p rs (Decision X) = Decision X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs (Decision X) = Decision X", "by(induction rs) (simp_all)"], ["", "lemma approximating_bigstep_fun_induct_wf[case_names Empty Decision Nomatch MatchAccept MatchDrop MatchReject MatchLog MatchEmpty, consumes 1]:\n  \"wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n(\\<And>\\<gamma> p s. P \\<gamma> p [] s) \\<Longrightarrow>\n(\\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X)) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    \\<not> matches \\<gamma> m a p \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Accept  \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Drop \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Reject \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Log \\<Longrightarrow> P \\<gamma> p rs Undecided  \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\n(\\<And>\\<gamma> p m a rs.\n    matches \\<gamma> m a p \\<Longrightarrow> a = Empty \\<Longrightarrow> P \\<gamma> p rs Undecided \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided) \\<Longrightarrow>\nP \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p rs;\n     \\<And>\\<gamma> p s. P \\<gamma> p [] s;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> p m a rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>wf_ruleset \\<gamma> p [];\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p (r # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "case Empty"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma>_ p_ []\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>wf_ruleset \\<gamma> p [];\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p (r # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma>_ p_ []\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (1 subgoal):\n 1. P \\<gamma>_ p_ [] s_", "by blast"], ["proof (state)\nthis:\n  P \\<gamma>_ p_ [] s_\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p (r # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p (r # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "case Decision"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma>_ p_ (r_ # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p (r # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma>_ p_ (r_ # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (1 subgoal):\n 1. P \\<gamma>_ p_ (r_ # rs_) (Decision X_)", "by blast"], ["proof (state)\nthis:\n  P \\<gamma>_ p_ (r_ # rs_) (Decision X_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "case Nomatch"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>wf_ruleset \\<gamma>_ p_ rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma>_ p_ rs_ Undecided\n  wf_ruleset \\<gamma>_ p_ (Rule m_ a_ # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>wf_ruleset \\<gamma>_ p_ rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma>_ p_ rs_ Undecided\n  wf_ruleset \\<gamma>_ p_ (Rule m_ a_ # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (1 subgoal):\n 1. P \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided", "by(simp add: wf_ruleset_def)"], ["proof (state)\nthis:\n  P \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "case (Match \\<gamma> p m a)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma> p rs_ Undecided\n  \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma> p rs_ Undecided\n  wf_ruleset \\<gamma> p (Rule m a # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs;\n         \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n         \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>\\<not> matches \\<gamma> m a p;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Log;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n         \\<And>\\<gamma> p m a rs.\n            \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n             P \\<gamma> p rs Undecided\\<rbrakk>\n            \\<Longrightarrow> P \\<gamma> p (Rule m a # rs)\n                               Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p rs Undecided;\n        wf_ruleset \\<gamma> p (Rule m a # rs);\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> p m a rs.\n           \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma> p rs_ Undecided\n  \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs_;\n   \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n   \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>\\<not> matches \\<gamma> m a p;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Log;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n   \\<And>\\<gamma> p m a rs.\n      \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n       P \\<gamma> p rs Undecided\\<rbrakk>\n      \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n  \\<Longrightarrow> P \\<gamma> p rs_ Undecided\n  wf_ruleset \\<gamma> p (Rule m a # rs_)\n  P ?\\<gamma> ?p [] ?x\n  P ?\\<gamma> ?p (?r # ?rs) (Decision ?X)\n  \\<lbrakk>\\<not> matches ?\\<gamma> ?m ?a ?p;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Accept\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Drop\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Reject\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Log;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n  \\<lbrakk>matches ?\\<gamma> ?m ?a ?p; ?a = Empty;\n   P ?\\<gamma> ?p ?rs Undecided\\<rbrakk>\n  \\<Longrightarrow> P ?\\<gamma> ?p (Rule ?m ?a # ?rs) Undecided\n\ngoal (1 subgoal):\n 1. P \\<gamma> p (Rule m a # rs_) Undecided", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m a p;\n     \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs_;\n      \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n      \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>\\<not> matches \\<gamma> m a p;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Log;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n     \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs_;\n      \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n      \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>\\<not> matches \\<gamma> m a p;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Log;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n     \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     wf_ruleset \\<gamma> p (Rule m a # rs_);\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided", "apply(frule wf_rulesetD(1), drule wf_rulesetD(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m a p;\n     \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs_;\n      \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n      \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>\\<not> matches \\<gamma> m a p;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Log;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n     \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs_;\n      \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n      \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>\\<not> matches \\<gamma> m a p;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Log;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n      \\<And>\\<gamma> p m a rs.\n         \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n          P \\<gamma> p rs Undecided\\<rbrakk>\n         \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided\\<rbrakk>\n     \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided", "apply(cases a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Accept\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 2. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Drop\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 3. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Log\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 4. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Reject\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 5. \\<And>x5.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n        a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n        wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n        a = Call x5\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 6. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 7. \\<And>x7.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n        a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n        wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n        a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 8. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Empty\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided\n 9. \\<lbrakk>matches \\<gamma> m a p;\n     a = Log \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     a = Empty \\<Longrightarrow> P \\<gamma> p rs_ Undecided;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m a]; wf_ruleset \\<gamma> p rs_;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m a # rs_) Undecided", "apply(simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x5.\n       \\<lbrakk>matches \\<gamma> m (Call x5) p;\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n        wf_ruleset \\<gamma> p [Rule m (Call x5)]; wf_ruleset \\<gamma> p rs_;\n        a = Call x5\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m (Call x5) # rs_) Undecided\n 2. \\<lbrakk>matches \\<gamma> m Return p;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m Return]; wf_ruleset \\<gamma> p rs_;\n     a = Return\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m Return # rs_) Undecided\n 3. \\<And>x7.\n       \\<lbrakk>matches \\<gamma> m (Goto x7) p;\n        \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n        \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>\\<not> matches \\<gamma> m a p;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n        \\<And>\\<gamma> m a p rs.\n           \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n            P \\<gamma> p rs Undecided\\<rbrakk>\n           \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n        wf_ruleset \\<gamma> p [Rule m (Goto x7)]; wf_ruleset \\<gamma> p rs_;\n        a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> P \\<gamma> p (Rule m (Goto x7) # rs_) Undecided\n 4. \\<lbrakk>matches \\<gamma> m Unknown p;\n     \\<And>\\<gamma> p x. P \\<gamma> p [] x;\n     \\<And>\\<gamma> p r rs X. P \\<gamma> p (r # rs) (Decision X);\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>\\<not> matches \\<gamma> m a p;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m a # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Accept p; a = Accept\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Accept # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Drop p; a = Drop\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Drop # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Reject p; a = Reject\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Reject # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Log # rs) Undecided;\n     \\<And>\\<gamma> m a p rs.\n        \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n         P \\<gamma> p rs Undecided\\<rbrakk>\n        \\<Longrightarrow> P \\<gamma> p (Rule m Empty # rs) Undecided;\n     wf_ruleset \\<gamma> p [Rule m Unknown]; wf_ruleset \\<gamma> p rs_;\n     a = Unknown\\<rbrakk>\n    \\<Longrightarrow> P \\<gamma> p (Rule m Unknown # rs_) Undecided", "apply(auto simp add: wf_ruleset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P \\<gamma> p (Rule m a # rs_) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma just_show_all_approximating_bigstep_fun_equalities_with_start_Undecided[case_names Undecided]: \n      assumes \"s = Undecided \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rs1 s = approximating_bigstep_fun \\<gamma> p rs2 s\"\n      shows \"approximating_bigstep_fun \\<gamma> p rs1 s = approximating_bigstep_fun \\<gamma> p rs2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s", "proof(cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p rs1 s =\n       approximating_bigstep_fun \\<gamma> p rs2 s", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p rs1 s =\n       approximating_bigstep_fun \\<gamma> p rs2 s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s", "using assms"], ["proof (prove)\nusing this:\n  s = Undecided\n  s = Undecided \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p rs1 s =\n  approximating_bigstep_fun \\<gamma> p rs2 s\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p rs1 s =\n  approximating_bigstep_fun \\<gamma> p rs2 s\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p rs1 s =\n       approximating_bigstep_fun \\<gamma> p rs2 s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p rs1 s =\n       approximating_bigstep_fun \\<gamma> p rs2 s", "case Decision"], ["proof (state)\nthis:\n  s = Decision x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p rs1 s =\n       approximating_bigstep_fun \\<gamma> p rs2 s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = Decision x2_\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs1 s =\n    approximating_bigstep_fun \\<gamma> p rs2 s", "by (simp add: Decision_approximating_bigstep_fun)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p rs1 s =\n  approximating_bigstep_fun \\<gamma> p rs2 s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Append, Prepend, Postpend, Composition\\<close>"], ["", "lemma approximating_bigstep_fun_seq_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p rs\\<^sub>1\\<rbrakk> \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s = approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (approximating_bigstep_fun \\<gamma> p rs\\<^sub>1 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs\\<^sub>1 \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s =\n    approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n     (approximating_bigstep_fun \\<gamma> p rs\\<^sub>1 s)", "proof(induction \\<gamma> p rs\\<^sub>1 s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       wf_ruleset \\<gamma> p [] \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([] @ rs\\<^sub>2) s =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n        (approximating_bigstep_fun \\<gamma> p [] s)\n 2. \\<And>\\<gamma> p r rs X.\n       wf_ruleset \\<gamma> p (r # rs) \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ((r # rs) @ rs\\<^sub>2)\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n        (approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X))\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rs @ rs\\<^sub>2) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n         (approximating_bigstep_fun \\<gamma> p rs Undecided);\n        wf_ruleset \\<gamma> p (Rule m a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rs\\<^sub>2) Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n                          (approximating_bigstep_fun \\<gamma> p\n                            (Rule m a # rs) Undecided)\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p rs\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (rs @ rs\\<^sub>2) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n                           (approximating_bigstep_fun \\<gamma> p rs\n                             Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p rs\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (rs @ rs\\<^sub>2) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n                           (approximating_bigstep_fun \\<gamma> p rs\n                             Undecided);\n        wf_ruleset \\<gamma> p (Rule m a # rs)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rs\\<^sub>2) Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs\\<^sub>2\n                          (approximating_bigstep_fun \\<gamma> p\n                            (Rule m a # rs) Undecided)", "qed(simp_all add: wf_ruleset_def Decision_approximating_bigstep_fun split: action.split)"], ["", "text\\<open>The state transitions from @{const Undecided} to @{const Undecided} if all intermediate states are @{const Undecided}\\<close>"], ["", "lemma approximating_bigstep_fun_seq_Undecided_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p (rs1@rs2)\\<rbrakk> \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rs1@rs2) Undecided = Undecided \\<longleftrightarrow> \n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and> approximating_bigstep_fun \\<gamma> p rs2 Undecided = Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (rs1 @ rs2) \\<Longrightarrow>\n    (approximating_bigstep_fun \\<gamma> p (rs1 @ rs2) Undecided =\n     Undecided) =\n    (approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and>\n     approximating_bigstep_fun \\<gamma> p rs2 Undecided = Undecided)", "proof(induction \\<gamma> p rs1 Undecided rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p.\n       wf_ruleset \\<gamma> p ([] @ rs2) \\<Longrightarrow>\n       (approximating_bigstep_fun \\<gamma> p ([] @ rs2) Undecided =\n        Undecided) =\n       (approximating_bigstep_fun \\<gamma> p [] Undecided = Undecided \\<and>\n        approximating_bigstep_fun \\<gamma> p rs2 Undecided = Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided =\n         Undecided) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          Undecided) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          Undecided)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           Undecided) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           Undecided) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          Undecided) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          Undecided)", "qed(simp_all add: wf_ruleset_def split: action.split)"], ["", "lemma approximating_bigstep_fun_seq_Undecided_t_wf: \"\\<lbrakk> wf_ruleset \\<gamma> p (rs1@rs2)\\<rbrakk> \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rs1@rs2) Undecided = t \\<longleftrightarrow> \n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and> approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n  approximating_bigstep_fun \\<gamma> p rs1 Undecided = t \\<and> t \\<noteq> Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p (rs1 @ rs2) \\<Longrightarrow>\n    (approximating_bigstep_fun \\<gamma> p (rs1 @ rs2) Undecided = t) =\n    (approximating_bigstep_fun \\<gamma> p rs1 Undecided = Undecided \\<and>\n     approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n     approximating_bigstep_fun \\<gamma> p rs1 Undecided = t \\<and>\n     t \\<noteq> Undecided)", "proof(induction \\<gamma> p rs1 Undecided rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p.\n       wf_ruleset \\<gamma> p ([] @ rs2) \\<Longrightarrow>\n       (approximating_bigstep_fun \\<gamma> p ([] @ rs2) Undecided = t) =\n       (approximating_bigstep_fun \\<gamma> p [] Undecided = Undecided \\<and>\n        approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n        approximating_bigstep_fun \\<gamma> p [] Undecided = t \\<and>\n        t \\<noteq> Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided = t) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n         approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<and>\n         t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "case Empty"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma>_ p_ ([] @ rs2)\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p.\n       wf_ruleset \\<gamma> p ([] @ rs2) \\<Longrightarrow>\n       (approximating_bigstep_fun \\<gamma> p ([] @ rs2) Undecided = t) =\n       (approximating_bigstep_fun \\<gamma> p [] Undecided = Undecided \\<and>\n        approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n        approximating_bigstep_fun \\<gamma> p [] Undecided = t \\<and>\n        t \\<noteq> Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided = t) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n         approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<and>\n         t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "thus ?case"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma>_ p_ ([] @ rs2)\n\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun \\<gamma>_ p_ ([] @ rs2) Undecided = t) =\n    (approximating_bigstep_fun \\<gamma>_ p_ [] Undecided = Undecided \\<and>\n     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n     approximating_bigstep_fun \\<gamma>_ p_ [] Undecided = t \\<and>\n     t \\<noteq> Undecided)", "by(cases t) simp_all"], ["proof (state)\nthis:\n  (approximating_bigstep_fun \\<gamma>_ p_ ([] @ rs2) Undecided = t) =\n  (approximating_bigstep_fun \\<gamma>_ p_ [] Undecided = Undecided \\<and>\n   approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n   approximating_bigstep_fun \\<gamma>_ p_ [] Undecided = t \\<and>\n   t \\<noteq> Undecided)\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided = t) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n         approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<and>\n         t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided = t) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n         approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<and>\n         t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "case Nomatch"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  wf_ruleset \\<gamma>_ p_ (rs_ @ rs2) \\<Longrightarrow>\n  (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2) Undecided = t) =\n  (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided = Undecided \\<and>\n   approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n   approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided = t \\<and>\n   t \\<noteq> Undecided)\n  wf_ruleset \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        wf_ruleset \\<gamma> p (rs @ rs2) \\<Longrightarrow>\n        (approximating_bigstep_fun \\<gamma> p (rs @ rs2) Undecided = t) =\n        (approximating_bigstep_fun \\<gamma> p rs Undecided =\n         Undecided \\<and>\n         approximating_bigstep_fun \\<gamma> p rs2 Undecided = t \\<or>\n         approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<and>\n         t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  wf_ruleset \\<gamma>_ p_ (rs_ @ rs2) \\<Longrightarrow>\n  (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2) Undecided = t) =\n  (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided = Undecided \\<and>\n   approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n   approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided = t \\<and>\n   t \\<noteq> Undecided)\n  wf_ruleset \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n      Undecided =\n     t) =\n    (approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n     Undecided \\<and>\n     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n     approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n     t \\<and>\n     t \\<noteq> Undecided)", "by(simp add: wf_ruleset_def)"], ["proof (state)\nthis:\n  (approximating_bigstep_fun \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n    Undecided =\n   t) =\n  (approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n   Undecided \\<and>\n   approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n   approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n   t \\<and>\n   t \\<noteq> Undecided)\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "case Match"], ["proof (state)\nthis:\n  matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>a_ = Log; wf_ruleset \\<gamma>_ p_ (rs_ @ rs2)\\<rbrakk>\n  \\<Longrightarrow> (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2)\n                      Undecided =\n                     t) =\n                    (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     Undecided \\<and>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided =\n                     t \\<or>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     t \\<and>\n                     t \\<noteq> Undecided)\n  \\<lbrakk>a_ = Empty; wf_ruleset \\<gamma>_ p_ (rs_ @ rs2)\\<rbrakk>\n  \\<Longrightarrow> (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2)\n                      Undecided =\n                     t) =\n                    (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     Undecided \\<and>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided =\n                     t \\<or>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     t \\<and>\n                     t \\<noteq> Undecided)\n  wf_ruleset \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        \\<lbrakk>a = Empty; wf_ruleset \\<gamma> p (rs @ rs2)\\<rbrakk>\n        \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p (rs @ rs2)\n                            Undecided =\n                           t) =\n                          (approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           Undecided \\<and>\n                           approximating_bigstep_fun \\<gamma> p rs2\n                            Undecided =\n                           t \\<or>\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided =\n                           t \\<and>\n                           t \\<noteq> Undecided);\n        wf_ruleset \\<gamma> p ((Rule m a # rs) @ rs2)\\<rbrakk>\n       \\<Longrightarrow> (approximating_bigstep_fun \\<gamma> p\n                           ((Rule m a # rs) @ rs2) Undecided =\n                          t) =\n                         (approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          Undecided \\<and>\n                          approximating_bigstep_fun \\<gamma> p rs2\n                           Undecided =\n                          t \\<or>\n                          approximating_bigstep_fun \\<gamma> p\n                           (Rule m a # rs) Undecided =\n                          t \\<and>\n                          t \\<noteq> Undecided)", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>a_ = Log; wf_ruleset \\<gamma>_ p_ (rs_ @ rs2)\\<rbrakk>\n  \\<Longrightarrow> (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2)\n                      Undecided =\n                     t) =\n                    (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     Undecided \\<and>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided =\n                     t \\<or>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     t \\<and>\n                     t \\<noteq> Undecided)\n  \\<lbrakk>a_ = Empty; wf_ruleset \\<gamma>_ p_ (rs_ @ rs2)\\<rbrakk>\n  \\<Longrightarrow> (approximating_bigstep_fun \\<gamma>_ p_ (rs_ @ rs2)\n                      Undecided =\n                     t) =\n                    (approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     Undecided \\<and>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided =\n                     t \\<or>\n                     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided =\n                     t \\<and>\n                     t \\<noteq> Undecided)\n  wf_ruleset \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n\ngoal (1 subgoal):\n 1. (approximating_bigstep_fun \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n      Undecided =\n     t) =\n    (approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n     Undecided \\<and>\n     approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n     approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n     t \\<and>\n     t \\<noteq> Undecided)", "by(auto simp add: wf_ruleset_def split: action.split)"], ["proof (state)\nthis:\n  (approximating_bigstep_fun \\<gamma>_ p_ ((Rule m_ a_ # rs_) @ rs2)\n    Undecided =\n   t) =\n  (approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n   Undecided \\<and>\n   approximating_bigstep_fun \\<gamma>_ p_ rs2 Undecided = t \\<or>\n   approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided =\n   t \\<and>\n   t \\<noteq> Undecided)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma approximating_bigstep_fun_wf_postpend: \"wf_ruleset \\<gamma> p rsA \\<Longrightarrow> wf_ruleset \\<gamma> p rsB \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p rsA s = approximating_bigstep_fun \\<gamma> p rsB s \\<Longrightarrow> \n      approximating_bigstep_fun \\<gamma> p (rsA@rsC) s = approximating_bigstep_fun \\<gamma> p (rsB@rsC) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ruleset \\<gamma> p rsA; wf_ruleset \\<gamma> p rsB;\n     approximating_bigstep_fun \\<gamma> p rsA s =\n     approximating_bigstep_fun \\<gamma> p rsB s\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rsA @ rsC) s =\n                      approximating_bigstep_fun \\<gamma> p (rsB @ rsC) s", "apply(induction \\<gamma> p rsA s rule: approximating_bigstep_fun_induct_wf)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p [] s =\n        approximating_bigstep_fun \\<gamma> p rsB s\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p ([] @ rsC) s =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC) s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n        approximating_bigstep_fun \\<gamma> p rsB (Decision X)\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((r # rs) @ rsC) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n         approximating_bigstep_fun \\<gamma> p rs Undecided =\n         approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rs @ rsC)\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                           Undecided;\n        wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop; wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n         approximating_bigstep_fun \\<gamma> p rs Undecided =\n         approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rs @ rsC)\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                           Undecided;\n        wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided\n 8. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n         approximating_bigstep_fun \\<gamma> p rs Undecided =\n         approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (rs @ rsC)\n                           Undecided =\n                          approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                           Undecided;\n        wf_ruleset \\<gamma> p rsB;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((Rule m a # rs) @ rsC) Undecided =\n                         approximating_bigstep_fun \\<gamma> p (rsB @ rsC)\n                          Undecided", "apply(simp_all add: approximating_bigstep_fun_seq_wf)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p X.\n       \\<lbrakk>wf_ruleset \\<gamma> p rsB;\n        Decision X =\n        approximating_bigstep_fun \\<gamma> p rsB (Decision X)\\<rbrakk>\n       \\<Longrightarrow> Decision X =\n                         approximating_bigstep_fun \\<gamma> p rsC\n                          (Decision X)\n 2. \\<And>\\<gamma> p m a.\n       \\<lbrakk>matches \\<gamma> m Accept p; a = Accept;\n        wf_ruleset \\<gamma> p rsB;\n        Decision FinalAllow =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rsB\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rsC\n                          (approximating_bigstep_fun \\<gamma> p rsB\n                            Undecided)\n 3. \\<And>\\<gamma> p m a.\n       \\<lbrakk>matches \\<gamma> m Drop p; a = Drop;\n        wf_ruleset \\<gamma> p rsB;\n        Decision FinalDeny =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rsB\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rsC\n                          (approximating_bigstep_fun \\<gamma> p rsB\n                            Undecided)\n 4. \\<And>\\<gamma> p m a.\n       \\<lbrakk>matches \\<gamma> m Reject p; a = Reject;\n        wf_ruleset \\<gamma> p rsB;\n        Decision FinalDeny =\n        approximating_bigstep_fun \\<gamma> p rsB Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rsB\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rsC\n                          (approximating_bigstep_fun \\<gamma> p rsB\n                            Undecided)", "apply (metis Decision_approximating_bigstep_fun)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma approximating_bigstep_fun_singleton_prepend:\n    assumes \"approximating_bigstep_fun \\<gamma> p rsB s = approximating_bigstep_fun \\<gamma> p rsC s\"\n    shows \"approximating_bigstep_fun \\<gamma> p (r#rsB) s = approximating_bigstep_fun \\<gamma> p (r#rsC) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "proof(cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n       approximating_bigstep_fun \\<gamma> p (r # rsC) s", "case Decision"], ["proof (state)\nthis:\n  s = Decision x2_\n\ngoal (2 subgoals):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s\n 2. \\<And>x2.\n       s = Decision x2 \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n       approximating_bigstep_fun \\<gamma> p (r # rsC) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = Decision x2_\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "by(simp add: Decision_approximating_bigstep_fun)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n  approximating_bigstep_fun \\<gamma> p (r # rsC) s\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "case Undecided"], ["proof (state)\nthis:\n  s = Undecided\n\ngoal (1 subgoal):\n 1. s = Undecided \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "with assms"], ["proof (chain)\npicking this:\n  approximating_bigstep_fun \\<gamma> p rsB s =\n  approximating_bigstep_fun \\<gamma> p rsC s\n  s = Undecided", "show ?thesis"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p rsB s =\n  approximating_bigstep_fun \\<gamma> p rsC s\n  s = Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n    approximating_bigstep_fun \\<gamma> p (r # rsC) s", "by(cases r)(simp split: action.split)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (r # rsB) s =\n  approximating_bigstep_fun \\<gamma> p (r # rsC) s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Equality with @{term \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\"} semantics\\<close>"], ["", "lemma approximating_bigstep_wf: \"\\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow> wf_ruleset \\<gamma> p rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow>\n    wf_ruleset \\<gamma> p rs", "unfolding wf_ruleset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow>\n    \\<forall>r\\<in>set rs.\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown", "proof(induction rs Undecided Undecided rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>r\\<in>set [].\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set [Rule m a].\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<forall>r\\<in>set [].\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set [Rule m a].\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown\n 3. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 4. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set [].\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set [].\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set [Rule m a].\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown\n 2. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set [Rule m a].\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown\n 2. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "case Log"], ["proof (state)\nthis:\n  matches \\<gamma> m_ a_ p\n  a_ = Log \\<or> a_ = Empty\n\ngoal (3 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set [Rule m a].\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown\n 2. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 3. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m_ a_ p\n  a_ = Log \\<or> a_ = Empty\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set [Rule m_ a_].\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set [Rule m_ a_].\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "case Nomatch"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m_ a_ p\n\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<forall>r\\<in>set [Rule m a].\n          \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n          (\\<nexists>chain. get_action r = Call chain) \\<and>\n          get_action r \\<noteq> Return \\<and>\n          (\\<nexists>chain. get_action r = Goto chain) \\<and>\n          get_action r \\<noteq> Unknown\n 2. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m_ a_ p\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set [Rule m_ a_].\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set [Rule m_ a_].\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "case (Seq rs rs1 rs2 t)"], ["proof (state)\nthis:\n  rs = rs1 @ rs2\n  \\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs1.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  \\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs2.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "from Seq approximating_bigstep_to_undecided"], ["proof (chain)\npicking this:\n  rs = rs1 @ rs2\n  \\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs1.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  \\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs2.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow>\n  ?s = Undecided", "have \"t = Undecided\""], ["proof (prove)\nusing this:\n  rs = rs1 @ rs2\n  \\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs1.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  \\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs2.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, ?s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided \\<Longrightarrow>\n  ?s = Undecided\n\ngoal (1 subgoal):\n 1. t = Undecided", "by fast"], ["proof (state)\nthis:\n  t = Undecided\n\ngoal (1 subgoal):\n 1. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>1.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided;\n        t = Undecided \\<Longrightarrow>\n        \\<forall>r\\<in>set rs\\<^sub>2.\n           \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n           (\\<nexists>chain. get_action r = Call chain) \\<and>\n           get_action r \\<noteq> Return \\<and>\n           (\\<nexists>chain. get_action r = Goto chain) \\<and>\n           get_action r \\<noteq> Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set rs.\n                            \\<not> matches \\<gamma> (get_match r)\n                                    (get_action r) p \\<or>\n                            (\\<nexists>chain.\n                                get_action r = Call chain) \\<and>\n                            get_action r \\<noteq> Return \\<and>\n                            (\\<nexists>chain.\n                                get_action r = Goto chain) \\<and>\n                            get_action r \\<noteq> Unknown", "from this Seq"], ["proof (chain)\npicking this:\n  t = Undecided\n  rs = rs1 @ rs2\n  \\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs1.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  \\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs2.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown", "show ?case"], ["proof (prove)\nusing this:\n  t = Undecided\n  rs = rs1 @ rs2\n  \\<gamma>,p\\<turnstile> \\<langle>rs1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs1.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n  \\<gamma>,p\\<turnstile> \\<langle>rs2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n  t = Undecided \\<Longrightarrow>\n  \\<forall>r\\<in>set rs2.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set rs.\n       \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n       (\\<nexists>chain. get_action r = Call chain) \\<and>\n       get_action r \\<noteq> Return \\<and>\n       (\\<nexists>chain. get_action r = Goto chain) \\<and>\n       get_action r \\<noteq> Unknown", "by auto"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set rs.\n     \\<not> matches \\<gamma> (get_match r) (get_action r) p \\<or>\n     (\\<nexists>chain. get_action r = Call chain) \\<and>\n     get_action r \\<noteq> Return \\<and>\n     (\\<nexists>chain. get_action r = Goto chain) \\<and>\n     get_action r \\<noteq> Unknown\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>only valid actions appear in this ruleset\\<close>"], ["", "definition good_ruleset :: \"'a rule list \\<Rightarrow> bool\" where\n    \"good_ruleset rs \\<equiv> \\<forall>r \\<in> set rs. (\\<not>(\\<exists>chain. get_action r = Call chain) \\<and> get_action r \\<noteq> Return \\<and> \\<not>(\\<exists>chain. get_action r = Goto chain) \\<and> get_action r \\<noteq> Unknown)\""], ["", "lemma[code_unfold]: \"good_ruleset rs = (\\<forall>r\\<in>set rs. (case get_action r of Call chain \\<Rightarrow> False | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs =\n    (\\<forall>r\\<in>set rs.\n        case get_action r of Call chain \\<Rightarrow> False\n        | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False\n        | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True)", "unfolding good_ruleset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>r\\<in>set rs.\n        (\\<nexists>chain. get_action r = Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<nexists>chain. get_action r = Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n    (\\<forall>r\\<in>set rs.\n        case get_action r of Call chain \\<Rightarrow> False\n        | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False\n        | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True)", "apply(rule Set.ball_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set rs = set rs\n 2. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<nexists>chain. get_action r = Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<nexists>chain. get_action r = Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (case get_action r of Call chain \\<Rightarrow> False\n        | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False\n        | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<forall>chain. get_action r \\<noteq> Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<forall>chain. get_action r \\<noteq> Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (case get_action r of Call chain \\<Rightarrow> False\n        | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False\n        | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True)", "apply(rename_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<forall>chain. get_action r \\<noteq> Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<forall>chain. get_action r \\<noteq> Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (case get_action r of Call chain \\<Rightarrow> False\n        | Return \\<Rightarrow> False | Goto chain \\<Rightarrow> False\n        | Unknown \\<Rightarrow> False | _ \\<Rightarrow> True)", "by(case_tac \"get_action r\")(simp_all)"], ["", "lemma good_ruleset_alt: \"good_ruleset rs = (\\<forall>r\\<in>set rs. get_action r = Accept \\<or> get_action r = Drop \\<or>\n                                                get_action r = Reject \\<or> get_action r = Log  \\<or> get_action r = Empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs =\n    (\\<forall>r\\<in>set rs.\n        get_action r = Accept \\<or>\n        get_action r = Drop \\<or>\n        get_action r = Reject \\<or>\n        get_action r = Log \\<or> get_action r = Empty)", "unfolding good_ruleset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>r\\<in>set rs.\n        (\\<nexists>chain. get_action r = Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<nexists>chain. get_action r = Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n    (\\<forall>r\\<in>set rs.\n        get_action r = Accept \\<or>\n        get_action r = Drop \\<or>\n        get_action r = Reject \\<or>\n        get_action r = Log \\<or> get_action r = Empty)", "apply(rule Set.ball_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set rs = set rs\n 2. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<nexists>chain. get_action r = Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<nexists>chain. get_action r = Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (get_action r = Accept \\<or>\n        get_action r = Drop \\<or>\n        get_action r = Reject \\<or>\n        get_action r = Log \\<or> get_action r = Empty)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<forall>chain. get_action r \\<noteq> Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<forall>chain. get_action r \\<noteq> Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (get_action r = Accept \\<or>\n        get_action r = Drop \\<or>\n        get_action r = Reject \\<or>\n        get_action r = Log \\<or> get_action r = Empty)", "apply(rename_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       r \\<in> set rs \\<Longrightarrow>\n       ((\\<forall>chain. get_action r \\<noteq> Call chain) \\<and>\n        get_action r \\<noteq> Return \\<and>\n        (\\<forall>chain. get_action r \\<noteq> Goto chain) \\<and>\n        get_action r \\<noteq> Unknown) =\n       (get_action r = Accept \\<or>\n        get_action r = Drop \\<or>\n        get_action r = Reject \\<or>\n        get_action r = Log \\<or> get_action r = Empty)", "by(case_tac \"get_action r\")(simp_all)"], ["", "lemma good_ruleset_append: \"good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2) \\<longleftrightarrow> good_ruleset rs\\<^sub>1 \\<and> good_ruleset rs\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset (rs\\<^sub>1 @ rs\\<^sub>2) =\n    (good_ruleset rs\\<^sub>1 \\<and> good_ruleset rs\\<^sub>2)", "by(simp add: good_ruleset_alt, blast)"], ["", "lemma good_ruleset_fst: \"good_ruleset (r#rs) \\<Longrightarrow> good_ruleset [r]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset (r # rs) \\<Longrightarrow> good_ruleset [r]", "by(simp add: good_ruleset_def)"], ["", "lemma good_ruleset_tail: \"good_ruleset (r#rs) \\<Longrightarrow> good_ruleset rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset (r # rs) \\<Longrightarrow> good_ruleset rs", "by(simp add: good_ruleset_def)"], ["", "text\\<open>\n    @{term good_ruleset} is stricter than @{term wf_ruleset}. It can be easily checked with running code!\n\\<close>"], ["", "lemma good_imp_wf_ruleset: \"good_ruleset rs \\<Longrightarrow> wf_ruleset \\<gamma> p rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow> wf_ruleset \\<gamma> p rs", "by (metis good_ruleset_def wf_ruleset_def)"], ["", "lemma simple_imp_good_ruleset: \"simple_ruleset rs \\<Longrightarrow> good_ruleset rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_ruleset rs \\<Longrightarrow> good_ruleset rs", "by(simp add: simple_ruleset_def good_ruleset_def, fastforce)"], ["", "lemma approximating_bigstep_fun_seq_semantics: \"\\<lbrakk> \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<rbrakk> \\<Longrightarrow> \n    approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s = approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2) s =\n    approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t", "proof(induction rs\\<^sub>1 s t arbitrary: rs\\<^sub>2 rule: approximating_bigstep.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>t rs\\<^sub>2.\n       approximating_bigstep_fun \\<gamma> p ([] @ rs\\<^sub>2) t =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t\n 2. \\<And>m rs\\<^sub>2.\n       matches \\<gamma> m Accept p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m Accept] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (Decision FinalAllow)\n 3. \\<And>m rs\\<^sub>2.\n       matches \\<gamma> m Drop p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m Drop] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (Decision FinalDeny)\n 4. \\<And>m rs\\<^sub>2.\n       matches \\<gamma> m Reject p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m Reject] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (Decision FinalDeny)\n 5. \\<And>m rs\\<^sub>2.\n       matches \\<gamma> m Log p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m Log] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 Undecided\n 6. \\<And>m rs\\<^sub>2.\n       matches \\<gamma> m Empty p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m Empty] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 Undecided\n 7. \\<And>m a rs\\<^sub>2.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p ([Rule m a] @ rs\\<^sub>2)\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 Undecided\n 8. \\<And>rs X rs\\<^sub>2.\n       approximating_bigstep_fun \\<gamma> p (rs @ rs\\<^sub>2) (Decision X) =\n       approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 (Decision X)\n 9. \\<And>rs\\<^sub>1 t rs\\<^sub>2 t' rs\\<^sub>2'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>rs\\<^sub>2.\n           approximating_bigstep_fun \\<gamma> p (rs\\<^sub>1 @ rs\\<^sub>2)\n            Undecided =\n           approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>rs\\<^sub>2'.\n           approximating_bigstep_fun \\<gamma> p (rs\\<^sub>2 @ rs\\<^sub>2')\n            t =\n           approximating_bigstep_fun \\<gamma> p rs\\<^sub>2' t'\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          ((rs\\<^sub>1 @ rs\\<^sub>2) @ rs\\<^sub>2')\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs\\<^sub>2' t'", "qed(simp_all add: Decision_approximating_bigstep_fun)"], ["", "lemma approximating_semantics_imp_fun: \"\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rs s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p rs s = t", "proof(induction rs s t rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>t. approximating_bigstep_fun \\<gamma> p [] t = t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p [Rule m a]\n                          Undecided =\n                         Decision FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p [Rule m a]\n                          Undecided =\n                         Decision FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p [Rule m a]\n                          Undecided =\n                         Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p [Rule m a] Undecided = Undecided\n 6. \\<And>rs X.\n       approximating_bigstep_fun \\<gamma> p rs (Decision X) = Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p rs\\<^sub>1 Undecided = t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        approximating_bigstep_fun \\<gamma> p rs\\<^sub>2 t = t'\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p rs Undecided =\n                         t'", "qed(auto simp add: approximating_bigstep_fun_seq_semantics Decision_approximating_bigstep_fun)"], ["", "lemma approximating_fun_imp_semantics: assumes \"wf_ruleset \\<gamma> p rs\"\n      shows \"approximating_bigstep_fun \\<gamma> p rs s = t \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs s = t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "using assms"], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p rs s = t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p [] s = t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (Empty \\<gamma> p s)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p [] s = t\n\ngoal (8 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p [] s = t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus \"\\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p [] s = t\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "using skip"], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p [] s = t\n  ?\\<gamma>,?p\\<turnstile> \\<langle>[], ?t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by(simp)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (Decision \\<gamma> p r rs X)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) = t\n\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "hence \"t = Decision X\""], ["proof (prove)\nusing this:\n  approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) = t\n\ngoal (1 subgoal):\n 1. t = Decision X", "by simp"], ["proof (state)\nthis:\n  t = Decision X\n\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X) =\n       t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>r #\n rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus \"\\<gamma>,p\\<turnstile> \\<langle>r # rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  t = Decision X\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, Decision\n   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "using decision"], ["proof (prove)\nusing this:\n  t = Decision X\n  ?\\<gamma>,?p\\<turnstile> \\<langle>?rs, Decision\n    ?X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision ?X\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>r #\n                                    rs, Decision\n   X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by fast"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>r #\n                                  rs, Decision\n X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (6 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (Nomatch \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (6 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus \"\\<gamma>,p\\<turnstile> \\<langle>Rule m a # rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rule_tac t=Undecided in seq_fst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n     t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                  a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n     t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: nomatch)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n     t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: Nomatch.IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (5 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (MatchAccept \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Accept\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (5 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "hence \"t = Decision FinalAllow\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Accept\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. t = Decision FinalAllow", "by simp"], ["proof (state)\nthis:\n  t = Decision FinalAllow\n\ngoal (5 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus ?case"], ["proof (prove)\nusing this:\n  t = Decision FinalAllow\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by (metis MatchAccept.hyps accept decision seq_fst)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (MatchDrop \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Drop\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "hence \"t = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Drop\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. t = Decision FinalDeny", "by simp"], ["proof (state)\nthis:\n  t = Decision FinalDeny\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus ?case"], ["proof (prove)\nusing this:\n  t = Decision FinalDeny\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by (metis MatchDrop.hyps drop decision seq_fst)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (MatchReject \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Reject\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "hence \"t = Decision FinalDeny\""], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Reject\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. t = Decision FinalDeny", "by simp"], ["proof (state)\nthis:\n  t = Decision FinalDeny\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus ?case"], ["proof (prove)\nusing this:\n  t = Decision FinalDeny\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "by (metis MatchReject.hyps reject decision seq_fst)"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (MatchLog \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Log\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Log\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Log #\n                rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rule_tac t=Undecided in seq_fst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                  Log], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: log)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m Log p; a = Log;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: MatchLog.IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "case (MatchEmpty \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Empty\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        approximating_bigstep_fun \\<gamma> p rs Undecided =\n        t \\<Longrightarrow>\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided =\n        t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Empty\n  approximating_bigstep_fun \\<gamma> p rs Undecided = t \\<Longrightarrow>\n  \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided = t\n\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rule_tac t=Undecided in seq_fst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n                  Empty], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matches \\<gamma> m Empty p; a = Empty;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     approximating_bigstep_fun \\<gamma> p rs Undecided = t\\<rbrakk>\n    \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp add: MatchEmpty.IH)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                                  rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Henceforth, we will use the @{term approximating_bigstep_fun} semantics, because they are easier.\nWe show that they are equal.\n\\<close>"], ["", "theorem approximating_semantics_iff_fun: \"wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow> approximating_bigstep_fun \\<gamma> p rs s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    (approximating_bigstep_fun \\<gamma> p rs s = t)", "by (metis approximating_fun_imp_semantics approximating_semantics_imp_fun)"], ["", "corollary approximating_semantics_iff_fun_good_ruleset: \"good_ruleset rs \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow> approximating_bigstep_fun \\<gamma> p rs s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    (approximating_bigstep_fun \\<gamma> p rs s = t)", "by (metis approximating_semantics_iff_fun good_imp_wf_ruleset)"], ["", "lemma approximating_bigstep_deterministic: \"\\<lbrakk> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t; \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<rbrakk> \\<Longrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n     \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n    \\<Longrightarrow> t = t'", "proof(induction arbitrary: t' rule: approximating_bigstep_induct)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>t t'.\n       \\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       t = t'\n 2. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalAllow = t'\n 3. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalDeny = t'\n 4. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 5. \\<And>m a t'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 6. \\<And>rs X t'.\n       \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n      X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       Decision X = t'\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' t'a.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>t'.\n           \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n           t = t';\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>t'a.\n           \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a \\<Longrightarrow>\n           t' = t'a;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a", "case Seq"], ["proof (state)\nthis:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t' \\<Longrightarrow>\n  t_ = ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t' \\<Longrightarrow>\n  t'_ = ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (7 subgoals):\n 1. \\<And>t t'.\n       \\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       t = t'\n 2. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalAllow = t'\n 3. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalDeny = t'\n 4. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 5. \\<And>m a t'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 6. \\<And>rs X t'.\n       \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n      X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       Decision X = t'\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t' t'a.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<And>t'.\n           \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n           t = t';\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<And>t'a.\n           \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a \\<Longrightarrow>\n           t' = t'a;\n        \\<gamma>,p\\<turnstile> \\<langle>rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'a\\<rbrakk>\n       \\<Longrightarrow> t' = t'a", "thus ?case"], ["proof (prove)\nusing this:\n  rs_ = rs\\<^sub>1_ @ rs\\<^sub>2_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'_\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t' \\<Longrightarrow>\n  t_ = ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2_, t_\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t' \\<Longrightarrow>\n  t'_ = ?t'\n  \\<gamma>,p\\<turnstile> \\<langle>rs_, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. t'_ = t'", "by (metis (hide_lams, mono_tags) append_Nil2 approximating_bigstep_fun.simps(1) approximating_bigstep_fun_seq_semantics)"], ["proof (state)\nthis:\n  t'_ = t'\n\ngoal (6 subgoals):\n 1. \\<And>t t'.\n       \\<gamma>,p\\<turnstile> \\<langle>[], t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       t = t'\n 2. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalAllow = t'\n 3. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Decision FinalDeny = t'\n 4. \\<And>m a t'.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 5. \\<And>m a t'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<gamma>,p\\<turnstile> \\<langle>[Rule m\n    a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> Undecided = t'\n 6. \\<And>rs X t'.\n       \\<gamma>,p\\<turnstile> \\<langle>rs, Decision\n      X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t' \\<Longrightarrow>\n       Decision X = t'", "qed(auto dest: approximating_bigstepD)"], ["", "lemma rm_LogEmpty_fun_semantics: \n  \"approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Empty"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_ (rm_LogEmpty []) s_ =\n    approximating_bigstep_fun \\<gamma>_ p_ [] s_", "by(simp)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_ (rm_LogEmpty []) s_ =\n  approximating_bigstep_fun \\<gamma>_ p_ [] s_\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Decision"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p r rs X.\n       approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_ (rm_LogEmpty (r_ # rs_))\n     (Decision X_) =\n    approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)", "by(simp add: Decision_approximating_bigstep_fun)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_ (rm_LogEmpty (r_ # rs_))\n   (Decision X_) =\n  approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Nomatch \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m a p\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (Rule m a # rs))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "by(cases a,simp_all)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (Rule m a # rs))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Match \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  a = Log \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  a = Empty \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (rm_LogEmpty (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  a = Log \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n  a = Empty \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty rs) Undecided =\n  approximating_bigstep_fun \\<gamma> p rs Undecided\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (Rule m a # rs))\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "by(cases a,simp_all)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (rm_LogEmpty (Rule m a # rs))\n   Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal:\nNo subgoals!", "qed"], ["", "(*we probably don't need the following*)"], ["", "lemma \"\\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<longleftrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t =\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(induction rs arbitrary: s t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s t.\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  [], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>[], s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>a rs s t.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a rs s t.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rename_tac r rs s t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs s t.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (r # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>r #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(case_tac r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs s t x1 x2.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (r # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>r #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs s t x1 x2.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule x1 x2 # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule x1 x2 #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(rename_tac m a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(case_tac a)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>r rs s t m a x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>r rs s t m a x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 9. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   (Rule m a # rs), s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m a; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m a #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 10. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\nrs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(simp_all)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Accept #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Accept; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Accept #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Drop; a = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Log; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Log #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Reject; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>r rs s t m a x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m (Call x5); a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Return; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>r rs s t m a x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m (Goto x7); a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Empty; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 9. \\<And>r rs s t m a.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        r = Rule m Unknown; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 10. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\nrs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(auto intro: approximating_bigstep.intros )"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Accept #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Accept #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Log #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>rs s t m x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 9. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 10. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n     \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\nrs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Drop #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Log #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 9. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Log #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 8. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply (metis decision log nomatch_fst seq_fst state.exhaust)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Reject #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 7. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>rs s t m x5.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Call x5) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 6. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Return #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 5. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>rs s t m x7.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m (Goto x7) #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 4. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Empty #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 3. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply (metis decision empty nomatch_fst seq_fst state.exhaust)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs s t m.\n       \\<lbrakk>\\<And>s t.\n                   \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n              rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n                   \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n  rm_LogEmpty rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>Rule m Unknown #\n                   rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(erule seqE_fst, simp add: seq_fst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>,p\\<turnstile> \\<langle>rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t \\<Longrightarrow>\n    \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                                     rs, s\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t", "apply(induction rs s t rule: approximating_bigstep_induct)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>t.\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  [], t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t\n 2. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalAllow\n 3. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop \\<or> a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision\n                                     FinalDeny\n 4. \\<And>m a.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log \\<or> a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 5. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  [Rule m a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 6. \\<And>rs X.\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  rs, Decision X\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Decision X\n 7. \\<And>rs rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>rs = rs\\<^sub>1 @ rs\\<^sub>2;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    rs, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(auto intro: approximating_bigstep.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  [Rule m a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(rename_tac m a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m a.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n  [Rule m a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(case_tac a)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 2. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 3. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 4. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 5. \\<And>m a x5.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 6. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 7. \\<And>m a x7.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 8. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 9. \\<And>m a.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    [Rule m\n                      a], Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> Undecided\n 10. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n        \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n         \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n    rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n         \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n         \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n    rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n        \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                     (rs\\<^sub>1 @\n                      rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(auto intro: approximating_bigstep.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(rename_tac rs\\<^sub>1 rs\\<^sub>2 t t')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(drule_tac rs\\<^sub>1=\"rm_LogEmpty rs\\<^sub>1\" and rs\\<^sub>2=\"rm_LogEmpty rs\\<^sub>2\" in seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'109\n                                   rs\\<^sub>1 rs\\<^sub>2 t t'\n 2. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty rs\\<^sub>1 @\n  rm_LogEmpty\n   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> ?t'109\n                          rs\\<^sub>1 rs\\<^sub>2 t t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty rs\\<^sub>1 @\n  rm_LogEmpty\n   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "using rm_LogEmpty_seq"], ["proof (prove)\nusing this:\n  rm_LogEmpty (?rs1.0 @ ?rs2.0) = rm_LogEmpty ?rs1.0 @ rm_LogEmpty ?rs2.0\n\ngoal (1 subgoal):\n 1. \\<And>rs\\<^sub>1 rs\\<^sub>2 t t'.\n       \\<lbrakk>\\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>1, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t;\n        \\<gamma>,p\\<turnstile> \\<langle>rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n   rs\\<^sub>2, t\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t';\n        \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty rs\\<^sub>1 @\n  rm_LogEmpty\n   rs\\<^sub>2, Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'\\<rbrakk>\n       \\<Longrightarrow> \\<gamma>,p\\<turnstile> \\<langle>rm_LogEmpty\n                    (rs\\<^sub>1 @\n                     rs\\<^sub>2), Undecided\\<rangle> \\<Rightarrow>\\<^sub>\\<alpha> t'", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rm_LogEmpty_simple_but_Reject: \n  \"good_ruleset rs \\<Longrightarrow> \\<forall>r \\<in> set (rm_LogEmpty rs). get_action r = Accept \\<or> get_action r = Reject \\<or> get_action r = Drop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow>\n    \\<forall>r\\<in>set (rm_LogEmpty rs).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. good_ruleset [] \\<Longrightarrow>\n    \\<forall>r\\<in>set (rm_LogEmpty []).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop\n 2. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n                            get_action r = Accept \\<or>\n                            get_action r = Reject \\<or> get_action r = Drop", "case Nil"], ["proof (state)\nthis:\n  good_ruleset []\n\ngoal (2 subgoals):\n 1. good_ruleset [] \\<Longrightarrow>\n    \\<forall>r\\<in>set (rm_LogEmpty []).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop\n 2. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n                            get_action r = Accept \\<or>\n                            get_action r = Reject \\<or> get_action r = Drop", "thus ?case"], ["proof (prove)\nusing this:\n  good_ruleset []\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (rm_LogEmpty []).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop", "by(simp add: good_ruleset_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (rm_LogEmpty []).\n     get_action r = Accept \\<or>\n     get_action r = Reject \\<or> get_action r = Drop\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n                            get_action r = Accept \\<or>\n                            get_action r = Reject \\<or> get_action r = Drop", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n                            get_action r = Accept \\<or>\n                            get_action r = Reject \\<or> get_action r = Drop", "case (Cons r rs)"], ["proof (state)\nthis:\n  good_ruleset rs \\<Longrightarrow>\n  \\<forall>r\\<in>set (rm_LogEmpty rs).\n     get_action r = Accept \\<or>\n     get_action r = Reject \\<or> get_action r = Drop\n  good_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (a # rs)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n                            get_action r = Accept \\<or>\n                            get_action r = Reject \\<or> get_action r = Drop", "thus ?case"], ["proof (prove)\nusing this:\n  good_ruleset rs \\<Longrightarrow>\n  \\<forall>r\\<in>set (rm_LogEmpty rs).\n     get_action r = Accept \\<or>\n     get_action r = Reject \\<or> get_action r = Drop\n  good_ruleset (r # rs)\n\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (r # rs); ra \\<in> set (rm_LogEmpty (r # rs));\n        get_action ra \\<noteq> Accept; get_action ra \\<noteq> Drop\\<rbrakk>\n       \\<Longrightarrow> get_action ra = Reject", "apply(cases r, rename_tac m a, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra m a.\n       \\<lbrakk>good_ruleset rs \\<Longrightarrow>\n                \\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or> get_action r = Drop;\n        good_ruleset (Rule m a # rs);\n        ra \\<in> set (rm_LogEmpty (Rule m a # rs));\n        get_action ra \\<noteq> Accept; get_action ra \\<noteq> Drop;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> get_action ra = Reject", "by(case_tac a) (auto simp add: good_ruleset_def)"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n     get_action r = Accept \\<or>\n     get_action r = Reject \\<or> get_action r = Drop\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rw_Reject_fun_semantics: \n  \"wf_unknown_match_tac \\<alpha> \\<Longrightarrow> \n  (approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s = approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s", "proof(induction rs)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject []) s =\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p [] s\n 2. \\<And>a rs.\n       \\<lbrakk>wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                 (rw_Reject rs) s =\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (a # rs) s", "case Nil"], ["proof (state)\nthis:\n  wf_unknown_match_tac \\<alpha>\n\ngoal (2 subgoals):\n 1. wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject []) s =\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p [] s\n 2. \\<And>a rs.\n       \\<lbrakk>wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                 (rw_Reject rs) s =\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (a # rs) s", "thus ?case"], ["proof (prove)\nusing this:\n  wf_unknown_match_tac \\<alpha>\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject []) s =\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p [] s", "by simp"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject []) s =\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p [] s\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                 (rw_Reject rs) s =\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (a # rs) s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                 (rw_Reject rs) s =\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (a # rs) s", "case (Cons r rs)"], ["proof (state)\nthis:\n  wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s\n  wf_unknown_match_tac \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                 (rw_Reject rs) s =\n                approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (a # rs) s", "thus ?case"], ["proof (prove)\nusing this:\n  wf_unknown_match_tac \\<alpha> \\<Longrightarrow>\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s\n  wf_unknown_match_tac \\<alpha>\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject (r # rs)) s =\n    approximating_bigstep_fun (\\<beta>, \\<alpha>) p (r # rs) s", "apply(case_tac r, rename_tac m a, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s", "apply(case_tac a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Accept\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 2. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Drop\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 3. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Log\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 4. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Reject\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 5. \\<And>m a x5.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 6. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Return\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 7. \\<And>m a x7.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 8. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Empty\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 9. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s", "apply(case_tac [!] s)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Accept; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 2. \\<And>m a x2.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Accept; s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 3. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Drop; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 4. \\<And>m a x2.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Drop; s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 5. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Log; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 6. \\<And>m a x2.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Log; s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 7. \\<And>m a.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Reject; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 8. \\<And>m a x2.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Reject; s = Decision x2\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 9. \\<And>m a x5.\n       \\<lbrakk>r = Rule m a;\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n        approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n        wf_unknown_match_tac \\<alpha>; a = Call x5; s = Undecided\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (rw_Reject (Rule m a # rs)) s =\n                         approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                          (Rule m a # rs) s\n 10. \\<And>m a x5 x2.\n        \\<lbrakk>r = Rule m a;\n         approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject rs) s =\n         approximating_bigstep_fun (\\<beta>, \\<alpha>) p rs s;\n         wf_unknown_match_tac \\<alpha>; a = Call x5;\n         s = Decision x2\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                           (rw_Reject (Rule m a # rs)) s =\n                          approximating_bigstep_fun (\\<beta>, \\<alpha>) p\n                           (Rule m a # rs) s\nA total of 18 subgoals...", "apply(auto dest: wf_unknown_match_tacD_False1 wf_unknown_match_tacD_False2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p (rw_Reject (r # rs)) s =\n  approximating_bigstep_fun (\\<beta>, \\<alpha>) p (r # rs) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rmLogEmpty_rwReject_good_to_simple: \"good_ruleset rs \\<Longrightarrow> simple_ruleset (rw_Reject (rm_LogEmpty rs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_ruleset rs \\<Longrightarrow>\n    simple_ruleset (rw_Reject (rm_LogEmpty rs))", "apply(drule rm_LogEmpty_simple_but_Reject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (rm_LogEmpty rs).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop \\<Longrightarrow>\n    simple_ruleset (rw_Reject (rm_LogEmpty rs))", "apply(simp add: simple_ruleset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (rm_LogEmpty rs).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop \\<Longrightarrow>\n    \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n       get_action r = Accept \\<or> get_action r = Drop", "apply(induction rs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>r\\<in>set (rm_LogEmpty []).\n       get_action r = Accept \\<or>\n       get_action r = Reject \\<or> get_action r = Drop \\<Longrightarrow>\n    \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty [])).\n       get_action r = Accept \\<or> get_action r = Drop\n 2. \\<And>a rs.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (a # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a rs.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (a # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (a # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(rename_tac r rs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(case_tac r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs x1 x2.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule x1 x2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(rename_tac m a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(case_tac a)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Accept\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 2. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Drop\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 3. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Log\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 4. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Reject\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 5. \\<And>r rs m a x5.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Call x5\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 6. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Return\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 7. \\<And>r rs m a x7.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Goto x7\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 8. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Empty\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop\n 9. \\<And>r rs m a.\n       \\<lbrakk>\\<forall>r\\<in>set (rm_LogEmpty rs).\n                   get_action r = Accept \\<or>\n                   get_action r = Reject \\<or>\n                   get_action r = Drop \\<Longrightarrow>\n                \\<forall>r\\<in>set (rw_Reject (rm_LogEmpty rs)).\n                   get_action r = Accept \\<or> get_action r = Drop;\n        \\<forall>r\\<in>set (rm_LogEmpty (r # rs)).\n           get_action r = Accept \\<or>\n           get_action r = Reject \\<or> get_action r = Drop;\n        r = Rule m a; a = Unknown\\<rbrakk>\n       \\<Longrightarrow> \\<forall>r\\<in>set\n   (rw_Reject (rm_LogEmpty (r # rs))).\n                            get_action r = Accept \\<or> get_action r = Drop", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Matching\\<close>"], ["", "lemma optimize_matches_option_generic:\n  assumes \"\\<forall> r \\<in> set rs. P (get_match r) (get_action r)\"\n      and \"(\\<And>m m' a. P m a \\<Longrightarrow> f m = Some m' \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p)\"\n      and \"(\\<And>m a. P m a \\<Longrightarrow> f m = None \\<Longrightarrow> \\<not> matches \\<gamma> m a p)\"\n  shows \"approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>\\<forall>r\\<in>set (r # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (r # rs))\n                          (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Decision"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (r_ # rs_). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma>_ ?m' ?a p_ = matches \\<gamma>_ ?m ?a p_\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma>_ ?m ?a p_\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>\\<forall>r\\<in>set (r # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (r # rs))\n                          (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (r_ # rs_). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma>_ ?m' ?a p_ = matches \\<gamma>_ ?m ?a p_\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma>_ ?m ?a p_\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_\n     (optimize_matches_option f (r_ # rs_)) (Decision X_) =\n    approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)", "by (simp add: Decision_approximating_bigstep_fun)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_\n   (optimize_matches_option f (r_ # rs_)) (Decision X_) =\n  approximating_bigstep_fun \\<gamma>_ p_ (r_ # rs_) (Decision X_)\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Nomatch \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma> m a p\n  \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma> m a p\n  \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches_option f (Rule m a # rs)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p rs Undecided;\n     P m a \\<and> (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n     \\<And>m a m'.\n        \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n     \\<And>m a.\n        \\<lbrakk>P m a; f m = None\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (case f m of\n                        None \\<Rightarrow> optimize_matches_option f rs\n                        | Some m \\<Rightarrow>\n                            Rule m a # optimize_matches_option f rs)\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(cases \"f m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma> m a p;\n     approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n      Undecided =\n     approximating_bigstep_fun \\<gamma> p rs Undecided;\n     P m a \\<and> (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n     \\<And>m a m'.\n        \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n     \\<And>m a.\n        \\<lbrakk>P m a; f m = None\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n     f m = None\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (case f m of\n                        None \\<Rightarrow> optimize_matches_option f rs\n                        | Some m \\<Rightarrow>\n                            Rule m a # optimize_matches_option f rs)\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p rs Undecided\n 2. \\<And>aa.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (case f m of\n                           None \\<Rightarrow> optimize_matches_option f rs\n                           | Some m \\<Rightarrow>\n                               Rule m a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (case f m of\n                           None \\<Rightarrow> optimize_matches_option f rs\n                           | Some m \\<Rightarrow>\n                               Rule m a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(simp del: approximating_bigstep_fun.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule aa a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(rename_tac m')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m' a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(subgoal_tac \"\\<not> matches \\<gamma> m' a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'; \\<not> matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m' a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p rs Undecided\n 2. \\<And>m'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m' a p", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m' a p", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m' a p", "by blast"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches_option f (Rule m a # rs)) Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Match \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log; \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<lbrakk>a = Empty; \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log; \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<lbrakk>a = Empty; \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n   \\<And>m a m'.\n      \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n      \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n   \\<And>m a.\n      \\<lbrakk>P m a; f m = None\\<rbrakk>\n      \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_option f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches_option f (Rule m a # rs)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "apply(cases \"f m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>matches \\<gamma> m a p;\n     \\<lbrakk>a = Log;\n      \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n      \\<And>m a m'.\n         \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n         \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n      \\<And>m a.\n         \\<lbrakk>P m a; f m = None\\<rbrakk>\n         \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                        (optimize_matches_option f rs) Undecided =\n                       approximating_bigstep_fun \\<gamma> p rs Undecided;\n     \\<lbrakk>a = Empty;\n      \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n      \\<And>m a m'.\n         \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n         \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n      \\<And>m a.\n         \\<lbrakk>P m a; f m = None\\<rbrakk>\n         \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n     \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                        (optimize_matches_option f rs) Undecided =\n                       approximating_bigstep_fun \\<gamma> p rs Undecided;\n     \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n     \\<And>m a m'.\n        \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n        \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p;\n     \\<And>m a.\n        \\<lbrakk>P m a; f m = None\\<rbrakk>\n        \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n     f m = None\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (optimize_matches_option f (Rule m a # rs))\n                       Undecided =\n                      approximating_bigstep_fun \\<gamma> p (Rule m a # rs)\n                       Undecided\n 2. \\<And>aa.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n         \\<And>m a m'.\n            \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n            \\<Longrightarrow> matches \\<gamma> m' a p =\n                              matches \\<gamma> m a p;\n         \\<And>m a.\n            \\<lbrakk>P m a; f m = None\\<rbrakk>\n            \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_option f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>r\\<in>set (Rule m a # rs). P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f (Rule m a # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(simp del: approximating_bigstep_fun.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some aa\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule aa a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(rename_tac m')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m' a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "apply(subgoal_tac \"matches \\<gamma> m' a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m'.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'; matches \\<gamma> m' a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (Rule m' a # optimize_matches_option f rs)\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 2. \\<And>m'.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p", "apply(simp split: action.split; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set rs. P (get_match r) (get_action r)\n  \\<lbrakk>P ?m ?a; f ?m = Some ?m'\\<rbrakk>\n  \\<Longrightarrow> matches \\<gamma> ?m' ?a p = matches \\<gamma> ?m ?a p\n  \\<lbrakk>P ?m ?a; f ?m = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> matches \\<gamma> ?m ?a p\n\ngoal (1 subgoal):\n 1. \\<And>m'.\n       \\<lbrakk>matches \\<gamma> m a p;\n        a = Log \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        a = Empty \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_option f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        P m a \\<and>\n        (\\<forall>r\\<in>set rs. P (get_match r) (get_action r));\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p;\n        f m = Some m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p", "by blast"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches_option f (Rule m a # rs)) Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>\\<forall>r\\<in>set []. P (get_match r) (get_action r);\n        \\<And>m a m'.\n           \\<lbrakk>P m a; f m = Some m'\\<rbrakk>\n           \\<Longrightarrow> matches \\<gamma> m' a p =\n                             matches \\<gamma> m a p;\n        \\<And>m a.\n           \\<lbrakk>P m a; f m = None\\<rbrakk>\n           \\<Longrightarrow> \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_option f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s", "qed(simp)"], ["", "lemma optimize_matches_generic: \"\\<forall> r \\<in> set rs. P (get_match r) (get_action r) \\<Longrightarrow> \n      (\\<And>m a. P m a \\<Longrightarrow> matches \\<gamma> (f m) a p = matches \\<gamma> m a p) \\<Longrightarrow>\n      approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n     \\<And>m a.\n        P m a \\<Longrightarrow>\n        matches \\<gamma> (f m) a p = matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (optimize_matches f rs) s =\n                      approximating_bigstep_fun \\<gamma> p rs s", "unfolding optimize_matches_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n     \\<And>m a.\n        P m a \\<Longrightarrow>\n        matches \\<gamma> (f m) a p = matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                       (optimize_matches_option\n                         (\\<lambda>m.\n                             if matcheq_matchNone (f m) then None\n                             else Some (f m))\n                         rs)\n                       s =\n                      approximating_bigstep_fun \\<gamma> p rs s", "apply(rule optimize_matches_option_generic)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n     \\<And>m a.\n        P m a \\<Longrightarrow>\n        matches \\<gamma> (f m) a p = matches \\<gamma> m a p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>r\\<in>set rs. ?P (get_match r) (get_action r)\n 2. \\<And>m m' a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        ?P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        Some m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p\n 3. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        ?P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "apply(simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m m' a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        Some m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p\n 2. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m m' a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a; \\<not> matcheq_matchNone m'; f m = m'\\<rbrakk>\n       \\<Longrightarrow> matches \\<gamma> m' a p = matches \\<gamma> m a p\n 2. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a;\n        (if matcheq_matchNone (f m) then None else Some (f m)) =\n        None\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "apply(simp split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a; matcheq_matchNone (f m)\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "using matcheq_matchNone_not_matches"], ["proof (prove)\nusing this:\n  matcheq_matchNone ?m \\<Longrightarrow> \\<not> matches ?\\<gamma> ?m ?a ?p\n\ngoal (1 subgoal):\n 1. \\<And>m a.\n       \\<lbrakk>\\<forall>r\\<in>set rs. P (get_match r) (get_action r);\n        \\<And>m a.\n           P m a \\<Longrightarrow>\n           matches \\<gamma> (f m) a p = matches \\<gamma> m a p;\n        P m a; matcheq_matchNone (f m)\\<rbrakk>\n       \\<Longrightarrow> \\<not> matches \\<gamma> m a p", "by fast"], ["", "lemma optimize_matches_matches_fst: \"matches \\<gamma> (f m) a p \\<Longrightarrow> optimize_matches f (Rule m a # rs) = (Rule (f m) a)# optimize_matches f rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (f m) a p \\<Longrightarrow>\n    optimize_matches f (Rule m a # rs) =\n    Rule (f m) a # optimize_matches f rs", "apply(simp add: optimize_matches_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches \\<gamma> (f m) a p \\<Longrightarrow>\n    \\<not> matcheq_matchNone (f m)", "by (meson matcheq_matchNone_not_matches)"], ["", "lemma optimize_matches: \"\\<forall>m a. matches \\<gamma> (f m) a p = matches \\<gamma> m a p \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m a.\n       matches \\<gamma> (f m) a p = matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "using optimize_matches_generic[where P=\"\\<lambda>_ _. True\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>r\\<in>set ?rs. True;\n   \\<And>m a.\n      True \\<Longrightarrow>\n      matches ?\\<gamma> (?f m) a ?p = matches ?\\<gamma> m a ?p\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun ?\\<gamma> ?p\n                     (optimize_matches ?f ?rs) ?s =\n                    approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s\n\ngoal (1 subgoal):\n 1. \\<forall>m a.\n       matches \\<gamma> (f m) a p = matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (optimize_matches f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "by metis"], ["", "lemma optimize_matches_opt_MatchAny_match_expr: \"approximating_bigstep_fun \\<gamma> p (optimize_matches opt_MatchAny_match_expr rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches opt_MatchAny_match_expr rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "using optimize_matches opt_MatchAny_match_expr_correct"], ["proof (prove)\nusing this:\n  \\<forall>m a.\n     matches ?\\<gamma> (?f m) a ?p =\n     matches ?\\<gamma> m a ?p \\<Longrightarrow>\n  approximating_bigstep_fun ?\\<gamma> ?p (optimize_matches ?f ?rs) ?s =\n  approximating_bigstep_fun ?\\<gamma> ?p ?rs ?s\n  matches ?\\<gamma> (opt_MatchAny_match_expr ?m) = matches ?\\<gamma> ?m\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches opt_MatchAny_match_expr rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "by metis"], ["", "lemma optimize_matches_a: \"\\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a m.\n       matches \\<gamma> m a = matches \\<gamma> (f a m) a \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<forall>a m.\n           matches \\<gamma> m a =\n           matches \\<gamma> (f a m) a \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>a m.\n           matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>a m.\n            matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>a m.\n            matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>a m.\n           matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case (Match \\<gamma> p m a rs)"], ["proof (state)\nthis:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log;\n   \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_a f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<lbrakk>a = Empty;\n   \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_a f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\n\ngoal (4 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<forall>a m.\n           matches \\<gamma> m a =\n           matches \\<gamma> (f a m) a \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>a m.\n           matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p;\n        \\<lbrakk>a = Log;\n         \\<forall>a m.\n            matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>a = Empty;\n         \\<forall>a m.\n            matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>a m.\n           matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma> m a p\n  \\<lbrakk>a = Log;\n   \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_a f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<lbrakk>a = Empty;\n   \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                     (optimize_matches_a f rs) Undecided =\n                    approximating_bigstep_fun \\<gamma> p rs Undecided\n  \\<forall>a m. matches \\<gamma> m a = matches \\<gamma> (f a m) a\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p\n     (optimize_matches_a f (Rule m a # rs)) Undecided =\n    approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided", "by(case_tac a)(simp_all add: optimize_matches_a_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p\n   (optimize_matches_a f (Rule m a # rs)) Undecided =\n  approximating_bigstep_fun \\<gamma> p (Rule m a # rs) Undecided\n\ngoal (3 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f []) s =\n       approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<forall>a m.\n          matches \\<gamma> m a =\n          matches \\<gamma> (f a m) a \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (optimize_matches_a f (r # rs))\n        (Decision X) =\n       approximating_bigstep_fun \\<gamma> p (r # rs) (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<forall>a m.\n           matches \\<gamma> m a =\n           matches \\<gamma> (f a m) a \\<Longrightarrow>\n        approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs)\n         Undecided =\n        approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<forall>a m.\n           matches \\<gamma> m a = matches \\<gamma> (f a m) a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "qed(simp_all add: optimize_matches_a_def)"], ["", "lemma optimize_matches_a_simplers:\n  assumes \"simple_ruleset rs\" and \"\\<forall>a m. a = Accept \\<or> a = Drop \\<longrightarrow> matches \\<gamma> (f a m) a = matches \\<gamma> m a\"\n  shows \"approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "from assms(1)"], ["proof (chain)\npicking this:\n  simple_ruleset rs", "have \"wf_ruleset \\<gamma> p rs\""], ["proof (prove)\nusing this:\n  simple_ruleset rs\n\ngoal (1 subgoal):\n 1. wf_ruleset \\<gamma> p rs", "by(simp add: simple_imp_good_ruleset good_imp_wf_ruleset)"], ["proof (state)\nthis:\n  wf_ruleset \\<gamma> p rs\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "from \\<open>wf_ruleset \\<gamma> p rs\\<close> assms"], ["proof (chain)\npicking this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma> (f a m) a = matches \\<gamma> m a", "show \"approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s = approximating_bigstep_fun \\<gamma> p rs s\""], ["proof (prove)\nusing this:\n  wf_ruleset \\<gamma> p rs\n  simple_ruleset rs\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma> (f a m) a = matches \\<gamma> m a\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n    approximating_bigstep_fun \\<gamma> p rs s", "proof(induction \\<gamma> p rs s rule: approximating_bigstep_fun_induct_wf)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 8. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case Nomatch"], ["proof (state)\nthis:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>simple_ruleset rs_;\n   \\<forall>a m.\n      a = Accept \\<or> a = Drop \\<longrightarrow>\n      matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma>_ p_\n                     (optimize_matches_a f rs_) Undecided =\n                    approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided\n  simple_ruleset (Rule m_ a_ # rs_)\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\n\ngoal (8 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>\\<not> matches \\<gamma> m a p;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 8. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> matches \\<gamma>_ m_ a_ p_\n  \\<lbrakk>simple_ruleset rs_;\n   \\<forall>a m.\n      a = Accept \\<or> a = Drop \\<longrightarrow>\n      matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\\<rbrakk>\n  \\<Longrightarrow> approximating_bigstep_fun \\<gamma>_ p_\n                     (optimize_matches_a f rs_) Undecided =\n                    approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided\n  simple_ruleset (Rule m_ a_ # rs_)\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_\n     (optimize_matches_a f (Rule m_ a_ # rs_)) Undecided =\n    approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided", "apply(simp add: optimize_matches_a_def simple_ruleset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> matches \\<gamma>_ m_ a_ p_;\n     approximating_bigstep_fun \\<gamma>_ p_\n      (map (\\<lambda>r.\n               Rule (f (get_action r) (get_match r)) (get_action r))\n        rs_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided;\n     (a_ = Accept \\<or> a_ = Drop) \\<and>\n     (\\<forall>r\\<in>set rs_.\n         get_action r = Accept \\<or> get_action r = Drop);\n     \\<forall>a m.\n        (a = Accept \\<longrightarrow>\n         matches \\<gamma>_ (f Accept m) Accept =\n         matches \\<gamma>_ m Accept) \\<and>\n        (a = Drop \\<longrightarrow>\n         matches \\<gamma>_ (f Drop m) Drop =\n         matches \\<gamma>_ m Drop)\\<rbrakk>\n    \\<Longrightarrow> matches \\<gamma>_ (f a_ m_) a_ p_ \\<longrightarrow>\n                      (case a_ of Accept \\<Rightarrow> Decision FinalAllow\n                       | Drop \\<Rightarrow> Decision FinalDeny\n                       | Log \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided\n                       | Reject \\<Rightarrow> Decision FinalDeny\n                       | Empty \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided) =\n                      approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> matches \\<gamma>_ m_ Accept p_;\n     approximating_bigstep_fun \\<gamma>_ p_\n      (map (\\<lambda>r.\n               Rule (f (get_action r) (get_match r)) (get_action r))\n        rs_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided;\n     \\<forall>a m.\n        (a = Accept \\<longrightarrow>\n         matches \\<gamma>_ (f Accept m) Accept =\n         matches \\<gamma>_ m Accept) \\<and>\n        (a = Drop \\<longrightarrow>\n         matches \\<gamma>_ (f Drop m) Drop = matches \\<gamma>_ m Drop);\n     \\<forall>r\\<in>set rs_.\n        get_action r = Accept \\<or> get_action r = Drop;\n     matches \\<gamma>_ (f Accept m_) Accept p_; a_ = Accept\\<rbrakk>\n    \\<Longrightarrow> (case Accept of\n                       Accept \\<Rightarrow> Decision FinalAllow\n                       | Drop \\<Rightarrow> Decision FinalDeny\n                       | Log \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided\n                       | Reject \\<Rightarrow> Decision FinalDeny\n                       | Empty \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided) =\n                      approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided\n 2. \\<lbrakk>\\<not> matches \\<gamma>_ m_ Drop p_;\n     approximating_bigstep_fun \\<gamma>_ p_\n      (map (\\<lambda>r.\n               Rule (f (get_action r) (get_match r)) (get_action r))\n        rs_)\n      Undecided =\n     approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided;\n     \\<forall>a m.\n        (a = Accept \\<longrightarrow>\n         matches \\<gamma>_ (f Accept m) Accept =\n         matches \\<gamma>_ m Accept) \\<and>\n        (a = Drop \\<longrightarrow>\n         matches \\<gamma>_ (f Drop m) Drop = matches \\<gamma>_ m Drop);\n     \\<forall>r\\<in>set rs_.\n        get_action r = Accept \\<or> get_action r = Drop;\n     matches \\<gamma>_ (f Drop m_) Drop p_; a_ = Drop\\<rbrakk>\n    \\<Longrightarrow> (case Drop of Accept \\<Rightarrow> Decision FinalAllow\n                       | Drop \\<Rightarrow> Decision FinalDeny\n                       | Log \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided\n                       | Reject \\<Rightarrow> Decision FinalDeny\n                       | Empty \\<Rightarrow>\n                           approximating_bigstep_fun \\<gamma>_ p_\n                            (map (\\<lambda>r.\n                                     Rule (f (get_action r) (get_match r))\n(get_action r))\n                              rs_)\n                            Undecided) =\n                      approximating_bigstep_fun \\<gamma>_ p_ rs_ Undecided", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_\n   (optimize_matches_a f (Rule m_ a_ # rs_)) Undecided =\n  approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided\n\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "case MatchReject"], ["proof (state)\nthis:\n  matches \\<gamma>_ m_ a_ p_\n  a_ = Reject\n  simple_ruleset (Rule m_ a_ # rs_)\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\n\ngoal (7 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Reject;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 7. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "thus ?case"], ["proof (prove)\nusing this:\n  matches \\<gamma>_ m_ a_ p_\n  a_ = Reject\n  simple_ruleset (Rule m_ a_ # rs_)\n  \\<forall>a m.\n     a = Accept \\<or> a = Drop \\<longrightarrow>\n     matches \\<gamma>_ (f a m) a = matches \\<gamma>_ m a\n\ngoal (1 subgoal):\n 1. approximating_bigstep_fun \\<gamma>_ p_\n     (optimize_matches_a f (Rule m_ a_ # rs_)) Undecided =\n    approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided", "by(simp add: optimize_matches_a_def simple_ruleset_def)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma>_ p_\n   (optimize_matches_a f (Rule m_ a_ # rs_)) Undecided =\n  approximating_bigstep_fun \\<gamma>_ p_ (Rule m_ a_ # rs_) Undecided\n\ngoal (6 subgoals):\n 1. \\<And>\\<gamma> p s.\n       \\<lbrakk>simple_ruleset [];\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f []) s =\n                         approximating_bigstep_fun \\<gamma> p [] s\n 2. \\<And>\\<gamma> p r rs X.\n       \\<lbrakk>simple_ruleset (r # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (r # rs)) (Decision X) =\n                         approximating_bigstep_fun \\<gamma> p (r # rs)\n                          (Decision X)\n 3. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Accept;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 4. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Drop;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 5. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Log;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided\n 6. \\<And>\\<gamma> p m a rs.\n       \\<lbrakk>matches \\<gamma> m a p; a = Empty;\n        \\<lbrakk>simple_ruleset rs;\n         \\<forall>a m.\n            a = Accept \\<or> a = Drop \\<longrightarrow>\n            matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (optimize_matches_a f rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        simple_ruleset (Rule m a # rs);\n        \\<forall>a m.\n           a = Accept \\<or> a = Drop \\<longrightarrow>\n           matches \\<gamma> (f a m) a = matches \\<gamma> m a\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (optimize_matches_a f (Rule m a # rs)) Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule m a # rs) Undecided", "qed(simp_all add: optimize_matches_a_def simple_ruleset_tail)"], ["proof (state)\nthis:\n  approximating_bigstep_fun \\<gamma> p (optimize_matches_a f rs) s =\n  approximating_bigstep_fun \\<gamma> p rs s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_matches_removeAll: \"\\<not> matches \\<gamma> m a p \\<Longrightarrow>\n  approximating_bigstep_fun \\<gamma> p (removeAll (Rule m a) rs) Undecided = approximating_bigstep_fun \\<gamma> p rs Undecided\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n    approximating_bigstep_fun \\<gamma> p (removeAll (Rule m a) rs)\n     Undecided =\n    approximating_bigstep_fun \\<gamma> p rs Undecided", "apply(induction \\<gamma> p rs Undecided rule: approximating_bigstep_fun.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<gamma> p.\n       \\<not> matches \\<gamma> m a p \\<Longrightarrow>\n       approximating_bigstep_fun \\<gamma> p (removeAll (Rule m a) [])\n        Undecided =\n       approximating_bigstep_fun \\<gamma> p [] Undecided\n 2. \\<And>\\<gamma> p ma aa rs.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> ma aa p;\n                 \\<not> matches \\<gamma> m a p\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (removeAll (Rule m a) rs) Undecided =\n                                  approximating_bigstep_fun \\<gamma> p rs\n                                   Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> ma aa p; aa = Log;\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> ma aa p; aa = Empty;\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (removeAll (Rule m a) (Rule ma aa # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule ma aa # rs) Undecided", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p ma aa rs.\n       \\<lbrakk>\\<lbrakk>\\<not> matches \\<gamma> ma aa p;\n                 \\<not> matches \\<gamma> m a p\\<rbrakk>\n                \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                                   (removeAll (Rule m a) rs) Undecided =\n                                  approximating_bigstep_fun \\<gamma> p rs\n                                   Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> ma aa p; aa = Log;\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>\\<not> \\<not> matches \\<gamma> ma aa p; aa = Empty;\n         \\<not> matches \\<gamma> m a p\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                          (removeAll (Rule m a) (Rule ma aa # rs))\n                          Undecided =\n                         approximating_bigstep_fun \\<gamma> p\n                          (Rule ma aa # rs) Undecided", "apply(simp split: action.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<gamma> p ma aa rs.\n       \\<lbrakk>\\<not> matches \\<gamma> ma aa p \\<Longrightarrow>\n                approximating_bigstep_fun \\<gamma> p\n                 (removeAll (Rule m a) rs) Undecided =\n                approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>matches \\<gamma> ma Log p; aa = Log\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<lbrakk>matches \\<gamma> ma Empty p; aa = Empty\\<rbrakk>\n        \\<Longrightarrow> approximating_bigstep_fun \\<gamma> p\n                           (removeAll (Rule m a) rs) Undecided =\n                          approximating_bigstep_fun \\<gamma> p rs Undecided;\n        \\<not> matches \\<gamma> m a p\\<rbrakk>\n       \\<Longrightarrow> (aa = Accept \\<longrightarrow>\n                          m = ma \\<and> a = Accept \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Accept\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Accept) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Accept p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Accept) rs) Undecided =\n                           Decision FinalAllow)) \\<and>\n                         (aa = Drop \\<longrightarrow>\n                          m = ma \\<and> a = Drop \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Drop\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Drop) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Drop p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Drop) rs) Undecided =\n                           Decision FinalDeny)) \\<and>\n                         (aa = Log \\<longrightarrow>\n                          m = ma \\<and> a = Log \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Log\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Log) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Log p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Log) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided)) \\<and>\n                         (aa = Reject \\<longrightarrow>\n                          m = ma \\<and> a = Reject \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Reject\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Reject) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Reject p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Reject) rs) Undecided =\n                           Decision FinalDeny)) \\<and>\n                         (\\<forall>x5.\n                             aa = Call x5 \\<longrightarrow>\n                             m = ma \\<and> a = Call x5 \\<longrightarrow>\n                             (\\<not> matches \\<gamma> ma (Call x5)\np \\<longrightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (removeAll (Rule ma (Call x5)) rs)\n                               Undecided =\n                              approximating_bigstep_fun \\<gamma> p rs\n                               Undecided) \\<and>\n                             (matches \\<gamma> ma (Call x5)\n                               p \\<longrightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (removeAll (Rule ma (Call x5)) rs)\n                               Undecided =\n                              undefined)) \\<and>\n                         (aa = Return \\<longrightarrow>\n                          m = ma \\<and> a = Return \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Return\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Return) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Return p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Return) rs) Undecided =\n                           undefined)) \\<and>\n                         (\\<forall>x7.\n                             aa = Goto x7 \\<longrightarrow>\n                             m = ma \\<and> a = Goto x7 \\<longrightarrow>\n                             (\\<not> matches \\<gamma> ma (Goto x7)\np \\<longrightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (removeAll (Rule ma (Goto x7)) rs)\n                               Undecided =\n                              approximating_bigstep_fun \\<gamma> p rs\n                               Undecided) \\<and>\n                             (matches \\<gamma> ma (Goto x7)\n                               p \\<longrightarrow>\n                              approximating_bigstep_fun \\<gamma> p\n                               (removeAll (Rule ma (Goto x7)) rs)\n                               Undecided =\n                              undefined)) \\<and>\n                         (aa = Empty \\<longrightarrow>\n                          m = ma \\<and> a = Empty \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Empty\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Empty) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Empty p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Empty) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided)) \\<and>\n                         (aa = Unknown \\<longrightarrow>\n                          m = ma \\<and> a = Unknown \\<longrightarrow>\n                          (\\<not> matches \\<gamma> ma Unknown\n                                   p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Unknown) rs) Undecided =\n                           approximating_bigstep_fun \\<gamma> p rs\n                            Undecided) \\<and>\n                          (matches \\<gamma> ma Unknown p \\<longrightarrow>\n                           approximating_bigstep_fun \\<gamma> p\n                            (removeAll (Rule ma Unknown) rs) Undecided =\n                           undefined))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}