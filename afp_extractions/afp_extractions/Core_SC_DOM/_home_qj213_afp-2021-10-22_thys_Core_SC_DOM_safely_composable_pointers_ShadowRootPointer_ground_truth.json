{"file_name": "/home/qj213/afp-2021-10-22/thys/Core_SC_DOM/safely_composable/pointers/ShadowRootPointer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Core_SC_DOM", "problem_names": ["lemmas is_shadow_root_ptr_kind_def = is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def", "lemmas is_shadow_root_ptr_def = is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def", "lemma is_shadow_root_ptr_ref [simp]: \"is_shadow_root_ptr (shadow_root_ptr.Ref n)\"", "lemma shadow_root_ptr_casts_commute [simp]:\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr =\nSome shadow_root_ptr \\<longleftrightarrow> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr = document_ptr\"", "lemma shadow_root_ptr_casts_commute2 [simp]:\n  \"(cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr) = Some shadow_root_ptr)\"", "lemma shadow_root_ptr_casts_commute3 [simp]:\n  assumes \"is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr\"\n  shows \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr)) = document_ptr\"", "lemma is_shadow_root_ptr_kind_obtains:\n  assumes \"is_shadow_root_ptr_kind document_ptr\"\n  obtains shadow_root_ptr where \"document_ptr = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\"", "lemma is_shadow_root_ptr_kind_none:\n  assumes \"\\<not>is_shadow_root_ptr_kind document_ptr\"\n  shows \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr = None\"", "lemma is_shadow_root_ptr_kind_cast [simp]:\n  \"is_shadow_root_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\"", "lemma cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\"", "lemma cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]:\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (document_ptr.Ext (Inr (Inr document_ext_ptr))) = None\"", "lemma is_shadow_root_ptr_implies_kind [dest]:\n  \"is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<Longrightarrow> is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr\"", "lemma is_shadow_root_ptr_kind_not_document_ptr [simp]: \"\\<not>is_shadow_root_ptr_kind (document_ptr.Ref x)\""], "translations": [["", "lemmas is_shadow_root_ptr_kind_def = is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["", "consts is_shadow_root_ptr :: 'a"], ["", "definition is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) shadow_root_ptr \\<Rightarrow> bool\"\n  where\n    \"is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr = (case ptr of shadow_root_ptr.Ref _ \\<Rightarrow> True\n                                                    | _ \\<Rightarrow> False)\""], ["", "abbreviation is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) document_ptr \\<Rightarrow> bool\"\n  where\n    \"is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast ptr of\n                         Some shadow_root_ptr \\<Rightarrow> is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\n                       | _ \\<Rightarrow> False)\""], ["", "abbreviation is_shadow_root_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r :: \"(_) object_ptr \\<Rightarrow> bool\"\n  where\n    \"is_shadow_root_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> (case cast ptr of\n                                    Some document_ptr \\<Rightarrow> is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr\n                                  | None \\<Rightarrow> False)\""], ["", "adhoc_overloading is_shadow_root_ptr is_shadow_root_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\n  is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r"], ["", "lemmas is_shadow_root_ptr_def = is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["", "consts is_shadow_root_ptr_ext :: 'a"], ["", "abbreviation \"is_shadow_root_ptr_ext\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv> \\<not> is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr\""], ["", "abbreviation \"is_shadow_root_ptr_ext\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv>\nis_shadow_root_ptr_kind ptr \\<and> (\\<not> is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr)\""], ["", "abbreviation \"is_shadow_root_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<equiv>\nis_shadow_root_ptr_kind ptr \\<and> (\\<not> is_shadow_root_ptr\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr)\""], ["", "adhoc_overloading is_shadow_root_ptr_ext is_shadow_root_ptr_ext\\<^sub>o\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r is_shadow_root_ptr_ext\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r"], ["", "instantiation shadow_root_ptr :: (linorder) linorder\nbegin"], ["", "definition\n  less_eq_shadow_root_ptr :: \"(_::linorder) shadow_root_ptr \\<Rightarrow> (_) shadow_root_ptr \\<Rightarrow> bool\"\n  where\n    \"less_eq_shadow_root_ptr x y \\<equiv> (case x of Ext i \\<Rightarrow> (case y of Ext j \\<Rightarrow> i \\<le> j | Ref _ \\<Rightarrow> False)\n                                          | Ref i \\<Rightarrow> (case y of Ext _ \\<Rightarrow> True | Ref j \\<Rightarrow> i \\<le> j))\""], ["", "definition less_shadow_root_ptr :: \"(_::linorder) shadow_root_ptr \\<Rightarrow> (_) shadow_root_ptr \\<Rightarrow> bool\"\n  where \"less_shadow_root_ptr x y \\<equiv> x \\<le> y \\<and> \\<not> y \\<le> x\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS((_) shadow_root_ptr, linorder_class)", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "by(auto simp add: less_eq_shadow_root_ptr_def less_shadow_root_ptr_def\n      split: shadow_root_ptr.splits)"], ["", "end"], ["", "lemma is_shadow_root_ptr_ref [simp]: \"is_shadow_root_ptr (shadow_root_ptr.Ref n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shadow_root_ptr (shadow_root_ptr.Ref n)", "by(simp add: is_shadow_root_ptr\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma shadow_root_ptr_casts_commute [simp]:\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr =\nSome shadow_root_ptr \\<longleftrightarrow> cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr = document_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast document_ptr = Some shadow_root_ptr) =\n    (cast shadow_root_ptr = document_ptr)", "unfolding cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((case document_ptr of document_ptr.Ref x \\<Rightarrow> Map.empty x\n      | document_ptr.Ext (Inl xa) \\<Rightarrow> Some xa\n      | document_ptr.Ext (Inr xa) \\<Rightarrow> Map.empty xa) =\n     Some shadow_root_ptr) =\n    (document_ptr.Ext (Inl shadow_root_ptr) = document_ptr)", "by(auto split: document_ptr.splits sum.splits)"], ["", "lemma shadow_root_ptr_casts_commute2 [simp]:\n  \"(cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr) = Some shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (cast shadow_root_ptr) = Some shadow_root_ptr", "by simp"], ["", "lemma shadow_root_ptr_casts_commute3 [simp]:\n  assumes \"is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr\"\n  shows \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (the (cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr)) = document_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (the (cast document_ptr)) = document_ptr", "using assms"], ["proof (prove)\nusing this:\n  is_shadow_root_ptr_kind document_ptr\n\ngoal (1 subgoal):\n 1. cast (the (cast document_ptr)) = document_ptr", "by(auto simp add: is_shadow_root_ptr_kind_def cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def\n      split: document_ptr.splits sum.splits)"], ["", "lemma is_shadow_root_ptr_kind_obtains:\n  assumes \"is_shadow_root_ptr_kind document_ptr\"\n  obtains shadow_root_ptr where \"document_ptr = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>shadow_root_ptr.\n        document_ptr = cast shadow_root_ptr \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms is_shadow_root_ptr_kind_def case_optionE shadow_root_ptr_casts_commute)"], ["", "lemma is_shadow_root_ptr_kind_none:\n  assumes \"\\<not>is_shadow_root_ptr_kind document_ptr\"\n  shows \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r document_ptr = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast document_ptr = None", "using assms"], ["proof (prove)\nusing this:\n  \\<not> is_shadow_root_ptr_kind document_ptr\n\ngoal (1 subgoal):\n 1. cast document_ptr = None", "unfolding is_shadow_root_ptr_kind_def cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def"], ["proof (prove)\nusing this:\n  \\<not> (case case document_ptr of\n               document_ptr.Ref x \\<Rightarrow> Map.empty x\n               | document_ptr.Ext (Inl xa) \\<Rightarrow> Some xa\n               | document_ptr.Ext (Inr xa) \\<Rightarrow> Map.empty xa of\n          None \\<Rightarrow> False | Some x \\<Rightarrow> True)\n\ngoal (1 subgoal):\n 1. (case document_ptr of document_ptr.Ref x \\<Rightarrow> Map.empty x\n     | document_ptr.Ext (Inl xa) \\<Rightarrow> Some xa\n     | document_ptr.Ext (Inr xa) \\<Rightarrow> Map.empty xa) =\n    None", "by(auto split: document_ptr.splits sum.splits)"], ["", "lemma is_shadow_root_ptr_kind_cast [simp]:\n  \"is_shadow_root_ptr_kind (cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r shadow_root_ptr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_shadow_root_ptr_kind (cast shadow_root_ptr)", "by (metis shadow_root_ptr_casts_commute is_shadow_root_ptr_kind_none option.distinct(1))"], ["", "lemma cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_inject [simp]:\n  \"cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r x = cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cast x = cast y) = (x = y)", "by(simp add: cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_ext_none [simp]:\n  \"cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r (document_ptr.Ext (Inr (Inr document_ext_ptr))) = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cast (document_ptr.Ext (Inr (Inr document_ext_ptr))) = None", "by(simp add: cast\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def)"], ["", "lemma is_shadow_root_ptr_implies_kind [dest]:\n  \"is_shadow_root_ptr\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr \\<Longrightarrow> is_shadow_root_ptr_kind\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r ptr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. case cast ptr of None \\<Rightarrow> False\n    | Some shadow_root_ptr \\<Rightarrow>\n        is_shadow_root_ptr shadow_root_ptr \\<Longrightarrow>\n    is_shadow_root_ptr_kind ptr", "by(auto split: option.splits)"], ["", "lemma is_shadow_root_ptr_kind_not_document_ptr [simp]: \"\\<not>is_shadow_root_ptr_kind (document_ptr.Ref x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_shadow_root_ptr_kind (document_ptr.Ref x)", "by(simp add: is_shadow_root_ptr_kind_def cast\\<^sub>s\\<^sub>h\\<^sub>a\\<^sub>d\\<^sub>o\\<^sub>w\\<^sub>_\\<^sub>r\\<^sub>o\\<^sub>o\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r\\<^sub>2\\<^sub>d\\<^sub>o\\<^sub>c\\<^sub>u\\<^sub>m\\<^sub>e\\<^sub>n\\<^sub>t\\<^sub>_\\<^sub>p\\<^sub>t\\<^sub>r_def split: option.splits)"], ["", "end"]]}