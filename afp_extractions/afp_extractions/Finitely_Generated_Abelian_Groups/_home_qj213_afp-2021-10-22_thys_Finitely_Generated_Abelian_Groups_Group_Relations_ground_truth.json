{"file_name": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups/Group_Relations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups", "problem_names": ["lemma (in comm_group) in_relationsI[intro]:\n  assumes \"finprod G (\\<lambda>a. a [^] f a) A = \\<one>\" \"f \\<in> extensional A\"\n  shows \"f \\<in> relations A\"", "lemma (in comm_group) triv_rel:\n  \"restrict (\\<lambda>_. 0::int) A \\<in> relations A\"", "lemma (in comm_group) not_triv_relI:\n  assumes \"a \\<in> A\" \"f a \\<noteq> (0::int)\"\n  shows \"f \\<noteq> (\\<lambda>_\\<in>A. 0::int)\"", "lemma (in comm_group) rel_in_carr:\n  assumes \"A \\<subseteq> carrier G\" \"r \\<in> relations A\"\n  shows \"(\\<lambda>a. a [^] r a) \\<in> A \\<rightarrow> carrier G\"", "lemma (in comm_group) relations_zero_imp_pow_not_one:\n  assumes \"a \\<in> A\" \"\\<forall>f\\<in>(relations A). f a = 0\"\n  shows \"\\<forall>z::int \\<noteq> 0. a [^] z \\<noteq> \\<one>\"", "lemma (in comm_group) relations_zero_imp_ord_zero:\n  assumes \"a \\<in> A\" \"\\<forall>f\\<in>(relations A). f a = 0\"\n  and \"a \\<in> carrier G\"\n  shows \"ord a = 0\"", "lemma (in comm_group) finprod_relations_triv_harder_better_stronger:\n  assumes \"A \\<subseteq> carrier G\" \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\"", "lemma (in comm_group) stronger_PiE_finprod_imp:\n  assumes \"A \\<subseteq> carrier G\" \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n         finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one> \\<longrightarrow> (\\<forall>H\\<in> (\\<lambda>a. generate G {a}) ` A. f H = \\<one>)\"", "lemma (in comm_group) finprod_relations_triv:\n  assumes \"A \\<subseteq> carrier G\" \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n         finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one> \\<longrightarrow> (\\<forall>H\\<in> (\\<lambda>a. generate G {a}) ` A. f H = \\<one>)\"", "lemma (in comm_group) ord_zero_strong_imp_rel_triv:\n  assumes \"A \\<subseteq> carrier G\" \"\\<forall>a \\<in> A. ord a = 0\"\n  and \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\"\n  shows \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\"", "lemma (in comm_group) compl_fam_iff_relations_triv:\n  assumes \"finite gs\" \"gs \\<subseteq> carrier G\" \"\\<forall>g\\<in>gs. ord g = 0\"\n  shows \"relations gs = {(\\<lambda>_\\<in>gs. 0::int)} \\<longleftrightarrow> compl_fam (\\<lambda>g. generate G {g}) gs\""], "translations": [["", "lemma (in comm_group) in_relationsI[intro]:\n  assumes \"finprod G (\\<lambda>a. a [^] f a) A = \\<one>\" \"f \\<in> extensional A\"\n  shows \"f \\<in> relations A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> relations A", "unfolding relations_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {f. (\\<Otimes>a\\<in>A. a [^] f a) = \\<one>} \\<inter>\n            extensional A", "using assms"], ["proof (prove)\nusing this:\n  (\\<Otimes>a\\<in>A. a [^] f a) = \\<one>\n  f \\<in> extensional A\n\ngoal (1 subgoal):\n 1. f \\<in> {f. (\\<Otimes>a\\<in>A. a [^] f a) = \\<one>} \\<inter>\n            extensional A", "by blast"], ["", "lemma (in comm_group) triv_rel:\n  \"restrict (\\<lambda>_. 0::int) A \\<in> relations A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>_\\<in>A. 0) \\<in> relations A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Otimes>a\\<in>A. a [^] (\\<lambda>_\\<in>A. 0) a) = \\<one>\n 2. (\\<lambda>_\\<in>A. 0) \\<in> extensional A", "show \"(\\<Otimes>a\\<in>A. a [^] (\\<lambda>_\\<in>A. 0::int) a) = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Otimes>a\\<in>A. a [^] (\\<lambda>_\\<in>A. 0) a) = \\<one>", "by (intro finprod_one_eqI, simp)"], ["proof (state)\nthis:\n  (\\<Otimes>a\\<in>A. a [^] (\\<lambda>_\\<in>A. 0) a) = \\<one>\n\ngoal (1 subgoal):\n 1. (\\<lambda>_\\<in>A. 0) \\<in> extensional A", "qed simp"], ["", "lemma (in comm_group) not_triv_relI:\n  assumes \"a \\<in> A\" \"f a \\<noteq> (0::int)\"\n  shows \"f \\<noteq> (\\<lambda>_\\<in>A. 0::int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<noteq> (\\<lambda>_\\<in>A. 0)", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> A\n  f a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> (\\<lambda>_\\<in>A. 0)", "by auto"], ["", "lemma (in comm_group) rel_in_carr:\n  assumes \"A \\<subseteq> carrier G\" \"r \\<in> relations A\"\n  shows \"(\\<lambda>a. a [^] r a) \\<in> A \\<rightarrow> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. a [^] r a) \\<in> A \\<rightarrow> carrier G", "by (meson Pi_I assms(1) int_pow_closed subsetD)"], ["", "text \\<open>The following lemmas are of importance when proving the fundamental theorem of finitely\ngenerated abelian groups in the case that there is just the trivial relation between a set of\ngenerators. They all build up to the last lemma that then is actually used in the proof.\\<close>"], ["", "lemma (in comm_group) relations_zero_imp_pow_not_one:\n  assumes \"a \\<in> A\" \"\\<forall>f\\<in>(relations A). f a = 0\"\n  shows \"\\<forall>z::int \\<noteq> 0. a [^] z \\<noteq> \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z. z \\<noteq> 0 \\<longrightarrow> a [^] z \\<noteq> \\<one>", "proof (rule ccontr; safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<not> False; z \\<noteq> 0; a [^] z = \\<one>\\<rbrakk>\n       \\<Longrightarrow> False", "fix z::int"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<not> False; z \\<noteq> 0; a [^] z = \\<one>\\<rbrakk>\n       \\<Longrightarrow> False", "assume z: \"z \\<noteq> 0\" \"a [^] z = \\<one>\""], ["proof (state)\nthis:\n  z \\<noteq> 0\n  a [^] z = \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<not> False; z \\<noteq> 0; a [^] z = \\<one>\\<rbrakk>\n       \\<Longrightarrow> False", "have \"restrict ((\\<lambda>x. 0)(a := z)) A \\<in> relations A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict ((\\<lambda>x. 0)(a := z)) A \\<in> relations A", "by (intro in_relationsI finprod_one_eqI, use z in auto)"], ["proof (state)\nthis:\n  restrict ((\\<lambda>x. 0)(a := z)) A \\<in> relations A\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>\\<not> False; z \\<noteq> 0; a [^] z = \\<one>\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  restrict ((\\<lambda>x. 0)(a := z)) A \\<in> relations A\n\ngoal (1 subgoal):\n 1. False", "using z assms"], ["proof (prove)\nusing this:\n  restrict ((\\<lambda>x. 0)(a := z)) A \\<in> relations A\n  z \\<noteq> 0\n  a [^] z = \\<one>\n  a \\<in> A\n  \\<forall>f\\<in>relations A. f a = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_group) relations_zero_imp_ord_zero:\n  assumes \"a \\<in> A\" \"\\<forall>f\\<in>(relations A). f a = 0\"\n  and \"a \\<in> carrier G\"\n  shows \"ord a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord a = 0", "using assms relations_zero_imp_pow_not_one[OF assms(1, 2)]"], ["proof (prove)\nusing this:\n  a \\<in> A\n  \\<forall>f\\<in>relations A. f a = 0\n  a \\<in> carrier G\n  \\<forall>z. z \\<noteq> 0 \\<longrightarrow> a [^] z \\<noteq> \\<one>\n\ngoal (1 subgoal):\n 1. ord a = 0", "by (meson finite_cyclic_subgroup_int infinite_cyclic_subgroup_order)"], ["", "lemma (in comm_group) finprod_relations_triv_harder_better_stronger:\n  assumes \"A \\<subseteq> carrier G\" \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>A. generate G {a}.\n       finprod G f A = \\<one> \\<longrightarrow>\n       (\\<forall>a\\<in>A. f a = \\<one>)", "proof(rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "assume f: \"f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\" \"finprod G f A = \\<one>\""], ["proof (state)\nthis:\n  f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G f A = \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "with generate_pow assms(1)"], ["proof (chain)\npicking this:\n  ?a \\<in> carrier G \\<Longrightarrow>\n  generate G {?a} = {?a [^] k |k. k \\<in> UNIV}\n  A \\<subseteq> carrier G\n  f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G f A = \\<one>", "have \"\\<forall>a\\<in>A. \\<exists>k::int. f a = a [^] k\""], ["proof (prove)\nusing this:\n  ?a \\<in> carrier G \\<Longrightarrow>\n  generate G {?a} = {?a [^] k |k. k \\<in> UNIV}\n  A \\<subseteq> carrier G\n  f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G f A = \\<one>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. \\<exists>k. f a = a [^] k", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. \\<exists>k. f a = a [^] k\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. \\<exists>k. f a = a [^] k", "obtain r::\"'a \\<Rightarrow> int\" where r: \"\\<forall>a\\<in>A. f a = a [^] r a\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. \\<exists>k. f a = a [^] k\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<forall>a\\<in>A. f a = a [^] r a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. f a = a [^] r a\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "have \"restrict r A \\<in> relations A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict r A \\<in> relations A", "proof(intro in_relationsI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>\n 2. restrict r A \\<in> extensional A", "have \"(\\<Otimes>a\\<in>A. a [^] restrict r A a) = finprod G f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Otimes>a\\<in>A. a [^] restrict r A a) = finprod G f A", "by (intro finprod_cong, use assms r in auto)"], ["proof (state)\nthis:\n  (\\<Otimes>a\\<in>A. a [^] restrict r A a) = finprod G f A\n\ngoal (2 subgoals):\n 1. (\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>\n 2. restrict r A \\<in> extensional A", "thus \"(\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>\""], ["proof (prove)\nusing this:\n  (\\<Otimes>a\\<in>A. a [^] restrict r A a) = finprod G f A\n\ngoal (1 subgoal):\n 1. (\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>", "using f"], ["proof (prove)\nusing this:\n  (\\<Otimes>a\\<in>A. a [^] restrict r A a) = finprod G f A\n  f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G f A = \\<one>\n\ngoal (1 subgoal):\n 1. (\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>", "by simp"], ["proof (state)\nthis:\n  (\\<Otimes>a\\<in>A. a [^] restrict r A a) = \\<one>\n\ngoal (1 subgoal):\n 1. restrict r A \\<in> extensional A", "qed simp"], ["proof (state)\nthis:\n  restrict r A \\<in> relations A\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "with assms(2)"], ["proof (chain)\npicking this:\n  relations A = {\\<lambda>_\\<in>A. 0}\n  restrict r A \\<in> relations A", "have z: \"restrict r A = (\\<lambda>_\\<in>A. 0)\""], ["proof (prove)\nusing this:\n  relations A = {\\<lambda>_\\<in>A. 0}\n  restrict r A \\<in> relations A\n\ngoal (1 subgoal):\n 1. restrict r A = (\\<lambda>_\\<in>A. 0)", "by blast"], ["proof (state)\nthis:\n  restrict r A = (\\<lambda>_\\<in>A. 0)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "have \"(restrict r A) a = r a\" if \"a \\<in> A\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict r A a = r a", "using that"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. restrict r A a = r a", "by auto"], ["proof (state)\nthis:\n  ?a2 \\<in> A \\<Longrightarrow> restrict r A ?a2 = r ?a2\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a});\n        finprod G f A = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>A. f a = \\<one>", "with r z"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. f a = a [^] r a\n  restrict r A = (\\<lambda>_\\<in>A. 0)\n  ?a2 \\<in> A \\<Longrightarrow> restrict r A ?a2 = r ?a2", "show \"\\<forall>a\\<in>A. f a = \\<one>\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. f a = a [^] r a\n  restrict r A = (\\<lambda>_\\<in>A. 0)\n  ?a2 \\<in> A \\<Longrightarrow> restrict r A ?a2 = r ?a2\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. f a = \\<one>", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. f a = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_group) stronger_PiE_finprod_imp:\n  assumes \"A \\<subseteq> carrier G\" \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n         finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one> \\<longrightarrow> (\\<forall>H\\<in> (\\<lambda>a. generate G {a}) ` A. f H = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n       finprod G f ((\\<lambda>a. generate G {a}) ` A) =\n       \\<one> \\<longrightarrow>\n       (\\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>)", "proof(rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "assume f: \"f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id\" \"finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\""], ["proof (state)\nthis:\n  f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id\n  finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "define B where \"B = inv_into A (\\<lambda>a. generate G {a}) ` ((\\<lambda>a. generate G {a}) ` A)\""], ["proof (state)\nthis:\n  B =\n  inv_into A (\\<lambda>a. generate G {a}) ` (\\<lambda>a. generate G {a}) ` A\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "have Bs: \"B \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> A", "assume x: \"x \\<in> B\""], ["proof (state)\nthis:\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> A", "then"], ["proof (chain)\npicking this:\n  x \\<in> B", "obtain C where C: \"C \\<in> ((\\<lambda>a. generate G {a}) ` A)\" \"x = inv_into A (\\<lambda>a. generate G {a}) C\""], ["proof (prove)\nusing this:\n  x \\<in> B\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> (\\<lambda>a. generate G {a}) ` A;\n         x = inv_into A (\\<lambda>a. generate G {a}) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding B_def"], ["proof (prove)\nusing this:\n  x \\<in> inv_into A (\\<lambda>a. generate G {a}) `\n          (\\<lambda>a. generate G {a}) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>C \\<in> (\\<lambda>a. generate G {a}) ` A;\n         x = inv_into A (\\<lambda>a. generate G {a}) C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> A", "then"], ["proof (chain)\npicking this:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C", "obtain c where c: \"C = generate G {c}\" \"c \\<in> A\""], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>C = generate G {c}; c \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> A", "with C someI_ex[of \"\\<lambda>y. y \\<in> A \\<and> generate G {y} = C\"]"], ["proof (chain)\npicking this:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A", "show \"x \\<in> A\""], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "unfolding inv_into_def"], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>a. generate G {a}) ` A\n  x = (SOME y. y \\<in> A \\<and> generate G {y} = C)\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "have sI: \"(\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. generate G {x}) ` B\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` A\n 2. (\\<lambda>x. generate G {x}) ` A\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` B", "show \"(\\<lambda>x. generate G {x}) ` B \\<subseteq> (\\<lambda>x. generate G {x}) ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. generate G {x}) ` B\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` A", "using Bs"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. generate G {x}) ` B\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` A", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x. generate G {x}) ` B\n  \\<subseteq> (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. generate G {x}) ` A\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` B", "show \"(\\<lambda>x. generate G {x}) ` A \\<subseteq> (\\<lambda>x. generate G {x}) ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. generate G {x}) ` A\n    \\<subseteq> (\\<lambda>x. generate G {x}) ` B", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "fix C"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "assume C: \"C \\<in> (\\<lambda>x. generate G {x}) ` A\""], ["proof (state)\nthis:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "then"], ["proof (chain)\npicking this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A", "obtain x where x: \"x = inv_into A (\\<lambda>a. generate G {a}) C\""], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x = inv_into A (\\<lambda>a. generate G {a}) C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding B_def"], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x = inv_into A (\\<lambda>a. generate G {a}) C \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "then"], ["proof (chain)\npicking this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C", "obtain c where c: \"C = generate G {c}\" \"c \\<in> A\""], ["proof (prove)\nusing this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>C = generate G {c}; c \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using C"], ["proof (prove)\nusing this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>C = generate G {c}; c \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "with C x someI_ex[of \"\\<lambda>y. y \\<in> A \\<and> generate G {y} = C\"]"], ["proof (chain)\npicking this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A", "have \"generate G {x} = C\""], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. generate G {x} = C", "unfolding inv_into_def"], ["proof (prove)\nusing this:\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  x = (SOME y. y \\<in> A \\<and> generate G {y} = C)\n  \\<exists>x. x \\<in> A \\<and> generate G {x} = C \\<Longrightarrow>\n  (SOME x. x \\<in> A \\<and> generate G {x} = C) \\<in> A \\<and>\n  generate G {SOME x. x \\<in> A \\<and> generate G {x} = C} = C\n  C = generate G {c}\n  c \\<in> A\n\ngoal (1 subgoal):\n 1. generate G {x} = C", "by blast"], ["proof (state)\nthis:\n  generate G {x} = C\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>x. generate G {x}) ` A \\<Longrightarrow>\n       x \\<in> (\\<lambda>x. generate G {x}) ` B", "with x C"], ["proof (chain)\npicking this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  generate G {x} = C", "show \"C \\<in> (\\<lambda>x. generate G {x}) ` B\""], ["proof (prove)\nusing this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  generate G {x} = C\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<lambda>x. generate G {x}) ` B", "unfolding B_def"], ["proof (prove)\nusing this:\n  x = inv_into A (\\<lambda>a. generate G {a}) C\n  C \\<in> (\\<lambda>x. generate G {x}) ` A\n  generate G {x} = C\n\ngoal (1 subgoal):\n 1. C \\<in> (\\<lambda>x. generate G {x}) `\n            inv_into A (\\<lambda>a. generate G {a}) `\n            (\\<lambda>a. generate G {a}) ` A", "by blast"], ["proof (state)\nthis:\n  C \\<in> (\\<lambda>x. generate G {x}) ` B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. generate G {x}) ` A\n  \\<subseteq> (\\<lambda>x. generate G {x}) ` B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "have fBc: \"f (generate G {b}) \\<in> carrier G\" if \"b \\<in> B\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "have \"f (generate G {b}) \\<in> generate G {b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> generate G {b}", "using f(1)"], ["proof (prove)\nusing this:\n  f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id\n\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> generate G {b}", "by (subst (asm) sI[symmetric], use that in fastforce)"], ["proof (state)\nthis:\n  f (generate G {b}) \\<in> generate G {b}\n\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "moreover"], ["proof (state)\nthis:\n  f (generate G {b}) \\<in> generate G {b}\n\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "have \"generate G {b} \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G {b} \\<subseteq> carrier G", "using assms(1) that Bs generate_incl"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  b \\<in> B\n  B \\<subseteq> A\n  ?H \\<subseteq> carrier G \\<Longrightarrow>\n  generate G ?H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. generate G {b} \\<subseteq> carrier G", "by blast"], ["proof (state)\nthis:\n  generate G {b} \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "ultimately"], ["proof (chain)\npicking this:\n  f (generate G {b}) \\<in> generate G {b}\n  generate G {b} \\<subseteq> carrier G", "show ?thesis"], ["proof (prove)\nusing this:\n  f (generate G {b}) \\<in> generate G {b}\n  generate G {b} \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. f (generate G {b}) \\<in> carrier G", "by blast"], ["proof (state)\nthis:\n  f (generate G {b}) \\<in> carrier G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "let ?r = \"restrict (\\<lambda>a. if a\\<in>B then f (generate G {a}) else \\<one>) A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "have \"?r \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        x\n       \\<in> generate G {x}\n 2. \\<And>x.\n       x \\<notin> A \\<Longrightarrow>\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        x =\n       undefined", "show \"?r x = undefined\" if \"x \\<notin> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) x =\n    undefined", "using that"], ["proof (prove)\nusing this:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) x =\n    undefined", "by simp"], ["proof (state)\nthis:\n  ?x2 \\<notin> A \\<Longrightarrow>\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) ?x2 =\n  undefined\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        x\n       \\<in> generate G {x}", "show \"?r x \\<in> generate G {x}\" if \"x \\<in> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) x\n    \\<in> generate G {x}", "using that generate.one B_def f(1)"], ["proof (prove)\nusing this:\n  x \\<in> A\n  \\<one>\\<^bsub>?G\\<^esub> \\<in> generate ?G ?H\n  B =\n  inv_into A (\\<lambda>a. generate G {a}) ` (\\<lambda>a. generate G {a}) ` A\n  f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) x\n    \\<in> generate G {x}", "by auto"], ["proof (state)\nthis:\n  ?x2 \\<in> A \\<Longrightarrow>\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) ?x2\n  \\<in> generate G {?x2}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "have \"finprod G ?r A = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "proof (cases \"finite A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "case True"], ["proof (state)\nthis:\n  finite A\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "have \"A = B \\<union> (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B \\<union> (A - B)", "using Bs"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A = B \\<union> (A - B)", "by auto"], ["proof (state)\nthis:\n  A = B \\<union> (A - B)\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "then"], ["proof (chain)\npicking this:\n  A = B \\<union> (A - B)", "have \"finprod G ?r A = finprod G ?r (B\\<union>(A-B))\""], ["proof (prove)\nusing this:\n  A = B \\<union> (A - B)\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     (B \\<union> (A - B))", "by auto"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B))\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "moreover"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B))\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "have \"\\<dots> = finprod G ?r B \\<otimes> finprod G ?r (A - B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     (B \\<union> (A - B)) =\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B \\<otimes>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     (A - B)", "proof(intro finprod_Un_disjoint)"], ["proof (state)\ngoal (5 subgoals):\n 1. finite B\n 2. finite (A - B)\n 3. B \\<inter> (A - B) = {}\n 4. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> B \\<rightarrow> carrier G\n 5. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> A - B \\<rightarrow> carrier G", "from True Bs finite_subset"], ["proof (chain)\npicking this:\n  finite A\n  B \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A", "show \"finite B\" \"finite (A - B)\" \"B \\<inter> (A - B) = {}\""], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite B &&& finite (A - B) &&& B \\<inter> (A - B) = {}", "by auto"], ["proof (state)\nthis:\n  finite B\n  finite (A - B)\n  B \\<inter> (A - B) = {}\n\ngoal (2 subgoals):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> B \\<rightarrow> carrier G\n 2. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> A - B \\<rightarrow> carrier G", "show \"(\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) \\<in> A - B \\<rightarrow> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> A - B \\<rightarrow> carrier G", "using Bs"], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> A - B \\<rightarrow> carrier G", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> A - B \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> B \\<rightarrow> carrier G", "from fBc"], ["proof (chain)\npicking this:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G", "show \"(\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) \\<in> B \\<rightarrow> carrier G\""], ["proof (prove)\nusing this:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> B \\<rightarrow> carrier G", "using Bs"], ["proof (prove)\nusing this:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n    \\<in> B \\<rightarrow> carrier G", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> B \\<rightarrow> carrier G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B)) =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   B \\<otimes>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B)\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "moreover"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B)) =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   B \\<otimes>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B)\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "have \"finprod G ?r B = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "have \"finprod G ?r B = finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B", "proof(intro finprod_cong')"], ["proof (state)\ngoal (3 subgoals):\n 1. B = B\n 2. f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G\n 3. \\<And>i.\n       i \\<in> B \\<Longrightarrow>\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        i =\n       (f \\<circ> (\\<lambda>a. generate G {a})) i", "show \"?r b = (f \\<circ> (\\<lambda>a. generate G {a})) b\" if \"b \\<in> B\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) b =\n    (f \\<circ> (\\<lambda>a. generate G {a})) b", "using that Bs"], ["proof (prove)\nusing this:\n  b \\<in> B\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) b =\n    (f \\<circ> (\\<lambda>a. generate G {a})) b", "by auto"], ["proof (state)\nthis:\n  ?b2 \\<in> B \\<Longrightarrow>\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) ?b2 =\n  (f \\<circ> (\\<lambda>a. generate G {a})) ?b2\n\ngoal (2 subgoals):\n 1. B = B\n 2. f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G", "show \"f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G", "using fBc"], ["proof (prove)\nusing this:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G", "by simp"], ["proof (state)\nthis:\n  f \\<circ> (\\<lambda>a. generate G {a}) \\<in> B \\<rightarrow> carrier G\n\ngoal (1 subgoal):\n 1. B = B", "qed simp"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "also"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "have \"\\<dots> = finprod G f ((\\<lambda>a. generate G {a}) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B =\n    finprod G f ((\\<lambda>a. generate G {a}) ` B)", "proof(intro finprod_comp[symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>a. generate G {a}) B\n 2. (f \\<circ> (\\<lambda>a. generate G {a})) ` B \\<subseteq> carrier G", "show \"(f \\<circ> (\\<lambda>a. generate G {a})) ` B \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> (\\<lambda>a. generate G {a})) ` B \\<subseteq> carrier G", "using fBc"], ["proof (prove)\nusing this:\n  ?b2 \\<in> B \\<Longrightarrow> f (generate G {?b2}) \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (f \\<circ> (\\<lambda>a. generate G {a})) ` B \\<subseteq> carrier G", "by auto"], ["proof (state)\nthis:\n  (f \\<circ> (\\<lambda>a. generate G {a})) ` B \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>a. generate G {a}) B", "show \"inj_on (\\<lambda>a. generate G {a}) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>a. generate G {a}) B", "by (intro inj_onI, unfold B_def, metis (no_types, lifting) f_inv_into_f inv_into_into)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>a. generate G {a}) B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B =\n  finprod G f ((\\<lambda>a. generate G {a}) ` B)\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "also"], ["proof (state)\nthis:\n  finprod G (f \\<circ> (\\<lambda>a. generate G {a})) B =\n  finprod G f ((\\<lambda>a. generate G {a}) ` B)\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "have \"\\<dots> = finprod G f ((\\<lambda>a. generate G {a}) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G f ((\\<lambda>a. generate G {a}) ` B) =\n    finprod G f ((\\<lambda>a. generate G {a}) ` A)", "using sI"], ["proof (prove)\nusing this:\n  (\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. finprod G f ((\\<lambda>a. generate G {a}) ` B) =\n    finprod G f ((\\<lambda>a. generate G {a}) ` A)", "by argo"], ["proof (state)\nthis:\n  finprod G f ((\\<lambda>a. generate G {a}) ` B) =\n  finprod G f ((\\<lambda>a. generate G {a}) ` A)\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "finally"], ["proof (chain)\npicking this:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  finprod G f ((\\<lambda>a. generate G {a}) ` A)", "show ?thesis"], ["proof (prove)\nusing this:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  finprod G f ((\\<lambda>a. generate G {a}) ` A)\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "using f(2)"], ["proof (prove)\nusing this:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  finprod G f ((\\<lambda>a. generate G {a}) ` A)\n  finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     B =\n    \\<one>", "by argo"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  \\<one>\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "moreover"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  \\<one>\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "have \"finprod G ?r (A - B) = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     (A - B) =\n    \\<one>", "by(intro finprod_one_eqI, simp)"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B) =\n  \\<one>\n\ngoal (2 subgoals):\n 1. finite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>\n 2. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "ultimately"], ["proof (chain)\npicking this:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B))\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B)) =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   B \\<otimes>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B)\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  \\<one>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B) =\n  \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B))\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (B \\<union> (A - B)) =\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   B \\<otimes>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B)\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) B =\n  \\<one>\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n   (A - B) =\n  \\<one>\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "by fastforce"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "case False"], ["proof (state)\nthis:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite A \\<Longrightarrow>\n    finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "then"], ["proof (chain)\npicking this:\n  infinite A", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. finprod G\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n     A =\n    \\<one>", "unfolding finprod_def"], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. (if finite A\n     then foldD (carrier G)\n           ((\\<otimes>) \\<circ>\n            (\\<lambda>a\\<in>A.\n                if a \\<in> B then f (generate G {a}) else \\<one>))\n           \\<one> A\n     else \\<one>) =\n    \\<one>", "by simp"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>", "have a: \"\\<forall>a\\<in>A. ?r a = \\<one>\""], ["proof (prove)\nusing this:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A.\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        a =\n       \\<one>", "using assms(2)"], ["proof (prove)\nusing this:\n  (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G\n   (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>) A =\n  \\<one>\n  \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>A. generate G {a}.\n     finprod G f A = \\<one> \\<longrightarrow>\n     (\\<forall>a\\<in>A. f a = \\<one>)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A.\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        a =\n       \\<one>", "by blast"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>", "have BA: \"\\<forall>a\\<in>B\\<inter>A. ?r a = \\<one>\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>B \\<inter> A.\n       (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n        a =\n       \\<one>", "by blast"], ["proof (state)\nthis:\n  \\<forall>a\\<in>B \\<inter> A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "from Bs sI"], ["proof (chain)\npicking this:\n  B \\<subseteq> A\n  (\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A", "have \"\\<forall>a\\<in>A. (generate G {a}) \\<in> ((\\<lambda>x. generate G {x}) ` B)\""], ["proof (prove)\nusing this:\n  B \\<subseteq> A\n  (\\<lambda>x. generate G {x}) ` B = (\\<lambda>x. generate G {x}) ` A\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. generate G {a} \\<in> (\\<lambda>x. generate G {x}) ` B", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. generate G {a} \\<in> (\\<lambda>x. generate G {x}) ` B\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. generate G {a} \\<in> (\\<lambda>x. generate G {x}) ` B", "have \"\\<forall>a\\<in>A. \\<exists>b\\<in>B. f (generate G {a}) = f (generate G {b})\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. generate G {a} \\<in> (\\<lambda>x. generate G {x}) ` B\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A.\n       \\<exists>b\\<in>B. f (generate G {a}) = f (generate G {b})", "by force"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A.\n     \\<exists>b\\<in>B. f (generate G {a}) = f (generate G {b})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id;\n        finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A.\n                            f H = \\<one>", "thus \"\\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A.\n     \\<exists>b\\<in>B. f (generate G {a}) = f (generate G {b})\n\ngoal (1 subgoal):\n 1. \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>", "using a BA Bs"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A.\n     \\<exists>b\\<in>B. f (generate G {a}) = f (generate G {b})\n  \\<forall>a\\<in>A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>\n  \\<forall>a\\<in>B \\<inter> A.\n     (\\<lambda>a\\<in>A. if a \\<in> B then f (generate G {a}) else \\<one>)\n      a =\n     \\<one>\n  B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_group) finprod_relations_triv:\n  assumes \"A \\<subseteq> carrier G\" \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\"\n  shows \"\\<forall>f \\<in> Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n         finprod G f ((\\<lambda>a. generate G {a}) ` A) = \\<one> \\<longrightarrow> (\\<forall>H\\<in> (\\<lambda>a. generate G {a}) ` A. f H = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n       finprod G f ((\\<lambda>a. generate G {a}) ` A) =\n       \\<one> \\<longrightarrow>\n       (\\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>)", "using assms finprod_relations_triv_harder_better_stronger stronger_PiE_finprod_imp"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  relations A = {\\<lambda>_\\<in>A. 0}\n  \\<lbrakk>?A \\<subseteq> carrier G;\n   relations ?A = {\\<lambda>_\\<in>?A. 0}\\<rbrakk>\n  \\<Longrightarrow> \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>?A. generate G {a}.\n                       finprod G f ?A = \\<one> \\<longrightarrow>\n                       (\\<forall>a\\<in>?A. f a = \\<one>)\n  \\<lbrakk>?A \\<subseteq> carrier G;\n   \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>?A. generate G {a}.\n      finprod G f ?A = \\<one> \\<longrightarrow>\n      (\\<forall>a\\<in>?A. f a = \\<one>)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>f\\<in>Pi\\<^sub>E\n                                    ((\\<lambda>a. generate G {a}) ` ?A) id.\n                       finprod G f ((\\<lambda>a. generate G {a}) ` ?A) =\n                       \\<one> \\<longrightarrow>\n                       (\\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` ?A.\n                           f H = \\<one>)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>Pi\\<^sub>E ((\\<lambda>a. generate G {a}) ` A) id.\n       finprod G f ((\\<lambda>a. generate G {a}) ` A) =\n       \\<one> \\<longrightarrow>\n       (\\<forall>H\\<in>(\\<lambda>a. generate G {a}) ` A. f H = \\<one>)", "by presburger"], ["", "lemma (in comm_group) ord_zero_strong_imp_rel_triv:\n  assumes \"A \\<subseteq> carrier G\" \"\\<forall>a \\<in> A. ord a = 0\"\n  and \"\\<forall>f \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a}). finprod G f A = \\<one> \\<longrightarrow> (\\<forall>a\\<in>A. f a = \\<one>)\"\n  shows \"relations A = {(\\<lambda>_\\<in>A. 0::int)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relations A = {\\<lambda>_\\<in>A. 0}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. relations A = {\\<lambda>_\\<in>A. 0}", "have \"\\<And>r. r \\<in> relations A \\<Longrightarrow> r = (\\<lambda>_\\<in>A. 0::int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r. r \\<in> relations A \\<Longrightarrow> r = (\\<lambda>_\\<in>A. 0)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r x.\n       r \\<in> relations A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "fix r x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r x.\n       r \\<in> relations A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "assume r: \"r \\<in> relations A\""], ["proof (state)\nthis:\n  r \\<in> relations A\n\ngoal (1 subgoal):\n 1. \\<And>r x.\n       r \\<in> relations A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "show \"r x = (\\<lambda>_\\<in>A. 0::int) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "proof (cases \"x \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "case True"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "let ?r = \"restrict (\\<lambda>a. a [^] r a) A\""], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "have rp: \"?r \\<in> Pi\\<^sub>E A (\\<lambda>a. generate G {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "have \"?r \\<in> extensional A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "have \"?r \\<in> Pi A (\\<lambda>a. generate G {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a) \\<in> (\\<Pi> a\\<in>A. generate G {a})", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a [^] r a \\<in> generate G {a}", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a [^] r a \\<in> generate G {a}", "assume a: \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a [^] r a \\<in> generate G {a}", "then"], ["proof (chain)\npicking this:\n  a \\<in> A", "have sga: \"subgroup (generate G {a}) G\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. subgroup (generate G {a}) G", "using generate_is_subgroup assms(1)"], ["proof (prove)\nusing this:\n  a \\<in> A\n  ?H \\<subseteq> carrier G \\<Longrightarrow> subgroup (generate G ?H) G\n  A \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. subgroup (generate G {a}) G", "by auto"], ["proof (state)\nthis:\n  subgroup (generate G {a}) G\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> A \\<Longrightarrow> a [^] r a \\<in> generate G {a}", "show \"a [^] r a \\<in> generate G {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] r a \\<in> generate G {a}", "using generate.incl[of a \"{a}\" G] subgroup_int_pow_closed[OF sga]"], ["proof (prove)\nusing this:\n  a \\<in> {a} \\<Longrightarrow> a \\<in> generate G {a}\n  ?h \\<in> generate G {a} \\<Longrightarrow> ?h [^] ?k \\<in> generate G {a}\n\ngoal (1 subgoal):\n 1. a [^] r a \\<in> generate G {a}", "by simp"], ["proof (state)\nthis:\n  a [^] r a \\<in> generate G {a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> (\\<Pi> a\\<in>A. generate G {a})\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> (\\<Pi> a\\<in>A. generate G {a})", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> (\\<Pi> a\\<in>A. generate G {a})\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})", "unfolding PiE_def"], ["proof (prove)\nusing this:\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> extensional A\n  (\\<lambda>a\\<in>A. a [^] r a) \\<in> (\\<Pi> a\\<in>A. generate G {a})\n\ngoal (1 subgoal):\n 1. (\\<lambda>a\\<in>A. a [^] r a)\n    \\<in> (\\<Pi> a\\<in>A. generate G {a}) \\<inter> extensional A", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. a [^] r a)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a\\<in>A. a [^] r a)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "have \"finprod G ?r A = (\\<Otimes>a\\<in>A. a [^] r a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G (\\<lambda>a\\<in>A. a [^] r a) A =\n    (\\<Otimes>a\\<in>A. a [^] r a)", "by(intro finprod_cong, use assms(1) in auto)"], ["proof (state)\nthis:\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = (\\<Otimes>a\\<in>A. a [^] r a)\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "with r"], ["proof (chain)\npicking this:\n  r \\<in> relations A\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = (\\<Otimes>a\\<in>A. a [^] r a)", "have \"finprod G ?r A = \\<one>\""], ["proof (prove)\nusing this:\n  r \\<in> relations A\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = (\\<Otimes>a\\<in>A. a [^] r a)\n\ngoal (1 subgoal):\n 1. finprod G (\\<lambda>a\\<in>A. a [^] r a) A = \\<one>", "unfolding relations_def"], ["proof (prove)\nusing this:\n  r \\<in> {f. (\\<Otimes>a\\<in>A. a [^] f a) = \\<one>} \\<inter> extensional A\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = (\\<Otimes>a\\<in>A. a [^] r a)\n\ngoal (1 subgoal):\n 1. finprod G (\\<lambda>a\\<in>A. a [^] r a) A = \\<one>", "by simp"], ["proof (state)\nthis:\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = \\<one>\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "with assms(3) rp"], ["proof (chain)\npicking this:\n  \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>A. generate G {a}.\n     finprod G f A = \\<one> \\<longrightarrow>\n     (\\<forall>a\\<in>A. f a = \\<one>)\n  (\\<lambda>a\\<in>A. a [^] r a)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = \\<one>", "have \"\\<forall>a\\<in>A. ?r a = \\<one>\""], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>A. generate G {a}.\n     finprod G f A = \\<one> \\<longrightarrow>\n     (\\<forall>a\\<in>A. f a = \\<one>)\n  (\\<lambda>a\\<in>A. a [^] r a)\n  \\<in> (\\<Pi>\\<^sub>E a\\<in>A. generate G {a})\n  finprod G (\\<lambda>a\\<in>A. a [^] r a) A = \\<one>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. (\\<lambda>a\\<in>A. a [^] r a) a = \\<one>", "by fast"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. (\\<lambda>a\\<in>A. a [^] r a) a = \\<one>\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>A. (\\<lambda>a\\<in>A. a [^] r a) a = \\<one>", "have \"\\<forall>a\\<in>A. a [^] r a = \\<one>\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>A. (\\<lambda>a\\<in>A. a [^] r a) a = \\<one>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. a [^] r a = \\<one>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>A. a [^] r a = \\<one>\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "with assms(1, 2) True"], ["proof (chain)\npicking this:\n  A \\<subseteq> carrier G\n  \\<forall>a\\<in>A. ord a = 0\n  x \\<in> A\n  \\<forall>a\\<in>A. a [^] r a = \\<one>", "have \"r x = 0\""], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  \\<forall>a\\<in>A. ord a = 0\n  x \\<in> A\n  \\<forall>a\\<in>A. a [^] r a = \\<one>\n\ngoal (1 subgoal):\n 1. r x = 0", "using finite_cyclic_subgroup_int infinite_cyclic_subgroup_order"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  \\<forall>a\\<in>A. ord a = 0\n  x \\<in> A\n  \\<forall>a\\<in>A. a [^] r a = \\<one>\n  ?x \\<in> carrier G \\<Longrightarrow>\n  finite (carrier (subgroup_generated G {?x})) =\n  (\\<exists>i. i \\<noteq> 0 \\<and> ?x [^] i = \\<one>)\n  ?x \\<in> carrier G \\<Longrightarrow>\n  infinite (carrier (subgroup_generated G {?x})) = (ord ?x = 0)\n\ngoal (1 subgoal):\n 1. r x = 0", "by blast"], ["proof (state)\nthis:\n  r x = 0\n\ngoal (2 subgoals):\n 1. x \\<in> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x\n 2. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "thus ?thesis"], ["proof (prove)\nusing this:\n  r x = 0\n\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "using True"], ["proof (prove)\nusing this:\n  r x = 0\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "by simp"], ["proof (state)\nthis:\n  r x = (\\<lambda>_\\<in>A. 0) x\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "case False"], ["proof (state)\nthis:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> r x = (\\<lambda>_\\<in>A. 0) x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "using r"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  r \\<in> relations A\n\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "unfolding relations_def extensional_def"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  r \\<in> {f. (\\<Otimes>a\\<in>A. a [^] f a) = \\<one>} \\<inter>\n          {f. \\<forall>x. x \\<notin> A \\<longrightarrow> f x = undefined}\n\ngoal (1 subgoal):\n 1. r x = (\\<lambda>_\\<in>A. 0) x", "by simp"], ["proof (state)\nthis:\n  r x = (\\<lambda>_\\<in>A. 0) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r x = (\\<lambda>_\\<in>A. 0) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?r2 \\<in> relations A \\<Longrightarrow> ?r2 = (\\<lambda>_\\<in>A. 0)\n\ngoal (1 subgoal):\n 1. relations A = {\\<lambda>_\\<in>A. 0}", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?r2 \\<in> relations A \\<Longrightarrow> ?r2 = (\\<lambda>_\\<in>A. 0)\n\ngoal (1 subgoal):\n 1. relations A = {\\<lambda>_\\<in>A. 0}", "using triv_rel"], ["proof (prove)\nusing this:\n  ?r2 \\<in> relations A \\<Longrightarrow> ?r2 = (\\<lambda>_\\<in>A. 0)\n  (\\<lambda>_\\<in>?A. 0) \\<in> relations ?A\n\ngoal (1 subgoal):\n 1. relations A = {\\<lambda>_\\<in>A. 0}", "by blast"], ["proof (state)\nthis:\n  relations A = {\\<lambda>_\\<in>A. 0}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in comm_group) compl_fam_iff_relations_triv:\n  assumes \"finite gs\" \"gs \\<subseteq> carrier G\" \"\\<forall>g\\<in>gs. ord g = 0\"\n  shows \"relations gs = {(\\<lambda>_\\<in>gs. 0::int)} \\<longleftrightarrow> compl_fam (\\<lambda>g. generate G {g}) gs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (relations gs = {\\<lambda>_\\<in>gs. 0}) =\n    compl_fam (\\<lambda>g. generate G {g}) gs", "using triv_finprod_iff_compl_fam_PiE[of _ \"\\<lambda>g. generate G {g}\", OF assms(1) generate_is_subgroup]\n        ord_zero_strong_imp_rel_triv[OF assms(2, 3)]\n        finprod_relations_triv_harder_better_stronger[OF assms(2)] assms"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i \\<in> gs \\<Longrightarrow>\n      {i} \\<subseteq> carrier G) \\<Longrightarrow>\n  compl_fam (\\<lambda>g. generate G {g}) gs =\n  (\\<forall>f\\<in>\\<Pi>\\<^sub>E g\\<in>gs. generate G {g}.\n      finprod G f gs = \\<one> \\<longrightarrow>\n      (\\<forall>i\\<in>gs. f i = \\<one>))\n  \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>gs. generate G {a}.\n     finprod G f gs = \\<one> \\<longrightarrow>\n     (\\<forall>a\\<in>gs. f a = \\<one>) \\<Longrightarrow>\n  relations gs = {\\<lambda>_\\<in>gs. 0}\n  relations gs = {\\<lambda>_\\<in>gs. 0} \\<Longrightarrow>\n  \\<forall>f\\<in>\\<Pi>\\<^sub>E a\\<in>gs. generate G {a}.\n     finprod G f gs = \\<one> \\<longrightarrow>\n     (\\<forall>a\\<in>gs. f a = \\<one>)\n  finite gs\n  gs \\<subseteq> carrier G\n  \\<forall>g\\<in>gs. ord g = 0\n\ngoal (1 subgoal):\n 1. (relations gs = {\\<lambda>_\\<in>gs. 0}) =\n    compl_fam (\\<lambda>g. generate G {g}) gs", "by blast"], ["", "end"]]}