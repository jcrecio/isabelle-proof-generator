{"file_name": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups/Miscellaneous_Groups.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups", "problem_names": ["lemma (in subgroup) nat_pow_closed [simp,intro]: \"a \\<in> H \\<Longrightarrow> pow G a (n::nat) \\<in> H\"", "lemma nat_pow_modify_carrier: \"a [^]\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> b = a [^]\\<^bsub>G\\<^esub> (b::nat)\"", "lemma (in group) subgroup_card_dvd_group_ord:\n  assumes \"subgroup H G\"\n  shows \"card H dvd order G\"", "lemma (in group) subgroup_card_eq_order:\n  assumes \"subgroup H G\"\n  shows \"card H = order (G\\<lparr>carrier := H\\<rparr>)\"", "lemma (in group) finite_subgroup_card_neq_0:\n  assumes \"subgroup H G\" \"finite H\"\n  shows \"card H \\<noteq> 0\"", "lemma (in group) subgroup_order_dvd_group_order:\n  assumes \"subgroup H G\"\n  shows \"order (G\\<lparr>carrier := H\\<rparr>) dvd order G\"", "lemma (in group) sub_subgroup_dvd_card:\n  assumes \"subgroup H G\" \"subgroup J G\" \"J \\<subseteq> H\"\n  shows \"card J dvd card H\"", "lemma (in group) inter_subgroup_dvd_card:\n  assumes \"subgroup H G\" \"subgroup J G\"\n  shows \"card (H \\<inter> J) dvd card H\"", "lemma (in group) subgroups_card_coprime_inter_card_one:\n  assumes \"subgroup H G\" \"subgroup J G\" \"coprime (card H) (card J)\"\n  shows \"card (H \\<inter> J) = 1\"", "lemma (in group) coset_neq_imp_empty_inter:\n  assumes \"subgroup H G\" \"a \\<in> carrier G\" \"b \\<in> carrier G\"\n  shows \"H #> a \\<noteq> H #> b \\<Longrightarrow> (H #> a) \\<inter> (H #> b) = {}\"", "lemma (in comm_group) subgroup_is_comm_group:\n  assumes \"subgroup H G\"\n  shows \"comm_group (G\\<lparr>carrier := H\\<rparr>)\"", "lemma (in group) pow_int_mod_ord:\n  assumes [simp]:\"a \\<in> carrier G\" \"ord a \\<noteq> 0\"\n  shows \"a [^] (n::int) = a [^] (n mod ord a)\"", "lemma (in group) pow_nat_mod_ord:\n  assumes [simp]:\"a \\<in> carrier G\" \"ord a \\<noteq> 0\"\n  shows \"a [^] (n::nat) = a [^] (n mod ord a)\"", "lemma (in group) ord_min:\n  assumes \"m \\<ge> 1\" \"x \\<in> carrier G\" \"x [^] m = \\<one>\"\n  shows   \"ord x \\<le> m\"", "lemma (in group) bij_betw_mult_left[intro]:\n  assumes [simp]: \"x \\<in> carrier G\"\n  shows \"bij_betw (\\<lambda>y. x \\<otimes> y) (carrier G) (carrier G)\"", "lemma (in subgroup) inv_in_iff:\n  assumes \"x \\<in> carrier G\" \"group G\"\n  shows   \"inv x \\<in> H \\<longleftrightarrow> x \\<in> H\"", "lemma (in subgroup) mult_in_cancel_left:\n  assumes \"y \\<in> carrier G\" \"x \\<in> H\" \"group G\"\n  shows   \"x \\<otimes> y \\<in> H \\<longleftrightarrow> y \\<in> H\"", "lemma (in subgroup) mult_in_cancel_right:\n  assumes \"x \\<in> carrier G\" \"y \\<in> H\" \"group G\"\n  shows   \"x \\<otimes> y \\<in> H \\<longleftrightarrow> x \\<in> H\"", "lemma (in group) (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\" and \"x [^] n = \\<one>\" and \"n > 0\"\n  shows   ord_le: \"ord x \\<le> n\" and ord_pos: \"ord x > 0\"", "lemma (in group) ord_conv_Least: (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\" \"\\<exists>n::nat > 0. x [^] n = \\<one>\"\n  shows   \"ord x = (LEAST n::nat. 0 < n \\<and> x [^] n = \\<one>)\"", "lemma (in group) ord_conv_Gcd: (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\"\n  shows   \"ord x = Gcd {n. x [^] n = \\<one>}\"", "lemma (in group) subgroup_ord_eq:\n  assumes \"subgroup H G\" \"x \\<in> H\"\n  shows \"group.ord (G\\<lparr>carrier := H\\<rparr>) x = ord x\"", "lemma (in group) ord_FactGroup:\n  assumes \"subgroup P G\" \"group (G Mod P)\"\n  shows \"order (G Mod P) * card P = order G\"", "lemma (in group) one_is_same:\n  assumes \"subgroup H G\"\n  shows \"\\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = \\<one>\"", "lemma (in group) kernel_FactGroup:\n  assumes \"P \\<lhd> G\"\n  shows \"kernel G (G Mod P) (\\<lambda>x. P #> x) = P\"", "lemma (in group) sub_subgroup_coprime:\n  assumes \"subgroup H G\" \"subgroup J G\" \"coprime (card H) (card J)\"\n  and \"subgroup sH G\" \"subgroup sJ G\" \"sH \\<subseteq> H\" \"sJ \\<subseteq> J\"\nshows \"coprime (card sH) (card sJ)\"", "lemma (in group) pow_eq_nat_mod:\n  assumes \"a \\<in> carrier G\" \"a [^] n = a [^] m\"\n  shows \"n mod (ord a) = m mod (ord a)\"", "lemma (in group) pow_eq_int_mod:\n  fixes n m::int\n  assumes \"a \\<in> carrier G\" \"a [^] n = a [^] m\"\n  shows \"n mod (ord a) = m mod (ord a)\""], "translations": [["", "lemma (in subgroup) nat_pow_closed [simp,intro]: \"a \\<in> H \\<Longrightarrow> pow G a (n::nat) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> H \\<Longrightarrow> a [^] n \\<in> H", "by (induction n) (auto simp: nat_pow_def)"], ["", "(* Manuel Eberl *)"], ["", "lemma nat_pow_modify_carrier: \"a [^]\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> b = a [^]\\<^bsub>G\\<^esub> (b::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^]\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> b =\n    a [^]\\<^bsub>G\\<^esub> b", "by (simp add: nat_pow_def)"], ["", "lemma (in group) subgroup_card_dvd_group_ord:\n  assumes \"subgroup H G\"\n  shows \"card H dvd order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H dvd order G", "using Coset.group.lagrange[of G H] assms group_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Group.group G; subgroup H G\\<rbrakk>\n  \\<Longrightarrow> card (rcosets H) * card H = order G\n  subgroup H G\n  Group.group G\n\ngoal (1 subgoal):\n 1. card H dvd order G", "by (metis dvd_triv_right)"], ["", "lemma (in group) subgroup_card_eq_order:\n  assumes \"subgroup H G\"\n  shows \"card H = order (G\\<lparr>carrier := H\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H = order (G\\<lparr>carrier := H\\<rparr>)", "unfolding order_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card H = card (carrier (G\\<lparr>carrier := H\\<rparr>))", "by simp"], ["", "lemma (in group) finite_subgroup_card_neq_0:\n  assumes \"subgroup H G\" \"finite H\"\n  shows \"card H \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H \\<noteq> 0", "using subgroup_nonempty assms"], ["proof (prove)\nusing this:\n  \\<not> subgroup {} ?G\n  subgroup H G\n  finite H\n\ngoal (1 subgoal):\n 1. card H \\<noteq> 0", "by auto"], ["", "lemma (in group) subgroup_order_dvd_group_order:\n  assumes \"subgroup H G\"\n  shows \"order (G\\<lparr>carrier := H\\<rparr>) dvd order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (G\\<lparr>carrier := H\\<rparr>) dvd order G", "by (metis subgroup_card_dvd_group_ord[of H] assms subgroup_card_eq_order)"], ["", "lemma (in group) sub_subgroup_dvd_card:\n  assumes \"subgroup H G\" \"subgroup J G\" \"J \\<subseteq> H\"\n  shows \"card J dvd card H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card J dvd card H", "by (metis subgroup_incl[of J H] subgroup_card_eq_order[of H]\n            group.subgroup_card_dvd_group_ord[of \"(G\\<lparr>carrier := H\\<rparr>)\" J] assms\n            subgroup.subgroup_is_group[of H G] group_axioms)"], ["", "lemma (in group) inter_subgroup_dvd_card:\n  assumes \"subgroup H G\" \"subgroup J G\"\n  shows \"card (H \\<inter> J) dvd card H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (H \\<inter> J) dvd card H", "using subgroups_Inter_pair[of H J] assms sub_subgroup_dvd_card[of H \"H \\<inter> J\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>subgroup H G; subgroup J G\\<rbrakk>\n  \\<Longrightarrow> subgroup (H \\<inter> J) G\n  subgroup H G\n  subgroup J G\n  \\<lbrakk>subgroup H G; subgroup (H \\<inter> J) G;\n   H \\<inter> J \\<subseteq> H\\<rbrakk>\n  \\<Longrightarrow> card (H \\<inter> J) dvd card H\n\ngoal (1 subgoal):\n 1. card (H \\<inter> J) dvd card H", "by blast"], ["", "lemma (in group) subgroups_card_coprime_inter_card_one:\n  assumes \"subgroup H G\" \"subgroup J G\" \"coprime (card H) (card J)\"\n  shows \"card (H \\<inter> J) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (H \\<inter> J) = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (H \\<inter> J) = 1", "from assms inter_subgroup_dvd_card"], ["proof (chain)\npicking this:\n  subgroup H G\n  subgroup J G\n  coprime (card H) (card J)\n  \\<lbrakk>subgroup ?H G; subgroup ?J G\\<rbrakk>\n  \\<Longrightarrow> card (?H \\<inter> ?J) dvd card ?H", "have \"is_unit (card (H \\<inter> J))\""], ["proof (prove)\nusing this:\n  subgroup H G\n  subgroup J G\n  coprime (card H) (card J)\n  \\<lbrakk>subgroup ?H G; subgroup ?J G\\<rbrakk>\n  \\<Longrightarrow> card (?H \\<inter> ?J) dvd card ?H\n\ngoal (1 subgoal):\n 1. is_unit (card (H \\<inter> J))", "unfolding coprime_def"], ["proof (prove)\nusing this:\n  subgroup H G\n  subgroup J G\n  \\<forall>c.\n     c dvd card H \\<longrightarrow> c dvd card J \\<longrightarrow> is_unit c\n  \\<lbrakk>subgroup ?H G; subgroup ?J G\\<rbrakk>\n  \\<Longrightarrow> card (?H \\<inter> ?J) dvd card ?H\n\ngoal (1 subgoal):\n 1. is_unit (card (H \\<inter> J))", "by (meson Int_lower2 sub_subgroup_dvd_card subgroup_Int)"], ["proof (state)\nthis:\n  is_unit (card (H \\<inter> J))\n\ngoal (1 subgoal):\n 1. card (H \\<inter> J) = 1", "then"], ["proof (chain)\npicking this:\n  is_unit (card (H \\<inter> J))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_unit (card (H \\<inter> J))\n\ngoal (1 subgoal):\n 1. card (H \\<inter> J) = 1", "by simp"], ["proof (state)\nthis:\n  card (H \\<inter> J) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) coset_neq_imp_empty_inter:\n  assumes \"subgroup H G\" \"a \\<in> carrier G\" \"b \\<in> carrier G\"\n  shows \"H #> a \\<noteq> H #> b \\<Longrightarrow> (H #> a) \\<inter> (H #> b) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H #> a \\<noteq> H #> b \\<Longrightarrow> (H #> a) \\<inter> (H #> b) = {}", "by (metis Int_emptyI assms repr_independence)"], ["", "lemma (in comm_group) subgroup_is_comm_group:\n  assumes \"subgroup H G\"\n  shows \"comm_group (G\\<lparr>carrier := H\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_group (G\\<lparr>carrier := H\\<rparr>)", "unfolding comm_group_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>) \\<and>\n    Group.group (G\\<lparr>carrier := H\\<rparr>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)\n 2. Group.group (G\\<lparr>carrier := H\\<rparr>)", "interpret H: subgroup H G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)\n 2. Group.group (G\\<lparr>carrier := H\\<rparr>)", "interpret H: submonoid H G"], ["proof (prove)\ngoal (1 subgoal):\n 1. submonoid H G", "using H.subgroup_is_submonoid"], ["proof (prove)\nusing this:\n  submonoid H G\n\ngoal (1 subgoal):\n 1. submonoid H G", "."], ["proof (state)\ngoal (2 subgoals):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)\n 2. Group.group (G\\<lparr>carrier := H\\<rparr>)", "show \"Group.group (G\\<lparr>carrier := H\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.group (G\\<lparr>carrier := H\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  Group.group (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)", "show \"comm_monoid (G\\<lparr>carrier := H\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)", "using submonoid_is_comm_monoid H.submonoid_axioms"], ["proof (prove)\nusing this:\n  submonoid ?H G \\<Longrightarrow>\n  Group.comm_monoid (G\\<lparr>carrier := ?H\\<rparr>)\n  submonoid H G\n\ngoal (1 subgoal):\n 1. Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)", "by blast"], ["proof (state)\nthis:\n  Group.comm_monoid (G\\<lparr>carrier := H\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) pow_int_mod_ord:\n  assumes [simp]:\"a \\<in> carrier G\" \"ord a \\<noteq> 0\"\n  shows \"a [^] (n::int) = a [^] (n mod ord a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "obtain q r where d: \"q = n div ord a\" \"r = n mod ord a\" \"n = q * ord a + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q r.\n        \\<lbrakk>q = n div int (ord a); r = n mod int (ord a);\n         n = q * int (ord a) + r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using mod_div_decomp"], ["proof (prove)\nusing this:\n  (\\<And>q r.\n      \\<lbrakk>q = ?a div ?b; r = ?a mod ?b; ?a = q * ?b + r\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q r.\n        \\<lbrakk>q = n div int (ord a); r = n mod int (ord a);\n         n = q * int (ord a) + r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = n div int (ord a)\n  r = n mod int (ord a)\n  n = q * int (ord a) + r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "hence \"a [^] n = (a [^] int (ord a)) [^] q \\<otimes> a [^] r\""], ["proof (prove)\nusing this:\n  q = n div int (ord a)\n  r = n mod int (ord a)\n  n = q * int (ord a) + r\n\ngoal (1 subgoal):\n 1. a [^] n = (a [^] int (ord a)) [^] q \\<otimes> a [^] r", "using assms(1) int_pow_mult int_pow_pow"], ["proof (prove)\nusing this:\n  q = n div int (ord a)\n  r = n mod int (ord a)\n  n = q * int (ord a) + r\n  a \\<in> carrier G\n  ?x \\<in> carrier G \\<Longrightarrow>\n  ?x [^] (?i + ?j) = ?x [^] ?i \\<otimes> ?x [^] ?j\n  ?x \\<in> carrier G \\<Longrightarrow> (?x [^] ?n) [^] ?m = ?x [^] (?n * ?m)\n\ngoal (1 subgoal):\n 1. a [^] n = (a [^] int (ord a)) [^] q \\<otimes> a [^] r", "by (metis mult_of_nat_commute)"], ["proof (state)\nthis:\n  a [^] n = (a [^] int (ord a)) [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "also"], ["proof (state)\nthis:\n  a [^] n = (a [^] int (ord a)) [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "have \"\\<dots> = \\<one> [^] q \\<otimes> a [^] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a [^] int (ord a)) [^] q \\<otimes> a [^] r =\n    \\<one> [^] q \\<otimes> a [^] r", "by (simp add: int_pow_int)"], ["proof (state)\nthis:\n  (a [^] int (ord a)) [^] q \\<otimes> a [^] r =\n  \\<one> [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "also"], ["proof (state)\nthis:\n  (a [^] int (ord a)) [^] q \\<otimes> a [^] r =\n  \\<one> [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "have \"\\<dots> = a [^] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> [^] q \\<otimes> a [^] r = a [^] r", "by simp"], ["proof (state)\nthis:\n  \\<one> [^] q \\<otimes> a [^] r = a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "finally"], ["proof (chain)\npicking this:\n  a [^] n = a [^] r", "show ?thesis"], ["proof (prove)\nusing this:\n  a [^] n = a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "using d(2)"], ["proof (prove)\nusing this:\n  a [^] n = a [^] r\n  r = n mod int (ord a)\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod int (ord a))", "by blast"], ["proof (state)\nthis:\n  a [^] n = a [^] (n mod int (ord a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) pow_nat_mod_ord:\n  assumes [simp]:\"a \\<in> carrier G\" \"ord a \\<noteq> 0\"\n  shows \"a [^] (n::nat) = a [^] (n mod ord a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "obtain q r where d: \"q = n div ord a\" \"r = n mod ord a\" \"n = q * ord a + r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q r.\n        \\<lbrakk>q = n div ord a; r = n mod ord a;\n         n = q * ord a + r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using mod_div_decomp"], ["proof (prove)\nusing this:\n  (\\<And>q r.\n      \\<lbrakk>q = ?a div ?b; r = ?a mod ?b; ?a = q * ?b + r\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>q r.\n        \\<lbrakk>q = n div ord a; r = n mod ord a;\n         n = q * ord a + r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = n div ord a\n  r = n mod ord a\n  n = q * ord a + r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "hence \"a [^] n = (a [^] ord a) [^] q \\<otimes> a [^] r\""], ["proof (prove)\nusing this:\n  q = n div ord a\n  r = n mod ord a\n  n = q * ord a + r\n\ngoal (1 subgoal):\n 1. a [^] n = (a [^] ord a) [^] q \\<otimes> a [^] r", "using assms(1) nat_pow_mult nat_pow_pow"], ["proof (prove)\nusing this:\n  q = n div ord a\n  r = n mod ord a\n  n = q * ord a + r\n  a \\<in> carrier G\n  ?x \\<in> carrier G \\<Longrightarrow>\n  ?x [^] ?n \\<otimes> ?x [^] ?m = ?x [^] (?n + ?m)\n  ?x \\<in> carrier G \\<Longrightarrow> (?x [^] ?n) [^] ?m = ?x [^] (?n * ?m)\n\ngoal (1 subgoal):\n 1. a [^] n = (a [^] ord a) [^] q \\<otimes> a [^] r", "by presburger"], ["proof (state)\nthis:\n  a [^] n = (a [^] ord a) [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "also"], ["proof (state)\nthis:\n  a [^] n = (a [^] ord a) [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "have \"\\<dots> = \\<one> [^] q \\<otimes> a [^] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a [^] ord a) [^] q \\<otimes> a [^] r = \\<one> [^] q \\<otimes> a [^] r", "by auto"], ["proof (state)\nthis:\n  (a [^] ord a) [^] q \\<otimes> a [^] r = \\<one> [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "also"], ["proof (state)\nthis:\n  (a [^] ord a) [^] q \\<otimes> a [^] r = \\<one> [^] q \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "have \"\\<dots> = a [^] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> [^] q \\<otimes> a [^] r = a [^] r", "by simp"], ["proof (state)\nthis:\n  \\<one> [^] q \\<otimes> a [^] r = a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "finally"], ["proof (chain)\npicking this:\n  a [^] n = a [^] r", "show ?thesis"], ["proof (prove)\nusing this:\n  a [^] n = a [^] r\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "using d(2)"], ["proof (prove)\nusing this:\n  a [^] n = a [^] r\n  r = n mod ord a\n\ngoal (1 subgoal):\n 1. a [^] n = a [^] (n mod ord a)", "by blast"], ["proof (state)\nthis:\n  a [^] n = a [^] (n mod ord a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) ord_min:\n  assumes \"m \\<ge> 1\" \"x \\<in> carrier G\" \"x [^] m = \\<one>\"\n  shows   \"ord x \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x \\<le> m", "using assms pow_eq_id"], ["proof (prove)\nusing this:\n  1 \\<le> m\n  x \\<in> carrier G\n  x [^] m = \\<one>\n  ?x \\<in> carrier G \\<Longrightarrow>\n  (?x [^] ?n = \\<one>) = (ord ?x dvd ?n)\n\ngoal (1 subgoal):\n 1. ord x \\<le> m", "by auto"], ["", "(* Manuel Eberl *)"], ["", "lemma (in group) bij_betw_mult_left[intro]:\n  assumes [simp]: \"x \\<in> carrier G\"\n  shows \"bij_betw (\\<lambda>y. x \\<otimes> y) (carrier G) (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((\\<otimes>) x) (carrier G) (carrier G)", "by (intro bij_betwI[where ?g = \"\\<lambda>y. inv x \\<otimes> y\"])\n     (auto simp: m_assoc [symmetric])"], ["", "(* Manuel Eberl *)"], ["", "lemma (in subgroup) inv_in_iff:\n  assumes \"x \\<in> carrier G\" \"group G\"\n  shows   \"inv x \\<in> H \\<longleftrightarrow> x \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv x \\<in> H) = (x \\<in> H)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. inv x \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "assume \"inv x \\<in> H\""], ["proof (state)\nthis:\n  inv x \\<in> H\n\ngoal (2 subgoals):\n 1. inv x \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "hence \"inv (inv x) \\<in> H\""], ["proof (prove)\nusing this:\n  inv x \\<in> H\n\ngoal (1 subgoal):\n 1. inv (inv x) \\<in> H", "by blast"], ["proof (state)\nthis:\n  inv (inv x) \\<in> H\n\ngoal (2 subgoals):\n 1. inv x \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "also"], ["proof (state)\nthis:\n  inv (inv x) \\<in> H\n\ngoal (2 subgoals):\n 1. inv x \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "have \"inv (inv x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv (inv x) = x", "by (intro group.inv_inv) (use assms in auto)"], ["proof (state)\nthis:\n  inv (inv x) = x\n\ngoal (2 subgoals):\n 1. inv x \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "finally"], ["proof (chain)\npicking this:\n  x \\<in> H", "show \"x \\<in> H\""], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<in> H", "."], ["proof (state)\nthis:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<in> H \\<Longrightarrow> inv x \\<in> H", "qed auto"], ["", "(* Manuel Eberl *)"], ["", "lemma (in subgroup) mult_in_cancel_left:\n  assumes \"y \\<in> carrier G\" \"x \\<in> H\" \"group G\"\n  shows   \"x \\<otimes> y \\<in> H \\<longleftrightarrow> y \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<otimes> y \\<in> H) = (y \\<in> H)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> y \\<in> H\n 2. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "assume \"x \\<otimes> y \\<in> H\""], ["proof (state)\nthis:\n  x \\<otimes> y \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> y \\<in> H\n 2. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "hence \"inv x \\<otimes> (x \\<otimes> y) \\<in> H\""], ["proof (prove)\nusing this:\n  x \\<otimes> y \\<in> H\n\ngoal (1 subgoal):\n 1. inv x \\<otimes> (x \\<otimes> y) \\<in> H", "using assms"], ["proof (prove)\nusing this:\n  x \\<otimes> y \\<in> H\n  y \\<in> carrier G\n  x \\<in> H\n  Group.group G\n\ngoal (1 subgoal):\n 1. inv x \\<otimes> (x \\<otimes> y) \\<in> H", "by blast"], ["proof (state)\nthis:\n  inv x \\<otimes> (x \\<otimes> y) \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> y \\<in> H\n 2. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "also"], ["proof (state)\nthis:\n  inv x \\<otimes> (x \\<otimes> y) \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> y \\<in> H\n 2. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "have \"inv x \\<otimes> (x \\<otimes> y) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv x \\<otimes> (x \\<otimes> y) = y", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  x \\<in> H\n  Group.group G\n\ngoal (1 subgoal):\n 1. inv x \\<otimes> (x \\<otimes> y) = y", "by (simp add: \\<open>x \\<otimes> y \\<in> H\\<close> group.inv_solve_left')"], ["proof (state)\nthis:\n  inv x \\<otimes> (x \\<otimes> y) = y\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> y \\<in> H\n 2. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "finally"], ["proof (chain)\npicking this:\n  y \\<in> H", "show \"y \\<in> H\""], ["proof (prove)\nusing this:\n  y \\<in> H\n\ngoal (1 subgoal):\n 1. y \\<in> H", "."], ["proof (state)\nthis:\n  y \\<in> H\n\ngoal (1 subgoal):\n 1. y \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "qed (use assms in auto)"], ["", "(* Manuel Eberl *)"], ["", "lemma (in subgroup) mult_in_cancel_right:\n  assumes \"x \\<in> carrier G\" \"y \\<in> H\" \"group G\"\n  shows   \"x \\<otimes> y \\<in> H \\<longleftrightarrow> x \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<otimes> y \\<in> H) = (x \\<in> H)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "assume \"x \\<otimes> y \\<in> H\""], ["proof (state)\nthis:\n  x \\<otimes> y \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "hence \"(x \\<otimes> y) \\<otimes> inv y \\<in> H\""], ["proof (prove)\nusing this:\n  x \\<otimes> y \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> inv y \\<in> H", "using assms"], ["proof (prove)\nusing this:\n  x \\<otimes> y \\<in> H\n  x \\<in> carrier G\n  y \\<in> H\n  Group.group G\n\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> inv y \\<in> H", "by blast"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> inv y \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "also"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> inv y \\<in> H\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "have \"(x \\<otimes> y) \\<otimes> inv y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> inv y = x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> H\n  Group.group G\n\ngoal (1 subgoal):\n 1. x \\<otimes> y \\<otimes> inv y = x", "by (simp add: \\<open>x \\<otimes> y \\<in> H\\<close> group.inv_solve_right')"], ["proof (state)\nthis:\n  x \\<otimes> y \\<otimes> inv y = x\n\ngoal (2 subgoals):\n 1. x \\<otimes> y \\<in> H \\<Longrightarrow> x \\<in> H\n 2. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "finally"], ["proof (chain)\npicking this:\n  x \\<in> H", "show \"x \\<in> H\""], ["proof (prove)\nusing this:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<in> H", "."], ["proof (state)\nthis:\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. x \\<in> H \\<Longrightarrow> x \\<otimes> y \\<in> H", "qed (use assms in auto)"], ["", "lemma (in group) (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\" and \"x [^] n = \\<one>\" and \"n > 0\"\n  shows   ord_le: \"ord x \\<le> n\" and ord_pos: \"ord x > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x \\<le> n &&& 0 < ord x", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ord x \\<le> n\n 2. 0 < ord x", "have \"ord x dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x dvd n", "using pow_eq_id[of x n] assms"], ["proof (prove)\nusing this:\n  x \\<in> carrier G \\<Longrightarrow> (x [^] n = \\<one>) = (ord x dvd n)\n  x \\<in> carrier G\n  x [^] n = \\<one>\n  0 < n\n\ngoal (1 subgoal):\n 1. ord x dvd n", "by auto"], ["proof (state)\nthis:\n  ord x dvd n\n\ngoal (2 subgoals):\n 1. ord x \\<le> n\n 2. 0 < ord x", "thus \"ord x \\<le> n\" \"ord x > 0\""], ["proof (prove)\nusing this:\n  ord x dvd n\n\ngoal (1 subgoal):\n 1. ord x \\<le> n &&& 0 < ord x", "using assms"], ["proof (prove)\nusing this:\n  ord x dvd n\n  x \\<in> carrier G\n  x [^] n = \\<one>\n  0 < n\n\ngoal (1 subgoal):\n 1. ord x \\<le> n &&& 0 < ord x", "by (auto intro: dvd_imp_le)"], ["proof (state)\nthis:\n  ord x \\<le> n\n  0 < ord x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) ord_conv_Least: (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\" \"\\<exists>n::nat > 0. x [^] n = \\<one>\"\n  shows   \"ord x = (LEAST n::nat. 0 < n \\<and> x [^] n = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x = (LEAST n. 0 < n \\<and> x [^] n = \\<one>)", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ord x \\<le> (LEAST n. 0 < n \\<and> x [^] n = \\<one>)\n 2. (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<le> ord x", "show \"ord x \\<le> (LEAST n::nat. 0 < n \\<and> x [^] n = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x \\<le> (LEAST n. 0 < n \\<and> x [^] n = \\<one>)", "using assms LeastI_ex[OF assms(2)]"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  \\<exists>n>0. x [^] n = \\<one>\n  0 < (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<and>\n  x [^] (LEAST n. 0 < n \\<and> x [^] n = \\<one>) = \\<one>\n\ngoal (1 subgoal):\n 1. ord x \\<le> (LEAST n. 0 < n \\<and> x [^] n = \\<one>)", "by (intro ord_le) auto"], ["proof (state)\nthis:\n  ord x \\<le> (LEAST n. 0 < n \\<and> x [^] n = \\<one>)\n\ngoal (1 subgoal):\n 1. (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<le> ord x", "show \"ord x \\<ge> (LEAST n::nat. 0 < n \\<and> x [^] n = \\<one>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<le> ord x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  \\<exists>n>0. x [^] n = \\<one>\n\ngoal (1 subgoal):\n 1. (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<le> ord x", "by (intro Least_le) (auto intro: pow_ord_eq_1 ord_pos)"], ["proof (state)\nthis:\n  (LEAST n. 0 < n \\<and> x [^] n = \\<one>) \\<le> ord x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) ord_conv_Gcd: (* Manuel Eberl *)\n  assumes \"x \\<in> carrier G\"\n  shows   \"ord x = Gcd {n. x [^] n = \\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x = Gcd {n. x [^] n = \\<one>}", "by (rule sym, rule Gcd_eqI) (use assms in \\<open>auto simp: pow_eq_id\\<close>)"], ["", "lemma (in group) subgroup_ord_eq:\n  assumes \"subgroup H G\" \"x \\<in> H\"\n  shows \"group.ord (G\\<lparr>carrier := H\\<rparr>) x = ord x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. group.ord (G\\<lparr>carrier := H\\<rparr>) x = ord x", "using nat_pow_consistent ord_def group.ord_def[of \"(G\\<lparr>carrier := H\\<rparr>)\" x]\n        subgroup.subgroup_is_group[of H G] assms"], ["proof (prove)\nusing this:\n  ?x [^] ?n = ?x [^]\\<^bsub>G\\<lparr>carrier := ?H\\<rparr>\\<^esub> ?n\n  ord ?x \\<equiv> SOME d. \\<forall>n. (?x [^] n = \\<one>) = (d dvd n)\n  Group.group (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n  group.ord (G\\<lparr>carrier := H\\<rparr>) x \\<equiv>\n  SOME d.\n     \\<forall>n.\n        (x [^]\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> n =\n         \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>) =\n        (d dvd n)\n  \\<lbrakk>subgroup H G; Group.group G\\<rbrakk>\n  \\<Longrightarrow> Group.group (G\\<lparr>carrier := H\\<rparr>)\n  subgroup H G\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. group.ord (G\\<lparr>carrier := H\\<rparr>) x = ord x", "by simp"], ["", "lemma (in group) ord_FactGroup:\n  assumes \"subgroup P G\" \"group (G Mod P)\"\n  shows \"order (G Mod P) * card P = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (G Mod P) * card P = order G", "using lagrange[of P] FactGroup_def[of G P] assms order_def[of \"(G Mod P)\"]"], ["proof (prove)\nusing this:\n  subgroup P G \\<Longrightarrow> card (rcosets P) * card P = order G\n  G Mod P =\n  \\<lparr>carrier = rcosets P, monoid.mult = (<#>), one = P\\<rparr>\n  subgroup P G\n  Group.group (G Mod P)\n  order (G Mod P) = card (carrier (G Mod P))\n\ngoal (1 subgoal):\n 1. order (G Mod P) * card P = order G", "by fastforce"], ["", "lemma (in group) one_is_same:\n  assumes \"subgroup H G\"\n  shows \"\\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = \\<one>", "by simp"], ["", "lemma (in group) kernel_FactGroup:\n  assumes \"P \\<lhd> G\"\n  shows \"kernel G (G Mod P) (\\<lambda>x. P #> x) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kernel G (G Mod P) ((#>) P) = P", "proof(rule equalityI; rule subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> kernel G (G Mod P) ((#>) P) \\<Longrightarrow> x \\<in> P\n 2. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> kernel G (G Mod P) ((#>) P) \\<Longrightarrow> x \\<in> P\n 2. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "assume \"x \\<in> kernel G (G Mod P) ((#>) P)\""], ["proof (state)\nthis:\n  x \\<in> kernel G (G Mod P) ((#>) P)\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> kernel G (G Mod P) ((#>) P) \\<Longrightarrow> x \\<in> P\n 2. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> kernel G (G Mod P) ((#>) P)", "have \"P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\" \"x \\<in> carrier G\""], ["proof (prove)\nusing this:\n  x \\<in> kernel G (G Mod P) ((#>) P)\n\ngoal (1 subgoal):\n 1. P #> x = \\<one>\\<^bsub>G Mod P\\<^esub> &&& x \\<in> carrier G", "unfolding kernel_def"], ["proof (prove)\nusing this:\n  x \\<in> {x \\<in> carrier G. P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>}\n\ngoal (1 subgoal):\n 1. P #> x = \\<one>\\<^bsub>G Mod P\\<^esub> &&& x \\<in> carrier G", "by simp+"], ["proof (state)\nthis:\n  P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\n  x \\<in> carrier G\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> kernel G (G Mod P) ((#>) P) \\<Longrightarrow> x \\<in> P\n 2. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "with coset_join1[of P x]"], ["proof (chain)\npicking this:\n  \\<lbrakk>P #> x = P; x \\<in> carrier G; subgroup P G\\<rbrakk>\n  \\<Longrightarrow> x \\<in> P\n  P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\n  x \\<in> carrier G", "show \"x \\<in> P\""], ["proof (prove)\nusing this:\n  \\<lbrakk>P #> x = P; x \\<in> carrier G; subgroup P G\\<rbrakk>\n  \\<Longrightarrow> x \\<in> P\n  P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. x \\<in> P", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>P #> x = P; x \\<in> carrier G; subgroup P G\\<rbrakk>\n  \\<Longrightarrow> x \\<in> P\n  P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\n  x \\<in> carrier G\n  P \\<lhd> G\n\ngoal (1 subgoal):\n 1. x \\<in> P", "unfolding normal_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>P #> x = P; x \\<in> carrier G; subgroup P G\\<rbrakk>\n  \\<Longrightarrow> x \\<in> P\n  P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>\n  x \\<in> carrier G\n  subgroup P G \\<and> Group.group G \\<and> normal_axioms P G\n\ngoal (1 subgoal):\n 1. x \\<in> P", "by simp"], ["proof (state)\nthis:\n  x \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "assume x:\"x \\<in> P\""], ["proof (state)\nthis:\n  x \\<in> P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> P", "have xc: \"x \\<in> carrier G\""], ["proof (prove)\nusing this:\n  x \\<in> P\n\ngoal (1 subgoal):\n 1. x \\<in> carrier G", "using assms subgroup.subset"], ["proof (prove)\nusing this:\n  x \\<in> P\n  P \\<lhd> G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. x \\<in> carrier G", "unfolding normal_def"], ["proof (prove)\nusing this:\n  x \\<in> P\n  subgroup P G \\<and> Group.group G \\<and> normal_axioms P G\n  subgroup ?H ?G \\<Longrightarrow> ?H \\<subseteq> carrier ?G\n\ngoal (1 subgoal):\n 1. x \\<in> carrier G", "by fast"], ["proof (state)\nthis:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "from x"], ["proof (chain)\npicking this:\n  x \\<in> P", "have \"P #> x = P\""], ["proof (prove)\nusing this:\n  x \\<in> P\n\ngoal (1 subgoal):\n 1. P #> x = P", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> P\n  P \\<lhd> G\n\ngoal (1 subgoal):\n 1. P #> x = P", "by (simp add: normal_imp_subgroup subgroup.rcos_const)"], ["proof (state)\nthis:\n  P #> x = P\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> P \\<Longrightarrow> x \\<in> kernel G (G Mod P) ((#>) P)", "thus \"x \\<in> kernel G (G Mod P) ((#>) P)\""], ["proof (prove)\nusing this:\n  P #> x = P\n\ngoal (1 subgoal):\n 1. x \\<in> kernel G (G Mod P) ((#>) P)", "unfolding kernel_def"], ["proof (prove)\nusing this:\n  P #> x = P\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> carrier G. P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>}", "using xc"], ["proof (prove)\nusing this:\n  P #> x = P\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. x \\<in> {x \\<in> carrier G. P #> x = \\<one>\\<^bsub>G Mod P\\<^esub>}", "by simp"], ["proof (state)\nthis:\n  x \\<in> kernel G (G Mod P) ((#>) P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) sub_subgroup_coprime:\n  assumes \"subgroup H G\" \"subgroup J G\" \"coprime (card H) (card J)\"\n  and \"subgroup sH G\" \"subgroup sJ G\" \"sH \\<subseteq> H\" \"sJ \\<subseteq> J\"\nshows \"coprime (card sH) (card sJ)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (card sH) (card sJ)", "using assms"], ["proof (prove)\nusing this:\n  subgroup H G\n  subgroup J G\n  coprime (card H) (card J)\n  subgroup sH G\n  subgroup sJ G\n  sH \\<subseteq> H\n  sJ \\<subseteq> J\n\ngoal (1 subgoal):\n 1. coprime (card sH) (card sJ)", "by (meson coprime_divisors sub_subgroup_dvd_card)"], ["", "lemma (in group) pow_eq_nat_mod:\n  assumes \"a \\<in> carrier G\" \"a [^] n = a [^] m\"\n  shows \"n mod (ord a) = m mod (ord a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod ord a = m mod ord a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n mod ord a = m mod ord a", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G\n  a [^] n = a [^] m", "have \"a [^] (n - m) = \\<one>\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n  a [^] n = a [^] m\n\ngoal (1 subgoal):\n 1. a [^] (n - m) = \\<one>", "using pow_eq_div2"], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n  a [^] n = a [^] m\n  \\<lbrakk>?x \\<in> carrier G; ?x [^] ?m = ?x [^] ?n\\<rbrakk>\n  \\<Longrightarrow> ?x [^] (?m - ?n) = \\<one>\n\ngoal (1 subgoal):\n 1. a [^] (n - m) = \\<one>", "by blast"], ["proof (state)\nthis:\n  a [^] (n - m) = \\<one>\n\ngoal (1 subgoal):\n 1. n mod ord a = m mod ord a", "hence \"ord a dvd n - m\""], ["proof (prove)\nusing this:\n  a [^] (n - m) = \\<one>\n\ngoal (1 subgoal):\n 1. ord a dvd n - m", "using assms(1) pow_eq_id"], ["proof (prove)\nusing this:\n  a [^] (n - m) = \\<one>\n  a \\<in> carrier G\n  ?x \\<in> carrier G \\<Longrightarrow>\n  (?x [^] ?n = \\<one>) = (ord ?x dvd ?n)\n\ngoal (1 subgoal):\n 1. ord a dvd n - m", "by blast"], ["proof (state)\nthis:\n  ord a dvd n - m\n\ngoal (1 subgoal):\n 1. n mod ord a = m mod ord a", "thus ?thesis"], ["proof (prove)\nusing this:\n  ord a dvd n - m\n\ngoal (1 subgoal):\n 1. n mod ord a = m mod ord a", "by (metis assms mod_eq_dvd_iff_nat nat_le_linear pow_eq_div2 pow_eq_id)"], ["proof (state)\nthis:\n  n mod ord a = m mod ord a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) pow_eq_int_mod:\n  fixes n m::int\n  assumes \"a \\<in> carrier G\" \"a [^] n = a [^] m\"\n  shows \"n mod (ord a) = m mod (ord a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod int (ord a) = m mod int (ord a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n mod int (ord a) = m mod int (ord a)", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G\n  a [^] n = a [^] m", "have \"a [^] (n - m) = \\<one>\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n  a [^] n = a [^] m\n\ngoal (1 subgoal):\n 1. a [^] (n - m) = \\<one>", "using int_pow_closed int_pow_diff r_inv"], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n  a [^] n = a [^] m\n  ?x \\<in> carrier G \\<Longrightarrow> ?x [^] ?i \\<in> carrier G\n  ?x \\<in> carrier G \\<Longrightarrow>\n  ?x [^] (?n - ?m) = ?x [^] ?n \\<otimes> inv (?x [^] ?m)\n  ?x \\<in> carrier G \\<Longrightarrow> ?x \\<otimes> inv ?x = \\<one>\n\ngoal (1 subgoal):\n 1. a [^] (n - m) = \\<one>", "by presburger"], ["proof (state)\nthis:\n  a [^] (n - m) = \\<one>\n\ngoal (1 subgoal):\n 1. n mod int (ord a) = m mod int (ord a)", "hence \"ord a dvd n - m\""], ["proof (prove)\nusing this:\n  a [^] (n - m) = \\<one>\n\ngoal (1 subgoal):\n 1. int (ord a) dvd n - m", "using assms(1) int_pow_eq_id"], ["proof (prove)\nusing this:\n  a [^] (n - m) = \\<one>\n  a \\<in> carrier G\n  ?x \\<in> carrier G \\<Longrightarrow>\n  (?x [^] ?i = \\<one>) = (int (ord ?x) dvd ?i)\n\ngoal (1 subgoal):\n 1. int (ord a) dvd n - m", "by blast"], ["proof (state)\nthis:\n  int (ord a) dvd n - m\n\ngoal (1 subgoal):\n 1. n mod int (ord a) = m mod int (ord a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  int (ord a) dvd n - m\n\ngoal (1 subgoal):\n 1. n mod int (ord a) = m mod int (ord a)", "by (meson mod_eq_dvd_iff)"], ["proof (state)\nthis:\n  n mod int (ord a) = m mod int (ord a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}