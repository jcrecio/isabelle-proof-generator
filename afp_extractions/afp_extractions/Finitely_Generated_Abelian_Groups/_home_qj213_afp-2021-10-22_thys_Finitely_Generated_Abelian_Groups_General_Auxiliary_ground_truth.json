{"file_name": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups/General_Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups", "problem_names": ["lemma inter_imp_subset: \"A \\<inter> B = A \\<Longrightarrow> A \\<subseteq> B\"", "lemma card_inter_eq:\n  assumes \"finite A\" \"card (A \\<inter> B) = card A\"\n  shows \"A \\<subseteq> B\"", "lemma coprime_eq_empty_prime_inter:\n  assumes \"(n::nat) \\<noteq> 0\" \"m \\<noteq> 0\"\n  shows \"coprime n m \\<longleftrightarrow> (prime_factors n) \\<inter> (prime_factors m) = {}\"", "lemma prime_factors_Prod:\n  assumes \"finite S\" \"\\<And>a. a \\<in> S \\<Longrightarrow> f a \\<noteq> 0\"\n  shows \"prime_factors (prod f S) = \\<Union>(prime_factors ` f ` S)\"", "lemma lcm_is_Min_multiple_nat:\n  assumes \"c \\<noteq> 0\" \"(a::nat) dvd c\" \"(b::nat) dvd c\"\n  shows \"c \\<ge> lcm a b\"", "lemma diff_prime_power_imp_coprime:\n  assumes \"p \\<noteq> q\" \"Factorial_Ring.prime (p::nat)\" \"Factorial_Ring.prime q\"\n  shows \"coprime (p ^ (n::nat)) (q ^ m)\"", "lemma \"finite (prime_factors x)\"", "lemma card_ge_1_two_diff:\n  assumes \"card A > 1\"\n  obtains x y where \"x \\<in> A\" \"y \\<in> A\" \"x \\<noteq> y\"", "lemma infinite_two_diff:\n  assumes \"infinite A\"\n  obtains x y where \"x \\<in> A\" \"y \\<in> A\" \"x \\<noteq> y\"", "lemma Inf_le:\n  \"Inf A \\<le> x\" if \"x \\<in> (A::nat set)\" for x", "lemma switch_elem_card_le:\n  assumes \"a \\<in> A\"\n  shows \"card (A - {a} \\<union> {b}) \\<le> card A\"", "lemma pairwise_coprime_dvd:\n  assumes \"finite A\" \"pairwise coprime A\" \"(n::nat) = prod id A\" \"\\<forall>a\\<in>A. a dvd j\"\n  shows \"n dvd j\"", "lemma pairwise_coprime_dvd':\n  assumes \"finite A\" \"\\<And>i j. \\<lbrakk>i \\<in> A; j \\<in> A; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> coprime (f i) (f j)\"\n          \"(n::nat) = prod f A\" \"\\<forall>a\\<in>A. f a dvd j\"\n  shows \"n dvd j\"", "lemma transp_successively_remove1:\n  assumes \"transp f\" \"successively f l\"\n  shows \"successively f (remove1 a l)\"", "lemma exp_one_2pi_iff:\n  fixes x::real shows \"exp (2 * of_real pi * \\<i> * x) = 1 \\<longleftrightarrow> x \\<in> \\<int>\"", "lemma of_int_divide_in_Ints_iff:\n  assumes \"b \\<noteq> 0\"\n  shows   \"(of_int a / of_int b :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> b dvd a\"", "lemma of_nat_divide_in_Ints_iff:\n  assumes \"b \\<noteq> 0\"\n  shows   \"(of_nat a / of_nat b :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> b dvd a\"", "lemma true_nth_unity_root:\n  fixes n::nat\n  obtains x::complex where \"x ^ n = 1\" \"\\<And>m. \\<lbrakk>0<m; m<n\\<rbrakk> \\<Longrightarrow> x ^ m \\<noteq> 1\"", "lemma finite_bij_betwI:\n  assumes \"finite A\" \"finite B\" \"inj_on f A\" \"f \\<in> A \\<rightarrow> B\" \"card A = card B\"\n  shows \"bij_betw f A B\"", "lemma powi_mod:\n  \"x powi m = x powi (m mod n)\" if \"x ^ n = 1\" \"n > 0\" for x::complex and m::int", "lemma Sigma_insert: \"Sigma (insert x A) B = (\\<lambda>y. (x, y)) ` B x \\<union> Sigma A B\""], "translations": [["", "lemma inter_imp_subset: \"A \\<inter> B = A \\<Longrightarrow> A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B = A \\<Longrightarrow> A \\<subseteq> B", "by blast"], ["", "lemma card_inter_eq:\n  assumes \"finite A\" \"card (A \\<inter> B) = card A\"\n  shows \"A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "have \"A \\<inter> B \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  A \\<inter> B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "with assms"], ["proof (chain)\npicking this:\n  finite A\n  card (A \\<inter> B) = card A\n  A \\<inter> B \\<subseteq> A", "have \"A \\<inter> B = A\""], ["proof (prove)\nusing this:\n  finite A\n  card (A \\<inter> B) = card A\n  A \\<inter> B \\<subseteq> A\n\ngoal (1 subgoal):\n 1. A \\<inter> B = A", "using card_subset_eq"], ["proof (prove)\nusing this:\n  finite A\n  card (A \\<inter> B) = card A\n  A \\<inter> B \\<subseteq> A\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B; card ?A = card ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. A \\<inter> B = A", "by blast"], ["proof (state)\nthis:\n  A \\<inter> B = A\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<inter> B = A\n\ngoal (1 subgoal):\n 1. A \\<subseteq> B", "by blast"], ["proof (state)\nthis:\n  A \\<subseteq> B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coprime_eq_empty_prime_inter:\n  assumes \"(n::nat) \\<noteq> 0\" \"m \\<noteq> 0\"\n  shows \"coprime n m \\<longleftrightarrow> (prime_factors n) \\<inter> (prime_factors m) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime n m = (prime_factors n \\<inter> prime_factors m = {})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. coprime n m \\<Longrightarrow>\n    prime_factors n \\<inter> prime_factors m = {}\n 2. prime_factors n \\<inter> prime_factors m = {} \\<Longrightarrow>\n    coprime n m", "show \"coprime n m \\<Longrightarrow> prime_factors n \\<inter> prime_factors m = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime n m \\<Longrightarrow>\n    prime_factors n \\<inter> prime_factors m = {}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "assume cp: \"coprime n m\""], ["proof (state)\nthis:\n  coprime n m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "assume pf: \"prime_factors n \\<inter> prime_factors m \\<noteq> {}\""], ["proof (state)\nthis:\n  prime_factors n \\<inter> prime_factors m \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  prime_factors n \\<inter> prime_factors m \\<noteq> {}", "obtain p where p: \"p \\<in> prime_factors n\" \"p \\<in> prime_factors m\""], ["proof (prove)\nusing this:\n  prime_factors n \\<inter> prime_factors m \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in># prime_factorization n;\n         p \\<in># prime_factorization m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in># prime_factorization n\n  p \\<in># prime_factorization m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization n\n  p \\<in># prime_factorization m", "have p_dvd: \"p dvd n\" \"p dvd m\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  p \\<in># prime_factorization m\n\ngoal (1 subgoal):\n 1. p dvd n &&& p dvd m", "by blast+"], ["proof (state)\nthis:\n  p dvd n\n  p dvd m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  p dvd n\n  p dvd m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "have \"\\<not>is_unit p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_unit p", "using p"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  p \\<in># prime_factorization m\n\ngoal (1 subgoal):\n 1. \\<not> is_unit p", "using not_prime_unit"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization n\n  p \\<in># prime_factorization m\n  is_unit ?x \\<Longrightarrow> \\<not> normalization_semidom_class.prime ?x\n\ngoal (1 subgoal):\n 1. \\<not> is_unit p", "by blast"], ["proof (state)\nthis:\n  \\<not> is_unit p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>coprime n m;\n     prime_factors n \\<inter> prime_factors m \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  p dvd n\n  p dvd m\n  \\<not> is_unit p", "show \"False\""], ["proof (prove)\nusing this:\n  p dvd n\n  p dvd m\n  \\<not> is_unit p\n\ngoal (1 subgoal):\n 1. False", "using cp"], ["proof (prove)\nusing this:\n  p dvd n\n  p dvd m\n  \\<not> is_unit p\n  coprime n m\n\ngoal (1 subgoal):\n 1. False", "unfolding coprime_def"], ["proof (prove)\nusing this:\n  p dvd n\n  p dvd m\n  \\<not> is_unit p\n  \\<forall>c. c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coprime n m \\<Longrightarrow>\n  prime_factors n \\<inter> prime_factors m = {}\n\ngoal (1 subgoal):\n 1. prime_factors n \\<inter> prime_factors m = {} \\<Longrightarrow>\n    coprime n m", "assume assm: \"prime_factors n \\<inter> prime_factors m = {}\""], ["proof (state)\nthis:\n  prime_factors n \\<inter> prime_factors m = {}\n\ngoal (1 subgoal):\n 1. prime_factors n \\<inter> prime_factors m = {} \\<Longrightarrow>\n    coprime n m", "show \"coprime n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime n m", "unfolding coprime_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c.\n       c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c", "show \"c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c", "proof(rule; rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c dvd n; c dvd m\\<rbrakk> \\<Longrightarrow> is_unit c", "assume c: \"c dvd n\" \"c dvd m\""], ["proof (state)\nthis:\n  c dvd n\n  c dvd m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c dvd n; c dvd m\\<rbrakk> \\<Longrightarrow> is_unit c", "then"], ["proof (chain)\npicking this:\n  c dvd n\n  c dvd m", "have \"prime_factors c \\<subseteq> prime_factors n\" \"prime_factors c \\<subseteq> prime_factors m\""], ["proof (prove)\nusing this:\n  c dvd n\n  c dvd m\n\ngoal (1 subgoal):\n 1. prime_factors c \\<subseteq> prime_factors n &&&\n    prime_factors c \\<subseteq> prime_factors m", "using assms dvd_prime_factors"], ["proof (prove)\nusing this:\n  c dvd n\n  c dvd m\n  n \\<noteq> 0\n  m \\<noteq> 0\n  \\<lbrakk>?y \\<noteq> (0::?'a); ?x dvd ?y\\<rbrakk>\n  \\<Longrightarrow> prime_factors ?x \\<subseteq> prime_factors ?y\n\ngoal (1 subgoal):\n 1. prime_factors c \\<subseteq> prime_factors n &&&\n    prime_factors c \\<subseteq> prime_factors m", "by blast+"], ["proof (state)\nthis:\n  prime_factors c \\<subseteq> prime_factors n\n  prime_factors c \\<subseteq> prime_factors m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c dvd n; c dvd m\\<rbrakk> \\<Longrightarrow> is_unit c", "then"], ["proof (chain)\npicking this:\n  prime_factors c \\<subseteq> prime_factors n\n  prime_factors c \\<subseteq> prime_factors m", "have \"prime_factors c = {}\""], ["proof (prove)\nusing this:\n  prime_factors c \\<subseteq> prime_factors n\n  prime_factors c \\<subseteq> prime_factors m\n\ngoal (1 subgoal):\n 1. prime_factors c = {}", "using assm"], ["proof (prove)\nusing this:\n  prime_factors c \\<subseteq> prime_factors n\n  prime_factors c \\<subseteq> prime_factors m\n  prime_factors n \\<inter> prime_factors m = {}\n\ngoal (1 subgoal):\n 1. prime_factors c = {}", "by blast"], ["proof (state)\nthis:\n  prime_factors c = {}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c dvd n; c dvd m\\<rbrakk> \\<Longrightarrow> is_unit c", "thus \"is_unit c\""], ["proof (prove)\nusing this:\n  prime_factors c = {}\n\ngoal (1 subgoal):\n 1. is_unit c", "using assms c"], ["proof (prove)\nusing this:\n  prime_factors c = {}\n  n \\<noteq> 0\n  m \\<noteq> 0\n  c dvd n\n  c dvd m\n\ngoal (1 subgoal):\n 1. is_unit c", "by (metis dvd_0_left_iff prime_factorization_empty_iff set_mset_eq_empty_iff)"], ["proof (state)\nthis:\n  is_unit c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c dvd n \\<longrightarrow> c dvd m \\<longrightarrow> is_unit c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coprime n m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prime_factors_Prod:\n  assumes \"finite S\" \"\\<And>a. a \\<in> S \\<Longrightarrow> f a \\<noteq> 0\"\n  shows \"prime_factors (prod f S) = \\<Union>(prime_factors ` f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (prod f S) = \\<Union> (prime_factors ` f ` S)", "using assms"], ["proof (prove)\nusing this:\n  finite S\n  ?a \\<in> S \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. prime_factors (prod f S) = \\<Union> (prime_factors ` f ` S)", "proof(induction S rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>a.\n        a \\<in> {} \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n    prime_factors (prod f {}) = \\<Union> (prime_factors ` f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "case empty"], ["proof (state)\nthis:\n  ?a \\<in> {} \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. (\\<And>a.\n        a \\<in> {} \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n    prime_factors (prod f {}) = \\<Union> (prime_factors ` f ` {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "then"], ["proof (chain)\npicking this:\n  ?a \\<in> {} \\<Longrightarrow> f ?a \\<noteq> (0::'b)", "show ?case"], ["proof (prove)\nusing this:\n  ?a \\<in> {} \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. prime_factors (prod f {}) = \\<Union> (prime_factors ` f ` {})", "by simp"], ["proof (state)\nthis:\n  prime_factors (prod f {}) = \\<Union> (prime_factors ` f ` {})\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "case i: (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "from i"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)", "have x: \"f x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. f x \\<noteq> (0::'b)", "by blast"], ["proof (state)\nthis:\n  f x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "from i"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)", "have F: \"prod f F \\<noteq> 0\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. prod f F \\<noteq> (0::'b)", "by simp"], ["proof (state)\nthis:\n  prod f F \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "from i"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)", "have \"prime_factors(prod f F) = \\<Union> (prime_factors ` f ` F)\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)", "by blast"], ["proof (state)\nthis:\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "moreover"], ["proof (state)\nthis:\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "have \"prod f (insert x F) = (prod f F) * f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f (insert x F) = prod f F * f x", "using i mult.commute"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  (\\<And>a.\n      a \\<in> F \\<Longrightarrow> f a \\<noteq> (0::'b)) \\<Longrightarrow>\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  ?a \\<in> insert x F \\<Longrightarrow> f ?a \\<noteq> (0::'b)\n  ?a * ?b = ?b * ?a\n\ngoal (1 subgoal):\n 1. prod f (insert x F) = prod f F * f x", "by force"], ["proof (state)\nthis:\n  prod f (insert x F) = prod f F * f x\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "ultimately"], ["proof (chain)\npicking this:\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  prod f (insert x F) = prod f F * f x", "have \"prime_factors (prod f (insert x F)) = (\\<Union>(prime_factors ` f ` F)) \\<union> prime_factors (f x)\""], ["proof (prove)\nusing this:\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  prod f (insert x F) = prod f F * f x\n\ngoal (1 subgoal):\n 1. prime_factors (prod f (insert x F)) =\n    \\<Union> (prime_factors ` f ` F) \\<union> prime_factors (f x)", "using prime_factors_product[OF F x]"], ["proof (prove)\nusing this:\n  prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F)\n  prod f (insert x F) = prod f F * f x\n  prime_factors (prod f F * f x) =\n  prime_factors (prod f F) \\<union> prime_factors (f x)\n\ngoal (1 subgoal):\n 1. prime_factors (prod f (insert x F)) =\n    \\<Union> (prime_factors ` f ` F) \\<union> prime_factors (f x)", "by argo"], ["proof (state)\nthis:\n  prime_factors (prod f (insert x F)) =\n  \\<Union> (prime_factors ` f ` F) \\<union> prime_factors (f x)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>a.\n            a \\<in> F \\<Longrightarrow>\n            f a \\<noteq> (0::'b)) \\<Longrightarrow>\n        prime_factors (prod f F) = \\<Union> (prime_factors ` f ` F);\n        \\<And>a.\n           a \\<in> insert x F \\<Longrightarrow>\n           f a \\<noteq> (0::'b)\\<rbrakk>\n       \\<Longrightarrow> prime_factors (prod f (insert x F)) =\n                         \\<Union> (prime_factors ` f ` insert x F)", "thus ?case"], ["proof (prove)\nusing this:\n  prime_factors (prod f (insert x F)) =\n  \\<Union> (prime_factors ` f ` F) \\<union> prime_factors (f x)\n\ngoal (1 subgoal):\n 1. prime_factors (prod f (insert x F)) =\n    \\<Union> (prime_factors ` f ` insert x F)", "by force"], ["proof (state)\nthis:\n  prime_factors (prod f (insert x F)) =\n  \\<Union> (prime_factors ` f ` insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lcm_is_Min_multiple_nat:\n  assumes \"c \\<noteq> 0\" \"(a::nat) dvd c\" \"(b::nat) dvd c\"\n  shows \"c \\<ge> lcm a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm a b \\<le> c", "using lcm_least[of a c b] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>a dvd c; b dvd c\\<rbrakk> \\<Longrightarrow> lcm a b dvd c\n  c \\<noteq> 0\n  a dvd c\n  b dvd c\n\ngoal (1 subgoal):\n 1. lcm a b \\<le> c", "by fastforce"], ["", "lemma diff_prime_power_imp_coprime:\n  assumes \"p \\<noteq> q\" \"Factorial_Ring.prime (p::nat)\" \"Factorial_Ring.prime q\"\n  shows \"coprime (p ^ (n::nat)) (q ^ m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (p ^ n) (q ^ m)", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  normalization_semidom_class.prime p\n  normalization_semidom_class.prime q\n\ngoal (1 subgoal):\n 1. coprime (p ^ n) (q ^ m)", "by (metis power_0 power_one_right prime_dvd_power prime_imp_power_coprime_nat\n            prime_nat_iff prime_power_inj'')"], ["", "lemma \"finite (prime_factors x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prime_factors x)", "using finite_set_mset"], ["proof (prove)\nusing this:\n  finite (set_mset ?M)\n\ngoal (1 subgoal):\n 1. finite (prime_factors x)", "by blast"], ["", "lemma card_ge_1_two_diff:\n  assumes \"card A > 1\"\n  obtains x y where \"x \\<in> A\" \"y \\<in> A\" \"x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have fA: \"finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A", "using assms"], ["proof (prove)\nusing this:\n  1 < card A\n\ngoal (1 subgoal):\n 1. finite A", "by (metis card.infinite not_one_less_zero)"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  1 < card A", "obtain x where x: \"x \\<in> A\""], ["proof (prove)\nusing this:\n  1 < card A\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with assms fA"], ["proof (chain)\npicking this:\n  1 < card A\n  finite A\n  x \\<in> A", "have \"card (A - {x}) > 0\""], ["proof (prove)\nusing this:\n  1 < card A\n  finite A\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. 0 < card (A - {x})", "by simp"], ["proof (state)\nthis:\n  0 < card (A - {x})\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  0 < card (A - {x})", "obtain y where y: \"y \\<in> (A - {x})\""], ["proof (prove)\nusing this:\n  0 < card (A - {x})\n\ngoal (1 subgoal):\n 1. (\\<And>y. y \\<in> A - {x} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis card_gt_0_iff ex_in_conv)"], ["proof (state)\nthis:\n  y \\<in> A - {x}\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> A - {x}\n\ngoal (1 subgoal):\n 1. thesis", "using that[of x y] x"], ["proof (prove)\nusing this:\n  y \\<in> A - {x}\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_two_diff:\n  assumes \"infinite A\"\n  obtains x y where \"x \\<in> A\" \"y \\<in> A\" \"x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  infinite A", "obtain x where x: \"x \\<in> A\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  infinite A", "have \"infinite (A - {x})\""], ["proof (prove)\nusing this:\n  infinite A\n\ngoal (1 subgoal):\n 1. infinite (A - {x})", "by simp"], ["proof (state)\nthis:\n  infinite (A - {x})\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  infinite (A - {x})", "obtain y where y: \"y \\<in> (A - {x})\""], ["proof (prove)\nusing this:\n  infinite (A - {x})\n\ngoal (1 subgoal):\n 1. (\\<And>y. y \\<in> A - {x} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ex_in_conv finite.emptyI)"], ["proof (state)\nthis:\n  y \\<in> A - {x}\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "using that[of x y]"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "using x y"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> thesis\n  x \\<in> A\n  y \\<in> A - {x}\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Inf_le:\n  \"Inf A \\<le> x\" if \"x \\<in> (A::nat set)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf A \\<le> x", "proof (cases \"A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> Inf A \\<le> x\n 2. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "case True"], ["proof (state)\nthis:\n  A = {}\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> Inf A \\<le> x\n 2. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "then"], ["proof (chain)\npicking this:\n  A = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  A = {}\n\ngoal (1 subgoal):\n 1. Inf A \\<le> x", "using that"], ["proof (prove)\nusing this:\n  A = {}\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. Inf A \\<le> x", "by simp"], ["proof (state)\nthis:\n  Inf A \\<le> x\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "hence \"Inf A \\<le> Inf {x}\""], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Inf A \\<le> Inf {x}", "using that"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. Inf A \\<le> Inf {x}", "by (simp add: cInf_lower)"], ["proof (state)\nthis:\n  Inf A \\<le> Inf {x}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "also"], ["proof (state)\nthis:\n  Inf A \\<le> Inf {x}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "have \"\\<dots> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inf {x} = x", "by simp"], ["proof (state)\nthis:\n  Inf {x} = x\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Inf A \\<le> x", "finally"], ["proof (chain)\npicking this:\n  Inf A \\<le> x", "show \"Inf A \\<le> x\""], ["proof (prove)\nusing this:\n  Inf A \\<le> x\n\ngoal (1 subgoal):\n 1. Inf A \\<le> x", "by blast"], ["proof (state)\nthis:\n  Inf A \\<le> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma switch_elem_card_le:\n  assumes \"a \\<in> A\"\n  shows \"card (A - {a} \\<union> {b}) \\<le> card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (A - {a} \\<union> {b}) \\<le> card A", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. card (A - {a} \\<union> {b}) \\<le> card A", "by (metis Diff_insert_absorb Set.set_insert Un_commute card.infinite card_insert_disjoint\n            card_mono finite_insert insert_is_Un insert_subset order_refl)"], ["", "lemma pairwise_coprime_dvd:\n  assumes \"finite A\" \"pairwise coprime A\" \"(n::nat) = prod id A\" \"\\<forall>a\\<in>A. a dvd j\"\n  shows \"n dvd j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n dvd j", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  pairwise coprime A\n  n = prod id A\n  \\<forall>a\\<in>A. a dvd j\n\ngoal (1 subgoal):\n 1. n dvd j", "proof (induction A arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>pairwise coprime F; n = prod id F;\n            \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        pairwise coprime (insert x F); n = prod id (insert x F);\n        \\<forall>a\\<in>insert x F. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "case i: (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>pairwise coprime F; ?n = prod id F;\n   \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  pairwise coprime (insert x F)\n  n = prod id (insert x F)\n  \\<forall>a\\<in>insert x F. a dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>pairwise coprime F; n = prod id F;\n            \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        pairwise coprime (insert x F); n = prod id (insert x F);\n        \\<forall>a\\<in>insert x F. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "have \"prod id F dvd j\" \"x dvd j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod id F dvd j &&& x dvd j", "using i"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>pairwise coprime F; ?n = prod id F;\n   \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  pairwise coprime (insert x F)\n  n = prod id (insert x F)\n  \\<forall>a\\<in>insert x F. a dvd j\n\ngoal (1 subgoal):\n 1. prod id F dvd j &&& x dvd j", "unfolding pairwise_def"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<forall>x\\<in>F.\n              \\<forall>y\\<in>F. x \\<noteq> y \\<longrightarrow> coprime x y;\n   ?n = prod id F; \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  \\<forall>xa\\<in>insert x F.\n     \\<forall>y\\<in>insert x F. xa \\<noteq> y \\<longrightarrow> coprime xa y\n  n = prod id (insert x F)\n  \\<forall>a\\<in>insert x F. a dvd j\n\ngoal (1 subgoal):\n 1. prod id F dvd j &&& x dvd j", "by auto"], ["proof (state)\nthis:\n  prod id F dvd j\n  x dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>pairwise coprime F; n = prod id F;\n            \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        pairwise coprime (insert x F); n = prod id (insert x F);\n        \\<forall>a\\<in>insert x F. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "moreover"], ["proof (state)\nthis:\n  prod id F dvd j\n  x dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>pairwise coprime F; n = prod id F;\n            \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        pairwise coprime (insert x F); n = prod id (insert x F);\n        \\<forall>a\\<in>insert x F. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "have \"coprime (prod id F) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (prod id F) x", "by (metis i(2, 4) id_apply pairwise_insert prod_coprime_left)"], ["proof (state)\nthis:\n  coprime (prod id F) x\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>pairwise coprime F; n = prod id F;\n            \\<forall>a\\<in>F. a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        pairwise coprime (insert x F); n = prod id (insert x F);\n        \\<forall>a\\<in>insert x F. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "ultimately"], ["proof (chain)\npicking this:\n  prod id F dvd j\n  x dvd j\n  coprime (prod id F) x", "show ?case"], ["proof (prove)\nusing this:\n  prod id F dvd j\n  x dvd j\n  coprime (prod id F) x\n\ngoal (1 subgoal):\n 1. n dvd j", "using i(1, 2, 5)"], ["proof (prove)\nusing this:\n  prod id F dvd j\n  x dvd j\n  coprime (prod id F) x\n  finite F\n  x \\<notin> F\n  n = prod id (insert x F)\n\ngoal (1 subgoal):\n 1. n dvd j", "by (simp add: coprime_commute divides_mult)"], ["proof (state)\nthis:\n  n dvd j\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>pairwise coprime {}; n = prod id {};\n        \\<forall>a\\<in>{}. a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "qed simp"], ["", "lemma pairwise_coprime_dvd':\n  assumes \"finite A\" \"\\<And>i j. \\<lbrakk>i \\<in> A; j \\<in> A; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> coprime (f i) (f j)\"\n          \"(n::nat) = prod f A\" \"\\<forall>a\\<in>A. f a dvd j\"\n  shows \"n dvd j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n dvd j", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  \\<lbrakk>?i \\<in> A; ?j \\<in> A; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> coprime (f ?i) (f ?j)\n  n = prod f A\n  \\<forall>a\\<in>A. f a dvd j\n\ngoal (1 subgoal):\n 1. n dvd j", "proof (induction A arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>\\<And>i j.\n                       \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> coprime (f i) (f j);\n            n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f (insert x F);\n        \\<forall>a\\<in>insert x F. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "case i: (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n              \\<Longrightarrow> coprime (f i) (f j);\n   ?n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  \\<lbrakk>?i \\<in> insert x F; ?j \\<in> insert x F; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> coprime (f ?i) (f ?j)\n  n = prod f (insert x F)\n  \\<forall>a\\<in>insert x F. f a dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>\\<And>i j.\n                       \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> coprime (f i) (f j);\n            n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f (insert x F);\n        \\<forall>a\\<in>insert x F. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "have \"prod f F dvd j\" \"f x dvd j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f F dvd j &&& f x dvd j", "using i"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n              \\<Longrightarrow> coprime (f i) (f j);\n   ?n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  \\<lbrakk>?i \\<in> insert x F; ?j \\<in> insert x F; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> coprime (f ?i) (f ?j)\n  n = prod f (insert x F)\n  \\<forall>a\\<in>insert x F. f a dvd j\n\ngoal (1 subgoal):\n 1. prod f F dvd j &&& f x dvd j", "unfolding pairwise_def"], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n              \\<Longrightarrow> coprime (f i) (f j);\n   ?n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  \\<lbrakk>?i \\<in> insert x F; ?j \\<in> insert x F; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> coprime (f ?i) (f ?j)\n  n = prod f (insert x F)\n  \\<forall>a\\<in>insert x F. f a dvd j\n\ngoal (1 subgoal):\n 1. prod f F dvd j &&& f x dvd j", "by auto"], ["proof (state)\nthis:\n  prod f F dvd j\n  f x dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>\\<And>i j.\n                       \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> coprime (f i) (f j);\n            n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f (insert x F);\n        \\<forall>a\\<in>insert x F. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "moreover"], ["proof (state)\nthis:\n  prod f F dvd j\n  f x dvd j\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>\\<And>i j.\n                       \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> coprime (f i) (f j);\n            n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f (insert x F);\n        \\<forall>a\\<in>insert x F. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "have \"coprime (prod f F) (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (prod f F) (f x)", "by(intro prod_coprime_left, use i in blast)"], ["proof (state)\nthis:\n  coprime (prod f F) (f x)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>n.\n           \\<lbrakk>\\<And>i j.\n                       \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n                       \\<Longrightarrow> coprime (f i) (f j);\n            n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n           \\<Longrightarrow> n dvd j;\n        \\<And>i j.\n           \\<lbrakk>i \\<in> insert x F; j \\<in> insert x F;\n            i \\<noteq> j\\<rbrakk>\n           \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f (insert x F);\n        \\<forall>a\\<in>insert x F. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "ultimately"], ["proof (chain)\npicking this:\n  prod f F dvd j\n  f x dvd j\n  coprime (prod f F) (f x)", "show ?case"], ["proof (prove)\nusing this:\n  prod f F dvd j\n  f x dvd j\n  coprime (prod f F) (f x)\n\ngoal (1 subgoal):\n 1. n dvd j", "using i"], ["proof (prove)\nusing this:\n  prod f F dvd j\n  f x dvd j\n  coprime (prod f F) (f x)\n  finite F\n  x \\<notin> F\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i \\<in> F; j \\<in> F; i \\<noteq> j\\<rbrakk>\n              \\<Longrightarrow> coprime (f i) (f j);\n   ?n = prod f F; \\<forall>a\\<in>F. f a dvd j\\<rbrakk>\n  \\<Longrightarrow> ?n dvd j\n  \\<lbrakk>?i \\<in> insert x F; ?j \\<in> insert x F; ?i \\<noteq> ?j\\<rbrakk>\n  \\<Longrightarrow> coprime (f ?i) (f ?j)\n  n = prod f (insert x F)\n  \\<forall>a\\<in>insert x F. f a dvd j\n\ngoal (1 subgoal):\n 1. n dvd j", "by (simp add: coprime_commute divides_mult)"], ["proof (state)\nthis:\n  n dvd j\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>i \\<in> {}; j \\<in> {}; i \\<noteq> j\\<rbrakk>\n                   \\<Longrightarrow> coprime (f i) (f j);\n        n = prod f {}; \\<forall>a\\<in>{}. f a dvd j\\<rbrakk>\n       \\<Longrightarrow> n dvd j", "qed simp"], ["", "lemma transp_successively_remove1:\n  assumes \"transp f\" \"successively f l\"\n  shows \"successively f (remove1 a l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. successively f (remove1 a l)", "using assms(2)"], ["proof (prove)\nusing this:\n  successively f l\n\ngoal (1 subgoal):\n 1. successively f (remove1 a l)", "proof(induction l rule: induct_list012)"], ["proof (state)\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "case (3 x y zs)"], ["proof (state)\nthis:\n  successively f zs \\<Longrightarrow> successively f (remove1 a zs)\n  successively f (y # zs) \\<Longrightarrow>\n  successively f (remove1 a (y # zs))\n  successively f (x # y # zs)\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "from 3(3)[unfolded successively.simps]"], ["proof (chain)\npicking this:\n  f x y \\<and> successively f (y # zs)", "have fs: \"f x y\" \"successively f (y # zs)\""], ["proof (prove)\nusing this:\n  f x y \\<and> successively f (y # zs)\n\ngoal (1 subgoal):\n 1. f x y &&& successively f (y # zs)", "by auto"], ["proof (state)\nthis:\n  f x y\n  successively f (y # zs)\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "moreover"], ["proof (state)\nthis:\n  f x y\n  successively f (y # zs)\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "from this(2) successively.simps"], ["proof (chain)\npicking this:\n  successively f (y # zs)\n  successively ?P [] = True\n  successively ?P [?x] = True\n  successively ?P (?x # ?y # ?xs) =\n  (?P ?x ?y \\<and> successively ?P (?y # ?xs))", "have s: \"successively f zs\""], ["proof (prove)\nusing this:\n  successively f (y # zs)\n  successively ?P [] = True\n  successively ?P [?x] = True\n  successively ?P (?x # ?y # ?xs) =\n  (?P ?x ?y \\<and> successively ?P (?y # ?xs))\n\ngoal (1 subgoal):\n 1. successively f zs", "by(cases zs, auto)"], ["proof (state)\nthis:\n  successively f zs\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "ultimately"], ["proof (chain)\npicking this:\n  f x y\n  successively f (y # zs)\n  successively f zs", "have s2: \"successively f (remove1 a zs)\" \"successively f (remove1 a (y # zs))\""], ["proof (prove)\nusing this:\n  f x y\n  successively f (y # zs)\n  successively f zs\n\ngoal (1 subgoal):\n 1. successively f (remove1 a zs) &&& successively f (remove1 a (y # zs))", "using 3"], ["proof (prove)\nusing this:\n  f x y\n  successively f (y # zs)\n  successively f zs\n  successively f zs \\<Longrightarrow> successively f (remove1 a zs)\n  successively f (y # zs) \\<Longrightarrow>\n  successively f (remove1 a (y # zs))\n  successively f (x # y # zs)\n\ngoal (1 subgoal):\n 1. successively f (remove1 a zs) &&& successively f (remove1 a (y # zs))", "by auto"], ["proof (state)\nthis:\n  successively f (remove1 a zs)\n  successively f (remove1 a (y # zs))\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "consider (x) \"x = a\" | (y) \"y = a \\<and> x \\<noteq> a\" | (zs) \"a \\<noteq> x \\<and> a \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = a \\<Longrightarrow> thesis;\n     y = a \\<and> x \\<noteq> a \\<Longrightarrow> thesis;\n     a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>x = a \\<Longrightarrow> ?thesis;\n   y = a \\<and> x \\<noteq> a \\<Longrightarrow> ?thesis;\n   a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (3 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])\n 3. \\<And>x y zs.\n       \\<lbrakk>successively f zs \\<Longrightarrow>\n                successively f (remove1 a zs);\n        successively f (y # zs) \\<Longrightarrow>\n        successively f (remove1 a (y # zs));\n        successively f (x # y # zs)\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = a \\<Longrightarrow> ?thesis;\n   y = a \\<and> x \\<noteq> a \\<Longrightarrow> ?thesis;\n   a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. x = a \\<Longrightarrow> successively f (remove1 a (x # y # zs))\n 2. y = a \\<and> x \\<noteq> a \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))\n 3. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "case x"], ["proof (state)\nthis:\n  x = a\n\ngoal (3 subgoals):\n 1. x = a \\<Longrightarrow> successively f (remove1 a (x # y # zs))\n 2. y = a \\<and> x \\<noteq> a \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))\n 3. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "then"], ["proof (chain)\npicking this:\n  x = a", "show ?thesis"], ["proof (prove)\nusing this:\n  x = a\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "using 3"], ["proof (prove)\nusing this:\n  x = a\n  successively f zs \\<Longrightarrow> successively f (remove1 a zs)\n  successively f (y # zs) \\<Longrightarrow>\n  successively f (remove1 a (y # zs))\n  successively f (x # y # zs)\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "by simp"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal (2 subgoals):\n 1. y = a \\<and> x \\<noteq> a \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))\n 2. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. y = a \\<and> x \\<noteq> a \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))\n 2. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "case y"], ["proof (state)\nthis:\n  y = a \\<and> x \\<noteq> a\n\ngoal (2 subgoals):\n 1. y = a \\<and> x \\<noteq> a \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))\n 2. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "then"], ["proof (chain)\npicking this:\n  y = a \\<and> x \\<noteq> a", "show ?thesis"], ["proof (prove)\nusing this:\n  y = a \\<and> x \\<noteq> a\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "proof (cases zs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = []\\<rbrakk>\n    \\<Longrightarrow> successively f (remove1 a (x # y # zs))\n 2. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "case Nil"], ["proof (state)\nthis:\n  zs = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = []\\<rbrakk>\n    \\<Longrightarrow> successively f (remove1 a (x # y # zs))\n 2. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "then"], ["proof (chain)\npicking this:\n  zs = []", "show ?thesis"], ["proof (prove)\nusing this:\n  zs = []\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "using fs"], ["proof (prove)\nusing this:\n  zs = []\n  f x y\n  successively f (y # zs)\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "by simp"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "case (Cons a list)"], ["proof (state)\nthis:\n  zs = a # list\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "hence \"f y a\""], ["proof (prove)\nusing this:\n  zs = a # list\n\ngoal (1 subgoal):\n 1. f y a", "using fs"], ["proof (prove)\nusing this:\n  zs = a # list\n  f x y\n  successively f (y # zs)\n\ngoal (1 subgoal):\n 1. f y a", "by simp"], ["proof (state)\nthis:\n  f y a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "hence \"f x a\""], ["proof (prove)\nusing this:\n  f y a\n\ngoal (1 subgoal):\n 1. f x a", "using fs(1) assms(1)[unfolded transp_def]"], ["proof (prove)\nusing this:\n  f y a\n  f x y\n  \\<forall>x y z. f x y \\<longrightarrow> f y z \\<longrightarrow> f x z\n\ngoal (1 subgoal):\n 1. f x a", "by blast"], ["proof (state)\nthis:\n  f x a\n\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>y = a \\<and> x \\<noteq> a; zs = aa # list\\<rbrakk>\n       \\<Longrightarrow> successively f (remove1 a (x # y # zs))", "then"], ["proof (chain)\npicking this:\n  f x a", "show ?thesis"], ["proof (prove)\nusing this:\n  f x a\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "using Cons y s"], ["proof (prove)\nusing this:\n  f x a\n  zs = a # list\n  y = a \\<and> x \\<noteq> a\n  successively f zs\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "by auto"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal (1 subgoal):\n 1. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "case zs"], ["proof (state)\nthis:\n  a \\<noteq> x \\<and> a \\<noteq> y\n\ngoal (1 subgoal):\n 1. a \\<noteq> x \\<and> a \\<noteq> y \\<Longrightarrow>\n    successively f (remove1 a (x # y # zs))", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> x \\<and> a \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> x \\<and> a \\<noteq> y\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "using s2 fs"], ["proof (prove)\nusing this:\n  a \\<noteq> x \\<and> a \\<noteq> y\n  successively f (remove1 a zs)\n  successively f (remove1 a (y # zs))\n  f x y\n  successively f (y # zs)\n\ngoal (1 subgoal):\n 1. successively f (remove1 a (x # y # zs))", "by auto"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  successively f (remove1 a (x # y # zs))\n\ngoal (2 subgoals):\n 1. successively f [] \\<Longrightarrow> successively f (remove1 a [])\n 2. \\<And>x.\n       successively f [x] \\<Longrightarrow> successively f (remove1 a [x])", "qed auto"], ["", "lemma exp_one_2pi_iff:\n  fixes x::real shows \"exp (2 * of_real pi * \\<i> * x) = 1 \\<longleftrightarrow> x \\<in> \\<int>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "have c: \"cis (2 * x * pi) = 1 \\<longleftrightarrow> x \\<in> \\<int>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cis (2 * x * pi) = 1) = (x \\<in> \\<int>)", "by (auto simp: complex_eq_iff sin_times_pi_eq_0 cos_one_2pi_int, meson Ints_cases)"], ["proof (state)\nthis:\n  (cis (2 * x * pi) = 1) = (x \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "have \"exp (2 * of_real pi * \\<i> * x) = exp (\\<i> * complex_of_real (2 * x * pi))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n    exp (\\<i> * complex_of_real (2 * x * pi))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n    exp (\\<i> * complex_of_real (2 * x * pi))", "have \"2 * of_real pi * \\<i> * x = \\<i> * complex_of_real (2 * x * pi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * complex_of_real pi * \\<i> * complex_of_real x =\n    \\<i> * complex_of_real (2 * x * pi)", "by simp"], ["proof (state)\nthis:\n  2 * complex_of_real pi * \\<i> * complex_of_real x =\n  \\<i> * complex_of_real (2 * x * pi)\n\ngoal (1 subgoal):\n 1. exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n    exp (\\<i> * complex_of_real (2 * x * pi))", "thus ?thesis"], ["proof (prove)\nusing this:\n  2 * complex_of_real pi * \\<i> * complex_of_real x =\n  \\<i> * complex_of_real (2 * x * pi)\n\ngoal (1 subgoal):\n 1. exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n    exp (\\<i> * complex_of_real (2 * x * pi))", "by argo"], ["proof (state)\nthis:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n  exp (\\<i> * complex_of_real (2 * x * pi))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n  exp (\\<i> * complex_of_real (2 * x * pi))\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "also"], ["proof (state)\nthis:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) =\n  exp (\\<i> * complex_of_real (2 * x * pi))\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "from cis_conv_exp"], ["proof (chain)\npicking this:\n  cis ?b = exp (\\<i> * complex_of_real ?b)", "have \"\\<dots> = cis (2 * x * pi)\""], ["proof (prove)\nusing this:\n  cis ?b = exp (\\<i> * complex_of_real ?b)\n\ngoal (1 subgoal):\n 1. exp (\\<i> * complex_of_real (2 * x * pi)) = cis (2 * x * pi)", "by simp"], ["proof (state)\nthis:\n  exp (\\<i> * complex_of_real (2 * x * pi)) = cis (2 * x * pi)\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "finally"], ["proof (chain)\npicking this:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = cis (2 * x * pi)", "show ?thesis"], ["proof (prove)\nusing this:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = cis (2 * x * pi)\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "using c"], ["proof (prove)\nusing this:\n  exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = cis (2 * x * pi)\n  (cis (2 * x * pi) = 1) = (x \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n    (x \\<in> \\<int>)", "by simp"], ["proof (state)\nthis:\n  (exp (2 * complex_of_real pi * \\<i> * complex_of_real x) = 1) =\n  (x \\<in> \\<int>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Manuel Eberl *)"], ["", "lemma of_int_divide_in_Ints_iff:\n  assumes \"b \\<noteq> 0\"\n  shows   \"(of_int a / of_int b :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> b dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int a / of_int b \\<in> \\<int>) = (b dvd a)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. of_int a / of_int b \\<in> \\<int> \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "assume *: \"(of_int a / of_int b :: 'a :: field_char_0) \\<in> \\<int>\""], ["proof (state)\nthis:\n  of_int a / of_int b \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. of_int a / of_int b \\<in> \\<int> \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "from *"], ["proof (chain)\npicking this:\n  of_int a / of_int b \\<in> \\<int>", "obtain n where \"of_int a / of_int b = (of_int n :: 'a)\""], ["proof (prove)\nusing this:\n  of_int a / of_int b \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        of_int a / of_int b = of_int n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (elim Ints_cases)"], ["proof (state)\nthis:\n  of_int a / of_int b = of_int n\n\ngoal (2 subgoals):\n 1. of_int a / of_int b \\<in> \\<int> \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "hence \"of_int (b * n) = (of_int a :: 'a)\""], ["proof (prove)\nusing this:\n  of_int a / of_int b = of_int n\n\ngoal (1 subgoal):\n 1. of_int (b * n) = of_int a", "using assms"], ["proof (prove)\nusing this:\n  of_int a / of_int b = of_int n\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int (b * n) = of_int a", "by (subst of_int_mult) (auto simp: field_simps)"], ["proof (state)\nthis:\n  of_int (b * n) = of_int a\n\ngoal (2 subgoals):\n 1. of_int a / of_int b \\<in> \\<int> \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "hence \"b * n = a\""], ["proof (prove)\nusing this:\n  of_int (b * n) = of_int a\n\ngoal (1 subgoal):\n 1. b * n = a", "by (subst (asm) of_int_eq_iff)"], ["proof (state)\nthis:\n  b * n = a\n\ngoal (2 subgoals):\n 1. of_int a / of_int b \\<in> \\<int> \\<Longrightarrow> b dvd a\n 2. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "thus \"b dvd a\""], ["proof (prove)\nusing this:\n  b * n = a\n\ngoal (1 subgoal):\n 1. b dvd a", "by auto"], ["proof (state)\nthis:\n  b dvd a\n\ngoal (1 subgoal):\n 1. b dvd a \\<Longrightarrow> of_int a / of_int b \\<in> \\<int>", "qed auto"], ["", "(* Manuel Eberl *)"], ["", "lemma of_nat_divide_in_Ints_iff:\n  assumes \"b \\<noteq> 0\"\n  shows   \"(of_nat a / of_nat b :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> b dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_nat a / of_nat b \\<in> \\<int>) = (b dvd a)", "using of_int_divide_in_Ints_iff[of \"int b\" \"int a\"] assms"], ["proof (prove)\nusing this:\n  int b \\<noteq> 0 \\<Longrightarrow>\n  (of_int (int a) / of_int (int b) \\<in> \\<int>) = (int b dvd int a)\n  b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (of_nat a / of_nat b \\<in> \\<int>) = (b dvd a)", "by simp"], ["", "lemma true_nth_unity_root:\n  fixes n::nat\n  obtains x::complex where \"x ^ n = 1\" \"\\<And>m. \\<lbrakk>0<m; m<n\\<rbrakk> \\<Longrightarrow> x ^ m \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x ^ n = 1;\n         \\<And>m.\n            \\<lbrakk>0 < m; m < n\\<rbrakk>\n            \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x ^ n = 1;\n                 \\<And>m.\n                    \\<lbrakk>0 < m; m < n\\<rbrakk>\n                    \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x ^ n = 1;\n                 \\<And>m.\n                    \\<lbrakk>0 < m; m < n\\<rbrakk>\n                    \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x ^ n = 1;\n                 \\<And>m.\n                    \\<lbrakk>0 < m; m < n\\<rbrakk>\n                    \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x ^ n = 1;\n                 \\<And>m.\n                    \\<lbrakk>0 < m; m < n\\<rbrakk>\n                    \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?x ^ n = 1\n 2. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk> \\<Longrightarrow> ?x ^ m \\<noteq> 1", "show \"cis (2 * pi / n) ^ n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cis (2 * pi / real n) ^ n = 1", "by (simp add: DeMoivre)"], ["proof (state)\nthis:\n  cis (2 * pi / real n) ^ n = 1\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "assume m: \"m > 0\" \"m < n\""], ["proof (state)\nthis:\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "have \"cis (2 * pi / n) ^ m = cis (2 * pi * m / n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cis (2 * pi / real n) ^ m = cis (2 * pi * real m / real n)", "by (simp add: DeMoivre algebra_simps)"], ["proof (state)\nthis:\n  cis (2 * pi / real n) ^ m = cis (2 * pi * real m / real n)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "also"], ["proof (state)\nthis:\n  cis (2 * pi / real n) ^ m = cis (2 * pi * real m / real n)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "have \"\\<dots> = 1 \\<longleftrightarrow> real m / real n \\<in> \\<int>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cis (2 * pi * real m / real n) = 1) = (real m / real n \\<in> \\<int>)", "using exp_one_2pi_iff[of \"m / n\"]"], ["proof (prove)\nusing this:\n  (exp (2 * complex_of_real pi * \\<i> * complex_of_real (real m / real n)) =\n   1) =\n  (real m / real n \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. (cis (2 * pi * real m / real n) = 1) = (real m / real n \\<in> \\<int>)", "by (simp add: cis_conv_exp algebra_simps)"], ["proof (state)\nthis:\n  (cis (2 * pi * real m / real n) = 1) = (real m / real n \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "also"], ["proof (state)\nthis:\n  (cis (2 * pi * real m / real n) = 1) = (real m / real n \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "have \"\\<dots> \\<longleftrightarrow> n dvd m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (real m / real n \\<in> \\<int>) = (n dvd m)", "using m"], ["proof (prove)\nusing this:\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. (real m / real n \\<in> \\<int>) = (n dvd m)", "by (subst of_nat_divide_in_Ints_iff) auto"], ["proof (state)\nthis:\n  (real m / real n \\<in> \\<int>) = (n dvd m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "also"], ["proof (state)\nthis:\n  (real m / real n \\<in> \\<int>) = (n dvd m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "have \"\\<not>n dvd m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n dvd m", "using m"], ["proof (prove)\nusing this:\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. \\<not> n dvd m", "by auto"], ["proof (state)\nthis:\n  \\<not> n dvd m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>0 < m; m < n\\<rbrakk>\n       \\<Longrightarrow> cis (2 * pi / real n) ^ m \\<noteq> 1", "finally"], ["proof (chain)\npicking this:\n  cis (2 * pi / real n) ^ m \\<noteq> 1", "show \"cis (2 * pi / real n) ^ m \\<noteq> 1\""], ["proof (prove)\nusing this:\n  cis (2 * pi / real n) ^ m \\<noteq> 1\n\ngoal (1 subgoal):\n 1. cis (2 * pi / real n) ^ m \\<noteq> 1", "."], ["proof (state)\nthis:\n  cis (2 * pi / real n) ^ m \\<noteq> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x ^ n = 1;\n                 \\<And>m.\n                    \\<lbrakk>0 < m; m < n\\<rbrakk>\n                    \\<Longrightarrow> x ^ m \\<noteq> 1\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     n = 0\\<rbrakk>\n    \\<Longrightarrow> thesis", "qed simp"], ["", "lemma finite_bij_betwI:\n  assumes \"finite A\" \"finite B\" \"inj_on f A\" \"f \\<in> A \\<rightarrow> B\" \"card A = card B\"\n  shows \"bij_betw f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A B", "proof (intro bij_betw_imageI)"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f A\n 2. f ` A = B", "show \"inj_on f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A", "by fact"], ["proof (state)\nthis:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. f ` A = B", "show \"f ` A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` A = B", "have \"card (f ` A) = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` A) = card B", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  inj_on f A\n  f \\<in> A \\<rightarrow> B\n  card A = card B\n\ngoal (1 subgoal):\n 1. card (f ` A) = card B", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card (f ` A) = card B\n\ngoal (1 subgoal):\n 1. f ` A = B", "moreover"], ["proof (state)\nthis:\n  card (f ` A) = card B\n\ngoal (1 subgoal):\n 1. f ` A = B", "have \"f ` A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` A \\<subseteq> B", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  inj_on f A\n  f \\<in> A \\<rightarrow> B\n  card A = card B\n\ngoal (1 subgoal):\n 1. f ` A \\<subseteq> B", "by blast"], ["proof (state)\nthis:\n  f ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. f ` A = B", "ultimately"], ["proof (chain)\npicking this:\n  card (f ` A) = card B\n  f ` A \\<subseteq> B", "show ?thesis"], ["proof (prove)\nusing this:\n  card (f ` A) = card B\n  f ` A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. f ` A = B", "using assms"], ["proof (prove)\nusing this:\n  card (f ` A) = card B\n  f ` A \\<subseteq> B\n  finite A\n  finite B\n  inj_on f A\n  f \\<in> A \\<rightarrow> B\n  card A = card B\n\ngoal (1 subgoal):\n 1. f ` A = B", "by (meson card_subset_eq)"], ["proof (state)\nthis:\n  f ` A = B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ` A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma powi_mod:\n  \"x powi m = x powi (m mod n)\" if \"x ^ n = 1\" \"n > 0\" for x::complex and m::int"], ["proof (prove)\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "have xnz: \"x \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "using that"], ["proof (prove)\nusing this:\n  x ^ n = 1\n  0 < n\n\ngoal (1 subgoal):\n 1. x \\<noteq> 0", "by (metis zero_neq_one zero_power)"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "obtain k::int where k: \"m = k*n + (m mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        m = k * int n + m mod int n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using div_mod_decomp_int"], ["proof (prove)\nusing this:\n  ?A = ?A div ?n * ?n + ?A mod ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        m = k * int n + m mod int n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m = k * int n + m mod int n\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "have \"x powi m = x powi (k*n) * x powi (m mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x powi m = x powi (k * int n) * x powi (m mod int n)", "by (subst k, intro power_int_add, use xnz in auto)"], ["proof (state)\nthis:\n  x powi m = x powi (k * int n) * x powi (m mod int n)\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "moreover"], ["proof (state)\nthis:\n  x powi m = x powi (k * int n) * x powi (m mod int n)\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "have \"x powi (k*n) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x powi (k * int n) = 1", "using that"], ["proof (prove)\nusing this:\n  x ^ n = 1\n  0 < n\n\ngoal (1 subgoal):\n 1. x powi (k * int n) = 1", "by (metis mult.commute power_int_1_left power_int_mult power_int_of_nat)"], ["proof (state)\nthis:\n  x powi (k * int n) = 1\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "ultimately"], ["proof (chain)\npicking this:\n  x powi m = x powi (k * int n) * x powi (m mod int n)\n  x powi (k * int n) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  x powi m = x powi (k * int n) * x powi (m mod int n)\n  x powi (k * int n) = 1\n\ngoal (1 subgoal):\n 1. x powi m = x powi (m mod int n)", "by force"], ["proof (state)\nthis:\n  x powi m = x powi (m mod int n)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Manuel Eberl *)"], ["", "lemma Sigma_insert: \"Sigma (insert x A) B = (\\<lambda>y. (x, y)) ` B x \\<union> Sigma A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma (insert x A) B = Pair x ` B x \\<union> Sigma A B", "by auto"], ["", "end"]]}