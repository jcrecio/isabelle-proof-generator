{"file_name": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups/Generated_Groups_Extend.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Finitely_Generated_Abelian_Groups", "problem_names": ["lemma (in group) generate_sincl:\n  \"A \\<subseteq> generate G A\"", "lemma (in group) generate_idem:\n  assumes \"A \\<subseteq> carrier G\"\n  shows \"generate G (generate G A) = generate G A\"", "lemma (in group) generate_idem':\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\"\n  shows \"generate G (generate G A \\<union> B) = generate G (A \\<union> B)\"", "lemma (in group) generate_idem'_right:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\"\n  shows \"generate G (A \\<union> generate G B) = generate G (A \\<union> B)\"", "lemma (in group) generate_idem_Un:\n  assumes \"A \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union>x\\<in>A. generate G {x}) = generate G A\"", "lemma (in group) generate_idem_fUn:\n  assumes \"f A \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union> {generate G {x} |x. x \\<in> f A}) = generate G (f A)\"", "lemma (in group) generate_idem_fim_Un:\n  assumes \"\\<Union>(f ` A) \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union>S \\<in> A. generate G (f S)) = generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\"", "lemma (in group) generate_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\" \"A \\<subseteq> generate G B\" \"B \\<subseteq> generate G A\"\n  shows \"generate G A = generate G B\"", "lemma (in group) generate_one_switched_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"a \\<in> A\" \"B = (A - {a}) \\<union> {b}\"\n  and \"b \\<in> generate G A\" \"a \\<in> generate G B\"\n  shows \"generate G A = generate G B\"", "lemma (in group) generate_subset_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> A\" \"A - B \\<subseteq> generate G B\"\n  shows \"generate G A = generate G B\"", "lemma (in group) generate_subset_change_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\" \"C \\<subseteq> carrier G\" \"generate G A = generate G B\"\n  shows \"generate G (A \\<union> C) = generate G (B \\<union> C)\"", "lemma (in group) generate_subgroup_id:\n  assumes \"subgroup H G\"\n  shows \"generate G H = H\"", "lemma (in group) generate_consistent':\n  assumes \"subgroup H G\" \"A \\<subseteq> H\"\n  shows \"\\<forall>x \\<in> A. generate G {x} = generate (G\\<lparr>carrier := H\\<rparr>) {x}\"", "lemma (in group) generate_singleton_one:\n  assumes \"generate G {a} = {\\<one>}\"\n  shows \"a = \\<one>\"", "lemma (in group) generate_inv_eq:\n  assumes \"a \\<in> carrier G\"\n  shows \"generate G {a} = generate G {inv a}\"", "lemma (in group) generate_eq_imp_subset:\n  assumes \"generate G A = generate G B\"\n  shows \"A \\<subseteq> generate G B\"", "lemma (in group) generate_one_irrel:\n  \"generate G A = generate G (A \\<union> {\\<one>})\"", "lemma (in group) generate_one_irrel':\n  \"generate G A = generate G (A - {\\<one>})\"", "lemma (in group) generate_nat_pow:\n  assumes \"ord a \\<noteq> 0\" \"a \\<in> carrier G\"\n  shows \"generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}\"", "lemma (in group) generate_nat_pow':\n  assumes \"ord a \\<noteq> 0\" \"a \\<in> carrier G\"\n  shows \"generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}\""], "translations": [["", "lemma (in group) generate_sincl:\n  \"A \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G A", "using generate.incl"], ["proof (prove)\nusing this:\n  ?h \\<in> ?H \\<Longrightarrow> ?h \\<in> generate ?G ?H\n\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G A", "by fast"], ["", "text \\<open>The following lemmas reflect some of the idempotence characteristics of \\<open>generate\\<close> and have\nproved useful at several occasions.\\<close>"], ["", "lemma (in group) generate_idem:\n  assumes \"A \\<subseteq> carrier G\"\n  shows \"generate G (generate G A) = generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (generate G A) = generate G A", "using assms generateI group.generate_is_subgroup"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  \\<lbrakk>subgroup ?E G; ?H \\<subseteq> ?E;\n   \\<And>K.\n      \\<lbrakk>subgroup K G; ?H \\<subseteq> K\\<rbrakk>\n      \\<Longrightarrow> ?E \\<subseteq> K\\<rbrakk>\n  \\<Longrightarrow> ?E = generate G ?H\n  \\<lbrakk>Group.group ?G; ?H \\<subseteq> carrier ?G\\<rbrakk>\n  \\<Longrightarrow> subgroup (generate ?G ?H) ?G\n\ngoal (1 subgoal):\n 1. generate G (generate G A) = generate G A", "by blast"], ["", "lemma (in group) generate_idem':\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\"\n  shows \"generate G (generate G A \\<union> B) = generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B) = generate G (A \\<union> B)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)\n 2. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "show \"generate G (generate G A \\<union> B) \\<subseteq> generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "have \"generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "have \"generate G A \\<subseteq> generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (A \\<union> B)", "using mono_generate"], ["proof (prove)\nusing this:\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (A \\<union> B)", "by simp"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "moreover"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "have \"B \\<subseteq> generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> generate G (A \\<union> B)", "by (simp add: generate.incl subset_iff)"], ["proof (state)\nthis:\n  B \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "ultimately"], ["proof (chain)\npicking this:\n  generate G A \\<subseteq> generate G (A \\<union> B)\n  B \\<subseteq> generate G (A \\<union> B)", "show ?thesis"], ["proof (prove)\nusing this:\n  generate G A \\<subseteq> generate G (A \\<union> B)\n  B \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "by simp"], ["proof (state)\nthis:\n  generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "then"], ["proof (chain)\npicking this:\n  generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)", "have \"generate G (generate G A \\<union> B) \\<subseteq> generate G (generate G (A \\<union> B))\""], ["proof (prove)\nusing this:\n  generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (generate G (A \\<union> B))", "using mono_generate"], ["proof (prove)\nusing this:\n  generate G A \\<union> B \\<subseteq> generate G (A \\<union> B)\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (generate G (A \\<union> B))", "by auto"], ["proof (state)\nthis:\n  generate G (generate G A \\<union> B)\n  \\<subseteq> generate G (generate G (A \\<union> B))\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "with generate_idem[of \"A \\<union> B\"]"], ["proof (chain)\npicking this:\n  A \\<union> B \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G (A \\<union> B)) = generate G (A \\<union> B)\n  generate G (generate G A \\<union> B)\n  \\<subseteq> generate G (generate G (A \\<union> B))", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<union> B \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G (A \\<union> B)) = generate G (A \\<union> B)\n  generate G (generate G A \\<union> B)\n  \\<subseteq> generate G (generate G (A \\<union> B))\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "using assms"], ["proof (prove)\nusing this:\n  A \\<union> B \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G (A \\<union> B)) = generate G (A \\<union> B)\n  generate G (generate G A \\<union> B)\n  \\<subseteq> generate G (generate G (A \\<union> B))\n  A \\<subseteq> carrier G\n  B \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. generate G (generate G A \\<union> B)\n    \\<subseteq> generate G (A \\<union> B)", "by simp"], ["proof (state)\nthis:\n  generate G (generate G A \\<union> B) \\<subseteq> generate G (A \\<union> B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generate G (generate G A \\<union> B) \\<subseteq> generate G (A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "show \"generate G (A \\<union> B) \\<subseteq> generate G (generate G A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "have \"A \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G A", "using generate.incl"], ["proof (prove)\nusing this:\n  ?h \\<in> ?H \\<Longrightarrow> ?h \\<in> generate ?G ?H\n\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G A", "by fast"], ["proof (state)\nthis:\n  A \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "using mono_generate[of \"A \\<union> B\" \"generate G A \\<union> B\"]"], ["proof (prove)\nusing this:\n  A \\<subseteq> generate G A\n  A \\<union> B \\<subseteq> generate G A \\<union> B \\<Longrightarrow>\n  generate G (A \\<union> B) \\<subseteq> generate G (generate G A \\<union> B)\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> B)\n    \\<subseteq> generate G (generate G A \\<union> B)", "by blast"], ["proof (state)\nthis:\n  generate G (A \\<union> B) \\<subseteq> generate G (generate G A \\<union> B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generate G (A \\<union> B) \\<subseteq> generate G (generate G A \\<union> B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) generate_idem'_right:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\"\n  shows \"generate G (A \\<union> generate G B) = generate G (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (A \\<union> generate G B) = generate G (A \\<union> B)", "using generate_idem'[OF assms(2) assms(1)]"], ["proof (prove)\nusing this:\n  generate G (generate G B \\<union> A) = generate G (B \\<union> A)\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> generate G B) = generate G (A \\<union> B)", "by (simp add: sup_commute)"], ["", "lemma (in group) generate_idem_Un:\n  assumes \"A \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union>x\\<in>A. generate G {x}) = generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) = generate G A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n 2. generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})", "have \"A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})", "using generate.incl"], ["proof (prove)\nusing this:\n  ?h \\<in> ?H \\<Longrightarrow> ?h \\<in> generate ?G ?H\n\ngoal (1 subgoal):\n 1. A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})", "by force"], ["proof (state)\nthis:\n  A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})\n\ngoal (2 subgoals):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n 2. generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})", "thus \"generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})\""], ["proof (prove)\nusing this:\n  A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})\n\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})", "using mono_generate"], ["proof (prove)\nusing this:\n  A \\<subseteq> (\\<Union>x\\<in>A. generate G {x})\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})", "by presburger"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G (\\<Union>x\\<in>A. generate G {x})\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "have \"\\<And>x. x \\<in> A \\<Longrightarrow> generate G {x} \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow> generate G {x} \\<subseteq> generate G A", "using mono_generate"], ["proof (prove)\nusing this:\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow> generate G {x} \\<subseteq> generate G A", "by auto"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> generate G {?x} \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "hence \"(\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\""], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> generate G {?x} \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "by blast"], ["proof (state)\nthis:\n  (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "thus \"generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\""], ["proof (prove)\nusing this:\n  (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "using generate_idem[OF assms] mono_generate"], ["proof (prove)\nusing this:\n  (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n  generate G (generate G A) = generate G A\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A", "by blast"], ["proof (state)\nthis:\n  generate G (\\<Union>x\\<in>A. generate G {x}) \\<subseteq> generate G A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) generate_idem_fUn:\n  assumes \"f A \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union> {generate G {x} |x. x \\<in> f A}) = generate G (f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A}) =\n    generate G (f A)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)\n 2. generate G (f A)\n    \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})", "have \"f A \\<subseteq> \\<Union> {generate G {x} |x. x \\<in> f A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f A \\<subseteq> \\<Union> {generate G {x} |x. x \\<in> f A}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "assume x: \"x \\<in> f A\""], ["proof (state)\nthis:\n  x \\<in> f A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "have \"x \\<in> generate G {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> generate G {x}", "using generate.incl"], ["proof (prove)\nusing this:\n  ?h \\<in> ?H \\<Longrightarrow> ?h \\<in> generate ?G ?H\n\ngoal (1 subgoal):\n 1. x \\<in> generate G {x}", "by fast"], ["proof (state)\nthis:\n  x \\<in> generate G {x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "thus \"x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}\""], ["proof (prove)\nusing this:\n  x \\<in> generate G {x}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "using x"], ["proof (prove)\nusing this:\n  x \\<in> generate G {x}\n  x \\<in> f A\n\ngoal (1 subgoal):\n 1. x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<Union> {generate G {x} |x. x \\<in> f A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f A \\<subseteq> \\<Union> {generate G {x} |x. x \\<in> f A}\n\ngoal (2 subgoals):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)\n 2. generate G (f A)\n    \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})", "thus \"generate G (f A) \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\""], ["proof (prove)\nusing this:\n  f A \\<subseteq> \\<Union> {generate G {x} |x. x \\<in> f A}\n\ngoal (1 subgoal):\n 1. generate G (f A)\n    \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})", "using mono_generate"], ["proof (prove)\nusing this:\n  f A \\<subseteq> \\<Union> {generate G {x} |x. x \\<in> f A}\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G (f A)\n    \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})", "by auto"], ["proof (state)\nthis:\n  generate G (f A)\n  \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)", "have \"\\<And>x. x \\<in> f A \\<Longrightarrow> generate G {x} \\<subseteq> generate G (f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       generate G {x} \\<subseteq> generate G (f A)", "using mono_generate"], ["proof (prove)\nusing this:\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> f A \\<Longrightarrow>\n       generate G {x} \\<subseteq> generate G (f A)", "by simp"], ["proof (state)\nthis:\n  ?x \\<in> f A \\<Longrightarrow>\n  generate G {?x} \\<subseteq> generate G (f A)\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)", "hence \"(\\<Union> {generate G {x} |x. x \\<in> f A}) \\<subseteq> generate G (f A)\""], ["proof (prove)\nusing this:\n  ?x \\<in> f A \\<Longrightarrow>\n  generate G {?x} \\<subseteq> generate G (f A)\n\ngoal (1 subgoal):\n 1. \\<Union> {generate G {x} |x. x \\<in> f A} \\<subseteq> generate G (f A)", "by blast"], ["proof (state)\nthis:\n  \\<Union> {generate G {x} |x. x \\<in> f A} \\<subseteq> generate G (f A)\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)", "with mono_generate[OF this]"], ["proof (chain)\npicking this:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n  \\<subseteq> generate G (generate G (f A))\n  \\<Union> {generate G {x} |x. x \\<in> f A} \\<subseteq> generate G (f A)", "show \"generate G (\\<Union> {generate G {x} |x. x \\<in> f A}) \\<subseteq> generate G (f A)\""], ["proof (prove)\nusing this:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n  \\<subseteq> generate G (generate G (f A))\n  \\<Union> {generate G {x} |x. x \\<in> f A} \\<subseteq> generate G (f A)\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)", "using generate_idem[OF assms]"], ["proof (prove)\nusing this:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n  \\<subseteq> generate G (generate G (f A))\n  \\<Union> {generate G {x} |x. x \\<in> f A} \\<subseteq> generate G (f A)\n  generate G (generate G (f A)) = generate G (f A)\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n    \\<subseteq> generate G (f A)", "by simp"], ["proof (state)\nthis:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f A})\n  \\<subseteq> generate G (f A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) generate_idem_fim_Un:\n  assumes \"\\<Union>(f ` A) \\<subseteq> carrier G\"\n  shows \"generate G (\\<Union>S \\<in> A. generate G (f S)) = generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S)) =\n    generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n 2. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "have \"\\<And>S. S \\<in> A \\<Longrightarrow> generate G (f S) = generate G (\\<Union> {generate G {x} |x. x \\<in> f S})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       S \\<in> A \\<Longrightarrow>\n       generate G (f S) =\n       generate G (\\<Union> {generate G {x} |x. x \\<in> f S})", "using generate_idem_fUn[of f] assms"], ["proof (prove)\nusing this:\n  f ?A \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f ?A}) =\n  generate G (f ?A)\n  \\<Union> (f ` A) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       S \\<in> A \\<Longrightarrow>\n       generate G (f S) =\n       generate G (\\<Union> {generate G {x} |x. x \\<in> f S})", "by blast"], ["proof (state)\nthis:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) =\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f ?S})\n\ngoal (2 subgoals):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n 2. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "then"], ["proof (chain)\npicking this:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) =\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f ?S})", "have \"generate G (\\<Union>S \\<in> A. generate G (f S))\n           = generate G (\\<Union>S \\<in> A. generate G (\\<Union> {generate G {x} |x. x \\<in> f S}))\""], ["proof (prove)\nusing this:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) =\n  generate G (\\<Union> {generate G {x} |x. x \\<in> f ?S})\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S)) =\n    generate G\n     (\\<Union>S\\<in>A.\n         generate G (\\<Union> {generate G {x} |x. x \\<in> f S}))", "by simp"], ["proof (state)\nthis:\n  generate G (\\<Union>S\\<in>A. generate G (f S)) =\n  generate G\n   (\\<Union>S\\<in>A. generate G (\\<Union> {generate G {x} |x. x \\<in> f S}))\n\ngoal (2 subgoals):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n 2. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "have \"\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} \\<subseteq> (\\<Union>S\\<in>A. generate G (f S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n    \\<subseteq> (\\<Union>S\\<in>A. generate G (f S))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "assume x: \"x \\<in> \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\""], ["proof (state)\nthis:\n  x \\<in> \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}", "obtain a where a: \"x \\<in> generate G {a}\" \"a \\<in> \\<Union> (f ` A)\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>x \\<in> generate G {a}; a \\<in> \\<Union> (f ` A)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> generate G {a}\n  a \\<in> \\<Union> (f ` A)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "then"], ["proof (chain)\npicking this:\n  x \\<in> generate G {a}\n  a \\<in> \\<Union> (f ` A)", "obtain M where M: \"a \\<in> f M\" \"M \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> generate G {a}\n  a \\<in> \\<Union> (f ` A)\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>a \\<in> f M; M \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> f M\n  M \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "then"], ["proof (chain)\npicking this:\n  a \\<in> f M\n  M \\<in> A", "have \"generate G {a} \\<subseteq> generate G (f M)\""], ["proof (prove)\nusing this:\n  a \\<in> f M\n  M \\<in> A\n\ngoal (1 subgoal):\n 1. generate G {a} \\<subseteq> generate G (f M)", "using generate.incl[OF M(1), of G] mono_generate[of \"{a}\" \"generate G (f M)\"]\n            generate_idem assms"], ["proof (prove)\nusing this:\n  a \\<in> f M\n  M \\<in> A\n  a \\<in> generate G (f M)\n  {a} \\<subseteq> generate G (f M) \\<Longrightarrow>\n  generate G {a} \\<subseteq> generate G (generate G (f M))\n  ?A \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G ?A) = generate G ?A\n  \\<Union> (f ` A) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. generate G {a} \\<subseteq> generate G (f M)", "by auto"], ["proof (state)\nthis:\n  generate G {a} \\<subseteq> generate G (f M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "then"], ["proof (chain)\npicking this:\n  generate G {a} \\<subseteq> generate G (f M)", "have \"x \\<in> generate G (f M)\""], ["proof (prove)\nusing this:\n  generate G {a} \\<subseteq> generate G (f M)\n\ngoal (1 subgoal):\n 1. x \\<in> generate G (f M)", "using a"], ["proof (prove)\nusing this:\n  generate G {a} \\<subseteq> generate G (f M)\n  x \\<in> generate G {a}\n  a \\<in> \\<Union> (f ` A)\n\ngoal (1 subgoal):\n 1. x \\<in> generate G (f M)", "by blast"], ["proof (state)\nthis:\n  x \\<in> generate G (f M)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<Union>\n                {generate G {x} |x.\n                 x \\<in> \\<Union> (f ` A)} \\<Longrightarrow>\n       x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "thus \"x \\<in> (\\<Union>S\\<in>A. generate G (f S))\""], ["proof (prove)\nusing this:\n  x \\<in> generate G (f M)\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "using M"], ["proof (prove)\nusing this:\n  x \\<in> generate G (f M)\n  a \\<in> f M\n  M \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<Union>S\\<in>A. generate G (f S))", "by blast"], ["proof (state)\nthis:\n  x \\<in> (\\<Union>S\\<in>A. generate G (f S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n  \\<subseteq> (\\<Union>S\\<in>A. generate G (f S))\n\ngoal (2 subgoals):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n 2. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "thus \"generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))\""], ["proof (prove)\nusing this:\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n  \\<subseteq> (\\<Union>S\\<in>A. generate G (f S))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "using mono_generate"], ["proof (prove)\nusing this:\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}\n  \\<subseteq> (\\<Union>S\\<in>A. generate G (f S))\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n    \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))", "by simp"], ["proof (state)\nthis:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n  \\<subseteq> generate G (\\<Union>S\\<in>A. generate G (f S))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "have a: \"generate G (\\<Union>S\\<in>A. generate G (f S)) \\<subseteq> generate G (\\<Union> (f ` A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "have \"\\<And>S. S \\<in> A \\<Longrightarrow> generate G (f S) \\<subseteq> generate G (\\<Union> (f ` A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       S \\<in> A \\<Longrightarrow>\n       generate G (f S) \\<subseteq> generate G (\\<Union> (f ` A))", "using mono_generate[of _ \"\\<Union> (f ` A)\"]"], ["proof (prove)\nusing this:\n  ?K \\<subseteq> \\<Union> (f ` A) \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       S \\<in> A \\<Longrightarrow>\n       generate G (f S) \\<subseteq> generate G (\\<Union> (f ` A))", "by blast"], ["proof (state)\nthis:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "then"], ["proof (chain)\npicking this:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) \\<subseteq> generate G (\\<Union> (f ` A))", "have \"(\\<Union>S\\<in>A. generate G (f S)) \\<subseteq> generate G (\\<Union> (f ` A))\""], ["proof (prove)\nusing this:\n  ?S \\<in> A \\<Longrightarrow>\n  generate G (f ?S) \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "by blast"], ["proof (state)\nthis:\n  (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "then"], ["proof (chain)\npicking this:\n  (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))", "have \"generate G (\\<Union>S\\<in>A. generate G (f S)) \\<subseteq> generate G (generate G (\\<Union> (f ` A)))\""], ["proof (prove)\nusing this:\n  (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (generate G (\\<Union> (f ` A)))", "using mono_generate"], ["proof (prove)\nusing this:\n  (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n  ?K \\<subseteq> ?H \\<Longrightarrow>\n  generate G ?K \\<subseteq> generate G ?H\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (generate G (\\<Union> (f ` A)))", "by meson"], ["proof (state)\nthis:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (generate G (\\<Union> (f ` A)))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "thus \"generate G (\\<Union>S\\<in>A. generate G (f S)) \\<subseteq>  generate G (\\<Union> (f ` A))\""], ["proof (prove)\nusing this:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (generate G (\\<Union> (f ` A)))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "using generate_idem assms"], ["proof (prove)\nusing this:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (generate G (\\<Union> (f ` A)))\n  ?A \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G ?A) = generate G ?A\n  \\<Union> (f ` A) \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G (\\<Union> (f ` A))", "by blast"], ["proof (state)\nthis:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "have \"\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} = (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} =\n    (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x})", "by blast"], ["proof (state)\nthis:\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} =\n  (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x})\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "with generate_idem_Un[OF assms]"], ["proof (chain)\npicking this:\n  generate G (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x}) =\n  generate G (\\<Union> (f ` A))\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} =\n  (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x})", "have \"generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) = generate G (\\<Union> (f ` A))\""], ["proof (prove)\nusing this:\n  generate G (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x}) =\n  generate G (\\<Union> (f ` A))\n  \\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)} =\n  (\\<Union>x\\<in>\\<Union> (f ` A). generate G {x})\n\ngoal (1 subgoal):\n 1. generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) =\n    generate G (\\<Union> (f ` A))", "by simp"], ["proof (state)\nthis:\n  generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) =\n  generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "with a"], ["proof (chain)\npicking this:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n  generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) =\n  generate G (\\<Union> (f ` A))", "show \"generate G (\\<Union>S\\<in>A. generate G (f S))\n             \\<subseteq> generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\""], ["proof (prove)\nusing this:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G (\\<Union> (f ` A))\n  generate G (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)}) =\n  generate G (\\<Union> (f ` A))\n\ngoal (1 subgoal):\n 1. generate G (\\<Union>S\\<in>A. generate G (f S))\n    \\<subseteq> generate G\n                 (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})", "by blast"], ["proof (state)\nthis:\n  generate G (\\<Union>S\\<in>A. generate G (f S))\n  \\<subseteq> generate G\n               (\\<Union> {generate G {x} |x. x \\<in> \\<Union> (f ` A)})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following two rules allow for convenient proving of the equality of two generated sets.\\<close>"], ["", "lemma (in group) generate_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\" \"A \\<subseteq> generate G B\" \"B \\<subseteq> generate G A\"\n  shows \"generate G A = generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A = generate G B", "using assms generate_idem"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  B \\<subseteq> carrier G\n  A \\<subseteq> generate G B\n  B \\<subseteq> generate G A\n  ?A \\<subseteq> carrier G \\<Longrightarrow>\n  generate G (generate G ?A) = generate G ?A\n\ngoal (1 subgoal):\n 1. generate G A = generate G B", "by (metis generate_idem' inf_sup_aci(5) sup.absorb2)"], ["", "lemma (in group) generate_one_switched_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"a \\<in> A\" \"B = (A - {a}) \\<union> {b}\"\n  and \"b \\<in> generate G A\" \"a \\<in> generate G B\"\n  shows \"generate G A = generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A = generate G B", "proof(intro generate_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. A \\<subseteq> carrier G\n 2. B \\<subseteq> carrier G\n 3. A \\<subseteq> generate G B\n 4. B \\<subseteq> generate G A", "show \"A \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier G", "by fact"], ["proof (state)\nthis:\n  A \\<subseteq> carrier G\n\ngoal (3 subgoals):\n 1. B \\<subseteq> carrier G\n 2. A \\<subseteq> generate G B\n 3. B \\<subseteq> generate G A", "show \"B \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> carrier G", "using assms generate_incl"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  a \\<in> A\n  B = A - {a} \\<union> {b}\n  b \\<in> generate G A\n  a \\<in> generate G B\n  ?H \\<subseteq> carrier G \\<Longrightarrow>\n  generate G ?H \\<subseteq> carrier G\n\ngoal (1 subgoal):\n 1. B \\<subseteq> carrier G", "by blast"], ["proof (state)\nthis:\n  B \\<subseteq> carrier G\n\ngoal (2 subgoals):\n 1. A \\<subseteq> generate G B\n 2. B \\<subseteq> generate G A", "show \"A \\<subseteq> generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G B", "using assms generate_sincl[of B]"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  a \\<in> A\n  B = A - {a} \\<union> {b}\n  b \\<in> generate G A\n  a \\<in> generate G B\n  B \\<subseteq> generate G B\n\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G B", "by blast"], ["proof (state)\nthis:\n  A \\<subseteq> generate G B\n\ngoal (1 subgoal):\n 1. B \\<subseteq> generate G A", "show \"B \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> generate G A", "using assms generate_sincl[of A]"], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier G\n  a \\<in> A\n  B = A - {a} \\<union> {b}\n  b \\<in> generate G A\n  a \\<in> generate G B\n  A \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. B \\<subseteq> generate G A", "by blast"], ["proof (state)\nthis:\n  B \\<subseteq> generate G A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) generate_subset_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> A\" \"A - B \\<subseteq> generate G B\"\n  shows \"generate G A = generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A = generate G B", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G A \\<subseteq> generate G B\n 2. generate G B \\<subseteq> generate G A", "show \"generate G B \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G B \\<subseteq> generate G A", "by (intro mono_generate, fact)"], ["proof (state)\nthis:\n  generate G B \\<subseteq> generate G A\n\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G B", "show \"generate G A \\<subseteq> generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G B", "proof(subst generate_idem[of \"B\", symmetric])"], ["proof (state)\ngoal (2 subgoals):\n 1. B \\<subseteq> carrier G\n 2. generate G A \\<subseteq> generate G (generate G B)", "show \"generate G A \\<subseteq> generate G (generate G B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (generate G B)", "by (intro mono_generate, use assms generate_sincl[of B] in auto)"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G (generate G B)\n\ngoal (1 subgoal):\n 1. B \\<subseteq> carrier G", "qed (use assms in blast)"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G B\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Some smaller lemmas about \\<open>generate\\<close>.\\<close>"], ["", "lemma (in group) generate_subset_change_eqI:\n  assumes \"A \\<subseteq> carrier G\" \"B \\<subseteq> carrier G\" \"C \\<subseteq> carrier G\" \"generate G A = generate G B\"\n  shows \"generate G (A \\<union> C) = generate G (B \\<union> C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (A \\<union> C) = generate G (B \\<union> C)", "by (metis assms generate_idem')"], ["", "lemma (in group) generate_subgroup_id:\n  assumes \"subgroup H G\"\n  shows \"generate G H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G H = H", "using assms generateI"], ["proof (prove)\nusing this:\n  subgroup H G\n  \\<lbrakk>subgroup ?E G; ?H \\<subseteq> ?E;\n   \\<And>K.\n      \\<lbrakk>subgroup K G; ?H \\<subseteq> K\\<rbrakk>\n      \\<Longrightarrow> ?E \\<subseteq> K\\<rbrakk>\n  \\<Longrightarrow> ?E = generate G ?H\n\ngoal (1 subgoal):\n 1. generate G H = H", "by auto"], ["", "lemma (in group) generate_consistent':\n  assumes \"subgroup H G\" \"A \\<subseteq> H\"\n  shows \"\\<forall>x \\<in> A. generate G {x} = generate (G\\<lparr>carrier := H\\<rparr>) {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A.\n       generate G {x} = generate (G\\<lparr>carrier := H\\<rparr>) {x}", "using generate_consistent assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?K \\<subseteq> ?H; subgroup ?H G\\<rbrakk>\n  \\<Longrightarrow> generate (G\\<lparr>carrier := ?H\\<rparr>) ?K =\n                    generate G ?K\n  subgroup H G\n  A \\<subseteq> H\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A.\n       generate G {x} = generate (G\\<lparr>carrier := H\\<rparr>) {x}", "by auto"], ["", "lemma (in group) generate_singleton_one:\n  assumes \"generate G {a} = {\\<one>}\"\n  shows \"a = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = \\<one>", "using generate.incl[of a \"{a}\" G] assms"], ["proof (prove)\nusing this:\n  a \\<in> {a} \\<Longrightarrow> a \\<in> generate G {a}\n  generate G {a} = {\\<one>}\n\ngoal (1 subgoal):\n 1. a = \\<one>", "by auto"], ["", "lemma (in group) generate_inv_eq:\n  assumes \"a \\<in> carrier G\"\n  shows \"generate G {a} = generate G {inv a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G {a} = generate G {inv a}", "by (intro generate_eqI;\n      use assms generate.inv[of a] generate.inv[of \"inv a\" \"{inv a}\" G] inv_inv[OF assms] in auto)"], ["", "lemma (in group) generate_eq_imp_subset:\n  assumes \"generate G A = generate G B\"\n  shows \"A \\<subseteq> generate G B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G B", "using generate.incl assms"], ["proof (prove)\nusing this:\n  ?h \\<in> ?H \\<Longrightarrow> ?h \\<in> generate ?G ?H\n  generate G A = generate G B\n\ngoal (1 subgoal):\n 1. A \\<subseteq> generate G B", "by fast"], ["", "text \\<open>The neutral element does not play a role when generating a subgroup.\\<close>"], ["", "lemma (in group) generate_one_irrel:\n  \"generate G A = generate G (A \\<union> {\\<one>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A = generate G (A \\<union> {\\<one>})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. generate G A \\<subseteq> generate G (A \\<union> {\\<one>})\n 2. generate G (A \\<union> {\\<one>}) \\<subseteq> generate G A", "show \"generate G A \\<subseteq> generate G (A \\<union> {\\<one>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A \\<subseteq> generate G (A \\<union> {\\<one>})", "by (intro mono_generate, blast)"], ["proof (state)\nthis:\n  generate G A \\<subseteq> generate G (A \\<union> {\\<one>})\n\ngoal (1 subgoal):\n 1. generate G (A \\<union> {\\<one>}) \\<subseteq> generate G A", "show \"generate G (A \\<union> {\\<one>}) \\<subseteq> generate G A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G (A \\<union> {\\<one>}) \\<subseteq> generate G A", "proof(rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> generate G (A \\<union> {\\<one>}) \\<Longrightarrow>\n       x \\<in> generate G A", "show \"x \\<in> generate G A\" if \"x \\<in> generate G (A \\<union> {\\<one>})\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> generate G A", "using that"], ["proof (prove)\nusing this:\n  x \\<in> generate G (A \\<union> {\\<one>})\n\ngoal (1 subgoal):\n 1. x \\<in> generate G A", "by (induction rule: generate.induct;\n          use generate.one generate.incl generate.inv generate.eng in auto)"], ["proof (state)\nthis:\n  ?x \\<in> generate G (A \\<union> {\\<one>}) \\<Longrightarrow>\n  ?x \\<in> generate G A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generate G (A \\<union> {\\<one>}) \\<subseteq> generate G A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in group) generate_one_irrel':\n  \"generate G A = generate G (A - {\\<one>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G A = generate G (A - {\\<one>})", "using generate_one_irrel"], ["proof (prove)\nusing this:\n  generate G ?A = generate G (?A \\<union> {\\<one>})\n\ngoal (1 subgoal):\n 1. generate G A = generate G (A - {\\<one>})", "by (metis Un_Diff_cancel2)"], ["", "text \\<open>Also, we can express the subgroup generated by a singleton with finite order using just its\npowers up to its order.\\<close>"], ["", "lemma (in group) generate_nat_pow:\n  assumes \"ord a \\<noteq> 0\" \"a \\<in> carrier G\"\n  shows \"generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "using assms generate_pow_nat ord_elems_inf_carrier"], ["proof (prove)\nusing this:\n  ord a \\<noteq> 0\n  a \\<in> carrier G\n  \\<lbrakk>?a \\<in> carrier G; ord ?a \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> generate G {?a} = {?a [^] k |k. k \\<in> UNIV}\n  \\<lbrakk>?a \\<in> carrier G; ord ?a \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> {?a [^] x |x. x \\<in> UNIV} =\n                    {?a [^] x |x. x \\<in> {0..ord ?a - 1}}\n\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "by auto"], ["", "lemma (in group) generate_nat_pow':\n  assumes \"ord a \\<noteq> 0\" \"a \\<in> carrier G\"\n  shows \"generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}", "have \"{a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "have \"a [^] k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}\" if \"k \\<in> {1..ord a}\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}", "using that pow_nat_mod_ord[OF assms(2, 1), of \"ord a\"] assms"], ["proof (prove)\nusing this:\n  k \\<in> {1..ord a}\n  a [^] ord a = a [^] (ord a mod ord a)\n  ord a \\<noteq> 0\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}", "by (cases \"k = ord a\"; force)"], ["proof (state)\nthis:\n  ?k \\<in> {1..ord a} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}\n\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "moreover"], ["proof (state)\nthis:\n  ?k \\<in> {1..ord a} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}\n\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "have \"a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\" if \"k \\<in> {0..ord a - 1}\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "proof(cases \"k = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "hence \"a [^] k = a [^] ord a\""], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. a [^] k = a [^] ord a", "using pow_ord_eq_1[OF assms(2)]"], ["proof (prove)\nusing this:\n  k = 0\n  a [^] ord a = \\<one>\n\ngoal (1 subgoal):\n 1. a [^] k = a [^] ord a", "by auto"], ["proof (state)\nthis:\n  a [^] k = a [^] ord a\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "moreover"], ["proof (state)\nthis:\n  a [^] k = a [^] ord a\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "have \"ord a \\<in> {1..ord a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord a \\<in> {1..ord a}", "using assms"], ["proof (prove)\nusing this:\n  ord a \\<noteq> 0\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. ord a \\<in> {1..ord a}", "unfolding atLeastAtMost_def atLeast_def atMost_def"], ["proof (prove)\nusing this:\n  ord a \\<noteq> 0\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. ord a \\<in> {x. 1 \\<le> x} \\<inter> {x. x \\<le> ord a}", "by auto"], ["proof (state)\nthis:\n  ord a \\<in> {1..ord a}\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "ultimately"], ["proof (chain)\npicking this:\n  a [^] k = a [^] ord a\n  ord a \\<in> {1..ord a}", "show ?thesis"], ["proof (prove)\nusing this:\n  a [^] k = a [^] ord a\n  ord a \\<in> {1..ord a}\n\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "by blast"], ["proof (state)\nthis:\n  a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "then"], ["proof (chain)\npicking this:\n  k \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "using that"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  k \\<in> {0..ord a - 1}\n\ngoal (1 subgoal):\n 1. a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "by auto"], ["proof (state)\nthis:\n  a [^] k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?k \\<in> {0..ord a - 1} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "ultimately"], ["proof (chain)\npicking this:\n  ?k \\<in> {1..ord a} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}\n  ?k \\<in> {0..ord a - 1} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {1..ord a}}", "show ?thesis"], ["proof (prove)\nusing this:\n  ?k \\<in> {1..ord a} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {0..ord a - 1}}\n  ?k \\<in> {0..ord a - 1} \\<Longrightarrow>\n  a [^] ?k \\<in> {a [^] k |k. k \\<in> {1..ord a}}\n\ngoal (1 subgoal):\n 1. {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "by blast"], ["proof (state)\nthis:\n  {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}\n\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}", "with generate_nat_pow[OF assms]"], ["proof (chain)\npicking this:\n  generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}\n  {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}", "show ?thesis"], ["proof (prove)\nusing this:\n  generate G {a} = {a [^] k |k. k \\<in> {0..ord a - 1}}\n  {a [^] k |k. k \\<in> {1..ord a}} = {a [^] k |k. k \\<in> {0..ord a - 1}}\n\ngoal (1 subgoal):\n 1. generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}", "by simp"], ["proof (state)\nthis:\n  generate G {a} = {a [^] k |k. k \\<in> {1..ord a}}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}