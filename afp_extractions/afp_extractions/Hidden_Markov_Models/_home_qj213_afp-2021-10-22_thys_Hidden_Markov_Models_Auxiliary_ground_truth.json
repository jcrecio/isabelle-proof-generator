{"file_name": "/home/qj213/afp-2021-10-22/thys/Hidden_Markov_Models/Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hidden_Markov_Models", "problem_names": ["lemma Max_image_commute:\n  \"(MAX x \\<in> S. MAX y \\<in> S. f x y) = (MAX y \\<in> S. MAX x \\<in> S. f x y)\"", "lemma Max_image_left_mult:\n  \"(MAX x \\<in> S. c * f x) = (c :: ennreal) * (MAX x \\<in> S. f x)\" if \"S \\<noteq> {}\"", "lemma Max_to_image:\n  \"Max {f t | t. t \\<in> S} = Max (f ` S)\"", "lemma Max_to_image2:\n  \"Max {f t | t. P t} = Max (f ` {t. P t})\"", "lemma Max_image_cong:\n  \"Max (f ` S) = Max (g ` T)\" if \"S = T\" \"\\<And>x. x \\<in> T \\<Longrightarrow> f x = g x\"", "lemma Max_image_cong_simp:\n  \"Max (f ` S) = Max (g ` T)\" if \"S = T\" \"\\<And>x. x \\<in> T =simp=> f x = g x\"", "lemma Max_eq_image_if:\n  assumes\n    \"finite S\" \"finite T\" \"\\<forall>x \\<in> S. \\<exists>y \\<in> T. f x \\<le> g y\" \"\\<forall>x \\<in> T. \\<exists>y \\<in> S. g x \\<le> f y\"\n  shows \"Max (f ` S) = Max (g ` T)\"", "theorem Max_in_image:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  obtains x where \"x \\<in> A\" and \"Max (f ` A) = f x\"", "lemma Max_ge_image:\n  \"Max (f ` S) \\<ge> f x\" if \"finite S\" \"x \\<in> S\"", "lemma Max_image_pair:\n  assumes \"finite S\" \"finite T\" \"T \\<noteq> {}\"\n  shows \"(MAX s \\<in> S. MAX t \\<in> T. f s t) = (MAX (s, t) \\<in> S \\<times> T. f s t)\"", "lemma list_cases:\n  assumes \"xs = [] \\<Longrightarrow> P []\"\n      and \"\\<And> x. xs = [x] \\<Longrightarrow> P [x]\"\n      and \"\\<And> x y ys. xs = (x # y # ys) \\<Longrightarrow> P (x # y # ys)\"\n    shows \"P xs\"", "lemma argmax:\n  assumes \"xs \\<noteq> []\"\n  shows\n    \"fst (argmax f xs) \\<in> set xs\" (is \"?A\")\n    \"f (fst (argmax f xs)) = snd (argmax f xs)\" (is \"?B\")\n    \"snd (argmax f xs) = (MAX x \\<in> set xs. f x)\" (is \"?C\")"], "translations": [["", "lemma Max_image_commute:\n  \"(MAX x \\<in> S. MAX y \\<in> S. f x y) = (MAX y \\<in> S. MAX x \\<in> S. f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX x\\<in>S. Max (f x ` S)) = (MAX y\\<in>S. MAX x\\<in>S. f x y)", "proof (rule Max_eq_if, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "{"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "fix a"], ["proof (state)\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "assume \"a \\<in> S\""], ["proof (state)\nthis:\n  a \\<in> S\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "with Max_in[OF finite_imageI[OF \\<open>finite S\\<close>], of \"f a\"]"], ["proof (chain)\npicking this:\n  f a ` S \\<noteq> {} \\<Longrightarrow> Max (f a ` S) \\<in> f a ` S\n  a \\<in> S", "have \"Max (f a ` S) \\<in> f a ` S\""], ["proof (prove)\nusing this:\n  f a ` S \\<noteq> {} \\<Longrightarrow> Max (f a ` S) \\<in> f a ` S\n  a \\<in> S\n\ngoal (1 subgoal):\n 1. Max (f a ` S) \\<in> f a ` S", "by auto"], ["proof (state)\nthis:\n  Max (f a ` S) \\<in> f a ` S\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "then"], ["proof (chain)\npicking this:\n  Max (f a ` S) \\<in> f a ` S", "obtain b where \"f a b = Max (f a ` S)\" \"b \\<in> S\""], ["proof (prove)\nusing this:\n  Max (f a ` S) \\<in> f a ` S\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>f a b = Max (f a ` S); b \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f a b = Max (f a ` S)\n  b \\<in> S\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "from \\<open>a \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  a \\<in> S", "have \"f a b \\<le> (MAX a \\<in> S. f a b)\""], ["proof (prove)\nusing this:\n  a \\<in> S\n\ngoal (1 subgoal):\n 1. f a b \\<le> (MAX a\\<in>S. f a b)", "by (auto intro: Max_ge finite_imageI[OF \\<open>finite S\\<close>])"], ["proof (state)\nthis:\n  f a b \\<le> (MAX a\\<in>S. f a b)\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "with \\<open>f a b = _\\<close> \\<open>b \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  f a b = Max (f a ` S)\n  b \\<in> S\n  f a b \\<le> (MAX a\\<in>S. f a b)", "have \"\\<exists>b\\<in>S. Max (f a ` S) \\<le> (MAX a \\<in> S. f a b)\""], ["proof (prove)\nusing this:\n  f a b = Max (f a ` S)\n  b \\<in> S\n  f a b \\<le> (MAX a\\<in>S. f a b)\n\ngoal (1 subgoal):\n 1. \\<exists>b\\<in>S. Max (f a ` S) \\<le> (MAX a\\<in>S. f a b)", "by auto"], ["proof (state)\nthis:\n  \\<exists>b\\<in>S. Max (f a ` S) \\<le> (MAX a\\<in>S. f a b)\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "}"], ["proof (state)\nthis:\n  ?a2 \\<in> S \\<Longrightarrow>\n  \\<exists>b\\<in>S. Max (f ?a2 ` S) \\<le> (MAX a\\<in>S. f a b)\n\ngoal (4 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n 4. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "then"], ["proof (chain)\npicking this:\n  ?a2 \\<in> S \\<Longrightarrow>\n  \\<exists>b\\<in>S. Max (f ?a2 ` S) \\<le> (MAX a\\<in>S. f a b)", "show ?case"], ["proof (prove)\nusing this:\n  ?a2 \\<in> S \\<Longrightarrow>\n  \\<exists>b\\<in>S. Max (f ?a2 ` S) \\<le> (MAX a\\<in>S. f a b)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n       \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S.\n     \\<exists>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S. a \\<le> b\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "{"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "fix b"], ["proof (state)\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "assume \"b \\<in> S\""], ["proof (state)\nthis:\n  b \\<in> S\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "with Max_in[OF finite_imageI[OF \\<open>finite S\\<close>], of \"\\<lambda> a. f a b\"]"], ["proof (chain)\npicking this:\n  (\\<lambda>a. f a b) ` S \\<noteq> {} \\<Longrightarrow>\n  (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S\n  b \\<in> S", "have\n      \"(MAX a \\<in> S. f a b) \\<in> (\\<lambda>a. f a b) ` S\""], ["proof (prove)\nusing this:\n  (\\<lambda>a. f a b) ` S \\<noteq> {} \\<Longrightarrow>\n  (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S\n  b \\<in> S\n\ngoal (1 subgoal):\n 1. (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S", "by auto"], ["proof (state)\nthis:\n  (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "then"], ["proof (chain)\npicking this:\n  (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S", "obtain a where \"f a b = (MAX a \\<in> S. f a b)\" \"a \\<in> S\""], ["proof (prove)\nusing this:\n  (MAX a\\<in>S. f a b) \\<in> (\\<lambda>a. f a b) ` S\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>f a b = (MAX a\\<in>S. f a b); a \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f a b = (MAX a\\<in>S. f a b)\n  a \\<in> S\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "from \\<open>b \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  b \\<in> S", "have \"f a b \\<le> Max (f a ` S)\""], ["proof (prove)\nusing this:\n  b \\<in> S\n\ngoal (1 subgoal):\n 1. f a b \\<le> Max (f a ` S)", "by (auto intro: Max_ge finite_imageI[OF \\<open>finite S\\<close>])"], ["proof (state)\nthis:\n  f a b \\<le> Max (f a ` S)\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "with \\<open>f a b = _\\<close> \\<open>a \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  f a b = (MAX a\\<in>S. f a b)\n  a \\<in> S\n  f a b \\<le> Max (f a ` S)", "have \"\\<exists>a\\<in>S. (MAX a \\<in> S. f a b) \\<le> Max (f a ` S)\""], ["proof (prove)\nusing this:\n  f a b = (MAX a\\<in>S. f a b)\n  a \\<in> S\n  f a b \\<le> Max (f a ` S)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>S. (MAX a\\<in>S. f a b) \\<le> Max (f a ` S)", "by auto"], ["proof (state)\nthis:\n  \\<exists>a\\<in>S. (MAX a\\<in>S. f a b) \\<le> Max (f a ` S)\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "}"], ["proof (state)\nthis:\n  ?b2 \\<in> S \\<Longrightarrow>\n  \\<exists>a\\<in>S. (MAX a\\<in>S. f a ?b2) \\<le> Max (f a ` S)\n\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)\n 3. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "then"], ["proof (chain)\npicking this:\n  ?b2 \\<in> S \\<Longrightarrow>\n  \\<exists>a\\<in>S. (MAX a\\<in>S. f a ?b2) \\<le> Max (f a ` S)", "show ?case"], ["proof (prove)\nusing this:\n  ?b2 \\<in> S \\<Longrightarrow>\n  \\<exists>a\\<in>S. (MAX a\\<in>S. f a ?b2) \\<le> Max (f a ` S)\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n       \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a", "by auto"], ["proof (state)\nthis:\n  \\<forall>b\\<in>(\\<lambda>y. MAX x\\<in>S. f x y) ` S.\n     \\<exists>a\\<in>(\\<lambda>x. Max (f x ` S)) ` S. b \\<le> a\n\ngoal (2 subgoals):\n 1. finite ((\\<lambda>x. Max (f x ` S)) ` S)\n 2. finite ((\\<lambda>y. MAX x\\<in>S. f x y) ` S)", "qed (use \\<open>finite S\\<close> in auto)"], ["", "lemma Max_image_left_mult:\n  \"(MAX x \\<in> S. c * f x) = (c :: ennreal) * (MAX x \\<in> S. f x)\" if \"S \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX x\\<in>S. c * f x) = c * Max (f ` S)", "apply (rule Max_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite ((\\<lambda>x. c * f x) ` S)\n 2. \\<And>y.\n       y \\<in> (\\<lambda>x. c * f x) ` S \\<Longrightarrow>\n       y \\<le> c * Max (f ` S)\n 3. c * Max (f ` S) \\<in> (\\<lambda>x. c * f x) ` S", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. c * f x) ` S)", "using \\<open>finite S\\<close>"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. c * f x) ` S)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       y \\<in> (\\<lambda>x. c * f x) ` S \\<Longrightarrow>\n       y \\<le> c * Max (f ` S)\n 2. c * Max (f ` S) \\<in> (\\<lambda>x. c * f x) ` S", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> (\\<lambda>x. c * f x) ` S \\<Longrightarrow>\n    y \\<le> c * Max (f ` S)", "using \\<open>finite S\\<close>"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. y \\<in> (\\<lambda>x. c * f x) ` S \\<Longrightarrow>\n    y \\<le> c * Max (f ` S)", "by (auto intro: mult_left_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c * Max (f ` S) \\<in> (\\<lambda>x. c * f x) ` S", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c * Max (f ` S) \\<in> (\\<lambda>x. c * f x) ` S", "using Max_in[OF finite_imageI[OF \\<open>finite S\\<close>], of f] \\<open>S \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  f ` S \\<noteq> {} \\<Longrightarrow> Max (f ` S) \\<in> f ` S\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. c * Max (f ` S) \\<in> (\\<lambda>x. c * f x) ` S", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "(* Finite set *)"], ["", "lemma Max_to_image:\n  \"Max {f t | t. t \\<in> S} = Max (f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {f t |t. t \\<in> S} = Max (f ` S)", "by (rule arg_cong[where f = Max]) auto"], ["", "lemma Max_to_image2:\n  \"Max {f t | t. P t} = Max (f ` {t. P t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {f t |t. P t} = Max (f ` {t. P t})", "by (rule arg_cong[where f = Max]) auto"], ["", "lemma Max_image_cong:\n  \"Max (f ` S) = Max (g ` T)\" if \"S = T\" \"\\<And>x. x \\<in> T \\<Longrightarrow> f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f ` S) = Max (g ` T)", "by (intro arg_cong[where f = Max] image_cong[OF that])"], ["", "lemma Max_image_cong_simp:\n  \"Max (f ` S) = Max (g ` T)\" if \"S = T\" \"\\<And>x. x \\<in> T =simp=> f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f ` S) = Max (g ` T)", "using Max_image_cong[OF that[unfolded simp_implies_def]]"], ["proof (prove)\nusing this:\n  (\\<And>x. x \\<in> T \\<Longrightarrow> ?x1 x \\<in> T) \\<Longrightarrow>\n  (MAX x\\<in>S. f (?x1 x)) = (MAX x\\<in>T. g (?x1 x))\n\ngoal (1 subgoal):\n 1. Max (f ` S) = Max (g ` T)", "."], ["", "lemma Max_eq_image_if:\n  assumes\n    \"finite S\" \"finite T\" \"\\<forall>x \\<in> S. \\<exists>y \\<in> T. f x \\<le> g y\" \"\\<forall>x \\<in> T. \\<exists>y \\<in> S. g x \\<le> f y\"\n  shows \"Max (f ` S) = Max (g ` T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (f ` S) = Max (g ` T)", "using assms"], ["proof (prove)\nusing this:\n  finite S\n  finite T\n  \\<forall>x\\<in>S. \\<exists>y\\<in>T. f x \\<le> g y\n  \\<forall>x\\<in>T. \\<exists>y\\<in>S. g x \\<le> f y\n\ngoal (1 subgoal):\n 1. Max (f ` S) = Max (g ` T)", "by (auto intro: Max_eq_if)"], ["", "theorem Max_in_image:\n  assumes \"finite A\" and \"A \\<noteq> {}\"\n  obtains x where \"x \\<in> A\" and \"Max (f ` A) = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; Max (f ` A) = f x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; Max (f ` A) = f x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from Max_in[of \"f ` A\"] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite (f ` A); f ` A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max (f ` A) \\<in> f ` A\n  finite A\n  A \\<noteq> {}", "have \"Max (f ` A) \\<in> f ` A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (f ` A); f ` A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max (f ` A) \\<in> f ` A\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (f ` A) \\<in> f ` A", "by auto"], ["proof (state)\nthis:\n  Max (f ` A) \\<in> f ` A\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> A; Max (f ` A) = f x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  Max (f ` A) \\<in> f ` A", "show ?thesis"], ["proof (prove)\nusing this:\n  Max (f ` A) \\<in> f ` A\n\ngoal (1 subgoal):\n 1. thesis", "by (auto intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Max_ge_image:\n  \"Max (f ` S) \\<ge> f x\" if \"finite S\" \"x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<le> Max (f ` S)", "using that"], ["proof (prove)\nusing this:\n  finite S\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. f x \\<le> Max (f ` S)", "by (auto intro: Max_ge)"], ["", "lemma Max_image_pair:\n  assumes \"finite S\" \"finite T\" \"T \\<noteq> {}\"\n  shows \"(MAX s \\<in> S. MAX t \\<in> T. f s t) = (MAX (s, t) \\<in> S \\<times> T. f s t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX s\\<in>S. Max (f s ` T)) = (MAX (s, t)\\<in>S \\<times> T. f s t)", "proof ((rule Max_eq_image_if; clarsimp?), goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       \\<exists>xa\\<in>S. \\<exists>y\\<in>T. Max (f x ` T) \\<le> f xa y\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "case (3 x)"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (4 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       \\<exists>xa\\<in>S. \\<exists>y\\<in>T. Max (f x ` T) \\<le> f xa y\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "from \\<open>finite T\\<close> \\<open>T \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  finite T\n  T \\<noteq> {}", "obtain y where \"y \\<in> T\" and \"Max (f x ` T) = f x y\""], ["proof (prove)\nusing this:\n  finite T\n  T \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> T; Max (f x ` T) = f x y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Max_in_image)"], ["proof (state)\nthis:\n  y \\<in> T\n  Max (f x ` T) = f x y\n\ngoal (4 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       \\<exists>xa\\<in>S. \\<exists>y\\<in>T. Max (f x ` T) \\<le> f xa y\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "with \\<open>x \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> S\n  y \\<in> T\n  Max (f x ` T) = f x y", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> S\n  y \\<in> T\n  Max (f x ` T) = f x y\n\ngoal (1 subgoal):\n 1. \\<exists>xa\\<in>S. \\<exists>y\\<in>T. Max (f x ` T) \\<le> f xa y", "by auto"], ["proof (state)\nthis:\n  \\<exists>xa\\<in>S. \\<exists>y\\<in>T. Max (f x ` T) \\<le> f xa y\n\ngoal (3 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "case (4 a b)"], ["proof (state)\nthis:\n  a \\<in> S\n  b \\<in> T\n\ngoal (3 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)\n 3. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya\\<in>S. f x y \\<le> Max (f ya ` T)", "with \\<open>finite T\\<close>"], ["proof (chain)\npicking this:\n  finite T\n  a \\<in> S\n  b \\<in> T", "show ?case"], ["proof (prove)\nusing this:\n  finite T\n  a \\<in> S\n  b \\<in> T\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>S. f a b \\<le> Max (f y ` T)", "by force"], ["proof (state)\nthis:\n  \\<exists>y\\<in>S. f a b \\<le> Max (f y ` T)\n\ngoal (2 subgoals):\n 1. finite S\n 2. finite (S \\<times> T)", "qed (use assms in auto)"], ["", "fun argmax where\n  \"argmax f (x # xs) =\n    List.fold (\\<lambda> a (b, v). let w = f a in if w > v then (a, w) else (b, v)) xs (x, f x)\""], ["", "lemma list_cases:\n  assumes \"xs = [] \\<Longrightarrow> P []\"\n      and \"\\<And> x. xs = [x] \\<Longrightarrow> P [x]\"\n      and \"\\<And> x y ys. xs = (x # y # ys) \\<Longrightarrow> P (x # y # ys)\"\n    shows \"P xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P xs", "apply (cases xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> P xs\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> P xs", "apply (simp add: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list. xs = a # list \\<Longrightarrow> P xs", "subgoal for y ys"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = y # ys \\<Longrightarrow> P xs", "by (cases ys; simp add: assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma argmax:\n  assumes \"xs \\<noteq> []\"\n  shows\n    \"fst (argmax f xs) \\<in> set xs\" (is \"?A\")\n    \"f (fst (argmax f xs)) = snd (argmax f xs)\" (is \"?B\")\n    \"snd (argmax f xs) = (MAX x \\<in> set xs. f x)\" (is \"?C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (argmax f xs) \\<in> set xs &&&\n    f (fst (argmax f xs)) = snd (argmax f xs) &&&\n    snd (argmax f xs) = Max (f ` set xs)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. fst (argmax f xs) \\<in> set xs\n 2. f (fst (argmax f xs)) = snd (argmax f xs)\n 3. snd (argmax f xs) = Max (f ` set xs)", "let ?f = \"\\<lambda> a (b, v). let w = f a in if w > v then (a, w) else (b, v)\""], ["proof (state)\ngoal (3 subgoals):\n 1. fst (argmax f xs) \\<in> set xs\n 2. f (fst (argmax f xs)) = snd (argmax f xs)\n 3. snd (argmax f xs) = Max (f ` set xs)", "have \"fst (List.fold ?f xs (x, f x)) \\<in> {x} \\<union> set xs\" if \"xs \\<noteq> []\" for x xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x))\n    \\<in> {x} \\<union> set xs", "using that"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. fst (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x))\n    \\<in> {x} \\<union> set xs", "by (induction xs arbitrary: x rule: list_nonempty_induct)(auto simp: Let_def max_def)"], ["proof (state)\nthis:\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  fst (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))\n  \\<in> {?x} \\<union> set ?xs\n\ngoal (3 subgoals):\n 1. fst (argmax f xs) \\<in> set xs\n 2. f (fst (argmax f xs)) = snd (argmax f xs)\n 3. snd (argmax f xs) = Max (f ` set xs)", "with \\<open>xs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  fst (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))\n  \\<in> {?x} \\<union> set ?xs", "show ?A"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  fst (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))\n  \\<in> {?x} \\<union> set ?xs\n\ngoal (1 subgoal):\n 1. fst (argmax f xs) \\<in> set xs", "by (cases xs rule: list_cases; fastforce)"], ["proof (state)\nthis:\n  fst (argmax f xs) \\<in> set xs\n\ngoal (2 subgoals):\n 1. f (fst (argmax f xs)) = snd (argmax f xs)\n 2. snd (argmax f xs) = Max (f ` set xs)", "have \"f (fst (List.fold ?f xs (x, f x))) = snd (List.fold ?f xs (x, f x))\" if \"xs \\<noteq> []\" for x xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (fst (fold\n             (\\<lambda>a (b, v).\n                 let w = f a in if v < w then (a, w) else (b, v))\n             xs (x, f x))) =\n    snd (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x))", "using that"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. f (fst (fold\n             (\\<lambda>a (b, v).\n                 let w = f a in if v < w then (a, w) else (b, v))\n             xs (x, f x))) =\n    snd (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x))", "by (induction xs arbitrary: x rule: list_nonempty_induct)(auto simp: Let_def max_def)"], ["proof (state)\nthis:\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  f (fst (fold\n           (\\<lambda>a (b, v).\n               let w = f a in if v < w then (a, w) else (b, v))\n           ?xs (?x, f ?x))) =\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))\n\ngoal (2 subgoals):\n 1. f (fst (argmax f xs)) = snd (argmax f xs)\n 2. snd (argmax f xs) = Max (f ` set xs)", "with \\<open>xs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  f (fst (fold\n           (\\<lambda>a (b, v).\n               let w = f a in if v < w then (a, w) else (b, v))\n           ?xs (?x, f ?x))) =\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))", "show ?B"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  f (fst (fold\n           (\\<lambda>a (b, v).\n               let w = f a in if v < w then (a, w) else (b, v))\n           ?xs (?x, f ?x))) =\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x))\n\ngoal (1 subgoal):\n 1. f (fst (argmax f xs)) = snd (argmax f xs)", "by (cases xs rule: list_cases; fastforce)"], ["proof (state)\nthis:\n  f (fst (argmax f xs)) = snd (argmax f xs)\n\ngoal (1 subgoal):\n 1. snd (argmax f xs) = Max (f ` set xs)", "have \"snd (List.fold ?f xs (x, f x)) = (MAX x \\<in> {x} \\<union> set xs. f x)\"if \"xs \\<noteq> []\" for x xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x)) =\n    Max (f ` ({x} \\<union> set xs))", "using that"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. snd (fold\n          (\\<lambda>a (b, v).\n              let w = f a in if v < w then (a, w) else (b, v))\n          xs (x, f x)) =\n    Max (f ` ({x} \\<union> set xs))", "by (induction xs arbitrary: x rule: list_nonempty_induct)(auto simp: Let_def max_def)"], ["proof (state)\nthis:\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x)) =\n  Max (f ` ({?x} \\<union> set ?xs))\n\ngoal (1 subgoal):\n 1. snd (argmax f xs) = Max (f ` set xs)", "with \\<open>xs \\<noteq> []\\<close>"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x)) =\n  Max (f ` ({?x} \\<union> set ?xs))", "show ?C"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  ?xs \\<noteq> [] \\<Longrightarrow>\n  snd (fold\n        (\\<lambda>a (b, v). let w = f a in if v < w then (a, w) else (b, v))\n        ?xs (?x, f ?x)) =\n  Max (f ` ({?x} \\<union> set ?xs))\n\ngoal (1 subgoal):\n 1. snd (argmax f xs) = Max (f ` set xs)", "by (cases xs rule: list_cases; fastforce)"], ["proof (state)\nthis:\n  snd (argmax f xs) = Max (f ` set xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* Theory *)"]]}